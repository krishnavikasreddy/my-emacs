;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags nil
      :file "os.py"
      :pointmax 25911
      :fsize 25910
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax '(($EOI 25911 . 25911)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Record of phased-in incompatible language changes.

Each line is of the form:

    FeatureName = \"_Feature(\" OptionalRelease \",\" MandatoryRelease \",\"
                              CompilerFlag \")\"

where, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples
of the same form as sys.version_info:

    (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
     PY_MINOR_VERSION, # the 1; an int
     PY_MICRO_VERSION, # the 0; an int
     PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; string
     PY_RELEASE_SERIAL # the 3; an int
    )

OptionalRelease records the first release in which

    from __future__ import FeatureName

was accepted.

In the case of MandatoryReleases that have not yet occurred,
MandatoryRelease predicts the release in which the feature will become part
of the language.

Else MandatoryRelease records when the feature became part of the language;
in releases at or after that, modules no longer need

    from __future__ import FeatureName

to use the feature in question, but may continue to use such imports.

MandatoryRelease may also be None, meaning that a planned feature got
dropped.

Instances of class _Feature have two corresponding methods,
.getOptionalRelease() and .getMandatoryRelease().

CompilerFlag is the (bitfield) flag that should be passed in the fourth
argument to the builtin function compile() to enable the feature in
dynamically compiled code.  This flag is stored in the .compiler_flag
attribute on _Future instances.  These values must match the appropriate
#defines of CO_xxx flags in Include/compile.h.

No feature line is ever to be deleted from this file.
\"\"\"" code nil nil [1 1645])
            ("all_feature_names" variable nil nil [1647 1816])
            ("__all__" code nil nil [1818 1869])
            ("CO_NESTED" variable nil nil [2093 2122])
            ("CO_GENERATOR_ALLOWED" variable nil nil [2141 2165])
            ("CO_FUTURE_DIVISION" variable nil nil [2209 2238])
            ("CO_FUTURE_ABSOLUTE_IMPORT" variable nil nil [2252 2286])
            ("CO_FUTURE_WITH_STATEMENT" variable nil nil [2325 2359])
            ("CO_FUTURE_PRINT_FUNCTION" variable nil nil [2379 2414])
            ("CO_FUTURE_UNICODE_LITERALS" variable nil nil [2434 2470])
            ("_Feature" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2596 2627])
                            ("self" variable nil (reparse-symbol indented_block_body) [2636 2669])
                            ("self" variable nil (reparse-symbol indented_block_body) [2678 2712]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2531 2535])
                            ("optionalRelease" variable nil (reparse-symbol function_parameters) [2537 2552])
                            ("mandatoryRelease" variable nil (reparse-symbol function_parameters) [2554 2570])
                            ("compiler_flag" variable nil (reparse-symbol function_parameters) [2572 2585]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2518 2713])
                    ("getOptionalRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2741 2745]))                          
                        :documentation "Return first release in which this feature was recognized.

        This is a 5-tuple, of the same form as sys.version_info.
        ")
                        (reparse-symbol indented_block_body) [2718 2926])
                    ("getMandatoryRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2955 2959]))                          
                        :documentation "Return release in which this feature will become mandatory.

        This is a 5-tuple, of the same form as sys.version_info, or, if
        the feature was dropped, is None.
        ")
                        (reparse-symbol indented_block_body) [2931 3191])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3209 3213]))                          )
                        (reparse-symbol indented_block_body) [3196 3370]))                  
                :type "class")
                nil [2498 3370])
            ("nested_scopes" variable nil nil [3371 3502])
            ("generators" variable nil nil [3504 3637])
            ("division" variable nil nil [3639 3764])
            ("absolute_import" variable nil nil [3766 3919])
            ("with_statement" variable nil nil [3921 4070])
            ("print_function" variable nil nil [4072 4221])
            ("unicode_literals" variable nil nil [4223 4380]))          
      :file "__future__.py"
      :pointmax 4381
      :fsize 4380
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Read from and write to tar format archives.
\"\"\"" code nil nil [1397 1447])
            ("__version__" variable nil nil [1449 1483])
            ("version" variable nil nil [1496 1517])
            ("__author__" variable nil nil [1518 1567])
            ("__date__" variable nil nil [1568 1590])
            ("__cvsid__" variable nil nil [1591 1611])
            ("__credits__" variable nil nil [1612 1679])
            ("__builtin__" include nil nil [1713 1754])
            ("sys" include nil nil [1755 1765])
            ("os" include nil nil [1766 1775])
            ("shutil" include nil nil [1776 1789])
            ("stat" include nil nil [1790 1801])
            ("errno" include nil nil [1802 1814])
            ("time" include nil nil [1815 1826])
            ("struct" include nil nil [1827 1840])
            ("copy" include nil nil [1841 1852])
            ("re" include nil nil [1853 1862])
            ("operator" include nil nil [1863 1878])
            ("try" code nil nil [1880 1946])
            ("__all__" variable nil nil [1971 2029])
            ("NUL" variable nil nil [2165 2175])
            ("BLOCKSIZE" variable nil nil [2218 2233])
            ("RECORDSIZE" code nil nil [2280 2307])
            ("GNU_MAGIC" variable nil nil [2332 2355])
            ("POSIX_MAGIC" variable nil nil [2387 2414])
            ("LENGTH_NAME" variable nil nil [2445 2462])
            ("LENGTH_LINK" variable nil nil [2508 2525])
            ("LENGTH_PREFIX" variable nil nil [2571 2590])
            ("REGTYPE" variable nil nil [2641 2654])
            ("AREGTYPE" variable nil nil [2688 2703])
            ("LNKTYPE" variable nil nil [2735 2748])
            ("SYMTYPE" variable nil nil [2791 2804])
            ("CHRTYPE" variable nil nil [2839 2852])
            ("BLKTYPE" variable nil nil [2898 2911])
            ("DIRTYPE" variable nil nil [2953 2966])
            ("FIFOTYPE" variable nil nil [2997 3011])
            ("CONTTYPE" variable nil nil [3051 3065])
            ("GNUTYPE_LONGNAME" variable nil nil [3102 3124])
            ("GNUTYPE_LONGLINK" variable nil nil [3153 3175])
            ("GNUTYPE_SPARSE" variable nil nil [3204 3224])
            ("XHDTYPE" variable nil nil [3259 3272])
            ("XGLTYPE" variable nil nil [3322 3335])
            ("SOLARIS_XHDTYPE" variable nil nil [3383 3404])
            ("USTAR_FORMAT" variable nil nil [3442 3458])
            ("GNU_FORMAT" variable nil nil [3504 3518])
            ("PAX_FORMAT" variable nil nil [3553 3567])
            ("DEFAULT_FORMAT" variable nil nil [3613 3640])
            ("SUPPORTED_TYPES" variable nil nil [3816 4046])
            ("REGULAR_TYPES" variable nil nil [4101 4179])
            ("GNU_TYPES" variable nil nil [4231 4308])
            ("PAX_FIELDS" variable nil nil [4372 4468])
            ("PAX_NUMBER_FIELDS" variable nil nil [4556 4687])
            ("S_IFLNK" variable nil nil [4855 4872])
            ("S_IFREG" variable nil nil [4896 4913])
            ("S_IFBLK" variable nil nil [4936 4953])
            ("S_IFDIR" variable nil nil [4976 4993])
            ("S_IFCHR" variable nil nil [5013 5030])
            ("S_IFIFO" variable nil nil [5057 5074])
            ("TSUID" variable nil nil [5090 5105])
            ("TSGID" variable nil nil [5138 5153])
            ("TSVTX" variable nil nil [5186 5201])
            ("TUREAD" variable nil nil [5223 5237])
            ("TUWRITE" variable nil nil [5264 5278])
            ("TUEXEC" variable nil nil [5306 5320])
            ("TGREAD" variable nil nil [5357 5371])
            ("TGWRITE" variable nil nil [5398 5412])
            ("TGEXEC" variable nil nil [5440 5454])
            ("TOREAD" variable nil nil [5491 5505])
            ("TOWRITE" variable nil nil [5532 5546])
            ("TOEXEC" variable nil nil [5574 5588])
            ("ENCODING" variable nil nil [5761 5799])
            ("if" code nil nil [5800 5861])
            ("stn" function
               (:documentation "Convert a python string to a null-terminated string buffer.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [6013 6014])
                    ("length" variable nil (reparse-symbol function_parameters) [6016 6022]))                  )
                nil [6005 6148])
            ("nts" function
               (:documentation "Convert a null-terminated string field to a python string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [6157 6158]))                  )
                nil [6149 6354])
            ("nti" function
               (:documentation "Convert a number field to a python number.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [6363 6364]))                  )
                nil [6355 6800])
            ("itn" function
               (:documentation "Convert a python number to a number field.
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [6809 6810])
                    ("digits" variable nil (reparse-symbol function_parameters) [6812 6818])
                    ("format" variable nil (reparse-symbol function_parameters) [6822 6828]))                  )
                nil [6801 7859])
            ("uts" function
               (:documentation "Convert a unicode object to a string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7868 7869])
                    ("encoding" variable nil (reparse-symbol function_parameters) [7871 7879])
                    ("errors" variable nil (reparse-symbol function_parameters) [7881 7887]))                  )
                nil [7860 8536])
            ("calc_chksums" function
               (:documentation "Calculate the checksum for a member's header by summing up all
       characters except for the chksum field which is treated as if
       it was filled with spaces. According to the GNU tar sources,
       some tars (Sun and NeXT) calculate chksum with signed char,
       which will be different if there are chars in the buffer with
       the high bit set. So we calculate two checksums, unsigned and
       signed.
    "
                :arguments 
                  ( ("buf" variable nil (reparse-symbol function_parameters) [8554 8557]))                  )
                nil [8537 9243])
            ("copyfileobj" function
               (:documentation "Copy length bytes from fileobj src to fileobj dst.
       If length is None, copy the entire content.
    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [9260 9263])
                    ("dst" variable nil (reparse-symbol function_parameters) [9265 9268])
                    ("length" variable nil (reparse-symbol function_parameters) [9270 9276]))                  )
                nil [9244 9922])
            ("filemode_table" variable nil nil [9923 10507])
            ("filemode" function
               (:documentation "Convert a file's mode to a string of the form
       -rwxrwxrwx.
       Used by TarFile.list()
    "
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [10522 10526]))                  )
                nil [10509 10876])
            ("TarError" type
               (:documentation "Base exception."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [10934 10938]))                  
                :type "class")
                nil [10877 10939])
            ("ExtractError" type
               (:documentation "General exception for extract errors."
                :superclasses ("TarError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [11021 11025]))                  
                :type "class")
                nil [10939 11026])
            ("ReadError" type
               (:documentation "Exception for unreadable tar archives."
                :superclasses ("TarError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [11106 11110]))                  
                :type "class")
                nil [11026 11111])
            ("CompressionError" type
               (:documentation "Exception for unavailable compression methods."
                :superclasses ("TarError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [11206 11210]))                  
                :type "class")
                nil [11111 11211])
            ("StreamError" type
               (:documentation "Exception for unsupported operations on stream-like TarFiles."
                :superclasses ("TarError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [11316 11320]))                  
                :type "class")
                nil [11211 11321])
            ("HeaderError" type
               (:documentation "Base exception for header errors."
                :superclasses ("TarError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [11398 11402]))                  
                :type "class")
                nil [11321 11403])
            ("EmptyHeaderError" type
               (:documentation "Exception for empty headers."
                :superclasses ("HeaderError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [11483 11487]))                  
                :type "class")
                nil [11403 11488])
            ("TruncatedHeaderError" type
               (:documentation "Exception for truncated headers."
                :superclasses ("HeaderError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [11576 11580]))                  
                :type "class")
                nil [11488 11581])
            ("EOFHeaderError" type
               (:documentation "Exception for end of file headers."
                :superclasses ("HeaderError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [11665 11669]))                  
                :type "class")
                nil [11581 11670])
            ("InvalidHeaderError" type
               (:documentation "Exception for invalid headers."
                :superclasses ("HeaderError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [11754 11758]))                  
                :type "class")
                nil [11670 11759])
            ("SubsequentHeaderError" type
               (:documentation "Exception for missing and invalid extended headers."
                :superclasses ("HeaderError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [11867 11871]))                  
                :type "class")
                nil [11759 11872])
            ("_LowLevelFile" type
               (:documentation "Low-level file object. Supports reading and writing.
       It is used instead of a regular file object for streaming
       access.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("mode" variable nil (reparse-symbol indented_block_body) [12173 12283])
                            ("if" code nil (reparse-symbol indented_block_body) [12292 12352])
                            ("self" variable nil (reparse-symbol indented_block_body) [12360 12395]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12146 12150])
                            ("name" variable nil (reparse-symbol function_parameters) [12152 12156])
                            ("mode" variable nil (reparse-symbol function_parameters) [12158 12162]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12133 12396])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12411 12415]))                          )
                        (reparse-symbol indented_block_body) [12401 12444])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12458 12462])
                            ("size" variable nil (reparse-symbol function_parameters) [12464 12468]))                          )
                        (reparse-symbol indented_block_body) [12449 12509])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12524 12528])
                            ("s" variable nil (reparse-symbol function_parameters) [12530 12531]))                          )
                        (reparse-symbol indented_block_body) [12514 12563]))                  
                :type "class")
                nil [11959 12563])
            ("_Stream" type
               (:documentation "Class that serves as an adapter between TarFile and
       a stream-like object.  The stream-like object only
       needs to have a read() or write() method and is accessed
       blockwise.  Use of gzip or bzip2 compression is possible.
       A stream-like object could be for example: sys.stdin,
       sys.stdout, a socket, a tape device etc.

       _Stream is intended to be used only internally.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct a _Stream object.
        \"\"\"" code nil (reparse-symbol indented_block_body) [13071 13113])
                            ("self" variable nil (reparse-symbol indented_block_body) [13122 13145])
                            ("if" code nil (reparse-symbol indented_block_body) [13154 13259])
                            ("if" code nil (reparse-symbol indented_block_body) [13268 13471])
                            ("self" code nil (reparse-symbol indented_block_body) [13480 13506])
                            ("self" variable nil (reparse-symbol indented_block_body) [13515 13535])
                            ("self" variable nil (reparse-symbol indented_block_body) [13544 13568])
                            ("self" variable nil (reparse-symbol indented_block_body) [13577 13600])
                            ("self" variable nil (reparse-symbol indented_block_body) [13609 13632])
                            ("self" variable nil (reparse-symbol indented_block_body) [13641 13659])
                            ("self" variable nil (reparse-symbol indented_block_body) [13668 13686])
                            ("self" variable nil (reparse-symbol indented_block_body) [13695 13716])
                            ("try" code nil (reparse-symbol indented_block_body) [13726 14685]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13016 13020])
                            ("name" variable nil (reparse-symbol function_parameters) [13022 13026])
                            ("mode" variable nil (reparse-symbol function_parameters) [13028 13032])
                            ("comptype" variable nil (reparse-symbol function_parameters) [13034 13042])
                            ("fileobj" variable nil (reparse-symbol function_parameters) [13044 13051])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [13053 13060]))                          
                        :documentation "Construct a _Stream object.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13003 14685])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14702 14706]))                          )
                        (reparse-symbol indented_block_body) [14690 14790])
                    ("_init_write_gz" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14814 14818]))                          
                        :documentation "Initialize for writing with gzip compression.
        ")
                        (reparse-symbol indented_block_body) [14795 15476])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15491 15495])
                            ("s" variable nil (reparse-symbol function_parameters) [15497 15498]))                          
                        :documentation "Write string s to the stream.
        ")
                        (reparse-symbol indented_block_body) [15481 15777])
                    ("__write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15794 15798])
                            ("s" variable nil (reparse-symbol function_parameters) [15800 15801]))                          
                        :documentation "Write string s to the stream if a whole new block
           is ready to be written.
        ")
                        (reparse-symbol indented_block_body) [15782 16081])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16096 16100]))                          
                        :documentation "Close the _Stream object. No operation should be
           done on it afterwards.
        ")
                        (reparse-symbol indented_block_body) [16086 17264])
                    ("_init_read_gz" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17287 17291]))                          
                        :documentation "Initialize for reading a gzip compressed fileobj.
        ")
                        (reparse-symbol indented_block_body) [17269 18220])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18234 18238]))                          
                        :documentation "Return the stream's file pointer position.
        ")
                        (reparse-symbol indented_block_body) [18225 18331])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18345 18349])
                            ("pos" variable nil (reparse-symbol function_parameters) [18351 18354]))                          
                        :documentation "Set the stream's file pointer to pos. Negative seeking
           is forbidden.
        ")
                        (reparse-symbol indented_block_body) [18336 18777])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18791 18795])
                            ("size" variable nil (reparse-symbol function_parameters) [18797 18801]))                          
                        :documentation "Return the next size number of bytes from the stream.
           If size is not defined, return all bytes of the stream
           up to EOF.
        ")
                        (reparse-symbol indented_block_body) [18782 19299])
                    ("_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19314 19318])
                            ("size" variable nil (reparse-symbol function_parameters) [19320 19324]))                          
                        :documentation "Return size bytes from the stream.
        ")
                        (reparse-symbol indented_block_body) [19304 19902])
                    ("__read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19918 19922])
                            ("size" variable nil (reparse-symbol function_parameters) [19924 19928]))                          
                        :documentation "Return size bytes from stream. If internal buffer is empty,
           read another block from the stream.
        ")
                        (reparse-symbol indented_block_body) [19907 20357]))                  
                :type "class")
                nil [12564 20357])
            ("_StreamProxy" type
               (:documentation "Small proxy class that enables transparent compression
       detection for the Stream interface (mode 'r|*').
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [20570 20592])
                            ("self" variable nil (reparse-symbol indented_block_body) [20601 20640]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20546 20550])
                            ("fileobj" variable nil (reparse-symbol function_parameters) [20552 20559]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20533 20641])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20655 20659])
                            ("size" variable nil (reparse-symbol function_parameters) [20661 20665]))                          )
                        (reparse-symbol indented_block_body) [20646 20730])
                    ("getcomptype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20751 20755]))                          )
                        (reparse-symbol indented_block_body) [20735 20942])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20957 20961]))                          )
                        (reparse-symbol indented_block_body) [20947 20993]))                  
                :type "class")
                nil [20374 20993])
            ("_BZ2Proxy" type
               (:documentation "Small proxy class that enables external file object
       support for \"r:bz2\" and \"w:bz2\" modes. This is actually
       a workaround for a limitation in bz2 module's BZ2File
       class which (unlike gzip.GzipFile) has no support for
       a file object argument.
    "
                :superclasses ("object")
                :members 
                  ( ("blocksize" code nil (reparse-symbol indented_block_body) [21327 21348])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [21397 21419])
                            ("self" variable nil (reparse-symbol indented_block_body) [21428 21444])
                            ("self" variable nil (reparse-symbol indented_block_body) [21453 21500])
                            ("self" code nil (reparse-symbol indented_block_body) [21509 21520]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21367 21371])
                            ("fileobj" variable nil (reparse-symbol function_parameters) [21373 21380])
                            ("mode" variable nil (reparse-symbol function_parameters) [21382 21386]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21354 21521])
                    ("init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21535 21539]))                          )
                        (reparse-symbol indented_block_body) [21526 21778])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21792 21796])
                            ("size" variable nil (reparse-symbol function_parameters) [21798 21802]))                          )
                        (reparse-symbol indented_block_body) [21783 22221])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22235 22239])
                            ("pos" variable nil (reparse-symbol function_parameters) [22241 22244]))                          )
                        (reparse-symbol indented_block_body) [22226 22332])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22346 22350]))                          )
                        (reparse-symbol indented_block_body) [22337 22377])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22392 22396])
                            ("data" variable nil (reparse-symbol function_parameters) [22398 22402]))                          )
                        (reparse-symbol indented_block_body) [22382 22508])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22523 22527]))                          )
                        (reparse-symbol indented_block_body) [22513 22633]))                  
                :type "class")
                nil [21014 22633])
            ("_FileInFile" type
               (:documentation "A thin wrapper around an existing file object that
       provides a part of its data as an individual file
       object.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [22963 22985])
                            ("self" variable nil (reparse-symbol indented_block_body) [22994 23014])
                            ("self" variable nil (reparse-symbol indented_block_body) [23023 23039])
                            ("self" variable nil (reparse-symbol indented_block_body) [23048 23068])
                            ("self" variable nil (reparse-symbol indented_block_body) [23077 23094]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22912 22916])
                            ("fileobj" variable nil (reparse-symbol function_parameters) [22918 22925])
                            ("offset" variable nil (reparse-symbol function_parameters) [22927 22933])
                            ("size" variable nil (reparse-symbol function_parameters) [22935 22939])
                            ("sparse" variable nil (reparse-symbol function_parameters) [22941 22947]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22899 23095])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23109 23113]))                          
                        :documentation "Return the current file position.
        ")
                        (reparse-symbol indented_block_body) [23100 23202])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23216 23220])
                            ("position" variable nil (reparse-symbol function_parameters) [23222 23230]))                          
                        :documentation "Seek to a position in the file.
        ")
                        (reparse-symbol indented_block_body) [23207 23321])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23335 23339])
                            ("size" variable nil (reparse-symbol function_parameters) [23341 23345]))                          
                        :documentation "Read data from the file.
        ")
                        (reparse-symbol indented_block_body) [23326 23670])
                    ("__read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23686 23690])
                            ("size" variable nil (reparse-symbol function_parameters) [23692 23696]))                          )
                        (reparse-symbol indented_block_body) [23675 23839])
                    ("readnormal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23859 23863])
                            ("size" variable nil (reparse-symbol function_parameters) [23865 23869]))                          
                        :documentation "Read operation for regular files.
        ")
                        (reparse-symbol indented_block_body) [23844 24047])
                    ("readsparse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24067 24071])
                            ("size" variable nil (reparse-symbol function_parameters) [24073 24077]))                          
                        :documentation "Read operation for sparse files.
        ")
                        (reparse-symbol indented_block_body) [24052 24358])
                    ("readsparsesection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24385 24389])
                            ("size" variable nil (reparse-symbol function_parameters) [24391 24395]))                          
                        :documentation "Read a single section of a sparse file.
        ")
                        (reparse-symbol indented_block_body) [24363 24948]))                  
                :type "class")
                nil [22729 24948])
            ("ExFileObject" type
               (:documentation "File-like object for reading an archive member.
       Is returned by TarFile.extractfile().
    "
                :superclasses ("object")
                :members 
                  ( ("blocksize" variable nil (reparse-symbol indented_block_body) [25109 25125])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [25177 25394])
                            ("self" variable nil (reparse-symbol indented_block_body) [25403 25427])
                            ("self" variable nil (reparse-symbol indented_block_body) [25436 25451])
                            ("self" variable nil (reparse-symbol indented_block_body) [25460 25479])
                            ("self" variable nil (reparse-symbol indented_block_body) [25488 25512])
                            ("self" variable nil (reparse-symbol indented_block_body) [25522 25539])
                            ("self" variable nil (reparse-symbol indented_block_body) [25548 25564]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25144 25148])
                            ("tarfile" variable nil (reparse-symbol function_parameters) [25150 25157])
                            ("tarinfo" variable nil (reparse-symbol function_parameters) [25159 25166]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25131 25565])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25579 25583])
                            ("size" variable nil (reparse-symbol function_parameters) [25585 25589]))                          
                        :documentation "Read at most size bytes from the file. If size is not
           present or None, read all data until EOF is reached.
        ")
                        (reparse-symbol indented_block_body) [25570 26256])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26274 26278])
                            ("size" variable nil (reparse-symbol function_parameters) [26280 26284]))                          
                        :documentation "Read one entire line from the file. If size is present
           and non-negative, return a string with at most that
           size, which may be an incomplete line.
        ")
                        (reparse-symbol indented_block_body) [26261 27290])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27309 27313]))                          
                        :documentation "Return a list with all remaining lines.
        ")
                        (reparse-symbol indented_block_body) [27295 27539])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27553 27557]))                          
                        :documentation "Return the current file position.
        ")
                        (reparse-symbol indented_block_body) [27544 27732])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27746 27750])
                            ("pos" variable nil (reparse-symbol function_parameters) [27752 27755])
                            ("whence" variable nil (reparse-symbol function_parameters) [27757 27763]))                          
                        :documentation "Seek to a position in the file.
        ")
                        (reparse-symbol indented_block_body) [27737 28449])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28464 28468]))                          
                        :documentation "Close the file object.
        ")
                        (reparse-symbol indented_block_body) [28454 28544])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28562 28566]))                          
                        :documentation "Get an iterator over the file's lines.
        ")
                        (reparse-symbol indented_block_body) [28549 28756]))                  
                :type "class")
                nil [24969 28756])
            ("TarInfo" type
               (:superclasses ("object")
                :type "class")
                nil [28836 48565])
            ("TarFile" type
               (:documentation "The TarFile Class provides an interface to tar archives.
    "
                :superclasses ("object")
                :members 
                  ( ("debug" variable nil (reparse-symbol indented_block_body) [48682 48691])
                    ("dereference" variable nil (reparse-symbol indented_block_body) [48761 48780])
                    ("ignore_zeros" variable nil (reparse-symbol indented_block_body) [48898 48918])
                    ("errorlevel" variable nil (reparse-symbol indented_block_body) [49032 49046])
                    ("format" variable nil (reparse-symbol indented_block_body) [49256 49279])
                    ("encoding" variable nil (reparse-symbol indented_block_body) [49335 49354])
                    ("errors" variable nil (reparse-symbol indented_block_body) [49408 49421])
                    ("tarinfo" variable nil (reparse-symbol indented_block_body) [49481 49498])
                    ("fileobject" variable nil (reparse-symbol indented_block_body) [49550 49575])
                    ("__init__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49637 49641])
                            ("name" variable nil (reparse-symbol function_parameters) [49643 49647])
                            ("mode" variable nil (reparse-symbol function_parameters) [49654 49658])
                            ("fileobj" variable nil (reparse-symbol function_parameters) [49664 49671])
                            ("format" variable nil (reparse-symbol function_parameters) [49678 49684])
                            ("tarinfo" variable nil (reparse-symbol function_parameters) [49703 49710])
                            ("dereference" variable nil (reparse-symbol function_parameters) [49717 49728])
                            ("ignore_zeros" variable nil (reparse-symbol function_parameters) [49735 49747])
                            ("encoding" variable nil (reparse-symbol function_parameters) [49754 49762])
                            ("errors" variable nil (reparse-symbol function_parameters) [49781 49787])
                            ("pax_headers" variable nil (reparse-symbol function_parameters) [49794 49805])
                            ("debug" variable nil (reparse-symbol function_parameters) [49812 49817])
                            ("errorlevel" variable nil (reparse-symbol function_parameters) [49824 49834]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [49624 85731]))                  
                :type "class")
                nil [48582 85731])
            ("TarIter" type
               (:documentation "Iterator Class.

       for tarinfo in TarFile(...):
           suite...
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct a TarIter object.
        \"\"\"" code nil (reparse-symbol indented_block_body) [85893 85935])
                            ("self" variable nil (reparse-symbol indented_block_body) [85944 85966])
                            ("self" variable nil (reparse-symbol indented_block_body) [85975 85989]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85869 85873])
                            ("tarfile" variable nil (reparse-symbol function_parameters) [85875 85882]))                          
                        :documentation "Construct a TarIter object.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [85856 85990])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86007 86011]))                          
                        :documentation "Return iterator object.
        ")
                        (reparse-symbol indented_block_body) [85994 86081])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86094 86098]))                          
                        :documentation "Return the next item using TarFile's next() method.
           When all members have been read, set TarFile as _loaded.
        ")
                        (reparse-symbol indented_block_body) [86085 86928]))                  
                :type "class")
                nil [85748 86928])
            ("_section" type
               (:documentation "Base class for _data and _hole.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [87079 87099])
                            ("self" variable nil (reparse-symbol indented_block_body) [87108 87124]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87050 87054])
                            ("offset" variable nil (reparse-symbol function_parameters) [87056 87062])
                            ("size" variable nil (reparse-symbol function_parameters) [87064 87068]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [87037 87125])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87146 87150])
                            ("offset" variable nil (reparse-symbol function_parameters) [87152 87158]))                          )
                        (reparse-symbol indented_block_body) [87129 87224]))                  
                :type "class")
                nil [86970 87224])
            ("_data" type
               (:documentation "Represent a data section in a sparse file.
    "
                :superclasses ("_section")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_section" code nil (reparse-symbol indented_block_body) [87361 87398])
                            ("self" variable nil (reparse-symbol indented_block_body) [87407 87429]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87323 87327])
                            ("offset" variable nil (reparse-symbol function_parameters) [87329 87335])
                            ("size" variable nil (reparse-symbol function_parameters) [87337 87341])
                            ("realpos" variable nil (reparse-symbol function_parameters) [87343 87350]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [87310 87430]))                  
                :type "class")
                nil [87225 87430])
            ("_hole" type
               (:documentation "Represent a hole section in a sparse file.
    "
                :superclasses ("_section")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [87516 87520]))                  
                :type "class")
                nil [87431 87521])
            ("_ringbuffer" type
               (:documentation "Ringbuffer class which increases performance
       over a regular list.
    "
                :superclasses ("list")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [87667 87679]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87652 87656]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [87639 87680])
                    ("find" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87693 87697])
                            ("offset" variable nil (reparse-symbol function_parameters) [87699 87705]))                          )
                        (reparse-symbol indented_block_body) [87684 88044]))                  
                :type "class")
                nil [87522 88044])
            ("TAR_PLAIN" variable nil nil [88174 88187])
            ("TAR_GZIPPED" variable nil nil [88219 88234])
            ("TarFileCompat" type
               (:documentation "TarFile class compatible with standard module zipfile's
       ZipFile class.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("warnings" include nil (reparse-symbol indented_block_body) [88451 88480])
                            ("warnpy3k" code nil (reparse-symbol indented_block_body) [88489 88585])
                            ("if" code nil (reparse-symbol indented_block_body) [88594 88848])
                            ("if" code nil (reparse-symbol indented_block_body) [88856 89083]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88397 88401])
                            ("file" variable nil (reparse-symbol function_parameters) [88403 88407])
                            ("mode" variable nil (reparse-symbol function_parameters) [88409 88413])
                            ("compression" variable nil (reparse-symbol function_parameters) [88419 88430]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [88384 89083])
                    ("namelist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89100 89104]))                          )
                        (reparse-symbol indented_block_body) [89087 89161])
                    ("infolist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89178 89182]))                          )
                        (reparse-symbol indented_block_body) [89165 89291])
                    ("printdir" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89308 89312]))                          )
                        (reparse-symbol indented_block_body) [89295 89343])
                    ("testzip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89359 89363]))                          )
                        (reparse-symbol indented_block_body) [89347 89381])
                    ("getinfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89397 89401])
                            ("name" variable nil (reparse-symbol function_parameters) [89403 89407]))                          )
                        (reparse-symbol indented_block_body) [89385 89454])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89467 89471])
                            ("name" variable nil (reparse-symbol function_parameters) [89473 89477]))                          )
                        (reparse-symbol indented_block_body) [89458 89557])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89571 89575])
                            ("filename" variable nil (reparse-symbol function_parameters) [89577 89585])
                            ("arcname" variable nil (reparse-symbol function_parameters) [89587 89594])
                            ("compress_type" variable nil (reparse-symbol function_parameters) [89601 89614]))                          )
                        (reparse-symbol indented_block_body) [89561 89666])
                    ("writestr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89683 89687])
                            ("zinfo" variable nil (reparse-symbol function_parameters) [89689 89694])
                            ("bytes" variable nil (reparse-symbol function_parameters) [89696 89701]))                          )
                        (reparse-symbol indented_block_body) [89670 90034])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90048 90052]))                          )
                        (reparse-symbol indented_block_body) [90038 90084]))                  
                :type "class")
                nil [88266 90084])
            ("is_tarfile" function
               (:documentation "Return True if name points to a tar archive that we
       are able to handle, else return False.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [90186 90190]))                  )
                nil [90171 90418])
            ("open" variable nil nil [90419 90438]))          
      :file "tarfile.py"
      :pointmax 90439
      :fsize 90568
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"An extensible library for opening URLs using a variety of protocols

The simplest way to use this module is to call the urlopen function,
which accepts a string containing a URL or a Request object (described
below).  It opens the URL and returns the results as file-like
object; the returned object has some extra methods described below.

The OpenerDirector manages a collection of Handler objects that do
all the actual work.  Each Handler implements a particular protocol or
option.  The OpenerDirector is a composite object that invokes the
Handlers needed to open the requested URL.  For example, the
HTTPHandler performs HTTP GET and POST requests and deals with
non-error returns.  The HTTPRedirectHandler automatically deals with
HTTP 301, 302, 303 and 307 redirect errors, and the HTTPDigestAuthHandler
deals with digest authentication.

urlopen(url, data=None) -- Basic usage is the same as original
urllib.  pass the url and optionally data to post to an HTTP URL, and
get a file-like object back.  One difference is that you can also pass
a Request instance instead of URL.  Raises a URLError (subclass of
IOError); for HTTP errors, raises an HTTPError, which can also be
treated as a valid response.

build_opener -- Function that creates a new OpenerDirector instance.
Will install the default handlers.  Accepts one or more Handlers as
arguments, either instances or Handler classes that it will
instantiate.  If one of the argument is a subclass of the default
handler, the argument will be installed instead of the default.

install_opener -- Installs a new opener as the default opener.

objects of interest:

OpenerDirector -- Sets up the User Agent as the Python-urllib client and manages
the Handler classes, while dealing with requests and responses.

Request -- An object that encapsulates the state of a request.  The
state can be as simple as the URL.  It can also include extra HTTP
headers, e.g. a User-Agent.

BaseHandler --

exceptions:
URLError -- A subclass of IOError, individual protocols have their own
specific subclass.

HTTPError -- Also a valid HTTP response, so you can treat an HTTP error
as an exceptional event or valid response.

internals:
BaseHandler and parent
_call_chain conventions

Example usage:

import urllib2

# set up authentication info
authinfo = urllib2.HTTPBasicAuthHandler()
authinfo.add_password(realm='PDQ Application',
                      uri='https://mahler:8092/site-updates.py',
                      user='klem',
                      passwd='geheim$parole')

proxy_support = urllib2.ProxyHandler({\"http\" : \"http://ahad-haam:3128\"})

# build a new opener that adds authentication and caching FTP handlers
opener = urllib2.build_opener(proxy_support, authinfo, urllib2.CacheFTPHandler)

# install it
urllib2.install_opener(opener)

f = urllib2.urlopen('http://www.python.org/')


\"\"\"" code nil nil [1 2856])
            ("base64" include nil nil [3473 3486])
            ("hashlib" include nil nil [3487 3501])
            ("httplib" include nil nil [3502 3516])
            ("mimetools" include nil nil [3517 3533])
            ("os" include nil nil [3534 3543])
            ("posixpath" include nil nil [3544 3560])
            ("random" include nil nil [3561 3574])
            ("re" include nil nil [3575 3584])
            ("socket" include nil nil [3585 3598])
            ("sys" include nil nil [3599 3609])
            ("time" include nil nil [3610 3621])
            ("urlparse" include nil nil [3622 3637])
            ("bisect" include nil nil [3638 3651])
            ("warnings" include nil nil [3652 3667])
            ("try" code nil nil [3669 3763])
            ("try" code nil nil [3780 3869])
            ("" code nil nil [3889 4046])
            ("urllib" include nil nil [4109 4177])
            ("__version__" variable nil nil [4212 4241])
            ("_opener" variable nil nil [4243 4257])
            ("urlopen" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [4270 4273])
                ("data" variable nil (reparse-symbol function_parameters) [4275 4279])
                ("timeout" variable nil (reparse-symbol function_parameters) [4286 4293])
                ("cafile" variable nil (reparse-symbol function_parameters) [4338 4344])
                ("capath" variable nil (reparse-symbol function_parameters) [4351 4357])
                ("cadefault" variable nil (reparse-symbol function_parameters) [4364 4373])
                ("context" variable nil (reparse-symbol function_parameters) [4381 4388]))              ) nil [4258 5279])
            ("install_opener" function (:arguments 
              ( ("opener" variable nil (reparse-symbol function_parameters) [5299 5305]))              ) nil [5280 5348])
            ("URLError" type
               (:superclasses ("IOError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5885 5904])
                            ("self" variable nil (reparse-symbol indented_block_body) [5913 5933]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5862 5866])
                            ("reason" variable nil (reparse-symbol function_parameters) [5868 5874]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5849 5934])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5951 5955]))                          )
                        (reparse-symbol indented_block_body) [5939 6008]))                  
                :type "class")
                nil [5471 6008])
            ("HTTPError" type
               (:documentation "Raised when HTTP error occurs, but also acts like non-error return"
                :superclasses ("URLError" "addinfourl")
                :members 
                  ( ("__super_init" variable nil (reparse-symbol indented_block_body) [6129 6163])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6223 6239])
                            ("self" variable nil (reparse-symbol indented_block_body) [6248 6262])
                            ("self" variable nil (reparse-symbol indented_block_body) [6271 6287])
                            ("self" variable nil (reparse-symbol indented_block_body) [6296 6308])
                            ("self" variable nil (reparse-symbol indented_block_body) [6317 6336])
                            ("if" code nil (reparse-symbol indented_block_body) [6593 6663]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6182 6186])
                            ("url" variable nil (reparse-symbol function_parameters) [6188 6191])
                            ("code" variable nil (reparse-symbol function_parameters) [6193 6197])
                            ("msg" variable nil (reparse-symbol function_parameters) [6199 6202])
                            ("hdrs" variable nil (reparse-symbol function_parameters) [6204 6208])
                            ("fp" variable nil (reparse-symbol function_parameters) [6210 6212]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6169 6663])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6680 6684]))                          )
                        (reparse-symbol indented_block_body) [6668 6746])
                    ("reason" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6911 6915]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6886 6942])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6956 6960]))                          )
                        (reparse-symbol indented_block_body) [6947 6988]))                  
                :type "class")
                nil [6009 6988])
            ("_cut_port_re" variable nil nil [7016 7051])
            ("request_host" function
               (:documentation "Return request-host, as defined by RFC 2965.

    Variation from RFC: returned value is lowercased, for convenient
    comparison.

    "
                :arguments 
                  ( ("request" variable nil (reparse-symbol function_parameters) [7069 7076]))                  )
                nil [7052 7457])
            ("Request" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7659 7688])
                            ("self, self" code nil (reparse-symbol indented_block_body) [7697 7757])
                            ("self" variable nil (reparse-symbol indented_block_body) [7766 7782])
                            ("self" variable nil (reparse-symbol indented_block_body) [7856 7872])
                            ("self" variable nil (reparse-symbol indented_block_body) [7881 7897])
                            ("self" variable nil (reparse-symbol indented_block_body) [7906 7930])
                            ("self" variable nil (reparse-symbol indented_block_body) [7939 7955])
                            ("self" variable nil (reparse-symbol indented_block_body) [7964 7981])
                            ("for" code nil (reparse-symbol indented_block_body) [7990 8065])
                            ("self" variable nil (reparse-symbol indented_block_body) [8073 8100])
                            ("if" code nil (reparse-symbol indented_block_body) [8109 8186])
                            ("self" variable nil (reparse-symbol indented_block_body) [8194 8232])
                            ("self" variable nil (reparse-symbol indented_block_body) [8241 8273]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7491 7495])
                            ("url" variable nil (reparse-symbol function_parameters) [7497 7500])
                            ("data" variable nil (reparse-symbol function_parameters) [7502 7506])
                            ("headers" variable nil (reparse-symbol function_parameters) [7513 7520])
                            ("origin_req_host" variable nil (reparse-symbol function_parameters) [7542 7557])
                            ("unverifiable" variable nil (reparse-symbol function_parameters) [7564 7576]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7478 8274])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8295 8299])
                            ("attr" variable nil (reparse-symbol function_parameters) [8301 8305]))                          )
                        (reparse-symbol indented_block_body) [8279 8729])
                    ("get_method" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8749 8753]))                          )
                        (reparse-symbol indented_block_body) [8734 8849])
                    ("add_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8908 8912])
                            ("data" variable nil (reparse-symbol function_parameters) [8914 8918]))                          )
                        (reparse-symbol indented_block_body) [8895 8946])
                    ("has_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8964 8968]))                          )
                        (reparse-symbol indented_block_body) [8951 9008])
                    ("get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9026 9030]))                          )
                        (reparse-symbol indented_block_body) [9013 9058])
                    ("get_full_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9080 9084]))                          )
                        (reparse-symbol indented_block_body) [9063 9228])
                    ("get_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9246 9250]))                          )
                        (reparse-symbol indented_block_body) [9233 9483])
                    ("get_host" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9501 9505]))                          )
                        (reparse-symbol indented_block_body) [9488 9700])
                    ("get_selector" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9722 9726]))                          )
                        (reparse-symbol indented_block_body) [9705 9758])
                    ("set_proxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9777 9781])
                            ("host" variable nil (reparse-symbol function_parameters) [9783 9787])
                            ("type" variable nil (reparse-symbol function_parameters) [9789 9793]))                          )
                        (reparse-symbol indented_block_body) [9763 10010])
                    ("has_proxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10029 10033]))                          )
                        (reparse-symbol indented_block_body) [10015 10084])
                    ("get_origin_req_host" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10113 10117]))                          )
                        (reparse-symbol indented_block_body) [10089 10156])
                    ("is_unverifiable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10181 10185]))                          )
                        (reparse-symbol indented_block_body) [10161 10221])
                    ("add_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10241 10245])
                            ("key" variable nil (reparse-symbol function_parameters) [10247 10250])
                            ("val" variable nil (reparse-symbol function_parameters) [10252 10255]))                          )
                        (reparse-symbol indented_block_body) [10226 10354])
                    ("add_unredirected_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10387 10391])
                            ("key" variable nil (reparse-symbol function_parameters) [10393 10396])
                            ("val" variable nil (reparse-symbol function_parameters) [10398 10401]))                          )
                        (reparse-symbol indented_block_body) [10359 10511])
                    ("has_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10531 10535])
                            ("header_name" variable nil (reparse-symbol function_parameters) [10537 10548]))                          )
                        (reparse-symbol indented_block_body) [10516 10653])
                    ("get_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10673 10677])
                            ("header_name" variable nil (reparse-symbol function_parameters) [10679 10690])
                            ("default" variable nil (reparse-symbol function_parameters) [10692 10699]))                          )
                        (reparse-symbol indented_block_body) [10658 10827])
                    ("header_items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10849 10853]))                          )
                        (reparse-symbol indented_block_body) [10832 10963]))                  
                :type "class")
                nil [7458 10963])
            ("OpenerDirector" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("client_version" code nil (reparse-symbol indented_block_body) [11018 11067])
                            ("self" variable nil (reparse-symbol indented_block_body) [11076 11126])
                            ("self" variable nil (reparse-symbol indented_block_body) [11203 11221])
                            ("self" variable nil (reparse-symbol indented_block_body) [11271 11292])
                            ("self" variable nil (reparse-symbol indented_block_body) [11301 11323])
                            ("self" variable nil (reparse-symbol indented_block_body) [11332 11358])
                            ("self" variable nil (reparse-symbol indented_block_body) [11367 11392]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11003 11007]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10990 11393])
                    ("add_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11414 11418])
                            ("handler" variable nil (reparse-symbol function_parameters) [11420 11427]))                          )
                        (reparse-symbol indented_block_body) [11398 12956])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12971 12975]))                          )
                        (reparse-symbol indented_block_body) [12961 13042])
                    ("_call_chain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13063 13067])
                            ("chain" variable nil (reparse-symbol function_parameters) [13069 13074])
                            ("kind" variable nil (reparse-symbol function_parameters) [13076 13080])
                            ("meth_name" variable nil (reparse-symbol function_parameters) [13082 13091])
                            ("args" variable nil (reparse-symbol function_parameters) [13093 13098]))                          )
                        (reparse-symbol indented_block_body) [13047 13520])
                    ("open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13534 13538])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [13540 13547])
                            ("data" variable nil (reparse-symbol function_parameters) [13549 13553])
                            ("timeout" variable nil (reparse-symbol function_parameters) [13560 13567]))                          )
                        (reparse-symbol indented_block_body) [13525 14414])
                    ("_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14429 14433])
                            ("req" variable nil (reparse-symbol function_parameters) [14435 14438])
                            ("data" variable nil (reparse-symbol function_parameters) [14440 14444]))                          )
                        (reparse-symbol indented_block_body) [14419 14931])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14946 14950])
                            ("proto" variable nil (reparse-symbol function_parameters) [14952 14957])
                            ("args" variable nil (reparse-symbol function_parameters) [14959 14964]))                          )
                        (reparse-symbol indented_block_body) [14936 15665]))                  
                :type "class")
                nil [10964 15665])
            ("build_opener" function
               (:documentation "Create an opener object from a list of handlers.

    The opener will use several default handlers, including support
    for HTTP, FTP and when applicable, HTTPS.

    If any of the handlers passed as arguments are subclasses of the
    default handlers, the default handlers will not be used.
    "
                :arguments 
                  ( ("handlers" variable nil (reparse-symbol function_parameters) [15853 15862]))                  )
                nil [15836 17099])
            ("BaseHandler" type
               (:members 
                  ( ("handler_order" variable nil (reparse-symbol indented_block_body) [17123 17142])
                    ("add_parent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17163 17167])
                            ("parent" variable nil (reparse-symbol function_parameters) [17169 17175]))                          )
                        (reparse-symbol indented_block_body) [17148 17207])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17222 17226]))                          )
                        (reparse-symbol indented_block_body) [17212 17292])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17308 17312])
                            ("other" variable nil (reparse-symbol function_parameters) [17314 17319]))                          )
                        (reparse-symbol indented_block_body) [17297 17653]))                  
                :type "class")
                nil [17100 17653])
            ("HTTPErrorProcessor" type
               (:documentation "Process HTTP error responses."
                :superclasses ("BaseHandler")
                :members 
                  ( ("handler_order" variable nil (reparse-symbol indented_block_body) [17738 17758])
                    ("http_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17812 17816])
                            ("request" variable nil (reparse-symbol function_parameters) [17818 17825])
                            ("response" variable nil (reparse-symbol function_parameters) [17827 17835]))                          )
                        (reparse-symbol indented_block_body) [17794 18216])
                    ("https_response" variable nil (reparse-symbol indented_block_body) [18221 18251]))                  
                :type "class")
                nil [17655 18252])
            ("HTTPDefaultErrorHandler" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("http_error_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18324 18328])
                            ("req" variable nil (reparse-symbol function_parameters) [18330 18333])
                            ("fp" variable nil (reparse-symbol function_parameters) [18335 18337])
                            ("code" variable nil (reparse-symbol function_parameters) [18339 18343])
                            ("msg" variable nil (reparse-symbol function_parameters) [18345 18348])
                            ("hdrs" variable nil (reparse-symbol function_parameters) [18350 18354]))                          )
                        (reparse-symbol indented_block_body) [18301 18422]))                  
                :type "class")
                nil [18253 18422])
            ("HTTPRedirectHandler" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("max_repeats" variable nil (reparse-symbol indented_block_body) [18587 18602])
                    ("max_redirections" variable nil (reparse-symbol indented_block_body) [18708 18729])
                    ("redirect_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18756 18760])
                            ("req" variable nil (reparse-symbol function_parameters) [18762 18765])
                            ("fp" variable nil (reparse-symbol function_parameters) [18767 18769])
                            ("code" variable nil (reparse-symbol function_parameters) [18771 18775])
                            ("msg" variable nil (reparse-symbol function_parameters) [18777 18780])
                            ("headers" variable nil (reparse-symbol function_parameters) [18782 18789])
                            ("newurl" variable nil (reparse-symbol function_parameters) [18791 18797]))                          
                        :documentation "Return a Request or None in response to a redirect.

        This is called by the http_error_30x methods when a
        redirection response is received.  If a redirection should
        take place, return a new Request to allow http_error_30x to
        perform the redirect.  Otherwise, raise HTTPError if no-one
        else should try to handle this url.  Return None if you can't
        but another Handler might.
        ")
                        (reparse-symbol indented_block_body) [18735 20280])
                    ("http_error_302" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20540 20544])
                            ("req" variable nil (reparse-symbol function_parameters) [20546 20549])
                            ("fp" variable nil (reparse-symbol function_parameters) [20551 20553])
                            ("code" variable nil (reparse-symbol function_parameters) [20555 20559])
                            ("msg" variable nil (reparse-symbol function_parameters) [20561 20564])
                            ("headers" variable nil (reparse-symbol function_parameters) [20566 20573]))                          )
                        (reparse-symbol indented_block_body) [20521 22817])
                    ("http_error_301" variable nil (reparse-symbol indented_block_body) [22822 22887])
                    ("inf_msg" variable nil (reparse-symbol indented_block_body) [22893 23056]))                  
                :type "class")
                nil [18423 23057])
            ("_parse_proxy" function
               (:documentation "Return (scheme, user, password, host/port) given a URL or an authority.

    If a URL is supplied, it must have an authority (host:port) component.
    According to RFC 3986, having an authority component means the URL must
    have two slashes after the scheme:

    >>> _parse_proxy('file:/ftp.example.com/')
    Traceback (most recent call last):
    ValueError: proxy URL with no authority: 'file:/ftp.example.com/'

    The first three items of the returned tuple may be None.

    Examples of authority parsing:

    >>> _parse_proxy('proxy.example.com')
    (None, None, None, 'proxy.example.com')
    >>> _parse_proxy('proxy.example.com:3128')
    (None, None, None, 'proxy.example.com:3128')

    The authority component may optionally include userinfo (assumed to be
    username:password):

    >>> _parse_proxy('joe:password@proxy.example.com')
    (None, 'joe', 'password', 'proxy.example.com')
    >>> _parse_proxy('joe:password@proxy.example.com:3128')
    (None, 'joe', 'password', 'proxy.example.com:3128')

    Same examples, but with URLs instead:

    >>> _parse_proxy('http://proxy.example.com/')
    ('http', None, None, 'proxy.example.com')
    >>> _parse_proxy('http://proxy.example.com:3128/')
    ('http', None, None, 'proxy.example.com:3128')
    >>> _parse_proxy('http://joe:password@proxy.example.com/')
    ('http', 'joe', 'password', 'proxy.example.com')
    >>> _parse_proxy('http://joe:password@proxy.example.com:3128')
    ('http', 'joe', 'password', 'proxy.example.com:3128')

    Everything after the authority is ignored:

    >>> _parse_proxy('ftp://joe:password@proxy.example.com/rubbish:3128')
    ('ftp', 'joe', 'password', 'proxy.example.com')

    Test for no trailing '/' case:

    >>> _parse_proxy('http://joe:password@proxy.example.com')
    ('http', 'joe', 'password', 'proxy.example.com')

    "
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [23076 23081]))                  )
                nil [23059 25672])
            ("ProxyHandler" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("handler_order" variable nil (reparse-symbol indented_block_body) [25741 25760])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [25808 25863])
                            ("assert" code nil (reparse-symbol indented_block_body) [25871 25934])
                            ("self" variable nil (reparse-symbol indented_block_body) [25943 25965])
                            ("for" code nil (reparse-symbol indented_block_body) [25974 26170]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25779 25783])
                            ("proxies" variable nil (reparse-symbol function_parameters) [25785 25792]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25766 26170])
                    ("proxy_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26190 26194])
                            ("req" variable nil (reparse-symbol function_parameters) [26196 26199])
                            ("proxy" variable nil (reparse-symbol function_parameters) [26201 26206])
                            ("type" variable nil (reparse-symbol function_parameters) [26208 26212]))                          )
                        (reparse-symbol indented_block_body) [26175 27324]))                  
                :type "class")
                nil [25673 27324])
            ("HTTPPasswordMgr" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [27381 27397]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27366 27370]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27353 27398])
                    ("add_password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27420 27424])
                            ("realm" variable nil (reparse-symbol function_parameters) [27426 27431])
                            ("uri" variable nil (reparse-symbol function_parameters) [27433 27436])
                            ("user" variable nil (reparse-symbol function_parameters) [27438 27442])
                            ("passwd" variable nil (reparse-symbol function_parameters) [27444 27450]))                          )
                        (reparse-symbol indented_block_body) [27403 27840])
                    ("find_user_password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27868 27872])
                            ("realm" variable nil (reparse-symbol function_parameters) [27874 27879])
                            ("authuri" variable nil (reparse-symbol function_parameters) [27881 27888]))                          )
                        (reparse-symbol indented_block_body) [27845 28261])
                    ("reduce_uri" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28281 28285])
                            ("uri" variable nil (reparse-symbol function_parameters) [28287 28290])
                            ("default_port" variable nil (reparse-symbol function_parameters) [28292 28304]))                          
                        :documentation "Accept authority or URI and extract only the authority and path.")
                        (reparse-symbol indented_block_body) [28266 29075])
                    ("is_suburi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29094 29098])
                            ("base" variable nil (reparse-symbol function_parameters) [29100 29104])
                            ("test" variable nil (reparse-symbol function_parameters) [29106 29110]))                          
                        :documentation "Check if test is below base in a URI tree

        Both args must be URIs in reduced form.
        ")
                        (reparse-symbol indented_block_body) [29080 29477]))                  
                :type "class")
                nil [27325 29477])
            ("HTTPPasswordMgrWithDefaultRealm" type
               (:superclasses ("HTTPPasswordMgr")
                :members 
                  ( ("find_user_password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29563 29567])
                            ("realm" variable nil (reparse-symbol function_parameters) [29569 29574])
                            ("authuri" variable nil (reparse-symbol function_parameters) [29576 29583]))                          )
                        (reparse-symbol indented_block_body) [29540 29862]))                  
                :type "class")
                nil [29479 29862])
            ("AbstractBasicAuthHandler" type
               (:members 
                  ( ("rx" variable nil (reparse-symbol indented_block_body) [30145 30248])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [30466 30536])
                            ("self" variable nil (reparse-symbol indented_block_body) [30544 30570])
                            ("self" variable nil (reparse-symbol indented_block_body) [30579 30623]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30432 30436])
                            ("password_mgr" variable nil (reparse-symbol function_parameters) [30438 30450]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30419 30624])
                    ("http_error_auth_reqed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30656 30660])
                            ("authreq" variable nil (reparse-symbol function_parameters) [30662 30669])
                            ("host" variable nil (reparse-symbol function_parameters) [30671 30675])
                            ("req" variable nil (reparse-symbol function_parameters) [30677 30680])
                            ("headers" variable nil (reparse-symbol function_parameters) [30682 30689]))                          )
                        (reparse-symbol indented_block_body) [30630 31299])
                    ("retry_http_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31330 31334])
                            ("host" variable nil (reparse-symbol function_parameters) [31336 31340])
                            ("req" variable nil (reparse-symbol function_parameters) [31342 31345])
                            ("realm" variable nil (reparse-symbol function_parameters) [31347 31352]))                          )
                        (reparse-symbol indented_block_body) [31304 31801]))                  
                :type "class")
                nil [29864 31801])
            ("HTTPBasicAuthHandler" type
               (:superclasses ("AbstractBasicAuthHandler" "BaseHandler")
                :members 
                  ( ("auth_header" variable nil (reparse-symbol indented_block_body) [31875 31904])
                    ("http_error_401" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31929 31933])
                            ("req" variable nil (reparse-symbol function_parameters) [31935 31938])
                            ("fp" variable nil (reparse-symbol function_parameters) [31940 31942])
                            ("code" variable nil (reparse-symbol function_parameters) [31944 31948])
                            ("msg" variable nil (reparse-symbol function_parameters) [31950 31953])
                            ("headers" variable nil (reparse-symbol function_parameters) [31955 31962]))                          )
                        (reparse-symbol indented_block_body) [31910 32153]))                  
                :type "class")
                nil [31803 32153])
            ("ProxyBasicAuthHandler" type
               (:superclasses ("AbstractBasicAuthHandler" "BaseHandler")
                :members 
                  ( ("auth_header" variable nil (reparse-symbol indented_block_body) [32228 32263])
                    ("http_error_407" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32288 32292])
                            ("req" variable nil (reparse-symbol function_parameters) [32294 32297])
                            ("fp" variable nil (reparse-symbol function_parameters) [32299 32301])
                            ("code" variable nil (reparse-symbol function_parameters) [32303 32307])
                            ("msg" variable nil (reparse-symbol function_parameters) [32309 32312])
                            ("headers" variable nil (reparse-symbol function_parameters) [32314 32321]))                          )
                        (reparse-symbol indented_block_body) [32269 32770]))                  
                :type "class")
                nil [32155 32770])
            ("randombytes" function
               (:documentation "Return n random bytes."
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [32788 32789]))                  )
                nil [32772 33259])
            ("AbstractDigestAuthHandler" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [33676 33734])
                            ("self" variable nil (reparse-symbol indented_block_body) [33742 33762])
                            ("self" variable nil (reparse-symbol indented_block_body) [33771 33815])
                            ("self" variable nil (reparse-symbol indented_block_body) [33824 33840])
                            ("self" variable nil (reparse-symbol indented_block_body) [33849 33869])
                            ("self" variable nil (reparse-symbol indented_block_body) [33878 33900]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33648 33652])
                            ("passwd" variable nil (reparse-symbol function_parameters) [33654 33660]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33635 33901])
                    ("reset_retry_count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33928 33932]))                          )
                        (reparse-symbol indented_block_body) [33906 33960])
                    ("http_error_auth_reqed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33991 33995])
                            ("auth_header" variable nil (reparse-symbol function_parameters) [33997 34008])
                            ("host" variable nil (reparse-symbol function_parameters) [34010 34014])
                            ("req" variable nil (reparse-symbol function_parameters) [34016 34019])
                            ("headers" variable nil (reparse-symbol function_parameters) [34021 34028]))                          )
                        (reparse-symbol indented_block_body) [33965 34764])
                    ("retry_http_digest_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34796 34800])
                            ("req" variable nil (reparse-symbol function_parameters) [34802 34805])
                            ("auth" variable nil (reparse-symbol function_parameters) [34807 34811]))                          )
                        (reparse-symbol indented_block_body) [34769 35277])
                    ("get_cnonce" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35297 35301])
                            ("nonce" variable nil (reparse-symbol function_parameters) [35303 35308]))                          )
                        (reparse-symbol indented_block_body) [35282 35829])
                    ("get_authorization" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35856 35860])
                            ("req" variable nil (reparse-symbol function_parameters) [35862 35865])
                            ("chal" variable nil (reparse-symbol function_parameters) [35867 35871]))                          )
                        (reparse-symbol indented_block_body) [35834 37982])
                    ("get_algorithm_impls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38011 38015])
                            ("algorithm" variable nil (reparse-symbol function_parameters) [38017 38026]))                          )
                        (reparse-symbol indented_block_body) [37987 38611])
                    ("get_entity_digest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38638 38642])
                            ("data" variable nil (reparse-symbol function_parameters) [38644 38648])
                            ("chal" variable nil (reparse-symbol function_parameters) [38650 38654]))                          )
                        (reparse-symbol indented_block_body) [38616 38711]))                  
                :type "class")
                nil [33260 38711])
            ("HTTPDigestAuthHandler" type
               (:documentation "An authentication protocol defined by RFC 2069

    Digest authentication improves on basic authentication because it
    does not transmit passwords in the clear.
    "
                :superclasses ("BaseHandler" "AbstractDigestAuthHandler")
                :members 
                  ( ("auth_header" variable nil (reparse-symbol indented_block_body) [38966 38995])
                    ("handler_order" variable nil (reparse-symbol indented_block_body) [39000 39019])
                    ("http_error_401" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39065 39069])
                            ("req" variable nil (reparse-symbol function_parameters) [39071 39074])
                            ("fp" variable nil (reparse-symbol function_parameters) [39076 39078])
                            ("code" variable nil (reparse-symbol function_parameters) [39080 39084])
                            ("msg" variable nil (reparse-symbol function_parameters) [39086 39089])
                            ("headers" variable nil (reparse-symbol function_parameters) [39091 39098]))                          )
                        (reparse-symbol indented_block_body) [39046 39337]))                  
                :type "class")
                nil [38713 39337])
            ("ProxyDigestAuthHandler" type
               (:superclasses ("BaseHandler" "AbstractDigestAuthHandler")
                :members 
                  ( ("auth_header" variable nil (reparse-symbol indented_block_body) [39414 39449])
                    ("handler_order" variable nil (reparse-symbol indented_block_body) [39454 39473])
                    ("http_error_407" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39519 39523])
                            ("req" variable nil (reparse-symbol function_parameters) [39525 39528])
                            ("fp" variable nil (reparse-symbol function_parameters) [39530 39532])
                            ("code" variable nil (reparse-symbol function_parameters) [39534 39538])
                            ("msg" variable nil (reparse-symbol function_parameters) [39540 39543])
                            ("headers" variable nil (reparse-symbol function_parameters) [39545 39552]))                          )
                        (reparse-symbol indented_block_body) [39500 39767]))                  
                :type "class")
                nil [39339 39767])
            ("AbstractHTTPHandler" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [39855 39884]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39826 39830])
                            ("debuglevel" variable nil (reparse-symbol function_parameters) [39832 39842]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39813 39885])
                    ("set_http_debuglevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39914 39918])
                            ("level" variable nil (reparse-symbol function_parameters) [39920 39925]))                          )
                        (reparse-symbol indented_block_body) [39890 39961])
                    ("do_request_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39982 39986])
                            ("request" variable nil (reparse-symbol function_parameters) [39988 39995]))                          )
                        (reparse-symbol indented_block_body) [39966 41023])
                    ("do_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41040 41044])
                            ("http_class" variable nil (reparse-symbol function_parameters) [41046 41056])
                            ("req" variable nil (reparse-symbol function_parameters) [41058 41061])
                            ("http_conn_args" variable nil (reparse-symbol function_parameters) [41063 41079]))                          
                        :documentation "Return an addinfourl object for the request, using http_class.

        http_class must implement the HTTPConnection API from httplib.
        The addinfourl return value is a file-like object.  It also
        has methods and attributes including:
            - info(): return a mimetools.Message object for the headers
            - geturl(): return the original request URL
            - code: HTTP status code
        ")
                        (reparse-symbol indented_block_body) [41028 43927]))                  
                :type "class")
                nil [39768 43927])
            ("HTTPHandler" type
               (:superclasses ("AbstractHTTPHandler")
                :members 
                  ( ("http_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43988 43992])
                            ("req" variable nil (reparse-symbol function_parameters) [43994 43997]))                          )
                        (reparse-symbol indented_block_body) [43974 44057])
                    ("http_request" variable nil (reparse-symbol indented_block_body) [44062 44108]))                  
                :type "class")
                nil [43929 44109])
            ("if" code nil nil [44110 44531])
            ("HTTPCookieProcessor" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("cookielib" include nil (reparse-symbol indented_block_body) [44620 44636])
                            ("if" code nil (reparse-symbol indented_block_body) [44645 44713])
                            ("self" variable nil (reparse-symbol indented_block_body) [44721 44747]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44589 44593])
                            ("cookiejar" variable nil (reparse-symbol function_parameters) [44595 44604]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44576 44748])
                    ("http_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44770 44774])
                            ("request" variable nil (reparse-symbol function_parameters) [44776 44783]))                          )
                        (reparse-symbol indented_block_body) [44753 44859])
                    ("http_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44882 44886])
                            ("request" variable nil (reparse-symbol function_parameters) [44888 44895])
                            ("response" variable nil (reparse-symbol function_parameters) [44897 44905]))                          )
                        (reparse-symbol indented_block_body) [44864 44990])
                    ("https_request" variable nil (reparse-symbol indented_block_body) [44995 45023])
                    ("https_response" variable nil (reparse-symbol indented_block_body) [45028 45058]))                  
                :type "class")
                nil [44532 45059])
            ("UnknownHandler" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("unknown_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45116 45120])
                            ("req" variable nil (reparse-symbol function_parameters) [45122 45125]))                          )
                        (reparse-symbol indented_block_body) [45099 45212]))                  
                :type "class")
                nil [45060 45212])
            ("parse_keqv_list" function
               (:documentation "Parse list of key=value strings where keys are not duplicated."
                :arguments 
                  ( ("l" variable nil (reparse-symbol function_parameters) [45233 45234]))                  )
                nil [45213 45482])
            ("parse_http_list" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [45503 45504]))              ) nil [45483 48725])
            ("FTPHandler" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("ftp_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48774 48778])
                            ("req" variable nil (reparse-symbol function_parameters) [48780 48783]))                          )
                        (reparse-symbol indented_block_body) [48761 50626])
                    ("connect_ftp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50647 50651])
                            ("user" variable nil (reparse-symbol function_parameters) [50653 50657])
                            ("passwd" variable nil (reparse-symbol function_parameters) [50659 50665])
                            ("host" variable nil (reparse-symbol function_parameters) [50667 50671])
                            ("port" variable nil (reparse-symbol function_parameters) [50673 50677])
                            ("dirs" variable nil (reparse-symbol function_parameters) [50679 50683])
                            ("timeout" variable nil (reparse-symbol function_parameters) [50685 50692]))                          )
                        (reparse-symbol indented_block_body) [50631 50855]))                  
                :type "class")
                nil [48726 50855])
            ("CacheFTPHandler" type
               (:superclasses ("FTPHandler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [51033 51048])
                            ("self" variable nil (reparse-symbol indented_block_body) [51057 51074])
                            ("self" variable nil (reparse-symbol indented_block_body) [51083 51099])
                            ("self" variable nil (reparse-symbol indented_block_body) [51108 51123])
                            ("self" variable nil (reparse-symbol indented_block_body) [51132 51151]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51018 51022]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [51005 51152])
                    ("setTimeout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51172 51176])
                            ("t" variable nil (reparse-symbol function_parameters) [51178 51179]))                          )
                        (reparse-symbol indented_block_body) [51157 51205])
                    ("setMaxConns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51226 51230])
                            ("m" variable nil (reparse-symbol function_parameters) [51232 51233]))                          )
                        (reparse-symbol indented_block_body) [51210 51263])
                    ("connect_ftp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51284 51288])
                            ("user" variable nil (reparse-symbol function_parameters) [51290 51294])
                            ("passwd" variable nil (reparse-symbol function_parameters) [51296 51302])
                            ("host" variable nil (reparse-symbol function_parameters) [51304 51308])
                            ("port" variable nil (reparse-symbol function_parameters) [51310 51314])
                            ("dirs" variable nil (reparse-symbol function_parameters) [51316 51320])
                            ("timeout" variable nil (reparse-symbol function_parameters) [51322 51329]))                          )
                        (reparse-symbol indented_block_body) [51268 51686])
                    ("check_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51707 51711]))                          )
                        (reparse-symbol indented_block_body) [51691 52364])
                    ("clear_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52385 52389]))                          )
                        (reparse-symbol indented_block_body) [52369 52514]))                  
                :type "class")
                nil [50856 52514]))          
      :file "urllib2.py"
      :pointmax 52514
      :fsize 52513
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Python part of the warnings subsystem.\"\"\"" code nil nil [1 45])
            ("linecache" include nil nil [172 188])
            ("sys" include nil nil [189 199])
            ("types" include nil nil [200 212])
            ("__all__" variable nil nil [214 372])
            ("warnpy3k" function
               (:documentation "Issue a deprecation warning for Python 3.x related changes.

    Warnings are omitted unless Python is started with the -3 option.
    "
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [388 395])
                    ("category" variable nil (reparse-symbol function_parameters) [397 405])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [412 422]))                  )
                nil [375 714])
            ("_show_warning" function
               (:documentation "Hook to write a warning to a file; replace if you like."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [733 740])
                    ("category" variable nil (reparse-symbol function_parameters) [742 750])
                    ("filename" variable nil (reparse-symbol function_parameters) [752 760])
                    ("lineno" variable nil (reparse-symbol function_parameters) [762 768])
                    ("file" variable nil (reparse-symbol function_parameters) [770 774])
                    ("line" variable nil (reparse-symbol function_parameters) [781 785]))                  )
                nil [715 1204])
            ("showwarning" variable nil nil [1291 1318])
            ("formatwarning" function
               (:documentation "Function to format a warning the standard way."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [1338 1345])
                    ("category" variable nil (reparse-symbol function_parameters) [1347 1355])
                    ("filename" variable nil (reparse-symbol function_parameters) [1357 1365])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1367 1373])
                    ("line" variable nil (reparse-symbol function_parameters) [1375 1379]))                  )
                nil [1320 2223])
            ("filterwarnings" function
               (:documentation "Insert an entry into the list of warnings filters (at the front).

    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'message' -- a regex that the warning message must match
    'category' -- a class that the warning must be a subclass of
    'module' -- a regex that the module name must match
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [2243 2249])
                    ("message" variable nil (reparse-symbol function_parameters) [2251 2258])
                    ("category" variable nil (reparse-symbol function_parameters) [2263 2271])
                    ("module" variable nil (reparse-symbol function_parameters) [2281 2287])
                    ("lineno" variable nil (reparse-symbol function_parameters) [2292 2298])
                    ("append" variable nil (reparse-symbol function_parameters) [2321 2327]))                  )
                nil [2224 3558])
            ("simplefilter" function
               (:documentation "Insert a simple entry into the list of warnings filters (at the front).

    A simple filter matches all modules and messages.
    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'category' -- a class that the warning must be a subclass of
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [3576 3582])
                    ("category" variable nil (reparse-symbol function_parameters) [3584 3592])
                    ("lineno" variable nil (reparse-symbol function_parameters) [3602 3608])
                    ("append" variable nil (reparse-symbol function_parameters) [3612 3618]))                  )
                nil [3559 4413])
            ("resetwarnings" function (:documentation "Clear the list of warning filters, so that no filters are active.") nil [4414 4531])
            ("_OptionError" type
               (:documentation "Exception used by option processing helpers."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [4622 4626]))                  
                :type "class")
                nil [4532 4627])
            ("_processoptions" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [4706 4710]))              ) nil [4686 4875])
            ("_setoption" function (:arguments 
              ( ("arg" variable nil (reparse-symbol function_parameters) [4922 4925]))              ) nil [4907 5733])
            ("_getaction" function (:arguments 
              ( ("action" variable nil (reparse-symbol function_parameters) [5775 5781]))              ) nil [5760 6060])
            ("_getcategory" function (:arguments 
              ( ("category" variable nil (reparse-symbol function_parameters) [6104 6112]))              ) nil [6087 6920])
            ("warn" function
               (:documentation "Issue a warning, or maybe ignore it or raise an exception."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [6970 6977])
                    ("category" variable nil (reparse-symbol function_parameters) [6979 6987])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [6994 7004]))                  )
                nil [6961 8300])
            ("warn_explicit" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [8319 8326])
                ("category" variable nil (reparse-symbol function_parameters) [8328 8336])
                ("filename" variable nil (reparse-symbol function_parameters) [8338 8346])
                ("lineno" variable nil (reparse-symbol function_parameters) [8348 8354])
                ("module" variable nil (reparse-symbol function_parameters) [8374 8380])
                ("registry" variable nil (reparse-symbol function_parameters) [8387 8395])
                ("module_globals" variable nil (reparse-symbol function_parameters) [8402 8416]))              ) nil [8301 10311])
            ("WarningMessage" type
               (:documentation "Holds the result of a single showwarning() call."
                :superclasses ("object")
                :members 
                  ( ("_WARNING_DETAILS" variable nil (reparse-symbol indented_block_body) [10408 10512])
                    ("__init__" function
                       (:suite 
                          ( ("local_values" variable nil (reparse-symbol indented_block_body) [10625 10648])
                            ("for" code nil (reparse-symbol indented_block_body) [10657 10744])
                            ("None" code nil (reparse-symbol indented_block_body) [10809 10813]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10531 10535])
                            ("message" variable nil (reparse-symbol function_parameters) [10537 10544])
                            ("category" variable nil (reparse-symbol function_parameters) [10546 10554])
                            ("filename" variable nil (reparse-symbol function_parameters) [10556 10564])
                            ("lineno" variable nil (reparse-symbol function_parameters) [10566 10572])
                            ("file" variable nil (reparse-symbol function_parameters) [10574 10578])
                            ("line" variable nil (reparse-symbol function_parameters) [10605 10609]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10518 10814])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10831 10835]))                          )
                        (reparse-symbol indented_block_body) [10819 11062]))                  
                :type "class")
                nil [10313 11062])
            ("catch_warnings" type
               (:documentation "A context manager that copies and restores the warnings filter upon
    exiting the context.

    The 'record' argument specifies whether warnings should be captured by a
    custom implementation of warnings.showwarning() and be appended to a list
    returned by the context manager. Otherwise None is returned by the context
    manager. The objects appended to the list are arguments whose attributes
    mirror the arguments to showwarning().

    The 'module' argument is to specify an alternative module to the module
    named 'warnings' and imported under that name. This argument is only useful
    when testing the warnings module itself.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        \"\"\"" code nil (reparse-symbol indented_block_body) [11821 12061])
                            ("self" variable nil (reparse-symbol indented_block_body) [12070 12091])
                            ("module" code nil (reparse-symbol indented_block_body) [12162 12168])
                            ("self" variable nil (reparse-symbol indented_block_body) [12177 12198]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11779 11783])
                            ("record" variable nil (reparse-symbol function_parameters) [11785 11791])
                            ("module" variable nil (reparse-symbol function_parameters) [11799 11805]))                          
                        :documentation "Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11766 12199])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12217 12221]))                          )
                        (reparse-symbol indented_block_body) [12204 12499])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12518 12522]))                          )
                        (reparse-symbol indented_block_body) [12504 13053])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13071 13075])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [13077 13086]))                          )
                        (reparse-symbol indented_block_body) [13058 13296]))                  
                :type "class")
                nil [11064 13296])
            ("_warnings_defaults" variable nil nil [13748 13774])
            ("try" code nil nil [13775 14083])
            ("_processoptions" code nil nil [14109 14141])
            ("if" code nil nil [14142 14726])
            ("del" code nil nil [14726 14748]))          
      :file "warnings.py"
      :pointmax 14749
      :fsize 14748
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax '((NAME 12100 . 12104) (IF 12139 . 12141) (ELSE 12157 . 12161) (NAME 10752 . 10756) (IF 10792 . 10794) (ELSE 10804 . 10808) (NAME 1681 . 1685) (IF 1724 . 1726) (ELSE 1740 . 1744)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Define names for all type symbols known in the standard interpreter.

Types that are part of optional modules (e.g. array) are not listed.
\"\"\"" code nil nil [1 146])
            ("sys" include nil nil [147 157])
            ("NoneType" variable nil nil [408 429])
            ("TypeType" variable nil nil [430 445])
            ("ObjectType" variable nil nil [446 465])
            ("IntType" variable nil nil [467 480])
            ("LongType" variable nil nil [481 496])
            ("FloatType" variable nil nil [497 514])
            ("BooleanType" variable nil nil [515 533])
            ("try" code nil nil [534 592])
            ("StringType" variable nil nil [593 609])
            ("try" code nil nil [801 926])
            ("BufferType" variable nil nil [927 946])
            ("TupleType" variable nil nil [948 965])
            ("ListType" variable nil nil [966 981])
            ("DictType" variable nil nil [982 1014])
            ("_f" function nil nil [1016 1031])
            ("FunctionType" variable nil nil [1031 1054])
            ("LambdaType" variable nil nil [1055 1086])
            ("CodeType" variable nil nil [1118 1147])
            ("_g" function nil nil [1149 1171])
            ("GeneratorType" variable nil nil [1171 1197])
            ("_C" type
               (:members 
                  ( ("_m" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1220 1224]))                          )
                        (reparse-symbol indented_block_body) [1213 1232]))                  
                :type "class")
                nil [1199 1232])
            ("ClassType" variable nil nil [1232 1252])
            ("UnboundMethodType" variable nil nil [1253 1284])
            ("_x" variable nil nil [1314 1323])
            ("InstanceType" variable nil nil [1324 1347])
            ("MethodType" variable nil nil [1348 1372])
            ("BuiltinFunctionType" variable nil nil [1374 1405])
            ("BuiltinMethodType" variable nil nil [1406 1441])
            ("ModuleType" variable nil nil [1477 1499])
            ("FileType" variable nil nil [1500 1515])
            ("XRangeType" variable nil nil [1516 1535])
            ("try" code nil nil [1537 1681])
            ("SliceType" variable nil nil [1682 1699])
            ("EllipsisType" variable nil nil [1700 1729])
            ("DictProxyType" variable nil nil [1731 1770])
            ("NotImplementedType" variable nil nil [1771 1812])
            ("GetSetDescriptorType" variable nil nil [1866 1917])
            ("MemberDescriptorType" variable nil nil [1918 1972])
            ("del" code nil nil [1974 1997])
            ("__all__" variable nil nil [2042 2094]))          
      :file "types.py"
      :pointmax 2095
      :fsize 2094
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Utility functions for copying and archiving files and directory trees.

XXX The functions here don't copy the resource fork or other metadata on Mac.

\"\"\"" code nil nil [1 158])
            ("os" include nil nil [160 169])
            ("sys" include nil nil [170 180])
            ("stat" include nil nil [181 192])
            ("os.path" include nil nil [193 220])
            ("fnmatch" include nil nil [221 235])
            ("collections" include nil nil [236 254])
            ("errno" include nil nil [255 267])
            ("try" code nil nil [269 343])
            ("try" code nil nil [344 418])
            ("__all__" variable nil nil [419 727])
            ("Error" type
               (:superclasses ("EnvironmentError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [764 768]))                  
                :type "class")
                nil [729 769])
            ("SpecialFileError" type
               (:documentation "Raised when trying to do a kind of operation (e.g. copying) which is
    not supported on a special file (e.g. a named pipe)"
                :superclasses ("EnvironmentError")
                :type "class")
                nil [770 947])
            ("ExecError" type
               (:documentation "Raised when a command could not be executed"
                :superclasses ("EnvironmentError")
                :type "class")
                nil [948 1037])
            ("try" code nil nil [1038 1102])
            ("copyfileobj" function
               (:documentation "copy data from file-like object fsrc to file-like object fdst"
                :arguments 
                  ( ("fsrc" variable nil (reparse-symbol function_parameters) [1119 1123])
                    ("fdst" variable nil (reparse-symbol function_parameters) [1125 1129])
                    ("length" variable nil (reparse-symbol function_parameters) [1131 1137]))                  )
                nil [1103 1327])
            ("_samefile" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [1342 1345])
                ("dst" variable nil (reparse-symbol function_parameters) [1347 1350]))              ) nil [1328 1680])
            ("copyfile" function
               (:documentation "Copy data from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [1694 1697])
                    ("dst" variable nil (reparse-symbol function_parameters) [1699 1702]))                  )
                nil [1681 2298])
            ("copymode" function
               (:documentation "Copy mode bits from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [2312 2315])
                    ("dst" variable nil (reparse-symbol function_parameters) [2317 2320]))                  )
                nil [2299 2487])
            ("copystat" function
               (:documentation "Copy all stat info (mode bits, atime, mtime, flags) from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [2501 2504])
                    ("dst" variable nil (reparse-symbol function_parameters) [2506 2509]))                  )
                nil [2488 3117])
            ("copy" function
               (:documentation "Copy data and mode bits (\"cp src dst\").

    The destination may be a directory.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3127 3130])
                    ("dst" variable nil (reparse-symbol function_parameters) [3132 3135]))                  )
                nil [3118 3363])
            ("copy2" function
               (:documentation "Copy data and all stat info (\"cp -p src dst\").

    The destination may be a directory.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3374 3377])
                    ("dst" variable nil (reparse-symbol function_parameters) [3379 3382]))                  )
                nil [3364 3617])
            ("ignore_patterns" function
               (:documentation "Function that can be used as copytree() ignore parameter.

    Patterns is a sequence of glob-style patterns
    that are used to exclude files"
                :arguments 
                  ( ("patterns" variable nil (reparse-symbol function_parameters) [3638 3647]))                  )
                nil [3618 4030])
            ("copytree" function
               (:documentation "Recursively copy a directory tree using copy2().

    The destination directory must not already exist.
    If exception(s) occur, an Error is raised with a list of reasons.

    If the optional symlinks flag is true, symbolic links in the
    source tree result in symbolic links in the destination tree; if
    it is false, the contents of the files pointed to by symbolic
    links are copied.

    The optional ignore argument is a callable. If given, it
    is called with the `src` parameter, which is the directory
    being visited by copytree(), and `names` which is the list of
    `src` contents, as returned by os.listdir():

        callable(src, names) -> ignored_names

    Since copytree() is called recursively, the callable will be
    called once for each directory that is copied. It returns a
    list of names relative to the `src` directory that should
    not be copied.

    XXX Consider this example code rather than the ultimate tool.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [4044 4047])
                    ("dst" variable nil (reparse-symbol function_parameters) [4049 4052])
                    ("symlinks" variable nil (reparse-symbol function_parameters) [4054 4062])
                    ("ignore" variable nil (reparse-symbol function_parameters) [4070 4076]))                  )
                nil [4031 6370])
            ("rmtree" function
               (:documentation "Recursively delete a directory tree.

    If ignore_errors is set, errors are ignored; otherwise, if onerror
    is set, it is called to handle the error with arguments (func,
    path, exc_info) where func is os.listdir, os.remove, or os.rmdir;
    path is the argument to that function that caused it to fail; and
    exc_info is a tuple returned by sys.exc_info().  If ignore_errors
    is false and onerror is None, an exception is raised.

    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [6382 6386])
                    ("ignore_errors" variable nil (reparse-symbol function_parameters) [6388 6401])
                    ("onerror" variable nil (reparse-symbol function_parameters) [6409 6416]))                  )
                nil [6371 7994])
            ("_basename" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [8010 8014]))              ) nil [7996 8267])
            ("move" function
               (:documentation "Recursively move a file or directory to another location. This is
    similar to the Unix \"mv\" command.

    If the destination is a directory or a symlink to a directory, the source
    is moved inside the directory. The destination path must not already
    exist.

    If the destination already exists but is not a directory, it may be
    overwritten depending on os.rename() semantics.

    If the destination is on our current filesystem, then rename() is used.
    Otherwise, src is copied to the destination and then removed.
    A lot more could be done here...  A look at a mv.c shows a lot of
    the issues this implementation glosses over.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [8277 8280])
                    ("dst" variable nil (reparse-symbol function_parameters) [8282 8285]))                  )
                nil [8268 9724])
            ("_destinsrc" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [9740 9743])
                ("dst" variable nil (reparse-symbol function_parameters) [9745 9748]))              ) nil [9725 9958])
            ("_get_gid" function
               (:documentation "Returns a gid, given a group name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [9972 9976]))                  )
                nil [9959 10237])
            ("_get_uid" function
               (:documentation "Returns an uid, given a user name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [10251 10255]))                  )
                nil [10238 10516])
            ("_make_tarball" function
               (:documentation "Create a (possibly compressed) tar file from all the files under
    'base_dir'.

    'compress' must be \"gzip\" (the default), \"bzip2\", or None.

    'owner' and 'group' can be used to define an owner and a group for the
    archive that is being built. If not provided, the current owner and group
    will be used.

    The output tar file will be named 'base_name' +  \".tar\", possibly plus
    the appropriate compression extension (\".gz\", or \".bz2\").

    Returns the output filename.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [10535 10544])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [10546 10554])
                    ("compress" variable nil (reparse-symbol function_parameters) [10556 10564])
                    ("verbose" variable nil (reparse-symbol function_parameters) [10573 10580])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [10584 10591])
                    ("owner" variable nil (reparse-symbol function_parameters) [10613 10618])
                    ("group" variable nil (reparse-symbol function_parameters) [10625 10630])
                    ("logger" variable nil (reparse-symbol function_parameters) [10637 10643]))                  )
                nil [10517 12535])
            ("_call_external_zip" function (:arguments 
              ( ("base_dir" variable nil (reparse-symbol function_parameters) [12559 12567])
                ("zip_filename" variable nil (reparse-symbol function_parameters) [12569 12581])
                ("verbose" variable nil (reparse-symbol function_parameters) [12583 12590])
                ("dry_run" variable nil (reparse-symbol function_parameters) [12598 12605]))              ) nil [12536 13265])
            ("_make_zipfile" function
               (:documentation "Create a zip file from all the files under 'base_dir'.

    The output zip file will be named 'base_name' + \".zip\".  Uses either the
    \"zipfile\" Python module (if available) or the InfoZIP \"zip\" utility
    (if installed and found on the default search path).  If neither tool is
    available, raises ExecError.  Returns the name of the output zip
    file.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [13284 13293])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [13295 13303])
                    ("verbose" variable nil (reparse-symbol function_parameters) [13305 13312])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [13316 13323])
                    ("logger" variable nil (reparse-symbol function_parameters) [13327 13333]))                  )
                nil [13266 15455])
            ("_ARCHIVE_FORMATS" variable nil nil [15456 15753])
            ("get_archive_formats" function (:documentation "Returns a list of supported formats for archiving and unarchiving.

    Each element of the returned sequence is a tuple (name, description)
    ") nil [15755 16074])
            ("register_archive_format" function
               (:documentation "Registers an archive format.

    name is the name of the format. function is the callable that will be
    used to create archives. If provided, extra_args is a sequence of
    (name, value) tuples that will be passed as arguments to the callable.
    description can be provided to describe the format, and will be returned
    by the get_archive_formats() function.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [16103 16107])
                    ("function" variable nil (reparse-symbol function_parameters) [16109 16117])
                    ("extra_args" variable nil (reparse-symbol function_parameters) [16119 16129])
                    ("description" variable nil (reparse-symbol function_parameters) [16136 16147]))                  )
                nil [16075 17066])
            ("unregister_archive_format" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [17097 17101]))              ) nil [17067 17135])
            ("make_archive" function
               (:documentation "Create an archive file (eg. zip or tar).

    'base_name' is the name of the file to create, minus any format-specific
    extension; 'format' is the archive format: one of \"zip\", \"tar\", \"bztar\"
    or \"gztar\".

    'root_dir' is a directory that will be the root directory of the
    archive; ie. we typically chdir into 'root_dir' before creating the
    archive.  'base_dir' is the directory where we start archiving from;
    ie. 'base_dir' will be the common prefix of all files and
    directories in the archive.  'root_dir' and 'base_dir' both default
    to the current directory.  Returns the name of the archive file.

    'owner' and 'group' are used when creating a tar archive. By default,
    uses the current owner and group.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [17153 17162])
                    ("format" variable nil (reparse-symbol function_parameters) [17164 17170])
                    ("root_dir" variable nil (reparse-symbol function_parameters) [17172 17180])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [17187 17195])
                    ("verbose" variable nil (reparse-symbol function_parameters) [17202 17209])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [17230 17237])
                    ("owner" variable nil (reparse-symbol function_parameters) [17241 17246])
                    ("group" variable nil (reparse-symbol function_parameters) [17253 17258])
                    ("logger" variable nil (reparse-symbol function_parameters) [17265 17271]))                  )
                nil [17136 18973]))          
      :file "shutil.py"
      :pointmax 18973
      :fsize 19022
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Constants/functions for interpreting results of os.stat() and os.lstat().

Suggested usage: from stat import *
\"\"\"" code nil nil [1 118])
            ("ST_MODE" variable nil nil [190 202])
            ("ST_INO" variable nil nil [203 215])
            ("ST_DEV" variable nil nil [216 228])
            ("ST_NLINK" variable nil nil [229 241])
            ("ST_UID" variable nil nil [242 254])
            ("ST_GID" variable nil nil [255 267])
            ("ST_SIZE" variable nil nil [268 280])
            ("ST_ATIME" variable nil nil [281 293])
            ("ST_MTIME" variable nil nil [294 306])
            ("ST_CTIME" variable nil nil [307 319])
            ("S_IMODE" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [363 367]))              ) nil [351 394])
            ("S_IFMT" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [406 410]))              ) nil [395 439])
            ("S_IFDIR" variable nil nil [536 554])
            ("S_IFCHR" variable nil nil [555 573])
            ("S_IFBLK" variable nil nil [574 592])
            ("S_IFREG" variable nil nil [593 611])
            ("S_IFIFO" variable nil nil [612 630])
            ("S_IFLNK" variable nil nil [631 649])
            ("S_IFSOCK" variable nil nil [650 668])
            ("S_ISDIR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [722 726]))              ) nil [710 764])
            ("S_ISCHR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [777 781]))              ) nil [765 819])
            ("S_ISBLK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [832 836]))              ) nil [820 874])
            ("S_ISREG" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [887 891]))              ) nil [875 929])
            ("S_ISFIFO" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [943 947]))              ) nil [930 985])
            ("S_ISLNK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [998 1002]))              ) nil [986 1040])
            ("S_ISSOCK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [1054 1058]))              ) nil [1041 1097])
            ("S_ISUID" variable nil nil [1127 1142])
            ("S_ISGID" variable nil nil [1143 1158])
            ("S_ENFMT" variable nil nil [1159 1176])
            ("S_ISVTX" variable nil nil [1177 1192])
            ("S_IREAD" variable nil nil [1193 1208])
            ("S_IWRITE" variable nil nil [1209 1225])
            ("S_IEXEC" variable nil nil [1226 1241])
            ("S_IRWXU" variable nil nil [1242 1257])
            ("S_IRUSR" variable nil nil [1258 1273])
            ("S_IWUSR" variable nil nil [1274 1289])
            ("S_IXUSR" variable nil nil [1290 1305])
            ("S_IRWXG" variable nil nil [1306 1321])
            ("S_IRGRP" variable nil nil [1322 1337])
            ("S_IWGRP" variable nil nil [1338 1353])
            ("S_IXGRP" variable nil nil [1354 1369])
            ("S_IRWXO" variable nil nil [1370 1385])
            ("S_IROTH" variable nil nil [1386 1401])
            ("S_IWOTH" variable nil nil [1402 1417])
            ("S_IXOTH" variable nil nil [1418 1433])
            ("UF_NODUMP" variable nil nil [1459 1484])
            ("UF_IMMUTABLE" variable nil nil [1485 1510])
            ("UF_APPEND" variable nil nil [1511 1536])
            ("UF_OPAQUE" variable nil nil [1537 1562])
            ("UF_NOUNLINK" variable nil nil [1563 1588])
            ("UF_COMPRESSED" variable nil nil [1589 1615])
            ("UF_HIDDEN" variable nil nil [1648 1673])
            ("SF_ARCHIVED" variable nil nil [1713 1738])
            ("SF_IMMUTABLE" variable nil nil [1739 1764])
            ("SF_APPEND" variable nil nil [1765 1790])
            ("SF_NOUNLINK" variable nil nil [1791 1816])
            ("SF_SNAPSHOT" variable nil nil [1817 1842]))          
      :file "stat.py"
      :pointmax 1843
      :fsize 1842
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("_struct" include nil nil [1 22])
            ("_struct" include nil nil [23 54])
            ("_struct" include nil nil [55 82]))          
      :file "struct.py"
      :pointmax 83
      :fsize 82
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Generic (shallow and deep) copying operations.

Interface summary:

        import copy

        x = copy.copy(y)        # make a shallow copy of y
        x = copy.deepcopy(y)    # make a deep copy of y

For module specific errors, copy.Error is raised.

The difference between shallow and deep copying is only relevant for
compound objects (objects that contain other objects, like lists or
class instances).

- A shallow copy constructs a new compound object and then (to the
  extent possible) inserts *the same objects* into it that the
  original contains.

- A deep copy constructs a new compound object and then, recursively,
  inserts *copies* into it of the objects found in the original.

Two problems often exist with deep copy operations that don't exist
with shallow copy operations:

 a) recursive objects (compound objects that, directly or indirectly,
    contain a reference to themselves) may cause a recursive loop

 b) because deep copy copies *everything* it may copy too much, e.g.
    administrative data structures that should be shared even between
    copies

Python's deep copy operation avoids these problems by:

 a) keeping a table of objects already copied during the current
    copying pass

 b) letting user-defined classes override the copying operation or the
    set of components copied

This version does not copy types like module, class, function, method,
nor stack trace, stack frame, nor file, socket, window, nor array, nor
any similar types.

Classes can use the same interfaces to control copying that they use
to control pickling: they can define methods called __getinitargs__(),
__getstate__() and __setstate__().  See the documentation for module
\"pickle\" for information on these methods.
\"\"\"" code nil nil [1 1748])
            ("types" include nil nil [1750 1762])
            ("weakref" include nil nil [1763 1777])
            ("copy_reg" include nil nil [1778 1813])
            ("Error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1843 1847]))                  
                :type "class")
                nil [1815 1848])
            ("error" variable nil nil [1848 1861])
            ("try" code nil nil [1890 1982])
            ("__all__" variable nil nil [1983 2022])
            ("copy" function
               (:documentation "Shallow copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [2033 2034]))                  )
                nil [2024 2786])
            ("_copy_dispatch" variable nil nil [2788 2811])
            ("_copy_immutable" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [2833 2834]))              ) nil [2813 2850])
            ("for" code nil nil [2850 3084])
            ("for" code nil nil [3084 3228])
            ("_copy_with_constructor" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3256 3257]))              ) nil [3229 3282])
            ("for" code nil nil [3282 3344])
            ("_copy_with_copy_method" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3372 3373]))              ) nil [3345 3396])
            ("if" code nil nil [3396 3468])
            ("_copy_inst" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3484 3485]))              ) nil [3469 3947])
            ("d" variable nil nil [3947 3981])
            ("del" code nil nil [3983 3988])
            ("deepcopy" function
               (:documentation "Deep copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [4003 4004])
                    ("memo" variable nil (reparse-symbol function_parameters) [4006 4010])
                    ("_nil" variable nil (reparse-symbol function_parameters) [4017 4021]))                  )
                nil [3990 5472])
            ("_deepcopy_dispatch" variable nil nil [5473 5500])
            ("_deepcopy_atomic" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5523 5524])
                ("memo" variable nil (reparse-symbol function_parameters) [5526 5530]))              ) nil [5502 5546])
            ("d" variable nil nil [5546 5578])
            ("d" variable nil nil [5579 5615])
            ("d" variable nil nil [5616 5641])
            ("d" variable nil nil [5642 5668])
            ("d" variable nil nil [5669 5696])
            ("d" variable nil nil [5697 5723])
            ("try" code nil nil [5724 5790])
            ("d" variable nil nil [5790 5815])
            ("try" code nil nil [5816 5882])
            ("try" code nil nil [5882 5960])
            ("d" variable nil nil [5960 5986])
            ("d" variable nil nil [5987 6015])
            ("d" variable nil nil [6016 6053])
            ("d" variable nil nil [6054 6101])
            ("d" variable nil nil [6102 6142])
            ("d" variable nil nil [6143 6176])
            ("_deepcopy_list" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6197 6198])
                ("memo" variable nil (reparse-symbol function_parameters) [6200 6204]))              ) nil [6178 6303])
            ("d" variable nil nil [6303 6327])
            ("_deepcopy_tuple" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6349 6350])
                ("memo" variable nil (reparse-symbol function_parameters) [6352 6356]))              ) nil [6329 6655])
            ("d" variable nil nil [6655 6681])
            ("_deepcopy_dict" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6702 6703])
                ("memo" variable nil (reparse-symbol function_parameters) [6705 6709]))              ) nil [6683 6848])
            ("d" variable nil nil [6848 6872])
            ("if" code nil nil [6873 6937])
            ("_deepcopy_method" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6959 6960])
                ("memo" variable nil (reparse-symbol function_parameters) [6962 6966]))              ) nil [6938 7062])
            ("_deepcopy_dispatch" variable nil nil [7062 7117])
            ("_keep_alive" function
               (:documentation "Keeps a reference to the object x in the memo.

    Because we remember objects by their id, we have
    to assure that possibly temporary objects are kept
    alive by referencing them.
    We store a reference at the id of the memo, which should
    normally not be used unless someone tries to deepcopy
    the memo itself...
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7135 7136])
                    ("memo" variable nil (reparse-symbol function_parameters) [7138 7142]))                  )
                nil [7119 7620])
            ("_deepcopy_inst" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [7640 7641])
                ("memo" variable nil (reparse-symbol function_parameters) [7643 7647]))              ) nil [7621 8211])
            ("d" variable nil nil [8211 8249])
            ("_reconstruct" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [8268 8269])
                ("info" variable nil (reparse-symbol function_parameters) [8271 8275])
                ("deep" variable nil (reparse-symbol function_parameters) [8277 8281])
                ("memo" variable nil (reparse-symbol function_parameters) [8283 8287]))              ) nil [8251 9710])
            ("del" code nil nil [9711 9716])
            ("del" code nil nil [9718 9727])
            ("_EmptyClass" type
               (:members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [9808 9812]))                  
                :type "class")
                nil [9785 9813])
            ("_test" function nil nil [9814 11494])
            ("if" code nil nil [11495 11534]))          
      :file "copy.py"
      :pointmax 11534
      :fsize 11533
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags nil
      :file "re.py"
      :pointmax 13424
      :fsize 13423
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax '(($EOI 13424 . 13424)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"RFC 3548: Base16, Base32, Base64 Data Encodings\"\"\"" code nil nil [24 77])
            ("re" include nil nil [209 218])
            ("struct" include nil nil [219 232])
            ("string" include nil nil [233 246])
            ("binascii" include nil nil [247 262])
            ("__all__" variable nil nil [265 839])
            ("_translation" variable nil nil [841 886])
            ("EMPTYSTRING" variable nil nil [887 903])
            ("_translate" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [921 922])
                ("altchars" variable nil (reparse-symbol function_parameters) [924 932]))              ) nil [906 1080])
            ("b64encode" function
               (:documentation "Encode a string using Base64.

    s is the string to encode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies an
    alternative alphabet for the '+' and '/' characters.  This allows an
    application to e.g. generate url or filesystem safe Base64 strings.

    The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1140 1141])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1143 1151]))                  )
                nil [1126 1733])
            ("b64decode" function
               (:documentation "Decode a Base64 encoded string.

    s is the string to decode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies the
    alternative alphabet used instead of the '+' and '/' characters.

    The decoded string is returned.  A TypeError is raised if s is
    incorrectly padded.  Characters that are neither in the normal base-64
    alphabet nor the alternative alphabet are discarded prior to the padding
    check.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1749 1750])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1752 1760]))                  )
                nil [1735 2514])
            ("standard_b64encode" function
               (:documentation "Encode a string using the standard Base64 alphabet.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2539 2540]))                  )
                nil [2516 2699])
            ("standard_b64decode" function
               (:documentation "Decode a string encoded with the standard Base64 alphabet.

    Argument s is the string to decode.  The decoded string is returned.  A
    TypeError is raised if the string is incorrectly padded.  Characters that
    are not in the standard alphabet are discarded prior to the padding
    check.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2723 2724]))                  )
                nil [2700 3063])
            ("_urlsafe_encode_translation" variable nil nil [3064 3124])
            ("_urlsafe_decode_translation" variable nil nil [3125 3185])
            ("urlsafe_b64encode" function
               (:documentation "Encode a string using the URL- and filesystem-safe Base64 alphabet.

    Argument s is the string to encode.  The encoded string is returned.  The
    alphabet uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [3209 3210]))                  )
                nil [3187 3499])
            ("urlsafe_b64decode" function
               (:documentation "Decode a string using the URL- and filesystem-safe Base64 alphabet.

    Argument s is the string to decode.  The decoded string is returned.  A
    TypeError is raised if the string is incorrectly padded.  Characters that
    are not in the URL-safe base-64 alphabet, and are not a plus '+' or slash
    '/', are discarded prior to the padding check.

    The alphabet uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [3522 3523]))                  )
                nil [3500 4022])
            ("_b32alphabet" variable nil nil [4076 4413])
            ("_b32tab" variable nil nil [4415 4445])
            ("_b32tab" code nil nil [4446 4460])
            ("_b32tab" variable nil nil [4461 4494])
            ("_b32rev" variable nil nil [4495 4558])
            ("b32encode" function
               (:documentation "Encode a string using Base32.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [4575 4576]))                  )
                nil [4561 6338])
            ("b32decode" function
               (:documentation "Decode a Base32 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    RFC 3548 allows for optional mapping of the digit 0 (zero) to the letter O
    (oh), and for optional mapping of the digit 1 (one) to either the letter I
    (eye) or letter L (el).  The optional argument map01 when not None,
    specifies which letter the digit 1 should be mapped to (when map01 is not
    None, the digit 0 is always mapped to the letter O).  For security
    purposes the default is None, so that 0 and 1 are not allowed in the
    input.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [6354 6355])
                    ("casefold" variable nil (reparse-symbol function_parameters) [6357 6365])
                    ("map01" variable nil (reparse-symbol function_parameters) [6373 6378]))                  )
                nil [6340 8837])
            ("b16encode" function
               (:documentation "Encode a string using Base16.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9011 9012]))                  )
                nil [8997 9164])
            ("b16decode" function
               (:documentation "Decode a Base16 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    The decoded string is returned.  A TypeError is raised if s is
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9180 9181])
                    ("casefold" variable nil (reparse-symbol function_parameters) [9183 9191]))                  )
                nil [9166 9740])
            ("MAXLINESIZE" variable nil nil [9903 9919])
            ("MAXBINSIZE" code nil nil [9941 9972])
            ("encode" function
               (:documentation "Encode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [9985 9990])
                    ("output" variable nil (reparse-symbol function_parameters) [9992 9998]))                  )
                nil [9974 10325])
            ("decode" function
               (:documentation "Decode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [10338 10343])
                    ("output" variable nil (reparse-symbol function_parameters) [10345 10351]))                  )
                nil [10327 10528])
            ("encodestring" function
               (:documentation "Encode a string into multiple lines of base-64 data."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10547 10548]))                  )
                nil [10530 10788])
            ("decodestring" function
               (:documentation "Decode a string."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10807 10808]))                  )
                nil [10790 10872])
            ("test" function (:documentation "Small test program") nil [10901 11642])
            ("test1" function nil nil [11644 11767])
            ("if" code nil nil [11769 11807]))          
      :file "base64.py"
      :pointmax 11807
      :fsize 11806
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__doc__" variable nil nil [122 2181])
            ("__always_supported" variable nil nil [2293 2369])
            ("algorithms_guaranteed" variable nil nil [2371 2418])
            ("algorithms_available" variable nil nil [2419 2465])
            ("algorithms" variable nil nil [2467 2498])
            ("__all__" code nil nil [2500 2680])
            ("__get_builtin_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [2713 2717]))              ) nil [2683 3549])
            ("__get_openssl_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [3581 3585]))              ) nil [3551 3958])
            ("__py_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3973 3977])
                    ("string" variable nil (reparse-symbol function_parameters) [3979 3985]))                  )
                nil [3960 4177])
            ("__hash_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4194 4198])
                    ("string" variable nil (reparse-symbol function_parameters) [4200 4206]))                  )
                nil [4179 4739])
            ("try" code nil nil [4741 5007])
            ("for" code nil nil [5008 5335])
            ("try" code nil nil [5337 7723])
            ("del" code nil nil [7743 7790])
            ("del" code nil nil [7791 7842]))          
      :file "hashlib.py"
      :pointmax 7843
      :fsize 7842
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"HTTP/1.1 client library

<intro stuff goes here>
<other stuff, too>

HTTPConnection goes through a number of \"states\", which define when a client
may legally make another request or fetch the response for a particular
request. This diagram details these state transitions:

    (null)
      |
      | HTTPConnection()
      v
    Idle
      |
      | putrequest()
      v
    Request-started
      |
      | ( putheader() )*  endheaders()
      v
    Request-sent
      |
      | response = getresponse()
      v
    Unread-response   [Response-headers-read]
      |\\____________________
      |                     |
      | response.read()     | putrequest()
      v                     v
    Idle                  Req-started-unread-response
                     ______/|
                   /        |
   response.read() |        | ( putheader() )*  endheaders()
                   v        v
       Request-started    Req-sent-unread-response
                            |
                            | response.read()
                            v
                          Request-sent

This diagram presents the following rules:
  -- a second request may not be started until {response-headers-read}
  -- a response [object] cannot be retrieved until {request-sent}
  -- there is no differentiation between an unread response body and a
     partially read response body

Note: this enforcement is applied by the HTTPConnection class. The
      HTTPResponse class does not enforce this state machine, which
      implies sophisticated clients may accelerate the request/response
      pipeline. Caution should be taken, though: accelerating the states
      beyond the above pattern may imply knowledge of the server's
      connection-close behavior for certain requests. For example, it
      is impossible to tell whether the server will close the connection
      UNTIL the response headers have been read; this means that further
      requests cannot be placed into the pipeline until it is known that
      the server will NOT be closing the connection.

Logical State                  __state            __response
-------------                  -------            ----------
Idle                           _CS_IDLE           None
Request-started                _CS_REQ_STARTED    None
Request-sent                   _CS_REQ_SENT       None
Unread-response                _CS_IDLE           <response_class>
Req-started-unread-response    _CS_REQ_STARTED    <response_class>
Req-sent-unread-response       _CS_REQ_SENT       <response_class>
\"\"\"" code nil nil [1 2565])
            ("array" include nil nil [2567 2590])
            ("os" include nil nil [2591 2600])
            ("re" include nil nil [2601 2610])
            ("socket" include nil nil [2611 2624])
            ("sys" include nil nil [2625 2652])
            ("urlparse" include nil nil [2653 2682])
            ("warnings" include nil nil [2683 2698])
            ("with" code nil nil [2699 2898])
            ("try" code nil nil [2899 2993])
            ("__all__" variable nil nil [2994 3364])
            ("HTTP_PORT" variable nil nil [3366 3380])
            ("HTTPS_PORT" variable nil nil [3381 3397])
            ("_UNKNOWN" variable nil nil [3399 3419])
            ("_CS_IDLE" variable nil nil [3441 3458])
            ("_CS_REQ_STARTED" variable nil nil [3459 3494])
            ("_CS_REQ_SENT" variable nil nil [3495 3524])
            ("CONTINUE" variable nil nil [3557 3571])
            ("SWITCHING_PROTOCOLS" variable nil nil [3572 3597])
            ("PROCESSING" variable nil nil [3598 3614])
            ("OK" variable nil nil [3629 3637])
            ("CREATED" variable nil nil [3638 3651])
            ("ACCEPTED" variable nil nil [3652 3666])
            ("NON_AUTHORITATIVE_INFORMATION" variable nil nil [3667 3702])
            ("NO_CONTENT" variable nil nil [3703 3719])
            ("RESET_CONTENT" variable nil nil [3720 3739])
            ("PARTIAL_CONTENT" variable nil nil [3740 3761])
            ("MULTI_STATUS" variable nil nil [3762 3780])
            ("IM_USED" variable nil nil [3781 3794])
            ("MULTIPLE_CHOICES" variable nil nil [3810 3832])
            ("MOVED_PERMANENTLY" variable nil nil [3833 3856])
            ("FOUND" variable nil nil [3857 3868])
            ("SEE_OTHER" variable nil nil [3869 3884])
            ("NOT_MODIFIED" variable nil nil [3885 3903])
            ("USE_PROXY" variable nil nil [3904 3919])
            ("TEMPORARY_REDIRECT" variable nil nil [3920 3944])
            ("BAD_REQUEST" variable nil nil [3961 3978])
            ("UNAUTHORIZED" variable nil nil [3979 3997])
            ("PAYMENT_REQUIRED" variable nil nil [3998 4020])
            ("FORBIDDEN" variable nil nil [4021 4036])
            ("NOT_FOUND" variable nil nil [4037 4052])
            ("METHOD_NOT_ALLOWED" variable nil nil [4053 4077])
            ("NOT_ACCEPTABLE" variable nil nil [4078 4098])
            ("PROXY_AUTHENTICATION_REQUIRED" variable nil nil [4099 4134])
            ("REQUEST_TIMEOUT" variable nil nil [4135 4156])
            ("CONFLICT" variable nil nil [4157 4171])
            ("GONE" variable nil nil [4172 4182])
            ("LENGTH_REQUIRED" variable nil nil [4183 4204])
            ("PRECONDITION_FAILED" variable nil nil [4205 4230])
            ("REQUEST_ENTITY_TOO_LARGE" variable nil nil [4231 4261])
            ("REQUEST_URI_TOO_LONG" variable nil nil [4262 4288])
            ("UNSUPPORTED_MEDIA_TYPE" variable nil nil [4289 4317])
            ("REQUESTED_RANGE_NOT_SATISFIABLE" variable nil nil [4318 4355])
            ("EXPECTATION_FAILED" variable nil nil [4356 4380])
            ("UNPROCESSABLE_ENTITY" variable nil nil [4381 4407])
            ("LOCKED" variable nil nil [4408 4420])
            ("FAILED_DEPENDENCY" variable nil nil [4421 4444])
            ("UPGRADE_REQUIRED" variable nil nil [4445 4467])
            ("INTERNAL_SERVER_ERROR" variable nil nil [4484 4511])
            ("NOT_IMPLEMENTED" variable nil nil [4512 4533])
            ("BAD_GATEWAY" variable nil nil [4534 4551])
            ("SERVICE_UNAVAILABLE" variable nil nil [4552 4577])
            ("GATEWAY_TIMEOUT" variable nil nil [4578 4599])
            ("HTTP_VERSION_NOT_SUPPORTED" variable nil nil [4600 4632])
            ("INSUFFICIENT_STORAGE" variable nil nil [4633 4659])
            ("NOT_EXTENDED" variable nil nil [4660 4678])
            ("responses" variable nil nil [4725 5883])
            ("MAXAMOUNT" variable nil nil [5944 5963])
            ("_MAXLINE" variable nil nil [6012 6028])
            ("_MAXHEADERS" variable nil nil [6067 6084])
            ("_is_legal_header_name" variable nil nil [6984 7048])
            ("_is_illegal_header_value" variable nil nil [7049 7123])
            ("_METHODS_EXPECTING_BODY" variable nil nil [7242 7292])
            ("HTTPMessage" type
               (:superclasses ("mimetools.Message")
                :members 
                  ( ("addheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7352 7356])
                            ("key" variable nil (reparse-symbol function_parameters) [7358 7361])
                            ("value" variable nil (reparse-symbol function_parameters) [7363 7368]))                          
                        :documentation "Add header for field key handling repeats.")
                        (reparse-symbol indented_block_body) [7338 7622])
                    ("addcontinue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7643 7647])
                            ("key" variable nil (reparse-symbol function_parameters) [7649 7652])
                            ("more" variable nil (reparse-symbol function_parameters) [7654 7658]))                          
                        :documentation "Add more field data from a continuation line.")
                        (reparse-symbol indented_block_body) [7627 7796])
                    ("readheaders" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7817 7821]))                          
                        :documentation "Read header lines.

        Read header lines up to the entirely blank line that terminates them.
        The (normally blank) line that ends the headers is skipped, but not
        included in the returned list.  If an invalid line is found in the
        header section, it is skipped, and further lines are processed.

        The variable self.status is set to the empty string if all went well,
        otherwise it is an error message.  The variable self.headers is a
        completely uninterpreted list of lines contained in the header (so
        printing them will reproduce the header exactly as it appears in the
        file).

        If multiple header fields with the same name occur, they are combined
        according to the rules in RFC 2616 sec 4.2:

        Appending each subsequent field-value to the first, each separated
        by a comma. The order in which header fields with the same field-name
        are received is significant to the interpretation of the combined
        field value.
        ")
                        (reparse-symbol indented_block_body) [7801 11366]))                  
                :type "class")
                nil [7295 11366])
            ("HTTPResponse" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [11871 12430])
                            ("self" variable nil (reparse-symbol indented_block_body) [12438 12466])
                            ("self" variable nil (reparse-symbol indented_block_body) [12475 12495])
                            ("self" variable nil (reparse-symbol indented_block_body) [12504 12525])
                            ("self" variable nil (reparse-symbol indented_block_body) [12535 12550])
                            ("self" variable nil (reparse-symbol indented_block_body) [12607 12630])
                            ("self" variable nil (reparse-symbol indented_block_body) [12654 12676])
                            ("self" variable nil (reparse-symbol indented_block_body) [12700 12722])
                            ("self" variable nil (reparse-symbol indented_block_body) [12749 12772])
                            ("self" variable nil (reparse-symbol indented_block_body) [12816 12842])
                            ("self" variable nil (reparse-symbol indented_block_body) [12894 12916])
                            ("self" variable nil (reparse-symbol indented_block_body) [12969 12995]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11796 11800])
                            ("sock" variable nil (reparse-symbol function_parameters) [11802 11806])
                            ("debuglevel" variable nil (reparse-symbol function_parameters) [11808 11818])
                            ("strict" variable nil (reparse-symbol function_parameters) [11822 11828])
                            ("method" variable nil (reparse-symbol function_parameters) [11832 11838])
                            ("buffering" variable nil (reparse-symbol function_parameters) [11845 11854]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11783 13038])
                    ("_read_status" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13060 13064]))                          )
                        (reparse-symbol indented_block_body) [13043 14481])
                    ("begin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14496 14500]))                          )
                        (reparse-symbol indented_block_body) [14486 17425])
                    ("_check_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17447 17451]))                          )
                        (reparse-symbol indented_block_body) [17430 18496])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18511 18515]))                          )
                        (reparse-symbol indented_block_body) [18501 18604])
                    ("isclosed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18622 18626]))                          )
                        (reparse-symbol indented_block_body) [18609 19024])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19111 19115])
                            ("amt" variable nil (reparse-symbol function_parameters) [19117 19120]))                          )
                        (reparse-symbol indented_block_body) [19102 20486])
                    ("_read_chunked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20509 20513])
                            ("amt" variable nil (reparse-symbol function_parameters) [20515 20518]))                          )
                        (reparse-symbol indented_block_body) [20491 22649])
                    ("_safe_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22669 22673])
                            ("amt" variable nil (reparse-symbol function_parameters) [22675 22678]))                          
                        :documentation "Read the number of bytes requested, compensating for partial reads.

        Normally, we have a blocking socket, but a read() can be interrupted
        by a signal (resulting in a partial read).

        Note that we cannot distinguish between EOF and an interrupt when zero
        bytes have been read. IncompleteRead() will be raised in this
        situation.

        This function should be used when <amt> bytes \"should\" be present for
        reading. If the bytes are truly not available (due to EOF), then the
        IncompleteRead exception can be used to detect the problem.
        ")
                        (reparse-symbol indented_block_body) [22654 23899])
                    ("fileno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23915 23919]))                          )
                        (reparse-symbol indented_block_body) [23904 23954])
                    ("getheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23973 23977])
                            ("name" variable nil (reparse-symbol function_parameters) [23979 23983])
                            ("default" variable nil (reparse-symbol function_parameters) [23985 23992]))                          )
                        (reparse-symbol indented_block_body) [23959 24115])
                    ("getheaders" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24135 24139]))                          
                        :documentation "Return list of (header, value) tuples.")
                        (reparse-symbol indented_block_body) [24120 24293]))                  
                :type "class")
                nil [11367 24293])
            ("HTTPConnection" type
               (:members 
                  ( ("_http_vsn" variable nil (reparse-symbol indented_block_body) [24322 24336])
                    ("_http_vsn_str" variable nil (reparse-symbol indented_block_body) [24341 24367])
                    ("response_class" variable nil (reparse-symbol indented_block_body) [24373 24402])
                    ("default_port" variable nil (reparse-symbol indented_block_body) [24407 24431])
                    ("auto_open" variable nil (reparse-symbol indented_block_body) [24436 24449])
                    ("debuglevel" variable nil (reparse-symbol indented_block_body) [24454 24468])
                    ("strict" variable nil (reparse-symbol indented_block_body) [24473 24483])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [24625 24647])
                            ("self" variable nil (reparse-symbol indented_block_body) [24656 24692])
                            ("self" variable nil (reparse-symbol indented_block_body) [24701 24717])
                            ("self" variable nil (reparse-symbol indented_block_body) [24726 24743])
                            ("self" variable nil (reparse-symbol indented_block_body) [24752 24774])
                            ("self" variable nil (reparse-symbol indented_block_body) [24783 24806])
                            ("self" variable nil (reparse-symbol indented_block_body) [24815 24834])
                            ("self" variable nil (reparse-symbol indented_block_body) [24843 24867])
                            ("self" variable nil (reparse-symbol indented_block_body) [24876 24900])
                            ("self" variable nil (reparse-symbol indented_block_body) [24909 24934])
                            ("if" code nil (reparse-symbol indented_block_body) [24943 24999])
                            ("" code nil (reparse-symbol indented_block_body) [25008 25063])
                            ("self" variable nil (reparse-symbol indented_block_body) [25183 25233]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24502 24506])
                            ("host" variable nil (reparse-symbol function_parameters) [24508 24512])
                            ("port" variable nil (reparse-symbol function_parameters) [24514 24518])
                            ("strict" variable nil (reparse-symbol function_parameters) [24525 24531])
                            ("timeout" variable nil (reparse-symbol function_parameters) [24555 24562])
                            ("source_address" variable nil (reparse-symbol function_parameters) [24595 24609]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24489 25234])
                    ("set_tunnel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25254 25258])
                            ("host" variable nil (reparse-symbol function_parameters) [25260 25264])
                            ("port" variable nil (reparse-symbol function_parameters) [25266 25270])
                            ("headers" variable nil (reparse-symbol function_parameters) [25277 25284]))                          
                        :documentation " Set up host and port for HTTP CONNECT tunnelling.

        In a connection that uses HTTP Connect tunneling, the host passed to the
        constructor is used as proxy server that relays all communication to the
        endpoint passed to set_tunnel. This is done by sending a HTTP CONNECT
        request to the proxy server when the connection is established.

        This method must be called before the HTTP connection has been
        established.

        The headers argument should be a mapping of extra HTTP headers
        to send with the CONNECT request.
        ")
                        (reparse-symbol indented_block_body) [25239 26224])
                    ("_get_hostport" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26247 26251])
                            ("host" variable nil (reparse-symbol function_parameters) [26253 26257])
                            ("port" variable nil (reparse-symbol function_parameters) [26259 26263]))                          )
                        (reparse-symbol indented_block_body) [26229 26959])
                    ("set_debuglevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26983 26987])
                            ("level" variable nil (reparse-symbol function_parameters) [26989 26994]))                          )
                        (reparse-symbol indented_block_body) [26964 27029])
                    ("_tunnel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27046 27050]))                          )
                        (reparse-symbol indented_block_body) [27034 28300])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28318 28322]))                          
                        :documentation "Connect to the host and port specified in __init__.")
                        (reparse-symbol indented_block_body) [28306 28594])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28609 28613]))                          
                        :documentation "Close the connection to the HTTP server.")
                        (reparse-symbol indented_block_body) [28599 29030])
                    ("send" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29044 29048])
                            ("data" variable nil (reparse-symbol function_parameters) [29050 29054]))                          
                        :documentation "Send `data' to the server.")
                        (reparse-symbol indented_block_body) [29035 29689])
                    ("_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29706 29710])
                            ("s" variable nil (reparse-symbol function_parameters) [29712 29713]))                          
                        :documentation "Add a line of output to the current request buffer.

        Assumes that the line does *not* end with \\\\r\\\\n.
        ")
                        (reparse-symbol indented_block_body) [29694 29881])
                    ("_send_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29903 29907])
                            ("message_body" variable nil (reparse-symbol function_parameters) [29909 29921]))                          
                        :documentation "Send the currently buffered request and clear the buffer.

        Appends an extra \\\\r\\\\n to the buffer.
        A message_body may be specified, to be appended to the request.
        ")
                        (reparse-symbol indented_block_body) [29886 30742])
                    ("putrequest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30762 30766])
                            ("method" variable nil (reparse-symbol function_parameters) [30768 30774])
                            ("url" variable nil (reparse-symbol function_parameters) [30776 30779])
                            ("skip_host" variable nil (reparse-symbol function_parameters) [30781 30790])
                            ("skip_accept_encoding" variable nil (reparse-symbol function_parameters) [30794 30814]))                          
                        :documentation "Send a request to the server.

        `method' specifies an HTTP request method, e.g. 'GET'.
        `url' specifies the object being requested, e.g. '/index.html'.
        `skip_host' if True does not add automatically a 'Host:' header
        `skip_accept_encoding' if True does not add automatically an
           'Accept-Encoding:' header
        ")
                        (reparse-symbol indented_block_body) [30747 35899])
                    ("putheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35918 35922])
                            ("header" variable nil (reparse-symbol function_parameters) [35924 35930])
                            ("values" variable nil (reparse-symbol function_parameters) [35932 35939]))                          
                        :documentation "Send a request header line to the server.

        For example: h.putheader('Accept', 'text/html')
        ")
                        (reparse-symbol indented_block_body) [35904 36577])
                    ("endheaders" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36597 36601])
                            ("message_body" variable nil (reparse-symbol function_parameters) [36603 36615]))                          
                        :documentation "Indicate that the last header line has been sent to the server.

        This method sends the request to the server.  The optional
        message_body argument can be used to pass a message body
        associated with the request.  The message body will be sent in
        the same packet as the message headers if it is string, otherwise it is
        sent as a separate packet.
        ")
                        (reparse-symbol indented_block_body) [36582 37204])
                    ("request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37221 37225])
                            ("method" variable nil (reparse-symbol function_parameters) [37227 37233])
                            ("url" variable nil (reparse-symbol function_parameters) [37235 37238])
                            ("body" variable nil (reparse-symbol function_parameters) [37240 37244])
                            ("headers" variable nil (reparse-symbol function_parameters) [37251 37258]))                          
                        :documentation "Send a complete request to the server.")
                        (reparse-symbol indented_block_body) [37209 37372])
                    ("_set_content_length" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37401 37405])
                            ("body" variable nil (reparse-symbol function_parameters) [37407 37411])
                            ("method" variable nil (reparse-symbol function_parameters) [37413 37419]))                          )
                        (reparse-symbol indented_block_body) [37377 38413])
                    ("_send_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38436 38440])
                            ("method" variable nil (reparse-symbol function_parameters) [38442 38448])
                            ("url" variable nil (reparse-symbol function_parameters) [38450 38453])
                            ("body" variable nil (reparse-symbol function_parameters) [38455 38459])
                            ("headers" variable nil (reparse-symbol function_parameters) [38461 38468]))                          )
                        (reparse-symbol indented_block_body) [38418 39056])
                    ("getresponse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39077 39081])
                            ("buffering" variable nil (reparse-symbol function_parameters) [39083 39092]))                          )
                        (reparse-symbol indented_block_body) [39061 41081]))                  
                :type "class")
                nil [24295 41081])
            ("HTTP" type
               (:members 
                  ( ("\"Compatibility class with httplib.py from 1.5.\"" code nil (reparse-symbol indented_block_body) [41099 41146])
                    ("_http_vsn" variable nil (reparse-symbol indented_block_body) [41152 41166])
                    ("_http_vsn_str" variable nil (reparse-symbol indented_block_body) [41171 41197])
                    ("debuglevel" variable nil (reparse-symbol indented_block_body) [41203 41217])
                    ("_connection_class" variable nil (reparse-symbol indented_block_body) [41223 41257])
                    ("__init__" function
                       (:suite 
                          ( ("\"Provide a default host, since the superclass requires one.\"" code nil (reparse-symbol indented_block_body) [41324 41384])
                            ("if" code nil (reparse-symbol indented_block_body) [41457 41495])
                            ("self" code nil (reparse-symbol indented_block_body) [41717 41772]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41276 41280])
                            ("host" variable nil (reparse-symbol function_parameters) [41282 41286])
                            ("port" variable nil (reparse-symbol function_parameters) [41291 41295])
                            ("strict" variable nil (reparse-symbol function_parameters) [41302 41308]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41263 41773])
                    ("_setup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41789 41793])
                            ("conn" variable nil (reparse-symbol function_parameters) [41795 41799]))                          )
                        (reparse-symbol indented_block_body) [41778 42199])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42216 42220])
                            ("host" variable nil (reparse-symbol function_parameters) [42222 42226])
                            ("port" variable nil (reparse-symbol function_parameters) [42233 42237]))                          )
                        (reparse-symbol indented_block_body) [42204 42469])
                    ("getfile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42486 42490]))                          )
                        (reparse-symbol indented_block_body) [42474 42596])
                    ("getreply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42614 42618])
                            ("buffering" variable nil (reparse-symbol function_parameters) [42620 42629]))                          
                        :documentation "Compat definition since superclass does not define it.

        Returns a tuple consisting of:
        - server status code (e.g. '200' if all goes well)
        - server \"reason\" corresponding to status code
        - any RFC822 headers in the response from the server
        ")
                        (reparse-symbol indented_block_body) [42601 43891])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43906 43910]))                          )
                        (reparse-symbol indented_block_body) [43896 44254]))                  
                :type "class")
                nil [41083 44254])
            ("try" code nil nil [44255 46784])
            ("HTTPException" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [46948 46952]))                  
                :type "class")
                nil [46786 46953])
            ("NotConnected" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [46993 46997]))                  
                :type "class")
                nil [46954 46998])
            ("InvalidURL" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [47036 47040]))                  
                :type "class")
                nil [46999 47041])
            ("UnknownProtocol" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [47121 47141])
                            ("self" variable nil (reparse-symbol indented_block_body) [47150 47172]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47097 47101])
                            ("version" variable nil (reparse-symbol function_parameters) [47103 47110]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47084 47173]))                  
                :type "class")
                nil [47042 47173])
            ("UnknownTransferEncoding" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [47224 47228]))                  
                :type "class")
                nil [47174 47229])
            ("UnimplementedFileMode" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [47278 47282]))                  
                :type "class")
                nil [47230 47283])
            ("IncompleteRead" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [47377 47397])
                            ("self" variable nil (reparse-symbol indented_block_body) [47406 47428])
                            ("self" variable nil (reparse-symbol indented_block_body) [47437 47461]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47338 47342])
                            ("partial" variable nil (reparse-symbol function_parameters) [47344 47351])
                            ("expected" variable nil (reparse-symbol function_parameters) [47353 47361]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47325 47462])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47479 47483]))                          )
                        (reparse-symbol indented_block_body) [47466 47684])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47700 47704]))                          )
                        (reparse-symbol indented_block_body) [47688 47733]))                  
                :type "class")
                nil [47284 47733])
            ("ImproperConnectionState" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [47784 47788]))                  
                :type "class")
                nil [47734 47789])
            ("CannotSendRequest" type
               (:superclasses ("ImproperConnectionState")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [47844 47848]))                  
                :type "class")
                nil [47790 47849])
            ("CannotSendHeader" type
               (:superclasses ("ImproperConnectionState")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [47903 47907]))                  
                :type "class")
                nil [47850 47908])
            ("ResponseNotReady" type
               (:superclasses ("ImproperConnectionState")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [47962 47966]))                  
                :type "class")
                nil [47909 47967])
            ("BadStatusLine" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [48042 48085])
                            ("self" variable nil (reparse-symbol indented_block_body) [48093 48110])
                            ("self" variable nil (reparse-symbol indented_block_body) [48119 48135]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48021 48025])
                            ("line" variable nil (reparse-symbol function_parameters) [48027 48031]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48008 48136]))                  
                :type "class")
                nil [47968 48136])
            ("LineTooLong" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HTTPException" code nil (reparse-symbol indented_block_body) [48214 48345]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48188 48192])
                            ("line_type" variable nil (reparse-symbol function_parameters) [48194 48203]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48175 48346]))                  
                :type "class")
                nil [48137 48346])
            ("error" variable nil nil [48377 48398])
            ("LineAndFileWrapper" type
               (:documentation "A limited file-like object for HTTP/0.9 responses."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [48789 48806])
                            ("self" variable nil (reparse-symbol indented_block_body) [48815 48832])
                            ("self" variable nil (reparse-symbol indented_block_body) [48841 48864])
                            ("self" variable nil (reparse-symbol indented_block_body) [48873 48894])
                            ("self" variable nil (reparse-symbol indented_block_body) [48903 48930]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48762 48766])
                            ("line" variable nil (reparse-symbol function_parameters) [48768 48772])
                            ("file" variable nil (reparse-symbol function_parameters) [48774 48778]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48749 48931])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48952 48956])
                            ("attr" variable nil (reparse-symbol function_parameters) [48958 48962]))                          )
                        (reparse-symbol indented_block_body) [48936 49006])
                    ("_done" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49021 49025]))                          )
                        (reparse-symbol indented_block_body) [49011 49344])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49358 49362])
                            ("amt" variable nil (reparse-symbol function_parameters) [49364 49367]))                          )
                        (reparse-symbol indented_block_body) [49349 50049])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50067 50071]))                          )
                        (reparse-symbol indented_block_body) [50054 50259])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50278 50282])
                            ("size" variable nil (reparse-symbol function_parameters) [50284 50288]))                          )
                        (reparse-symbol indented_block_body) [50264 50606]))                  
                :type "class")
                nil [48400 50606]))          
      :file "httplib.py"
      :pointmax 50606
      :fsize 50605
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Various tools used by MIME-reading or MIME-writing programs.\"\"\"" code nil nil [1 67])
            ("os" include nil nil [70 79])
            ("sys" include nil nil [80 90])
            ("tempfile" include nil nil [91 106])
            ("warnings" include nil nil [107 158])
            ("with" code nil nil [159 306])
            ("warnings" include nil nil [307 336])
            ("warnpy3k" code nil nil [337 436])
            ("__all__" variable nil nil [438 534])
            ("Message" type
               (:documentation "A derived class of rfc822.Message that knows about MIME headers and
    contains some hooks for decoding encoded and multipart messages."
                :superclasses ("rfc822.Message")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("rfc822" code nil (reparse-symbol indented_block_body) [765 808])
                            ("self" variable nil (reparse-symbol indented_block_body) [817 900])
                            ("self" variable nil (reparse-symbol indented_block_body) [909 975])
                            ("self" code nil (reparse-symbol indented_block_body) [984 1000])
                            ("self" code nil (reparse-symbol indented_block_body) [1009 1026]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [732 736])
                            ("fp" variable nil (reparse-symbol function_parameters) [738 740])
                            ("seekable" variable nil (reparse-symbol function_parameters) [742 750]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [719 1027])
                    ("parsetype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1046 1050]))                          )
                        (reparse-symbol indented_block_body) [1032 1535])
                    ("parseplist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1555 1559]))                          )
                        (reparse-symbol indented_block_body) [1540 2072])
                    ("getplist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2090 2094]))                          )
                        (reparse-symbol indented_block_body) [2077 2123])
                    ("getparam" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2141 2145])
                            ("name" variable nil (reparse-symbol function_parameters) [2147 2151]))                          )
                        (reparse-symbol indented_block_body) [2128 2334])
                    ("getparamnames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2357 2361]))                          )
                        (reparse-symbol indented_block_body) [2339 2531])
                    ("getencoding" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2552 2556]))                          )
                        (reparse-symbol indented_block_body) [2536 2668])
                    ("gettype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2685 2689]))                          )
                        (reparse-symbol indented_block_body) [2673 2717])
                    ("getmaintype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2738 2742]))                          )
                        (reparse-symbol indented_block_body) [2722 2774])
                    ("getsubtype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2794 2798]))                          )
                        (reparse-symbol indented_block_body) [2779 2829]))                  
                :type "class")
                nil [536 2829])
            ("try" code nil nil [2874 2951])
            ("_counter_lock" variable nil nil [2951 2989])
            ("del" code nil nil [2990 3000])
            ("_counter" variable nil nil [3002 3014])
            ("_get_next_counter" function nil nil [3015 3174])
            ("_prefix" variable nil nil [3175 3189])
            ("choose_boundary" function (:documentation "Return a string usable as a multipart boundary.

    The string chosen is unique within a single program run, and
    incorporates the user id (if available), process id (if available),
    and current time.  So it's very unlikely the returned string appears
    in message text, but there's no guarantee.

    The boundary contains dots so you have to quote it in the header.") nil [3191 4148])
            ("decode" function
               (:documentation "Decode common content-transfer-encodings (base64, quopri, uuencode)."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [4224 4229])
                    ("output" variable nil (reparse-symbol function_parameters) [4231 4237])
                    ("encoding" variable nil (reparse-symbol function_parameters) [4239 4247]))                  )
                nil [4213 4918])
            ("encode" function
               (:documentation "Encode common content-transfer-encodings (base64, quopri, uuencode)."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [4930 4935])
                    ("output" variable nil (reparse-symbol function_parameters) [4937 4943])
                    ("encoding" variable nil (reparse-symbol function_parameters) [4945 4953]))                  )
                nil [4919 5627])
            ("uudecode_pipe" variable nil nil [5747 5866])
            ("decodetab" variable nil nil [5868 6171])
            ("encodetab" variable nil nil [6173 6494])
            ("pipeto" function (:arguments 
              ( ("input" variable nil (reparse-symbol function_parameters) [6507 6512])
                ("command" variable nil (reparse-symbol function_parameters) [6514 6521]))              ) nil [6496 6604])
            ("pipethrough" function (:arguments 
              ( ("input" variable nil (reparse-symbol function_parameters) [6621 6626])
                ("command" variable nil (reparse-symbol function_parameters) [6628 6635])
                ("output" variable nil (reparse-symbol function_parameters) [6637 6643]))              ) nil [6605 6884])
            ("copyliteral" function (:arguments 
              ( ("input" variable nil (reparse-symbol function_parameters) [6901 6906])
                ("output" variable nil (reparse-symbol function_parameters) [6908 6914]))              ) nil [6885 7016])
            ("copybinary" function (:arguments 
              ( ("input" variable nil (reparse-symbol function_parameters) [7032 7037])
                ("output" variable nil (reparse-symbol function_parameters) [7039 7045]))              ) nil [7017 7169]))          
      :file "mimetools.py"
      :pointmax 7169
      :fsize 7168
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Common operations on Posix pathnames.

Instead of importing this module directly, import os and refer to
this module as os.path.  The \"os.path\" name is an alias for this
module on Posix systems; on other systems (e.g. Mac, Windows),
os.path provides the same operations in a manner specific to that
platform, and is an alias to another module (e.g. macpath, ntpath).

Some of this can actually be useful on non-Posix systems too, e.g.
for manipulation of the pathname component of URLs.
\"\"\"" code nil nil [1 494])
            ("os" include nil nil [496 505])
            ("sys" include nil nil [506 516])
            ("stat" include nil nil [517 528])
            ("genericpath" include nil nil [529 547])
            ("warnings" include nil nil [548 563])
            ("genericpath" include nil nil [564 589])
            ("genericpath" include nil nil [590 622])
            ("__all__" variable nil nil [624 1112])
            ("curdir" variable nil nil [1174 1186])
            ("pardir" variable nil nil [1187 1200])
            ("extsep" variable nil nil [1201 1213])
            ("sep" variable nil nil [1214 1223])
            ("pathsep" variable nil nil [1224 1237])
            ("defpath" variable nil nil [1238 1264])
            ("altsep" variable nil nil [1265 1278])
            ("devnull" variable nil nil [1279 1300])
            ("normcase" function
               (:documentation "Normalize case of pathname.  Has no effect under Posix"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1580 1581]))                  )
                nil [1567 1662])
            ("isabs" function
               (:documentation "Test whether a path is absolute"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1761 1762]))                  )
                nil [1751 1836])
            ("join" function
               (:documentation "Join two or more pathname components, inserting '/' as needed.
    If any component is an absolute path, all previous path components
    will be discarded.  An empty last part will result in a path that
    ends with a separator."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1987 1988])
                    ("p" variable nil (reparse-symbol function_parameters) [1990 1992]))                  )
                nil [1978 2444])
            ("split" function
               (:documentation "Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is
    everything after the final slash.  Either part may be empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [2700 2701]))                  )
                nil [2690 2991])
            ("splitext" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [3212 3213]))              ) nil [3199 3273])
            ("splitext" variable nil nil [3273 3321])
            ("splitdrive" function
               (:documentation "Split a pathname into drive and path. On Posix, drive is always
    empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3476 3477]))                  )
                nil [3461 3582])
            ("basename" function
               (:documentation "Returns the final component of a pathname"
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3667 3668]))                  )
                nil [3654 3765])
            ("dirname" function
               (:documentation "Returns the directory component of a pathname"
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3848 3849]))                  )
                nil [3836 4037])
            ("islink" function
               (:documentation "Test whether a path is a symbolic link"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [4153 4157]))                  )
                nil [4142 4342])
            ("lexists" function
               (:documentation "Test whether a path exists.  Returns True for broken symbolic links"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [4413 4417]))                  )
                nil [4401 4588])
            ("samefile" function
               (:documentation "Test whether two pathnames reference the same actual file"
                :arguments 
                  ( ("f1" variable nil (reparse-symbol function_parameters) [4658 4660])
                    ("f2" variable nil (reparse-symbol function_parameters) [4662 4664]))                  )
                nil [4645 4805])
            ("sameopenfile" function
               (:documentation "Test whether two open file objects reference the same file"
                :arguments 
                  ( ("fp1" variable nil (reparse-symbol function_parameters) [4926 4929])
                    ("fp2" variable nil (reparse-symbol function_parameters) [4931 4934]))                  )
                nil [4909 5080])
            ("samestat" function
               (:documentation "Test whether two stat buffers reference the same file"
                :arguments 
                  ( ("s1" variable nil (reparse-symbol function_parameters) [5184 5186])
                    ("s2" variable nil (reparse-symbol function_parameters) [5188 5190]))                  )
                nil [5171 5331])
            ("ismount" function
               (:documentation "Test whether a path is a mount point"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [5449 5453]))                  )
                nil [5437 6036])
            ("walk" function
               (:documentation "Directory tree walk with callback function.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), call func(arg, dirname, fnames).
    dirname is the name of the directory, and fnames a list of the names of
    the files and subdirectories in dirname (excluding '.' and '..').  func
    may modify the fnames list in-place (e.g. via del or slice assignment),
    and walk will only recurse into the subdirectories whose names remain in
    fnames; this can be used to implement a filter, or to impose a specific
    order of visiting.  No semantics are defined for, or required of, arg,
    beyond that arg is always passed to func.  It can be used, e.g., to pass
    a filename pattern, or a mutable object designed to accumulate
    statistics.  Passing None for arg is common."
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [6434 6437])
                    ("func" variable nil (reparse-symbol function_parameters) [6439 6443])
                    ("arg" variable nil (reparse-symbol function_parameters) [6445 6448]))                  )
                nil [6425 7736])
            ("expanduser" function
               (:documentation "Expand ~ and ~user constructions.  If user or $HOME is unknown,
    do nothing."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [8227 8231]))                  )
                nil [8212 8869])
            ("_varprog" variable nil nil [9030 9045])
            ("_uvarprog" variable nil nil [9046 9062])
            ("expandvars" function
               (:documentation "Expand shell variables of form $var and ${var}.  Unknown variables
    are left unchanged."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [9079 9083]))                  )
                nil [9064 10254])
            ("normpath" function
               (:documentation "Normalize path, eliminating double slashes, etc."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [10442 10446]))                  )
                nil [10429 11397])
            ("abspath" function
               (:documentation "Return an absolute path."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [11411 11415]))                  )
                nil [11399 11648])
            ("realpath" function
               (:documentation "Return the canonical path of the specified filename, eliminating any
symbolic links encountered in the path."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [11750 11758]))                  )
                nil [11737 11952])
            ("_joinrealpath" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [12070 12074])
                ("rest" variable nil (reparse-symbol function_parameters) [12076 12080])
                ("seen" variable nil (reparse-symbol function_parameters) [12082 12086]))              ) nil [12052 13359])
            ("supports_unicode_filenames" variable nil nil [13361 13416])
            ("relpath" function
               (:documentation "Return a relative version of a path"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [13430 13434])
                    ("start" variable nil (reparse-symbol function_parameters) [13436 13441]))                  )
                nil [13418 13936]))          
      :file "posixpath.py"
      :pointmax 13936
      :fsize 13935
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax '((NAME 10556 . 10561) (IF 10582 . 10584) (ELSE 10612 . 10616)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Random variable generators.

    integers
    --------
           uniform within range

    sequences
    ---------
           pick random element
           pick random sample
           generate random permutation

    distributions on the real line:
    ------------------------------
           uniform
           triangular
           normal (Gaussian)
           lognormal
           negative exponential
           gamma
           beta
           pareto
           Weibull

    distributions on the circle (angles 0 to 2pi)
    ---------------------------------------------
           circular uniform
           von Mises

General notes on the underlying Mersenne Twister core generator:

* The period is 2**19937-1.
* It is one of the most extensively tested generators in existence.
* Without a direct way to compute N steps forward, the semantics of
  jumpahead(n) are weakened to simply jump to another distant state and rely
  on the large period to avoid overlapping sequences.
* The random() method is implemented in C, executes in a single Python step,
  and is, therefore, threadsafe.

\"\"\"" code nil nil [1 1111])
            ("__future__" include nil nil [1113 1144])
            ("warnings" include nil nil [1145 1179])
            ("types" include nil nil [1180 1264])
            ("math" include nil nil [1265 1341])
            ("math" include nil nil [1342 1413])
            ("os" include nil nil [1414 1448])
            ("binascii" include nil nil [1449 1489])
            ("hashlib" include nil nil [1490 1516])
            ("__all__" variable nil nil [1518 1902])
            ("NV_MAGICCONST" code nil nil [1904 1945])
            ("TWOPI" code nil nil [1946 1961])
            ("LOG4" variable nil nil [1962 1978])
            ("SG_MAGICCONST" code nil nil [1979 2010])
            ("BPF" variable nil nil [2011 2019])
            ("RECIP_BPF" variable nil nil [2055 2074])
            ("_random" include nil nil [2257 2271])
            ("Random" type
               (:documentation "Random number generator base class used by bound module functions.

    Used to instantiate instances of Random to get generators that don't
    share state.  Especially useful for multi-threaded programs, creating
    a different instance of Random for each thread, and using the jumpahead()
    method to ensure that the generated sequences seen by each thread don't
    overlap.

    Class Random can also be subclassed if you want to use a different basic
    generator of your own devising: in that case, override the following
    methods: random(), seed(), getstate(), setstate() and jumpahead().
    Optionally, implement a getrandbits() method so that randrange() can cover
    arbitrarily large ranges.

    "
                :superclasses ("_random.Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [3037 3048])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        \"\"\"" code nil (reparse-symbol indented_block_body) [3122 3229])
                            ("self" code nil (reparse-symbol indented_block_body) [3239 3251])
                            ("self" variable nil (reparse-symbol indented_block_body) [3260 3282]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3099 3103])
                            ("x" variable nil (reparse-symbol function_parameters) [3105 3106]))                          
                        :documentation "Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3086 3283])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3297 3301])
                            ("a" variable nil (reparse-symbol function_parameters) [3303 3304]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.
        ")
                        (reparse-symbol indented_block_body) [3288 4001])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4019 4023]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [4006 4175])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4193 4197])
                            ("state" variable nil (reparse-symbol function_parameters) [4199 4204]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [4180 5242])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5261 5265])
                            ("n" variable nil (reparse-symbol function_parameters) [5267 5268]))                          
                        :documentation "Change the internal state to one that is likely far away
        from the current state.  This method will not be in Py3.x,
        so it is better to simply reseed.
        ")
                        (reparse-symbol indented_block_body) [5247 5808])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6032 6036]))                          )
                        (reparse-symbol indented_block_body) [6015 6083])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6105 6109])
                            ("state" variable nil (reparse-symbol function_parameters) [6111 6116]))                          )
                        (reparse-symbol indented_block_body) [6088 6162])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6182 6186]))                          )
                        (reparse-symbol indented_block_body) [6167 6240])
                    ("randrange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6321 6325])
                            ("start" variable nil (reparse-symbol function_parameters) [6327 6332])
                            ("stop" variable nil (reparse-symbol function_parameters) [6334 6338])
                            ("step" variable nil (reparse-symbol function_parameters) [6345 6349])
                            ("_int" variable nil (reparse-symbol function_parameters) [6353 6357])
                            ("_maxwidth" variable nil (reparse-symbol function_parameters) [6363 6372]))                          
                        :documentation "Choose a random item from range(start, stop[, step]).

        This fixes the problem with randint() which includes the
        endpoint; in Python this is usually not what you want.

        ")
                        (reparse-symbol indented_block_body) [6307 8894])
                    ("randint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8911 8915])
                            ("a" variable nil (reparse-symbol function_parameters) [8917 8918])
                            ("b" variable nil (reparse-symbol function_parameters) [8920 8921]))                          
                        :documentation "Return random integer in range [a, b], including both end points.
        ")
                        (reparse-symbol indented_block_body) [8899 9052])
                    ("_randbelow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9072 9076])
                            ("n" variable nil (reparse-symbol function_parameters) [9078 9079])
                            ("_log" variable nil (reparse-symbol function_parameters) [9081 9085])
                            ("_int" variable nil (reparse-symbol function_parameters) [9092 9096])
                            ("_maxwidth" variable nil (reparse-symbol function_parameters) [9102 9111])
                            ("_Method" variable nil (reparse-symbol function_parameters) [9140 9147])
                            ("_BuiltinMethod" variable nil (reparse-symbol function_parameters) [9161 9175]))                          
                        :documentation "Return a random int in the range [0,n)

        Handles the case where n has more bits than returned
        by a single call to the underlying generator.
        ")
                        (reparse-symbol indented_block_body) [9057 10214])
                    ("choice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10293 10297])
                            ("seq" variable nil (reparse-symbol function_parameters) [10299 10302]))                          
                        :documentation "Choose a random element from a non-empty sequence.")
                        (reparse-symbol indented_block_body) [10282 10457])
                    ("shuffle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10474 10478])
                            ("x" variable nil (reparse-symbol function_parameters) [10480 10481])
                            ("random" variable nil (reparse-symbol function_parameters) [10483 10489]))                          
                        :documentation "x, random=random.random -> shuffle list x in place; return None.

        Optional arg random is a 0-argument function returning a random
        float in [0.0, 1.0); by default, the standard random.random.

        ")
                        (reparse-symbol indented_block_body) [10462 10998])
                    ("sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11014 11018])
                            ("population" variable nil (reparse-symbol function_parameters) [11020 11030])
                            ("k" variable nil (reparse-symbol function_parameters) [11032 11033]))                          
                        :documentation "Chooses k unique random elements from a population sequence.

        Returns a new list containing elements from the population while
        leaving the original population unchanged.  The resulting list is
        in selection order so that all sub-slices will also be valid random
        samples.  This allows raffle winners (the sample) to be partitioned
        into grand prize and second place winners (the subslices).

        Members of the population need not be hashable or unique.  If the
        population contains repeats, then each occurrence is a possible
        selection in the sample.

        To choose a sample in a range of integers, use xrange as an argument.
        This is especially fast and space efficient for sampling from a
        large population:   sample(xrange(10000000), 60)
        ")
                        (reparse-symbol indented_block_body) [11003 13833])
                    ("uniform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13988 13992])
                            ("a" variable nil (reparse-symbol function_parameters) [13994 13995])
                            ("b" variable nil (reparse-symbol function_parameters) [13997 13998]))                          )
                        (reparse-symbol indented_block_body) [13976 14125])
                    ("triangular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14202 14206])
                            ("low" variable nil (reparse-symbol function_parameters) [14208 14211])
                            ("high" variable nil (reparse-symbol function_parameters) [14217 14221])
                            ("mode" variable nil (reparse-symbol function_parameters) [14227 14231]))                          
                        :documentation "Triangular distribution.

        Continuous distribution bounded by given lower and upper limits,
        and having a given mode value in-between.

        http://en.wikipedia.org/wiki/Triangular_distribution

        ")
                        (reparse-symbol indented_block_body) [14187 14790])
                    ("normalvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14879 14883])
                            ("mu" variable nil (reparse-symbol function_parameters) [14885 14887])
                            ("sigma" variable nil (reparse-symbol function_parameters) [14889 14894]))                          
                        :documentation "Normal distribution.

        mu is the mean, and sigma is the standard deviation.

        ")
                        (reparse-symbol indented_block_body) [14861 15554])
                    ("lognormvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15647 15651])
                            ("mu" variable nil (reparse-symbol function_parameters) [15653 15655])
                            ("sigma" variable nil (reparse-symbol function_parameters) [15657 15662]))                          
                        :documentation "Log normal distribution.

        If you take the natural logarithm of this distribution, you'll get a
        normal distribution with mean mu and standard deviation sigma.
        mu can have any value, and sigma must be greater than zero.

        ")
                        (reparse-symbol indented_block_body) [15628 15982])
                    ("expovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16074 16078])
                            ("lambd" variable nil (reparse-symbol function_parameters) [16080 16085]))                          
                        :documentation "Exponential distribution.

        lambd is 1.0 divided by the desired mean.  It should be
        nonzero.  (The parameter would be called \"lambda\", but that is
        a reserved word in Python.)  Returned values range from 0 to
        positive infinity if lambd is positive, and from negative
        infinity to 0 if lambd is negative.

        ")
                        (reparse-symbol indented_block_body) [16058 16699])
                    ("vonmisesvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16793 16797])
                            ("mu" variable nil (reparse-symbol function_parameters) [16799 16801])
                            ("kappa" variable nil (reparse-symbol function_parameters) [16803 16808]))                          
                        :documentation "Circular data distribution.

        mu is the mean angle, expressed in radians between 0 and 2*pi, and
        kappa is the concentration parameter, which must be greater than or
        equal to zero.  If kappa is equal to zero, this distribution reduces
        to a uniform random angle over the range 0 to 2*pi.

        ")
                        (reparse-symbol indented_block_body) [16773 18163])
                    ("gammavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18250 18254])
                            ("alpha" variable nil (reparse-symbol function_parameters) [18256 18261])
                            ("beta" variable nil (reparse-symbol function_parameters) [18263 18267]))                          
                        :documentation "Gamma distribution.  Not the gamma function!

        Conditions on the parameters are alpha > 0 and beta > 0.

        The probability distribution function is:

                    x ** (alpha - 1) * math.exp(-x / beta)
          pdf(x) =  --------------------------------------
                      math.gamma(alpha) * beta ** alpha

        ")
                        (reparse-symbol indented_block_body) [18233 20457])
                    ("gauss" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20545 20549])
                            ("mu" variable nil (reparse-symbol function_parameters) [20551 20553])
                            ("sigma" variable nil (reparse-symbol function_parameters) [20555 20560]))                          
                        :documentation "Gaussian distribution.

        mu is the mean, and sigma is the standard deviation.  This is
        slightly faster than the normalvariate() function.

        Not thread-safe without a lock around calls.

        ")
                        (reparse-symbol indented_block_body) [20535 21871])
                    ("betavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22367 22371])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22373 22378])
                            ("beta" variable nil (reparse-symbol function_parameters) [22380 22384]))                          
                        :documentation "Beta distribution.

        Conditions on the parameters are alpha > 0 and beta > 0.
        Returned values range between 0 and 1.

        ")
                        (reparse-symbol indented_block_body) [22351 22842])
                    ("paretovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22918 22922])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22924 22929]))                          
                        :documentation "Pareto distribution.  alpha is the shape parameter.")
                        (reparse-symbol indented_block_body) [22900 23094])
                    ("weibullvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23172 23176])
                            ("alpha" variable nil (reparse-symbol function_parameters) [23178 23183])
                            ("beta" variable nil (reparse-symbol function_parameters) [23185 23189]))                          
                        :documentation "Weibull distribution.

        alpha is the scale parameter and beta is the shape parameter.

        ")
                        (reparse-symbol indented_block_body) [23153 23441]))                  
                :type "class")
                nil [2273 23441])
            ("WichmannHill" type
               (:superclasses ("Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [23534 23545])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23592 23596])
                            ("a" variable nil (reparse-symbol function_parameters) [23598 23599]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.

        If a is an int or long, a is used directly.  Distinct values between
        0 and 27814431486575L inclusive are guaranteed to yield distinct
        internal states (this guarantee is specific to the default
        Wichmann-Hill generator).
        ")
                        (reparse-symbol indented_block_body) [23583 24607])
                    ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24623 24627]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [24612 25679])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25697 25701]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [25684 25833])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25851 25855])
                            ("state" variable nil (reparse-symbol function_parameters) [25857 25862]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [25838 26244])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26263 26267])
                            ("n" variable nil (reparse-symbol function_parameters) [26269 26270]))                          
                        :documentation "Act as if n calls to random() were made, but quickly.

        n is an int, greater than or equal to 0.

        Example use:  If you have 2 threads and know that each will
        consume no more than a million random numbers, create two Random
        objects r1 and r2, then do
            r2.setstate(r1.getstate())
            r2.jumpahead(1000000)
        Then r1 and r2 will use guaranteed-disjoint segments of the full
        period.
        ")
                        (reparse-symbol indented_block_body) [26249 27012])
                    ("__whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27030 27034])
                            ("x" variable nil (reparse-symbol function_parameters) [27036 27037])
                            ("y" variable nil (reparse-symbol function_parameters) [27041 27042])
                            ("z" variable nil (reparse-symbol function_parameters) [27046 27047]))                          
                        :documentation "Set the Wichmann-Hill seed from (x, y, z).

        These must be integers in the range [0, 256).
        ")
                        (reparse-symbol indented_block_body) [27017 27816])
                    ("whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27832 27836])
                            ("a" variable nil (reparse-symbol function_parameters) [27838 27839]))                          
                        :documentation "Seed from hashable object's hash code.

        None or no argument seeds from current time.  It is not guaranteed
        that objects with distinct hash codes lead to distinct internal
        states.

        This is obsolete, provided for compatibility with the seed routine
        used prior to Python 2.1.  Use the .seed() method instead.
        ")
                        (reparse-symbol indented_block_body) [27821 28520]))                  
                :type "class")
                nil [23501 28520])
            ("SystemRandom" type
               (:documentation "Alternate random number generator using sources provided
    by the operating system (such as /dev/urandom on Unix or
    CryptGenRandom on Windows).

     Not available on all systems (see os.urandom() for details).
    "
                :superclasses ("Random")
                :members 
                  ( ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28868 28872]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [28857 29007])
                    ("getrandbits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29028 29032])
                            ("k" variable nil (reparse-symbol function_parameters) [29034 29035]))                          
                        :documentation "getrandbits(k) -> x.  Generates a long int with k random bits.")
                        (reparse-symbol indented_block_body) [29012 29487])
                    ("_stub" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29502 29506])
                            ("args" variable nil (reparse-symbol function_parameters) [29508 29513])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29515 29521]))                          )
                        (reparse-symbol indented_block_body) [29492 29615])
                    ("seed" variable nil (reparse-symbol indented_block_body) [29619 29643])
                    ("_notimplemented" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29669 29673])
                            ("args" variable nil (reparse-symbol function_parameters) [29675 29680])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29682 29688]))                          )
                        (reparse-symbol indented_block_body) [29649 29847])
                    ("getstate" variable nil (reparse-symbol indented_block_body) [29851 29888]))                  
                :type "class")
                nil [28592 29889])
            ("_test_generator" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [29969 29970])
                ("func" variable nil (reparse-symbol function_parameters) [29972 29976])
                ("args" variable nil (reparse-symbol function_parameters) [29978 29982]))              ) nil [29949 30503])
            ("_test" function (:arguments 
              ( ("N" variable nil (reparse-symbol function_parameters) [30515 30516]))              ) nil [30505 31303])
            ("_inst" variable nil nil [31635 31651])
            ("seed" variable nil nil [31652 31669])
            ("random" variable nil nil [31670 31691])
            ("uniform" variable nil nil [31692 31715])
            ("triangular" variable nil nil [31716 31745])
            ("randint" variable nil nil [31746 31769])
            ("choice" variable nil nil [31770 31791])
            ("randrange" variable nil nil [31792 31819])
            ("sample" variable nil nil [31820 31841])
            ("shuffle" variable nil nil [31842 31865])
            ("normalvariate" variable nil nil [31866 31901])
            ("lognormvariate" variable nil nil [31902 31939])
            ("expovariate" variable nil nil [31940 31971])
            ("vonmisesvariate" variable nil nil [31972 32011])
            ("gammavariate" variable nil nil [32012 32045])
            ("gauss" variable nil nil [32046 32065])
            ("betavariate" variable nil nil [32066 32097])
            ("paretovariate" variable nil nil [32098 32133])
            ("weibullvariate" variable nil nil [32134 32171])
            ("getstate" variable nil nil [32172 32197])
            ("setstate" variable nil nil [32198 32223])
            ("jumpahead" variable nil nil [32224 32251])
            ("getrandbits" variable nil nil [32252 32283])
            ("if" code nil nil [32285 32324]))          
      :file "random.py"
      :pointmax 32324
      :fsize 32323
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax '((NAME 14525 . 14526) (IF 14533 . 14535) (ELSE 14549 . 14553)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"\\
This module provides socket operations and some related functions.
On Unix, it supports IP (Internet Protocol) and Unix domain sockets.
On other systems, it only supports IP. Functions specific for a
socket are available as methods of the socket object.

Functions:

socket() -- create a new socket object
socketpair() -- create a pair of new socket objects [*]
fromfd() -- create a socket object from an open file descriptor [*]
gethostname() -- return the current hostname
gethostbyname() -- map a hostname to its IP number
gethostbyaddr() -- map an IP number or hostname to DNS info
getservbyname() -- map a service name and a protocol name to a port number
getprotobyname() -- map a protocol name (e.g. 'tcp') to a number
ntohs(), ntohl() -- convert 16, 32 bit int from network to host byte order
htons(), htonl() -- convert 16, 32 bit int from host to network byte order
inet_aton() -- convert IP addr string (123.45.67.89) to 32-bit packed format
inet_ntoa() -- convert 32-bit packed format IP to string (123.45.67.89)
ssl() -- secure socket layer support (only available if configured)
socket.getdefaulttimeout() -- get the default timeout value
socket.setdefaulttimeout() -- set the default timeout value
create_connection() -- connects to an address, with an optional timeout and
                       optional source address.

 [*] not available on all platforms!

Special objects:

SocketType -- type object for socket objects
error -- exception raised for I/O errors
has_ipv6 -- boolean value indicating if IPv6 is supported

Integer constants:

AF_INET, AF_UNIX -- socket domains (first argument to socket() call)
SOCK_STREAM, SOCK_DGRAM, SOCK_RAW -- socket types (second argument)

Many other constants may be defined; these may be used in calls to
the setsockopt() and getsockopt() methods.
\"\"\"" code nil nil [94 1909])
            ("_socket" include nil nil [1911 1925])
            ("_socket" include nil nil [1926 1947])
            ("functools" include nil nil [1948 1977])
            ("types" include nil nil [1978 2006])
            ("try" code nil nil [2008 3054])
            ("warnings" include nil nil [3055 3079])
            ("sys" include nil nil [3055 3079])
            ("os" include nil nil [3055 3079])
            ("try" code nil nil [3081 3175])
            ("try" code nil nil [3176 3235])
            ("EBADF" variable nil nil [3235 3269])
            ("EINTR" variable nil nil [3270 3304])
            ("__all__" variable nil nil [3306 3348])
            ("__all__" code nil nil [3349 3394])
            ("_realsocket" variable nil nil [3397 3417])
            ("if" code nil nil [3437 4333])
            ("getfqdn" function
               (:documentation "Get fully qualified domain name from name.

    An empty argument is interpreted as meaning the local host.

    First the hostname returned by gethostbyaddr() is checked, then
    possibly existing aliases. In case no FQDN is available, hostname
    from gethostname() is returned.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4348 4352]))                  )
                nil [4336 5027])
            ("_socketmethods" variable nil nil [5029 5240])
            ("if" code nil nil [5242 5311])
            ("if" code nil nil [5312 5395])
            ("_delegate_methods" variable nil nil [5506 5615])
            ("_closedsocket" type
               (:superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [5650 5664])
                    ("_dummy" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [5680 5685]))                      ) (reparse-symbol indented_block_body) [5669 5738])
                    ("send" variable nil (reparse-symbol indented_block_body) [5801 5869])
                    ("__getattr__" variable nil (reparse-symbol indented_block_body) [5874 5894]))                  
                :type "class")
                nil [5617 5895])
            ("_socketobject" type
               (:superclasses ("object")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [6135 6164])
                    ("__slots__" code nil (reparse-symbol indented_block_body) [6170 6232])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [6321 6392])
                            ("self" variable nil (reparse-symbol indented_block_body) [6400 6418])
                            ("for" code nil (reparse-symbol indented_block_body) [6427 6518]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6251 6255])
                            ("family" variable nil (reparse-symbol function_parameters) [6257 6263])
                            ("type" variable nil (reparse-symbol function_parameters) [6273 6277])
                            ("proto" variable nil (reparse-symbol function_parameters) [6291 6296])
                            ("_sock" variable nil (reparse-symbol function_parameters) [6300 6305]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6238 6518])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6533 6537])
                            ("_closedsocket" variable nil (reparse-symbol function_parameters) [6539 6552])
                            ("_delegate_methods" variable nil (reparse-symbol function_parameters) [6582 6599])
                            ("setattr" variable nil (reparse-symbol function_parameters) [6619 6626]))                          )
                        (reparse-symbol indented_block_body) [6523 6867])
                    ("close" variable nil (reparse-symbol indented_block_body) [6871 6912])
                    ("accept" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6929 6933]))                          )
                        (reparse-symbol indented_block_body) [6918 7024])
                    ("accept" variable nil (reparse-symbol indented_block_body) [7028 7071])
                    ("dup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7085 7089]))                          
                        :documentation "dup() -> socket object

        Return a new socket object connected to the same system resource.")
                        (reparse-symbol indented_block_body) [7077 7251])
                    ("makefile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7269 7273])
                            ("mode" variable nil (reparse-symbol function_parameters) [7275 7279])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [7285 7292]))                          
                        :documentation "makefile([mode[, bufsize]]) -> file object

        Return a regular file object corresponding to the socket.  The mode
        and bufsize arguments are as for the built-in open() function.")
                        (reparse-symbol indented_block_body) [7256 7557])
                    ("family" variable nil (reparse-symbol indented_block_body) [7562 7636])
                    ("type" variable nil (reparse-symbol indented_block_body) [7641 7709])
                    ("proto" variable nil (reparse-symbol indented_block_body) [7714 7788]))                  
                :type "class")
                nil [6101 7789])
            ("meth" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [7799 7803])
                ("self" variable nil (reparse-symbol function_parameters) [7804 7808])
                ("args" variable nil (reparse-symbol function_parameters) [7809 7814]))              ) nil [7790 7860])
            ("for" code nil nil [7861 8053])
            ("socket" variable nil nil [8054 8089])
            ("_fileobject" type
               (:documentation "Faux file object attached to a socket object."
                :superclasses ("object")
                :members 
                  ( ("default_bufsize" variable nil (reparse-symbol indented_block_body) [8179 8201])
                    ("name" variable nil (reparse-symbol indented_block_body) [8206 8223])
                    ("__slots__" variable nil (reparse-symbol indented_block_body) [8229 8436])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8512 8529])
                            ("self" variable nil (reparse-symbol indented_block_body) [8538 8554])
                            ("if" code nil (reparse-symbol indented_block_body) [8599 8658])
                            ("self" variable nil (reparse-symbol indented_block_body) [8666 8688])
                            ("self" variable nil (reparse-symbol indented_block_body) [8697 8719])
                            ("if" code nil (reparse-symbol indented_block_body) [8946 9122])
                            ("self" variable nil (reparse-symbol indented_block_body) [9130 9154])
                            ("self" variable nil (reparse-symbol indented_block_body) [9443 9466])
                            ("self" variable nil (reparse-symbol indented_block_body) [9475 9490])
                            ("self" variable nil (reparse-symbol indented_block_body) [9519 9537])
                            ("self" variable nil (reparse-symbol indented_block_body) [9546 9565]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8455 8459])
                            ("sock" variable nil (reparse-symbol function_parameters) [8461 8465])
                            ("mode" variable nil (reparse-symbol function_parameters) [8467 8471])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [8478 8485])
                            ("close" variable nil (reparse-symbol function_parameters) [8490 8495]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8442 9566])
                    ("_getclosed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9586 9590]))                          )
                        (reparse-symbol indented_block_body) [9571 9627])
                    ("closed" variable nil (reparse-symbol indented_block_body) [9631 9694])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9710 9714]))                          )
                        (reparse-symbol indented_block_body) [9700 9896])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9913 9917]))                          )
                        (reparse-symbol indented_block_body) [9901 10050])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10065 10069]))                          )
                        (reparse-symbol indented_block_body) [10055 10828])
                    ("fileno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10844 10848]))                          )
                        (reparse-symbol indented_block_body) [10833 10886])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10901 10905])
                            ("data" variable nil (reparse-symbol function_parameters) [10907 10911]))                          )
                        (reparse-symbol indented_block_body) [10891 11283])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11303 11307])
                            ("list" variable nil (reparse-symbol function_parameters) [11309 11313]))                          )
                        (reparse-symbol indented_block_body) [11288 11664])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11678 11682])
                            ("size" variable nil (reparse-symbol function_parameters) [11684 11688]))                          )
                        (reparse-symbol indented_block_body) [11669 14636])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14654 14658])
                            ("size" variable nil (reparse-symbol function_parameters) [14660 14664]))                          )
                        (reparse-symbol indented_block_body) [14641 18659])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18678 18682])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [18684 18692]))                          )
                        (reparse-symbol indented_block_body) [18664 18985])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19029 19033]))                          )
                        (reparse-symbol indented_block_body) [19016 19056])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19070 19074]))                          )
                        (reparse-symbol indented_block_body) [19061 19181]))                  
                :type "class")
                nil [8091 19181])
            ("_GLOBAL_DEFAULT_TIMEOUT" variable nil nil [19182 19216])
            ("create_connection" function
               (:documentation "Connect to *address* and return the socket object.

    Convenience function.  Connect to *address* (a 2-tuple ``(host,
    port)``) and return the socket object.  Passing the optional
    *timeout* parameter will set the timeout on the socket instance
    before attempting to connect.  If no *timeout* is supplied, the
    global default timeout setting returned by :func:`getdefaulttimeout`
    is used.  If *source_address* is set it must be a tuple of (host, port)
    for the socket to bind as a source address before making the connection.
    A host of '' or port 0 tells the OS to use the default.
    "
                :arguments 
                  ( ("address" variable nil (reparse-symbol function_parameters) [19240 19247])
                    ("timeout" variable nil (reparse-symbol function_parameters) [19249 19256])
                    ("source_address" variable nil (reparse-symbol function_parameters) [19304 19318]))                  )
                nil [19218 20616]))          
      :file "socket.py"
      :pointmax 20616
      :fsize 20615
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax '((INDENT_BLOCK 20424 . 20506) (NEWLINE 20423 . 20424) (COLON 20422 . 20423) (TRY 20122 . 20125) (AS 20418 . 20420)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Parse (absolute and relative) URLs.

urlparse module is based upon the following RFC specifications.

RFC 3986 (STD66): \"Uniform Resource Identifiers\" by T. Berners-Lee, R. Fielding
and L.  Masinter, January 2005.

RFC 2732 : \"Format for Literal IPv6 Addresses in URL's by R.Hinden, B.Carpenter
and L.Masinter, December 1999.

RFC 2396:  \"Uniform Resource Identifiers (URI)\": Generic Syntax by T.
Berners-Lee, R. Fielding, and L. Masinter, August 1998.

RFC 2368: \"The mailto URL scheme\", by P.Hoffman , L Masinter, J. Zwinski, July 1998.

RFC 1808: \"Relative Uniform Resource Locators\", by R. Fielding, UC Irvine, June
1995.

RFC 1738: \"Uniform Resource Locators (URL)\" by T. Berners-Lee, L. Masinter, M.
McCahill, December 1994

RFC 3986 is considered the current standard and any future changes to
urlparse module should conform with it.  The urlparse module is
currently not entirely compliant with this RFC due to defacto
scenarios for parsing, and for backward compatibility purposes, some
parsing quirks from older RFCs are retained. The testcases in
test_urlparse.py provides a good indicator of parsing behavior.

\"\"\"" code nil nil [1 1130])
            ("re" include nil nil [1132 1141])
            ("__all__" variable nil nil [1143 1265])
            ("uses_relative" variable nil nil [1325 1533])
            ("uses_netloc" variable nil nil [1534 1785])
            ("uses_params" variable nil nil [1786 1948])
            ("non_hierarchical" variable nil nil [2094 2218])
            ("uses_query" variable nil nil [2219 2341])
            ("uses_fragment" variable nil nil [2342 2499])
            ("scheme_chars" variable nil nil [2536 2677])
            ("MAX_CACHE_SIZE" variable nil nil [2679 2698])
            ("_parse_cache" variable nil nil [2699 2716])
            ("clear_cache" function (:documentation "Clear the parse cache.") nil [2718 2795])
            ("ResultMixin" type
               (:documentation "Shared methods for the parsed result objects."
                :superclasses ("object")
                :members 
                  ( ("username" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2912 2916]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2885 3155])
                    ("password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3187 3191]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3160 3398])
                    ("hostname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3430 3434]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3403 3752])
                    ("port" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3780 3784]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3757 4099]))                  
                :type "class")
                nil [2797 4099])
            ("collections" include nil nil [4100 4134])
            ("SplitResult" type
               (:superclasses ("ResultMixin")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4237 4251])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4268 4272]))                          )
                        (reparse-symbol indented_block_body) [4257 4307]))                  
                :type "class")
                nil [4136 4307])
            ("ParseResult" type
               (:superclasses ("ResultMixin")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4417 4431])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4448 4452]))                          )
                        (reparse-symbol indented_block_body) [4437 4487]))                  
                :type "class")
                nil [4309 4487])
            ("urlparse" function
               (:documentation "Parse a URL into 6 components:
    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>
    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [4502 4505])
                    ("scheme" variable nil (reparse-symbol function_parameters) [4507 4513])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [4518 4533]))                  )
                nil [4489 5127])
            ("_splitparams" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [5145 5148]))              ) nil [5128 5324])
            ("_splitnetloc" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [5342 5345])
                ("start" variable nil (reparse-symbol function_parameters) [5347 5352]))              ) nil [5325 5773])
            ("urlsplit" function
               (:documentation "Parse a URL into 5 components:
    <scheme>://<netloc>/<path>?<query>#<fragment>
    Return a 5-tuple: (scheme, netloc, path, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [5787 5790])
                    ("scheme" variable nil (reparse-symbol function_parameters) [5792 5798])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [5803 5818]))                  )
                nil [5774 8010])
            ("urlunparse" function
               (:documentation "Put a parsed URL back together again.  This may result in a
    slightly different, but equivalent URL, if the URL that was parsed
    originally had redundant delimiters, e.g. a ? with an empty query
    (the draft states that these are equivalent)."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [8026 8030]))                  )
                nil [8011 8465])
            ("urlunsplit" function
               (:documentation "Combine the elements of a tuple as returned by urlsplit() into a
    complete URL as a string. The data argument can be any five-item iterable.
    This may result in a slightly different, but equivalent URL, if the URL that
    was parsed originally had unnecessary delimiters (for example, a ? with an
    empty query; the RFC states that these are equivalent)."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [8481 8485]))                  )
                nil [8466 9237])
            ("urljoin" function
               (:documentation "Join a base URL and a possibly relative URL to form an absolute
    interpretation of the latter."
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [9250 9254])
                    ("url" variable nil (reparse-symbol function_parameters) [9256 9259])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [9261 9276]))                  )
                nil [9238 11040])
            ("urldefrag" function
               (:documentation "Removes any existing fragment from URL.

    Returns a tuple of the defragmented URL and the fragment.  If
    the URL contained no fragments, the second element is the
    empty string.
    "
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [11055 11058]))                  )
                nil [11041 11436])
            ("try" code nil nil [11437 11581])
            ("_hexdig" variable nil nil [11861 11895])
            ("_hextochr" variable nil nil [11896 11988])
            ("_asciire" variable nil nil [11989 12028])
            ("unquote" function
               (:documentation "unquote('abc%20def') -> 'abc def'."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12042 12043]))                  )
                nil [12030 12735])
            ("parse_qs" function
               (:documentation "Parse a query given as a string argument.

        Arguments:

        qs: percent-encoded query string to be parsed

        keep_blank_values: flag indicating whether blank values in
            percent-encoded queries should be treated as blank strings.
            A true value indicates that blanks should be retained as
            blank strings.  The default false value indicates that
            blank values are to be ignored and treated as if they were
            not included.

        strict_parsing: flag indicating what to do with parsing errors.
            If false (the default), errors are silently ignored.
            If true, errors raise a ValueError exception.
    "
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [12749 12751])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [12753 12770])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [12774 12788]))                  )
                nil [12736 13706])
            ("parse_qsl" function
               (:documentation "Parse a query given as a string argument.

    Arguments:

    qs: percent-encoded query string to be parsed

    keep_blank_values: flag indicating whether blank values in
        percent-encoded queries should be treated as blank strings.  A
        true value indicates that blanks should be retained as blank
        strings.  The default false value indicates that blank values
        are to be ignored and treated as if they were  not included.

    strict_parsing: flag indicating what to do with parsing errors. If
        false (the default), errors are silently ignored. If true,
        errors raise a ValueError exception.

    Returns a list, as G-d intended.
    "
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [13721 13723])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [13725 13742])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [13746 13760]))                  )
                nil [13707 15165]))          
      :file "urlparse.py"
      :pointmax 15165
      :fsize 15164
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax '((COMMA 4396 . 4397) (NAME 4327 . 4337) (PAREN_BLOCK 4337 . 4396) (COMMA 4216 . 4217) (NAME 4154 . 4164) (PAREN_BLOCK 4164 . 4216)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Bisection algorithms.\"\"\"" code nil nil [1 28])
            ("insort_right" function
               (:documentation "Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the right of the rightmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [47 48])
                    ("x" variable nil (reparse-symbol function_parameters) [50 51])
                    ("lo" variable nil (reparse-symbol function_parameters) [53 55])
                    ("hi" variable nil (reparse-symbol function_parameters) [59 61]))                  )
                nil [30 547])
            ("insort" variable nil nil [548 569])
            ("bisect_right" function
               (:documentation "Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e <= x, and all e in
    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will
    insert just after the rightmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [615 616])
                    ("x" variable nil (reparse-symbol function_parameters) [618 619])
                    ("lo" variable nil (reparse-symbol function_parameters) [621 623])
                    ("hi" variable nil (reparse-symbol function_parameters) [627 629]))                  )
                nil [598 1254])
            ("bisect" variable nil nil [1255 1276])
            ("insort_left" function
               (:documentation "Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the left of the leftmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1321 1322])
                    ("x" variable nil (reparse-symbol function_parameters) [1324 1325])
                    ("lo" variable nil (reparse-symbol function_parameters) [1327 1329])
                    ("hi" variable nil (reparse-symbol function_parameters) [1333 1335]))                  )
                nil [1305 1819])
            ("bisect_left" function
               (:documentation "Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e < x, and all e in
    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will
    insert just before the leftmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1837 1838])
                    ("x" variable nil (reparse-symbol function_parameters) [1840 1841])
                    ("lo" variable nil (reparse-symbol function_parameters) [1843 1845])
                    ("hi" variable nil (reparse-symbol function_parameters) [1849 1851]))                  )
                nil [1821 2476])
            ("try" code nil nil [2536 2596]))          
      :file "bisect.py"
      :pointmax 2596
      :fsize 2595
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Open an arbitrary URL.

See the following document for more info on URLs:
\"Names and Addresses, URIs, URLs, URNs, URCs\", at
http://www.w3.org/pub/WWW/Addressing/Overview.html

See also the HTTP spec (from which the error codes are derived):
\"HTTP - Hypertext Transfer Protocol\", at
http://www.w3.org/pub/WWW/Protocols/

Related standards and specs:
- RFC1808: the \"relative URL\" spec. (authoritative status)
- RFC1738 - the \"URL standard\". (authoritative status)
- RFC1630 - the \"URI spec\". (informational status)

The object returned by URLopener().open(file) will differ per
protocol.  All you know is that is has methods read(), readline(),
readlines(), fileno(), close() and info().  The read*(), fileno()
and close() methods work like those of open files.
The info() method returns a mimetools.Message object which can be
used to query various info about the object, if available.
(mimetools.Message objects are queried with the getheader() method.)
\"\"\"" code nil nil [1 962])
            ("string" include nil nil [964 977])
            ("socket" include nil nil [978 991])
            ("os" include nil nil [992 1001])
            ("time" include nil nil [1002 1013])
            ("sys" include nil nil [1014 1024])
            ("base64" include nil nil [1025 1038])
            ("re" include nil nil [1039 1048])
            ("urlparse" include nil nil [1050 1090])
            ("__all__" variable nil nil [1092 1542])
            ("__version__" variable nil nil [1544 1564])
            ("MAXFTPCACHE" variable nil nil [1614 1630])
            ("if" code nil nil [1707 2280])
            ("_urlopener" variable nil nil [2544 2561])
            ("urlopen" function
               (:documentation "Create a file-like object for the specified URL to read from."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [2574 2577])
                    ("data" variable nil (reparse-symbol function_parameters) [2579 2583])
                    ("proxies" variable nil (reparse-symbol function_parameters) [2590 2597])
                    ("context" variable nil (reparse-symbol function_parameters) [2604 2611]))                  )
                nil [2562 3215])
            ("urlretrieve" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [3231 3234])
                ("filename" variable nil (reparse-symbol function_parameters) [3236 3244])
                ("reporthook" variable nil (reparse-symbol function_parameters) [3251 3261])
                ("data" variable nil (reparse-symbol function_parameters) [3268 3272])
                ("context" variable nil (reparse-symbol function_parameters) [3279 3286]))              ) nil [3215 3563])
            ("urlcleanup" function nil nil [3563 3676])
            ("try" code nil nil [3693 3770])
            ("ContentTooShortError" type
               (:superclasses ("IOError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("IOError" code nil (reparse-symbol indented_block_body) [3928 3959])
                            ("self" variable nil (reparse-symbol indented_block_body) [3968 3990]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3895 3899])
                            ("message" variable nil (reparse-symbol function_parameters) [3901 3908])
                            ("content" variable nil (reparse-symbol function_parameters) [3910 3917]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3882 3991]))                  
                :type "class")
                nil [3841 3991])
            ("ftpcache" variable nil nil [3992 4005])
            ("URLopener" type
               (:documentation "Class to open URLs.
    This is a class rather than just a subroutine because we may need
    more than one set of global protocol-specific options.
    Note -- this is a base class for those who don't want the
    automatic handling of errors type 302 (relocated) and 401
    (authorization needed)."
                :members 
                  ( ("__tempfiles" variable nil (reparse-symbol indented_block_body) [4339 4357])
                    ("version" code nil (reparse-symbol indented_block_body) [4363 4405])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [4493 4548])
                            ("assert" code nil (reparse-symbol indented_block_body) [4556 4619])
                            ("self" variable nil (reparse-symbol indented_block_body) [4628 4650])
                            ("self" variable nil (reparse-symbol indented_block_body) [4659 4695])
                            ("self" variable nil (reparse-symbol indented_block_body) [4704 4742])
                            ("self" variable nil (reparse-symbol indented_block_body) [4751 4773])
                            ("self" variable nil (reparse-symbol indented_block_body) [4782 4849])
                            ("self" variable nil (reparse-symbol indented_block_body) [4858 4879])
                            ("self" variable nil (reparse-symbol indented_block_body) [4888 4913])
                            ("self" variable nil (reparse-symbol indented_block_body) [4938 4959])
                            ("self" variable nil (reparse-symbol indented_block_body) [5280 5304]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4442 4446])
                            ("proxies" variable nil (reparse-symbol function_parameters) [4448 4455])
                            ("context" variable nil (reparse-symbol function_parameters) [4462 4469])
                            ("x509" variable nil (reparse-symbol function_parameters) [4476 4482]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4429 5305])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5541 5545]))                          )
                        (reparse-symbol indented_block_body) [5529 5569])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5584 5588]))                          )
                        (reparse-symbol indented_block_body) [5574 5614])
                    ("cleanup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5631 5635]))                          )
                        (reparse-symbol indented_block_body) [5619 6083])
                    ("addheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6102 6106])
                            ("args" variable nil (reparse-symbol function_parameters) [6108 6113]))                          
                        :documentation "Add a header to be used by the HTTP interface only
        e.g. u.addheader('Accept', 'sound/basic')")
                        (reparse-symbol indented_block_body) [6088 6268])
                    ("open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6307 6311])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [6313 6320])
                            ("data" variable nil (reparse-symbol function_parameters) [6322 6326]))                          
                        :documentation "Use URLopener().open(file) instead of open(file, 'r').")
                        (reparse-symbol indented_block_body) [6298 7760])
                    ("open_unknown" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7782 7786])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [7788 7795])
                            ("data" variable nil (reparse-symbol function_parameters) [7797 7801]))                          
                        :documentation "Overridable interface to open unknown URL type.")
                        (reparse-symbol indented_block_body) [7765 7973])
                    ("open_unknown_proxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8001 8005])
                            ("proxy" variable nil (reparse-symbol function_parameters) [8007 8012])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [8014 8021])
                            ("data" variable nil (reparse-symbol function_parameters) [8023 8027]))                          
                        :documentation "Overridable interface to open unknown URL type.")
                        (reparse-symbol indented_block_body) [7978 8211])
                    ("retrieve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8254 8258])
                            ("url" variable nil (reparse-symbol function_parameters) [8260 8263])
                            ("filename" variable nil (reparse-symbol function_parameters) [8265 8273])
                            ("reporthook" variable nil (reparse-symbol function_parameters) [8280 8290])
                            ("data" variable nil (reparse-symbol function_parameters) [8297 8301]))                          
                        :documentation "retrieve(url) returns (filename, headers) for a local object
        or (tempfilename, headers) for a remote object.")
                        (reparse-symbol indented_block_body) [8241 10678])
                    ("open_http" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10769 10773])
                            ("url" variable nil (reparse-symbol function_parameters) [10775 10778])
                            ("data" variable nil (reparse-symbol function_parameters) [10780 10784]))                          
                        :documentation "Use HTTP protocol.")
                        (reparse-symbol indented_block_body) [10755 13677])
                    ("http_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13697 13701])
                            ("url" variable nil (reparse-symbol function_parameters) [13703 13706])
                            ("fp" variable nil (reparse-symbol function_parameters) [13708 13710])
                            ("errcode" variable nil (reparse-symbol function_parameters) [13712 13719])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [13721 13727])
                            ("headers" variable nil (reparse-symbol function_parameters) [13729 13736])
                            ("data" variable nil (reparse-symbol function_parameters) [13738 13742]))                          
                        :documentation "Handle http errors.
        Derived class can override this, or provide specific handlers
        named http_error_DDD where DDD is the 3-digit error code.")
                        (reparse-symbol indented_block_body) [13682 14399])
                    ("http_error_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14427 14431])
                            ("url" variable nil (reparse-symbol function_parameters) [14433 14436])
                            ("fp" variable nil (reparse-symbol function_parameters) [14438 14440])
                            ("errcode" variable nil (reparse-symbol function_parameters) [14442 14449])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [14451 14457])
                            ("headers" variable nil (reparse-symbol function_parameters) [14459 14466]))                          
                        :documentation "Default error handler: close the connection and raise IOError.")
                        (reparse-symbol indented_block_body) [14404 14629])
                    ("if" code nil (reparse-symbol indented_block_body) [14634 17955])
                    ("open_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17974 17978])
                            ("url" variable nil (reparse-symbol function_parameters) [17980 17983]))                          
                        :documentation "Use local file or FTP depending on form of URL.")
                        (reparse-symbol indented_block_body) [17960 18371])
                    ("open_local_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18396 18400])
                            ("url" variable nil (reparse-symbol function_parameters) [18402 18405]))                          
                        :documentation "Use local file.")
                        (reparse-symbol indented_block_body) [18376 19911])
                    ("open_ftp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19929 19933])
                            ("url" variable nil (reparse-symbol function_parameters) [19935 19938]))                          
                        :documentation "Use FTP protocol.")
                        (reparse-symbol indented_block_body) [19916 22374])
                    ("open_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22393 22397])
                            ("url" variable nil (reparse-symbol function_parameters) [22399 22402])
                            ("data" variable nil (reparse-symbol function_parameters) [22404 22408]))                          
                        :documentation "Use \"data\" URL.")
                        (reparse-symbol indented_block_body) [22379 24040]))                  
                :type "class")
                nil [4006 24040])
            ("FancyURLopener" type
               (:documentation "Derived class with handlers for errors we can handle (perhaps)."
                :superclasses ("URLopener")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("URLopener" code nil (reparse-symbol indented_block_body) [24199 24240])
                            ("self" variable nil (reparse-symbol indented_block_body) [24249 24269])
                            ("self" variable nil (reparse-symbol indented_block_body) [24278 24292])
                            ("self" variable nil (reparse-symbol indented_block_body) [24301 24319]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24167 24171])
                            ("args" variable nil (reparse-symbol function_parameters) [24173 24178])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [24180 24188]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24154 24320])
                    ("http_error_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24348 24352])
                            ("url" variable nil (reparse-symbol function_parameters) [24354 24357])
                            ("fp" variable nil (reparse-symbol function_parameters) [24359 24361])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24363 24370])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24372 24378])
                            ("headers" variable nil (reparse-symbol function_parameters) [24380 24387]))                          
                        :documentation "Default error handling -- don't raise an exception.")
                        (reparse-symbol indented_block_body) [24325 24519])
                    ("http_error_302" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24543 24547])
                            ("url" variable nil (reparse-symbol function_parameters) [24549 24552])
                            ("fp" variable nil (reparse-symbol function_parameters) [24554 24556])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24558 24565])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24567 24573])
                            ("headers" variable nil (reparse-symbol function_parameters) [24575 24582])
                            ("data" variable nil (reparse-symbol function_parameters) [24584 24588]))                          
                        :documentation "Error 302 -- relocated (temporarily).")
                        (reparse-symbol indented_block_body) [24524 25270])
                    ("redirect_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25297 25301])
                            ("url" variable nil (reparse-symbol function_parameters) [25303 25306])
                            ("fp" variable nil (reparse-symbol function_parameters) [25308 25310])
                            ("errcode" variable nil (reparse-symbol function_parameters) [25312 25319])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [25321 25327])
                            ("headers" variable nil (reparse-symbol function_parameters) [25329 25336])
                            ("data" variable nil (reparse-symbol function_parameters) [25338 25342]))                          )
                        (reparse-symbol indented_block_body) [25275 26214])
                    ("http_error_301" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26238 26242])
                            ("url" variable nil (reparse-symbol function_parameters) [26244 26247])
                            ("fp" variable nil (reparse-symbol function_parameters) [26249 26251])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26253 26260])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26262 26268])
                            ("headers" variable nil (reparse-symbol function_parameters) [26270 26277])
                            ("data" variable nil (reparse-symbol function_parameters) [26279 26283]))                          
                        :documentation "Error 301 -- also relocated (permanently).")
                        (reparse-symbol indented_block_body) [26219 26424])
                    ("http_error_303" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26448 26452])
                            ("url" variable nil (reparse-symbol function_parameters) [26454 26457])
                            ("fp" variable nil (reparse-symbol function_parameters) [26459 26461])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26463 26470])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26472 26478])
                            ("headers" variable nil (reparse-symbol function_parameters) [26480 26487])
                            ("data" variable nil (reparse-symbol function_parameters) [26489 26493]))                          
                        :documentation "Error 303 -- also relocated (essentially identical to 302).")
                        (reparse-symbol indented_block_body) [26429 26651])
                    ("http_error_307" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26675 26679])
                            ("url" variable nil (reparse-symbol function_parameters) [26681 26684])
                            ("fp" variable nil (reparse-symbol function_parameters) [26686 26688])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26690 26697])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26699 26705])
                            ("headers" variable nil (reparse-symbol function_parameters) [26707 26714])
                            ("data" variable nil (reparse-symbol function_parameters) [26716 26720]))                          
                        :documentation "Error 307 -- relocated, but turn POST into error.")
                        (reparse-symbol indented_block_body) [26656 26989])
                    ("http_error_401" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27013 27017])
                            ("url" variable nil (reparse-symbol function_parameters) [27019 27022])
                            ("fp" variable nil (reparse-symbol function_parameters) [27024 27026])
                            ("errcode" variable nil (reparse-symbol function_parameters) [27028 27035])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [27037 27043])
                            ("headers" variable nil (reparse-symbol function_parameters) [27045 27052])
                            ("data" variable nil (reparse-symbol function_parameters) [27054 27058]))                          
                        :documentation "Error 401 -- authentication required.
        This function supports Basic authentication only.")
                        (reparse-symbol indented_block_body) [26994 28021])
                    ("http_error_407" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28045 28049])
                            ("url" variable nil (reparse-symbol function_parameters) [28051 28054])
                            ("fp" variable nil (reparse-symbol function_parameters) [28056 28058])
                            ("errcode" variable nil (reparse-symbol function_parameters) [28060 28067])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [28069 28075])
                            ("headers" variable nil (reparse-symbol function_parameters) [28077 28084])
                            ("data" variable nil (reparse-symbol function_parameters) [28086 28090]))                          
                        :documentation "Error 407 -- proxy authentication required.
        This function supports Basic authentication only.")
                        (reparse-symbol indented_block_body) [28026 29069])
                    ("retry_proxy_http_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29106 29110])
                            ("url" variable nil (reparse-symbol function_parameters) [29112 29115])
                            ("realm" variable nil (reparse-symbol function_parameters) [29117 29122])
                            ("data" variable nil (reparse-symbol function_parameters) [29124 29128]))                          )
                        (reparse-symbol indented_block_body) [29074 29818])
                    ("retry_proxy_https_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29856 29860])
                            ("url" variable nil (reparse-symbol function_parameters) [29862 29865])
                            ("realm" variable nil (reparse-symbol function_parameters) [29867 29872])
                            ("data" variable nil (reparse-symbol function_parameters) [29874 29878]))                          )
                        (reparse-symbol indented_block_body) [29823 30572])
                    ("retry_http_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30603 30607])
                            ("url" variable nil (reparse-symbol function_parameters) [30609 30612])
                            ("realm" variable nil (reparse-symbol function_parameters) [30614 30619])
                            ("data" variable nil (reparse-symbol function_parameters) [30621 30625]))                          )
                        (reparse-symbol indented_block_body) [30577 31077])
                    ("retry_https_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31109 31113])
                            ("url" variable nil (reparse-symbol function_parameters) [31115 31118])
                            ("realm" variable nil (reparse-symbol function_parameters) [31120 31125])
                            ("data" variable nil (reparse-symbol function_parameters) [31127 31131]))                          )
                        (reparse-symbol indented_block_body) [31082 31584])
                    ("get_user_passwd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31609 31613])
                            ("host" variable nil (reparse-symbol function_parameters) [31615 31619])
                            ("realm" variable nil (reparse-symbol function_parameters) [31621 31626])
                            ("clear_cache" variable nil (reparse-symbol function_parameters) [31628 31639]))                          )
                        (reparse-symbol indented_block_body) [31589 32004])
                    ("prompt_user_passwd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32032 32036])
                            ("host" variable nil (reparse-symbol function_parameters) [32038 32042])
                            ("realm" variable nil (reparse-symbol function_parameters) [32044 32049]))                          
                        :documentation "Override this in a GUI environment!")
                        (reparse-symbol indented_block_body) [32009 32508]))                  
                :type "class")
                nil [24042 32508])
            ("_localhost" variable nil nil [32531 32548])
            ("localhost" function (:documentation "Return the IP address of the magic hostname 'localhost'.") nil [32549 32759])
            ("_thishost" variable nil nil [32760 32776])
            ("thishost" function (:documentation "Return the IP address of the current host.") nil [32777 33084])
            ("_ftperrors" variable nil nil [33085 33102])
            ("ftperrors" function (:documentation "Return the set of errors raised by the FTP class.") nil [33103 33312])
            ("_noheaders" variable nil nil [33313 33330])
            ("noheaders" function (:documentation "Return an empty mimetools.Message object.") nil [33331 33734])
            ("ftpwrapper" type
               (:documentation "Class used by open_ftp() for cache of open FTP connections."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [33999 34015])
                            ("self" variable nil (reparse-symbol indented_block_body) [34024 34044])
                            ("self" variable nil (reparse-symbol indented_block_body) [34053 34069])
                            ("self" variable nil (reparse-symbol indented_block_body) [34078 34094])
                            ("self" variable nil (reparse-symbol indented_block_body) [34103 34119])
                            ("self" variable nil (reparse-symbol indented_block_body) [34128 34150])
                            ("self" variable nil (reparse-symbol indented_block_body) [34159 34176])
                            ("self" variable nil (reparse-symbol indented_block_body) [34185 34212])
                            ("try" code nil (reparse-symbol indented_block_body) [34221 34309]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33861 33865])
                            ("user" variable nil (reparse-symbol function_parameters) [33867 33871])
                            ("passwd" variable nil (reparse-symbol function_parameters) [33873 33879])
                            ("host" variable nil (reparse-symbol function_parameters) [33881 33885])
                            ("port" variable nil (reparse-symbol function_parameters) [33887 33891])
                            ("dirs" variable nil (reparse-symbol function_parameters) [33893 33897])
                            ("timeout" variable nil (reparse-symbol function_parameters) [33916 33923])
                            ("persistent" variable nil (reparse-symbol function_parameters) [33973 33983]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33848 34309])
                    ("init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34323 34327]))                          )
                        (reparse-symbol indented_block_body) [34314 34582])
                    ("retrfile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34600 34604])
                            ("file" variable nil (reparse-symbol function_parameters) [34606 34610])
                            ("type" variable nil (reparse-symbol function_parameters) [34612 34616]))                          )
                        (reparse-symbol indented_block_body) [34587 36182])
                    ("endtransfer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36203 36207]))                          )
                        (reparse-symbol indented_block_body) [36187 36232])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36247 36251]))                          )
                        (reparse-symbol indented_block_body) [36237 36346])
                    ("file_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36366 36370]))                          )
                        (reparse-symbol indented_block_body) [36351 36511])
                    ("real_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36531 36535]))                          )
                        (reparse-symbol indented_block_body) [36516 36652]))                  
                :type "class")
                nil [33755 36652])
            ("addbase" type
               (:documentation "Base class for addinfo and addclosehook."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [36756 36768])
                            ("self" variable nil (reparse-symbol indented_block_body) [36777 36801])
                            ("self" variable nil (reparse-symbol indented_block_body) [36810 36842])
                            ("if" code nil (reparse-symbol indented_block_body) [36851 36920])
                            ("if" code nil (reparse-symbol indented_block_body) [36928 37053])
                            ("if" code nil (reparse-symbol indented_block_body) [37061 37221]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36737 36741])
                            ("fp" variable nil (reparse-symbol function_parameters) [36743 36745]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36724 37221])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37239 37243]))                          )
                        (reparse-symbol indented_block_body) [37226 37380])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37395 37399]))                          )
                        (reparse-symbol indented_block_body) [37385 37572]))                  
                :type "class")
                nil [36653 37572])
            ("addclosehook" type
               (:documentation "Class to add a close hook to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [37714 37740])
                            ("self" variable nil (reparse-symbol indented_block_body) [37749 37775])
                            ("self" variable nil (reparse-symbol indented_block_body) [37784 37808]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37673 37677])
                            ("fp" variable nil (reparse-symbol function_parameters) [37679 37681])
                            ("closehook" variable nil (reparse-symbol function_parameters) [37683 37692])
                            ("hookargs" variable nil (reparse-symbol function_parameters) [37694 37703]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37660 37809])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37824 37828]))                          )
                        (reparse-symbol indented_block_body) [37814 38107]))                  
                :type "class")
                nil [37573 38107])
            ("addinfo" type
               (:documentation "class to add an info() method to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [38236 38262])
                            ("self" variable nil (reparse-symbol indented_block_body) [38271 38293]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38208 38212])
                            ("fp" variable nil (reparse-symbol function_parameters) [38214 38216])
                            ("headers" variable nil (reparse-symbol function_parameters) [38218 38225]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38195 38294])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38308 38312]))                          )
                        (reparse-symbol indented_block_body) [38299 38343]))                  
                :type "class")
                nil [38109 38343])
            ("addinfourl" type
               (:documentation "class to add info() and geturl() methods to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [38501 38527])
                            ("self" variable nil (reparse-symbol indented_block_body) [38536 38558])
                            ("self" variable nil (reparse-symbol indented_block_body) [38567 38581])
                            ("self" variable nil (reparse-symbol indented_block_body) [38590 38606]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38457 38461])
                            ("fp" variable nil (reparse-symbol function_parameters) [38463 38465])
                            ("headers" variable nil (reparse-symbol function_parameters) [38467 38474])
                            ("url" variable nil (reparse-symbol function_parameters) [38476 38479])
                            ("code" variable nil (reparse-symbol function_parameters) [38481 38485]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38444 38607])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38621 38625]))                          )
                        (reparse-symbol indented_block_body) [38612 38656])
                    ("getcode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38673 38677]))                          )
                        (reparse-symbol indented_block_body) [38661 38705])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38721 38725]))                          )
                        (reparse-symbol indented_block_body) [38710 38752]))                  
                :type "class")
                nil [38344 38752])
            ("try" code nil nil [39491 39635])
            ("toBytes" function
               (:documentation "toBytes(u\"URL\") --> 'URL'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39648 39651]))                  )
                nil [39636 40019])
            ("unwrap" function
               (:documentation "unwrap('<URL:type://host/path>') --> 'type://host/path'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [40031 40034]))                  )
                nil [40020 40264])
            ("_typeprog" variable nil nil [40265 40281])
            ("splittype" function
               (:documentation "splittype('type:opaquestring') --> 'type', 'opaquestring'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [40296 40299]))                  )
                nil [40282 40635])
            ("_hostprog" variable nil nil [40636 40652])
            ("splithost" function
               (:documentation "splithost('//host[:port]/path') --> 'host[:port]', '/path'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [40667 40670]))                  )
                nil [40653 41100])
            ("_userprog" variable nil nil [41101 41117])
            ("splituser" function
               (:documentation "splituser('user[:passwd]@host[:port]') --> 'user[:passwd]', 'host[:port]'."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [41132 41136]))                  )
                nil [41118 41431])
            ("_passwdprog" variable nil nil [41432 41450])
            ("splitpasswd" function
               (:documentation "splitpasswd('user:passwd') -> 'user', 'passwd'."
                :arguments 
                  ( ("user" variable nil (reparse-symbol function_parameters) [41467 41471]))                  )
                nil [41451 41755])
            ("_portprog" variable nil nil [41799 41815])
            ("splitport" function
               (:documentation "splitport('host:port') --> 'host', 'port'."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [41830 41834]))                  )
                nil [41816 42159])
            ("_nportprog" variable nil nil [42160 42177])
            ("splitnport" function
               (:documentation "Split host and port, returning numeric port.
    Return given default port if no ':' found; defaults to -1.
    Return numerical port if a valid number are found after ':'.
    Return None if ':' but not a valid number."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [42193 42197])
                    ("defport" variable nil (reparse-symbol function_parameters) [42199 42206]))                  )
                nil [42178 42829])
            ("_queryprog" variable nil nil [42830 42847])
            ("splitquery" function
               (:documentation "splitquery('/path?query') --> '/path', 'query'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [42863 42866]))                  )
                nil [42848 43140])
            ("_tagprog" variable nil nil [43141 43156])
            ("splittag" function
               (:documentation "splittag('/path#tag') --> '/path', 'tag'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [43170 43173]))                  )
                nil [43157 43432])
            ("splitattr" function
               (:documentation "splitattr('/path;attr1=value1;attr2=value2;...') ->
        '/path', ['attr1=value1', 'attr2=value2', ...]."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [43447 43450]))                  )
                nil [43433 43629])
            ("_valueprog" variable nil nil [43630 43647])
            ("splitvalue" function
               (:documentation "splitvalue('attr=value') --> 'attr', 'value'."
                :arguments 
                  ( ("attr" variable nil (reparse-symbol function_parameters) [43663 43667]))                  )
                nil [43648 43940])
            ("_hexdig" variable nil nil [44133 44167])
            ("_hextochr" variable nil nil [44168 44265])
            ("_asciire" variable nil nil [44266 44305])
            ("unquote" function
               (:documentation "unquote('abc%20def') -> 'abc def'."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [44319 44320]))                  )
                nil [44307 45012])
            ("unquote_plus" function
               (:documentation "unquote('%7e/abc+def') -> '~/abc def'"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [45030 45031]))                  )
                nil [45013 45132])
            ("always_safe" variable nil nil [45133 45255])
            ("_safe_map" variable nil nil [45256 45270])
            ("for" code nil nil [45271 45410])
            ("_safe_quoters" variable nil nil [45410 45428])
            ("quote" function
               (:documentation "quote('abc def') -> 'abc%20def'

    Each part of a URL, e.g. the path info, the query, etc., has a
    different set of reserved characters that must be quoted.

    RFC 2396 Uniform Resource Identifiers (URI): Generic Syntax lists
    the following reserved characters.

    reserved    = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \"&\" | \"=\" | \"+\" |
                  \"$\" | \",\"

    Each of these characters is reserved in some component of a URL,
    but not necessarily in all of them.

    By default, the quote function is intended for quoting the path
    section of a URL.  Thus, it will not encode '/'.  This character
    is reserved, but in typical usage the quote function is being
    called on a path where the existing slash characters are used as
    reserved characters.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [45440 45441])
                    ("safe" variable nil (reparse-symbol function_parameters) [45443 45447]))                  )
                nil [45430 46770])
            ("quote_plus" function
               (:documentation "Quote the query fragment of a URL; replacing ' ' with '+'"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [46786 46787])
                    ("safe" variable nil (reparse-symbol function_parameters) [46789 46793]))                  )
                nil [46771 46978])
            ("urlencode" function
               (:documentation "Encode a sequence of two-element tuples or dictionary into a URL query string.

    If any values in the query arg are sequences and doseq is true, each
    sequence element is converted to a separate parameter.

    If the query arg is a sequence of two-element tuples, the order of the
    parameters in the output will match the order of parameters in the
    input.
    "
                :arguments 
                  ( ("query" variable nil (reparse-symbol function_parameters) [46993 46998])
                    ("doseq" variable nil (reparse-symbol function_parameters) [47000 47005]))                  )
                nil [46979 49406])
            ("getproxies_environment" function (:documentation "Return a dictionary of scheme -> proxy server URL mappings.

    Scan the environment for variables named <scheme>_proxy;
    this seems to be the standard convention.  In order to prefer lowercase
    variables, we process the environment in two passes, first matches any
    and second matches only lower case proxies.

    If you need a different way, you can pass a proxies dictionary to the
    [Fancy]URLopener constructor.
    ") nil [49424 50716])
            ("proxy_bypass_environment" function
               (:documentation "Test if proxies should not be used for a particular host.

    Checks the proxies dict for the value of no_proxy, which should be a
    list of comma separated DNS suffixes, or '*' for all hosts.
    "
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [50746 50750])
                    ("proxies" variable nil (reparse-symbol function_parameters) [50752 50759]))                  )
                nil [50717 51747])
            ("if" code nil nil [51749 59419])
            ("test1" function nil nil [59458 59748])
            ("reporthook" function (:arguments 
              ( ("blocknum" variable nil (reparse-symbol function_parameters) [59765 59773])
                ("blocksize" variable nil (reparse-symbol function_parameters) [59775 59784])
                ("totalsize" variable nil (reparse-symbol function_parameters) [59786 59795]))              ) nil [59750 59940]))          
      :file "urllib.py"
      :pointmax 59940
      :fsize 59939
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax '((NAME 45334 . 45343) (IF 45351 . 45353) (ELSE 45385 . 45389)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"functools.py - Tools for working with functions and callable objects
\"\"\"" code nil nil [1 76])
            ("_functools" include nil nil [358 396])
            ("WRAPPER_ASSIGNMENTS" variable nil nil [510 569])
            ("WRAPPER_UPDATES" variable nil nil [570 601])
            ("update_wrapper" function
               (:documentation "Update a wrapper function to look like the wrapped function

       wrapper is the function to be updated
       wrapped is the original function
       assigned is a tuple naming the attributes assigned directly
       from the wrapped function to the wrapper function (defaults to
       functools.WRAPPER_ASSIGNMENTS)
       updated is a tuple naming the attributes of the wrapper that
       are updated with the corresponding attribute from the wrapped
       function (defaults to functools.WRAPPER_UPDATES)
    "
                :arguments 
                  ( ("wrapper" variable nil (reparse-symbol function_parameters) [621 628])
                    ("wrapped" variable nil (reparse-symbol function_parameters) [649 656])
                    ("assigned" variable nil (reparse-symbol function_parameters) [677 685])
                    ("updated" variable nil (reparse-symbol function_parameters) [728 735]))                  )
                nil [602 1550])
            ("wraps" function
               (:documentation "Decorator factory to apply update_wrapper() to a wrapper function

       Returns a decorator that invokes update_wrapper() with the decorated
       function as the wrapper argument and the arguments to wraps() as the
       remaining arguments. Default arguments are as for update_wrapper().
       This is a convenience function to simplify applying partial() to
       update_wrapper().
    "
                :arguments 
                  ( ("wrapped" variable nil (reparse-symbol function_parameters) [1561 1568])
                    ("assigned" variable nil (reparse-symbol function_parameters) [1580 1588])
                    ("updated" variable nil (reparse-symbol function_parameters) [1622 1629]))                  )
                nil [1551 2163])
            ("total_ordering" function
               (:documentation "Class decorator that fills in missing ordering methods"
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2183 2186]))                  )
                nil [2164 3689])
            ("cmp_to_key" function
               (:documentation "Convert a cmp= function into a key= function"
                :arguments 
                  ( ("mycmp" variable nil (reparse-symbol function_parameters) [3705 3710]))                  )
                nil [3690 4479]))          
      :file "functools.py"
      :pointmax 4479
      :fsize 4478
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Cache lines from files.

This is intended to read lines from modules imported -- hence if a filename
is not found, it will look down the module search path for a file by
that name.
\"\"\"" code nil nil [1 188])
            ("sys" include nil nil [190 200])
            ("os" include nil nil [201 210])
            ("__all__" variable nil nil [212 261])
            ("getline" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [275 283])
                ("lineno" variable nil (reparse-symbol function_parameters) [285 291])
                ("module_globals" variable nil (reparse-symbol function_parameters) [293 307]))              ) nil [263 455])
            ("cache" variable nil nil [470 480])
            ("clearcache" function (:documentation "Clear the cache entirely.") nil [495 582])
            ("getlines" function
               (:documentation "Get the lines for a file from the cache.
    Update the cache if it doesn't contain an entry for this file already."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [597 605])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [607 621]))                  )
                nil [584 942])
            ("checkcache" function
               (:documentation "Discard cache entries that are out of date.
    (This is not checked upon each call!)"
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [959 967]))                  )
                nil [944 1635])
            ("updatecache" function
               (:documentation "Update a cache entry and return its list of lines.
    If something's wrong, print a message, discard the cache entry,
    and return an empty list."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1653 1661])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [1663 1677]))                  )
                nil [1637 4028]))          
      :file "linecache.py"
      :pointmax 4028
      :fsize 4027
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Filename globbing utility.\"\"\"" code nil nil [1 33])
            ("sys" include nil nil [35 45])
            ("os" include nil nil [46 55])
            ("re" include nil nil [56 65])
            ("fnmatch" include nil nil [66 80])
            ("try" code nil nil [82 268])
            ("__all__" variable nil nil [269 296])
            ("glob" function
               (:documentation "Return a list of paths matching a pathname pattern.

    The pattern may contain simple shell-style wildcards a la
    fnmatch. However, unlike fnmatch, filenames starting with a
    dot are special cases that are not matched by '*' and '?'
    patterns.

    "
                :arguments 
                  ( ("pathname" variable nil (reparse-symbol function_parameters) [307 315]))                  )
                nil [298 622])
            ("iglob" function
               (:documentation "Return an iterator which yields the paths matching a pathname pattern.

    The pattern may contain simple shell-style wildcards a la
    fnmatch. However, unlike fnmatch, filenames starting with a
    dot are special cases that are not matched by '*' and '?'
    patterns.

    "
                :arguments 
                  ( ("pathname" variable nil (reparse-symbol function_parameters) [633 641]))                  )
                nil [623 1924])
            ("glob1" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [2159 2166])
                ("pattern" variable nil (reparse-symbol function_parameters) [2168 2175]))              ) nil [2149 2633])
            ("glob0" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [2644 2651])
                ("basename" variable nil (reparse-symbol function_parameters) [2653 2661]))              ) nil [2634 3015])
            ("magic_check" variable nil nil [3017 3050])
            ("has_magic" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [3066 3067]))              ) nil [3052 3115]))          
      :file "glob.py"
      :pointmax 3115
      :fsize 3114
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Functions that read and write gzipped files.

The user of the file doesn't have to worry about the compression,
but random access is not allowed.\"\"\"" code nil nil [1 152])
            ("os" include nil nil [229 257])
            ("time" include nil nil [229 257])
            ("sys" include nil nil [229 257])
            ("struct" include nil nil [229 257])
            ("zlib" include nil nil [258 269])
            ("io" include nil nil [270 279])
            ("__builtin__" include nil nil [280 298])
            ("__all__" variable nil nil [300 329])
            ("FTEXT, FHCRC, FEXTRA, FNAME, FCOMMENT" code nil nil [331 385])
            ("READ, WRITE" code nil nil [387 405])
            ("write32u" function (:arguments 
              ( ("output" variable nil (reparse-symbol function_parameters) [420 426])
                ("value" variable nil (reparse-symbol function_parameters) [428 433]))              ) nil [407 565])
            ("read32" function (:arguments 
              ( ("input" variable nil (reparse-symbol function_parameters) [577 582]))              ) nil [566 634])
            ("open" function
               (:documentation "Shorthand for GzipFile(filename, mode, compresslevel).

    The filename argument is required; mode defaults to 'rb'
    and compresslevel defaults to 9.

    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [644 652])
                    ("mode" variable nil (reparse-symbol function_parameters) [654 658])
                    ("compresslevel" variable nil (reparse-symbol function_parameters) [665 678]))                  )
                nil [635 904])
            ("GzipFile" type
               (:documentation "The GzipFile class simulates most of the methods of a file object with
    the exception of the readinto() and truncate() methods.

    "
                :superclasses ("io.BufferedIOBase")
                :members 
                  ( ("myfileobj" variable nil (reparse-symbol indented_block_body) [1092 1108])
                    ("max_read_chunk" code nil (reparse-symbol indented_block_body) [1113 1146])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Constructor for the GzipFile class.

        At least one of fileobj and filename must be given a
        non-trivial value.

        The new class instance is based on fileobj, which can be a regular
        file, a StringIO object, or any other object which simulates a file.
        It defaults to None, in which case filename is opened to provide
        a file object.

        When fileobj is not None, the filename argument is only used to be
        included in the gzip file header, which may include the original
        filename of the uncompressed file.  It defaults to the filename of
        fileobj, if discernible; otherwise, it defaults to the empty string,
        and in this case the original filename is not included in the header.

        The mode argument can be any of 'r', 'rb', 'a', 'ab', 'w', or 'wb',
        depending on whether the file will be read or written.  The default
        is the mode of fileobj if discernible; otherwise, the default is 'rb'.
        Be aware that only the 'rb', 'ab', and 'wb' values should be used
        for cross-platform portability.

        The compresslevel argument is an integer from 0 to 9 controlling the
        level of compression; 1 is fastest and produces the least compression,
        and 9 is slowest and produces the most compression. 0 is no compression
        at all. The default is 9.

        The mtime argument is an optional numeric timestamp to be written
        to the stream when compressing.  All gzip compressed streams
        are required to contain a timestamp.  If omitted or None, the
        current time is used.  This module ignores the timestamp when
        decompressing; however, some programs, such as gunzip, make use
        of it.  The format of the timestamp is the same as that of the
        return value of time.time() and of the st_mtime member of the
        object returned by os.stat().

        \"\"\"" code nil (reparse-symbol indented_block_body) [1275 3195])
                            ("if" code nil (reparse-symbol indented_block_body) [3359 3409])
                            ("if" code nil (reparse-symbol indented_block_body) [3529 3582])
                            ("if" code nil (reparse-symbol indented_block_body) [3590 3690])
                            ("if" code nil (reparse-symbol indented_block_body) [3698 4035])
                            ("if" code nil (reparse-symbol indented_block_body) [4043 4151])
                            ("if" code nil (reparse-symbol indented_block_body) [4160 5211])
                            ("self" variable nil (reparse-symbol indented_block_body) [5220 5242])
                            ("self" variable nil (reparse-symbol indented_block_body) [5251 5266])
                            ("self" variable nil (reparse-symbol indented_block_body) [5275 5293])
                            ("if" code nil (reparse-symbol indented_block_body) [5303 5364]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1174 1178])
                            ("filename" variable nil (reparse-symbol function_parameters) [1180 1188])
                            ("mode" variable nil (reparse-symbol function_parameters) [1195 1199])
                            ("compresslevel" variable nil (reparse-symbol function_parameters) [1223 1236])
                            ("fileobj" variable nil (reparse-symbol function_parameters) [1240 1247])
                            ("mtime" variable nil (reparse-symbol function_parameters) [1254 1259]))                          
                        :documentation "Constructor for the GzipFile class.

        At least one of fileobj and filename must be given a
        non-trivial value.

        The new class instance is based on fileobj, which can be a regular
        file, a StringIO object, or any other object which simulates a file.
        It defaults to None, in which case filename is opened to provide
        a file object.

        When fileobj is not None, the filename argument is only used to be
        included in the gzip file header, which may include the original
        filename of the uncompressed file.  It defaults to the filename of
        fileobj, if discernible; otherwise, it defaults to the empty string,
        and in this case the original filename is not included in the header.

        The mode argument can be any of 'r', 'rb', 'a', 'ab', 'w', or 'wb',
        depending on whether the file will be read or written.  The default
        is the mode of fileobj if discernible; otherwise, the default is 'rb'.
        Be aware that only the 'rb', 'ab', and 'wb' values should be used
        for cross-platform portability.

        The compresslevel argument is an integer from 0 to 9 controlling the
        level of compression; 1 is fastest and produces the least compression,
        and 9 is slowest and produces the most compression. 0 is no compression
        at all. The default is 9.

        The mtime argument is an optional numeric timestamp to be written
        to the stream when compressing.  All gzip compressed streams
        are required to contain a timestamp.  If omitted or None, the
        current time is used.  This module ignores the timestamp when
        decompressing; however, some programs, such as gunzip, make use
        of it.  The format of the timestamp is the same as that of the
        return value of time.time() and of the st_mtime member of the
        object returned by os.stat().

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1161 5364])
                    ("filename" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5396 5400]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5369 5619])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5637 5641]))                          )
                        (reparse-symbol indented_block_body) [5624 5737])
                    ("_check_closed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5760 5764]))                          
                        :documentation "Raises a ValueError if the underlying file object has been closed.

        ")
                        (reparse-symbol indented_block_body) [5742 5944])
                    ("_init_write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5965 5969])
                            ("filename" variable nil (reparse-symbol function_parameters) [5971 5979]))                          )
                        (reparse-symbol indented_block_body) [5949 6133])
                    ("_write_gzip_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6161 6165]))                          )
                        (reparse-symbol indented_block_body) [6138 7093])
                    ("_init_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7113 7117]))                          )
                        (reparse-symbol indented_block_body) [7098 7190])
                    ("_read_gzip_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7217 7221]))                          )
                        (reparse-symbol indented_block_body) [7195 8451])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8466 8470])
                            ("data" variable nil (reparse-symbol function_parameters) [8471 8475]))                          )
                        (reparse-symbol indented_block_body) [8456 9128])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9142 9146])
                            ("size" variable nil (reparse-symbol function_parameters) [9148 9152]))                          )
                        (reparse-symbol indented_block_body) [9133 10238])
                    ("_unread" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10255 10259])
                            ("buf" variable nil (reparse-symbol function_parameters) [10261 10264]))                          )
                        (reparse-symbol indented_block_body) [10243 10350])
                    ("_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10365 10369])
                            ("size" variable nil (reparse-symbol function_parameters) [10371 10375]))                          )
                        (reparse-symbol indented_block_body) [10355 12352])
                    ("_add_read_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12376 12380])
                            ("data" variable nil (reparse-symbol function_parameters) [12382 12386]))                          )
                        (reparse-symbol indented_block_body) [12357 12682])
                    ("_read_eof" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12701 12705]))                          )
                        (reparse-symbol indented_block_body) [12687 13782])
                    ("closed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13812 13816]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13787 13855])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13870 13874]))                          )
                        (reparse-symbol indented_block_body) [13860 14397])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14412 14416])
                            ("zlib_mode" variable nil (reparse-symbol function_parameters) [14417 14426]))                          )
                        (reparse-symbol indented_block_body) [14402 14659])
                    ("fileno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14675 14679]))                          
                        :documentation "Invoke the underlying file object's fileno() method.

        This will raise AttributeError if the underlying file object
        doesn't support fileno().
        ")
                        (reparse-symbol indented_block_body) [14664 14899])
                    ("rewind" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14915 14919]))                          )
                        (reparse-symbol indented_block_body) [14904 15281])
                    ("readable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15299 15303]))                          )
                        (reparse-symbol indented_block_body) [15286 15339])
                    ("writable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15357 15361]))                          )
                        (reparse-symbol indented_block_body) [15344 15398])
                    ("seekable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15416 15420]))                          )
                        (reparse-symbol indented_block_body) [15403 15443])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15457 15461])
                            ("offset" variable nil (reparse-symbol function_parameters) [15463 15469])
                            ("whence" variable nil (reparse-symbol function_parameters) [15471 15477]))                          )
                        (reparse-symbol indented_block_body) [15448 16302])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16320 16324])
                            ("size" variable nil (reparse-symbol function_parameters) [16326 16330]))                          )
                        (reparse-symbol indented_block_body) [16307 17768]))                  
                :type "class")
                nil [905 17768])
            ("_test" function nil nil [17770 18988])
            ("if" code nil nil [18989 19028]))          
      :file "gzip.py"
      :pointmax 19028
      :fsize 19027
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.

At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an IOError if they do not support a given operation.

Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
an interface to OS files.

BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams. BytesIO is a simple stream of in-memory bytes.

Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text. TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
is an in-memory stream for text.

Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.

data:

DEFAULT_BUFFER_SIZE

   An int containing the default buffer size used by the module's buffered
   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
   possible.
\"\"\"" code nil nil [1 1480])
            ("__author__" variable nil nil [1524 1861])
            ("__all__" variable nil nil [1863 2181])
            ("_io" include nil nil [2184 2194])
            ("abc" include nil nil [2195 2205])
            ("" code nil nil [2223 2473])
            ("OpenWrapper" variable nil nil [2475 2497])
            ("SEEK_SET" variable nil nil [2543 2555])
            ("SEEK_CUR" variable nil nil [2556 2568])
            ("SEEK_END" variable nil nil [2569 2581])
            ("IOBase" type
               (:superclasses ("_io._IOBase")
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2758 2785])
                    ("__doc__" variable nil (reparse-symbol indented_block_body) [2790 2819]))                  
                :type "class")
                nil [2727 2820])
            ("RawIOBase" type
               (:superclasses ("_io._RawIOBase" "IOBase")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [2866 2898]))                  
                :type "class")
                nil [2821 2899])
            ("BufferedIOBase" type
               (:superclasses ("_io._BufferedIOBase" "IOBase")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [2955 2992]))                  
                :type "class")
                nil [2900 2993])
            ("TextIOBase" type
               (:superclasses ("_io._TextIOBase" "IOBase")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [3041 3074]))                  
                :type "class")
                nil [2994 3075])
            ("RawIOBase" code nil nil [3076 3102])
            ("for" code nil nil [3104 3241])
            ("for" code nil nil [3242 3313])
            ("del" code nil nil [3313 3322]))          
      :file "io.py"
      :pointmax 3323
      :fsize 3322
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Locale support module.

The module provides low-level access to the C lib's locale APIs and adds high
level number formatting APIs as well as a locale aliasing engine to complement
these.

The aliasing engine includes support for many commonly used locale names and
maps them to values suitable for passing to the C lib's setlocale() function. It
also includes default encodings for all supported locale names.
\"\"\"" code nil nil [1 418])
            ("sys" include nil nil [420 430])
            ("encodings" include nil nil [431 447])
            ("encodings.aliases" include nil nil [448 472])
            ("re" include nil nil [473 482])
            ("operator" include nil nil [483 498])
            ("functools" include nil nil [499 515])
            ("_str" variable nil nil [622 632])
            ("try" code nil nil [634 820])
            ("__all__" variable nil nil [1068 1415])
            ("try" code nil nil [1417 3119])
            ("_localeconv" variable nil nil [3121 3145])
            ("_override_localeconv" variable nil nil [3262 3287])
            ("" code nil nil [3305 3318])
            ("localeconv" function nil nil [3319 3440])
            ("_grouping_intervals" function (:arguments 
              ( ("grouping" variable nil (reparse-symbol function_parameters) [3584 3592]))              ) nil [3560 4020])
            ("_group" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [4073 4074])
                ("monetary" variable nil (reparse-symbol function_parameters) [4076 4084]))              ) nil [4062 4962])
            ("_strip_padding" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [5045 5046])
                ("amount" variable nil (reparse-symbol function_parameters) [5048 5054]))              ) nil [5026 5268])
            ("_percent_re" variable nil nil [5269 5398])
            ("format" function
               (:documentation "Returns the locale-aware substitution of a %? specifier
    (percent).

    additional is for format strings which contain one or more
    '*' modifiers."
                :arguments 
                  ( ("percent" variable nil (reparse-symbol function_parameters) [5411 5418])
                    ("value" variable nil (reparse-symbol function_parameters) [5420 5425])
                    ("grouping" variable nil (reparse-symbol function_parameters) [5427 5435])
                    ("monetary" variable nil (reparse-symbol function_parameters) [5443 5451])
                    ("additional" variable nil (reparse-symbol function_parameters) [5459 5470]))                  )
                nil [5400 6026])
            ("_format" function (:arguments 
              ( ("percent" variable nil (reparse-symbol function_parameters) [6039 6046])
                ("value" variable nil (reparse-symbol function_parameters) [6048 6053])
                ("grouping" variable nil (reparse-symbol function_parameters) [6055 6063])
                ("monetary" variable nil (reparse-symbol function_parameters) [6071 6079])
                ("additional" variable nil (reparse-symbol function_parameters) [6087 6098]))              ) nil [6027 6928])
            ("format_string" function
               (:documentation "Formats a string in the same way that the % formatting would use,
    but takes the current locale into account.
    Grouping is applied if the third parameter is true."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [6947 6948])
                    ("val" variable nil (reparse-symbol function_parameters) [6950 6953])
                    ("grouping" variable nil (reparse-symbol function_parameters) [6955 6963]))                  )
                nil [6929 8117])
            ("currency" function
               (:documentation "Formats val according to the currency settings
    in the current locale."
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [8131 8134])
                    ("symbol" variable nil (reparse-symbol function_parameters) [8136 8142])
                    ("grouping" variable nil (reparse-symbol function_parameters) [8149 8157])
                    ("international" variable nil (reparse-symbol function_parameters) [8165 8178]))                  )
                nil [8118 9644])
            ("str" function
               (:documentation "Convert float to string, taking the locale into account."
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [9653 9656]))                  )
                nil [9645 9758])
            ("atof" function (:arguments 
              ( ("string" variable nil (reparse-symbol function_parameters) [9768 9774])
                ("func" variable nil (reparse-symbol function_parameters) [9776 9780]))              ) nil [9759 10176])
            ("atoi" function (:arguments 
              ( ("str" variable nil (reparse-symbol function_parameters) [10186 10189]))              ) nil [10177 10290])
            ("_test" function nil nil [10291 10484])
            ("_setlocale" variable nil nil [10698 10720])
            ("_ascii_lower_map" variable nil nil [10799 10910])
            ("_replace_encoding" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [10934 10938])
                ("encoding" variable nil (reparse-symbol function_parameters) [10940 10948]))              ) nil [10912 11592])
            ("normalize" function
               (:documentation " Returns a normalized locale code for the given locale
        name.

        The returned locale code is formatted for use with
        setlocale().

        If normalization fails, the original name is returned
        unchanged.

        If the given encoding is not known, the function defaults to
        the default encoding for the locale code just like setlocale()
        does.

    "
                :arguments 
                  ( ("localename" variable nil (reparse-symbol function_parameters) [11607 11617]))                  )
                nil [11593 14580])
            ("_parse_localename" function
               (:documentation " Parses the locale code for localename and returns the
        result as tuple (language code, encoding).

        The localename is normalized and passed through the locale
        alias engine. A ValueError is raised in case the locale name
        cannot be parsed.

        The language code corresponds to RFC 1766.  code and encoding
        can be None in case the values cannot be determined or are
        unknown to this implementation.

    "
                :arguments 
                  ( ("localename" variable nil (reparse-symbol function_parameters) [14603 14613]))                  )
                nil [14581 15657])
            ("_build_localename" function
               (:documentation " Builds a locale code from the given tuple (language code,
        encoding).

        No aliasing or normalizing takes place.

    "
                :arguments 
                  ( ("localetuple" variable nil (reparse-symbol function_parameters) [15680 15691]))                  )
                nil [15658 16023])
            ("getdefaultlocale" function
               (:documentation " Tries to determine the default locale settings and returns
        them as tuple (language code, encoding).

        According to POSIX, a program which has not called
        setlocale(LC_ALL, \"\") runs using the portable 'C' locale.
        Calling setlocale(LC_ALL, \"\") lets it use the default locale as
        defined by the LANG variable. Since we don't want to interfere
        with the current locale setting we thus emulate the behavior
        in the way described above.

        To maintain compatibility with other platforms, not only the
        LANG variable is tested, but a list of variables given as
        envvars parameter. The first found to be defined will be
        used. envvars defaults to the search path used in GNU gettext;
        it must always contain the variable name 'LANG'.

        Except for the code 'C', the language code corresponds to RFC
        1766.  code and encoding can be None in case the values cannot
        be determined.

    "
                :arguments 
                  ( ("envvars" variable nil (reparse-symbol function_parameters) [16045 16052]))                  )
                nil [16024 18009])
            ("getlocale" function
               (:documentation " Returns the current setting for the given locale category as
        tuple (language code, encoding).

        category may be one of the LC_* value except LC_ALL. It
        defaults to LC_CTYPE.

        Except for the code 'C', the language code corresponds to RFC
        1766.  code and encoding can be None in case the values cannot
        be determined.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [18025 18033]))                  )
                nil [18011 18613])
            ("setlocale" function
               (:documentation " Set the locale for the given category.  The locale can be
        a string, an iterable of two strings (language code and encoding),
        or None.

        Iterables are converted to strings using the locale aliasing
        engine.  Locale strings are passed directly to the C lib.

        category may be given as one of the LC_* values.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [18628 18636])
                    ("locale" variable nil (reparse-symbol function_parameters) [18638 18644]))                  )
                nil [18614 19196])
            ("resetlocale" function
               (:documentation " Sets the locale for category to the default setting.

        The default setting is determined by calling
        getdefaultlocale(). category defaults to LC_ALL.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [19213 19221]))                  )
                nil [19197 19477])
            ("if" code nil nil [19478 20682])
            ("locale_encoding_alias" variable nil nil [21243 22975])
            ("locale_alias" variable nil nil [28639 88956])
            ("windows_locale" variable nil nil [89430 97589])
            ("_print_locale" function (:documentation " Test function.
    ") nil [97591 99279])
            ("try" code nil nil [99285 99373])
            ("if" code nil nil [99374 99521]))          
      :file "locale.py"
      :pointmax 99521
      :fsize 99520
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Extract, format and print information about Python stack traces.\"\"\"" code nil nil [1 71])
            ("linecache" include nil nil [73 89])
            ("sys" include nil nil [90 100])
            ("types" include nil nil [101 113])
            ("__all__" variable nil nil [115 378])
            ("_print" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [391 395])
                ("str" variable nil (reparse-symbol function_parameters) [397 400])
                ("terminator" variable nil (reparse-symbol function_parameters) [405 415]))              ) nil [380 454])
            ("print_list" function
               (:documentation "Print the list of tuples as returned by extract_tb() or
    extract_stack() as a formatted stack trace to the given file."
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [471 485])
                    ("file" variable nil (reparse-symbol function_parameters) [487 491]))                  )
                nil [456 893])
            ("format_list" function
               (:documentation "Format a list of traceback entry tuples for printing.

    Given a list of tuples as returned by extract_tb() or
    extract_stack(), return a list of strings ready for printing.
    Each string in the resulting list corresponds to the item with the
    same index in the argument list.  Each string ends in a newline;
    the strings may contain internal newlines as well, for those items
    whose source text line is not None.
    "
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [910 924]))                  )
                nil [894 1625])
            ("print_tb" function
               (:documentation "Print up to 'limit' stack trace entries from the traceback 'tb'.

    If 'limit' is omitted or None, all entries are printed.  If 'file'
    is omitted or None, the output goes to sys.stderr; otherwise
    'file' should be an open file or file-like object with a write()
    method.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [1640 1642])
                    ("limit" variable nil (reparse-symbol function_parameters) [1644 1649])
                    ("file" variable nil (reparse-symbol function_parameters) [1656 1660]))                  )
                nil [1627 2612])
            ("format_tb" function
               (:documentation "A shorthand for 'format_list(extract_tb(tb, limit))'."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2627 2629])
                    ("limit" variable nil (reparse-symbol function_parameters) [2631 2636]))                  )
                nil [2613 2756])
            ("extract_tb" function
               (:documentation "Return list of up to limit pre-processed entries from traceback.

    This is useful for alternate formatting of stack traces.  If
    'limit' is omitted or None, all entries are extracted.  A
    pre-processed stack trace entry is a quadruple (filename, line
    number, function name, text) representing the information that is
    usually printed for a stack trace.  The text is a string with
    leading and trailing whitespace stripped; if the source is not
    available it is None.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2772 2774])
                    ("limit" variable nil (reparse-symbol function_parameters) [2776 2781]))                  )
                nil [2757 3892])
            ("print_exception" function
               (:documentation "Print exception up to 'limit' stack trace entries from 'tb' to 'file'.

    This differs from print_tb() in the following ways: (1) if
    traceback is not None, it prints a header \"Traceback (most recent
    call last):\"; (2) it prints the exception type and value after the
    stack trace; (3) if type is SyntaxError and value has the
    appropriate format, it prints the line where the syntax error
    occurred with a caret on the next line indicating the approximate
    position of the error.
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [3914 3919])
                    ("value" variable nil (reparse-symbol function_parameters) [3921 3926])
                    ("tb" variable nil (reparse-symbol function_parameters) [3928 3930])
                    ("limit" variable nil (reparse-symbol function_parameters) [3932 3937])
                    ("file" variable nil (reparse-symbol function_parameters) [3944 3948]))                  )
                nil [3894 4725])
            ("format_exception" function
               (:documentation "Format a stack trace and the exception information.

    The arguments have the same meaning as the corresponding arguments
    to print_exception().  The return value is a list of strings, each
    ending in a newline and some containing internal newlines.  When
    these lines are concatenated and printed, exactly the same text is
    printed as does print_exception().
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [4747 4752])
                    ("value" variable nil (reparse-symbol function_parameters) [4754 4759])
                    ("tb" variable nil (reparse-symbol function_parameters) [4761 4763])
                    ("limit" variable nil (reparse-symbol function_parameters) [4765 4770]))                  )
                nil [4726 5377])
            ("format_exception_only" function
               (:documentation "Format the exception part of a traceback.

    The arguments are the exception type and value such as given by
    sys.last_type and sys.last_value. The return value is a list of
    strings, each ending in a newline.

    Normally, the list contains a single string; however, for
    SyntaxError exceptions, it contains several lines that (when
    printed) display detailed information about where the syntax
    error occurred.

    The message indicating which exception occurred is always the last
    string in the list.

    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [5404 5409])
                    ("value" variable nil (reparse-symbol function_parameters) [5411 5416]))                  )
                nil [5378 7519])
            ("_format_final_exc_line" function
               (:documentation "Return a list of a single line -- normal case for format_exception_only"
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [7547 7552])
                    ("value" variable nil (reparse-symbol function_parameters) [7554 7559]))                  )
                nil [7520 7816])
            ("_some_str" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [7831 7836]))              ) nil [7817 8101])
            ("print_exc" function
               (:documentation "Shorthand for 'print_exception(sys.exc_type, sys.exc_value, sys.exc_traceback, limit, file)'.
    (In fact, it uses sys.exc_info() to retrieve the same information
    in a thread-safe way.)"
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8117 8122])
                    ("file" variable nil (reparse-symbol function_parameters) [8129 8133]))                  )
                nil [8103 8542])
            ("format_exc" function
               (:documentation "Like print_exc() but return a string."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8559 8564]))                  )
                nil [8544 8784])
            ("print_last" function
               (:documentation "This is a shorthand for 'print_exception(sys.last_type,
    sys.last_value, sys.last_traceback, limit, file)'."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8801 8806])
                    ("file" variable nil (reparse-symbol function_parameters) [8813 8817]))                  )
                nil [8786 9181])
            ("print_stack" function
               (:documentation "Print a stack trace from its invocation point.

    The optional 'f' argument can be used to specify an alternate
    stack frame at which to start. The optional 'limit' and 'file'
    arguments have the same meaning as for print_exception().
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9199 9200])
                    ("limit" variable nil (reparse-symbol function_parameters) [9207 9212])
                    ("file" variable nil (reparse-symbol function_parameters) [9219 9223]))                  )
                nil [9183 9686])
            ("format_stack" function
               (:documentation "Shorthand for 'format_list(extract_stack(f, limit))'."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9704 9705])
                    ("limit" variable nil (reparse-symbol function_parameters) [9712 9717]))                  )
                nil [9687 9988])
            ("extract_stack" function
               (:documentation "Extract the raw traceback from the current stack frame.

    The return value has the same format as for extract_tb().  The
    optional 'f' and 'limit' arguments have the same meaning as for
    print_stack().  Each item in the list is a quadruple (filename,
    line number, function name, text), and the entries are in order
    from oldest to newest stack frame.
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [10007 10008])
                    ("limit" variable nil (reparse-symbol function_parameters) [10015 10020]))                  )
                nil [9989 11149])
            ("tb_lineno" function
               (:documentation "Calculate correct line number of traceback given in tb.

    Obsolete in 2.3.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [11164 11166]))                  )
                nil [11150 11286]))          
      :file "traceback.py"
      :pointmax 11286
      :fsize 11285
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Weak reference support for Python.

This module is an implementation of PEP 205:

http://www.python.org/dev/peps/pep-0205/
\"\"\"" code nil nil [1 130])
            ("UserDict" include nil nil [332 347])
            ("" code nil nil [370 493])
            ("_weakrefset" include nil nil [495 543])
            ("exceptions" include nil nil [545 582])
            ("ProxyTypes" variable nil nil [585 628])
            ("__all__" variable nil nil [630 850])
            ("WeakValueDictionary" type
               (:documentation "Mapping class that references values weakly.

    Entries in the dictionary will be discarded when no strong
    reference to the value exists anymore
    "
                :superclasses ("UserDict.UserDict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1391 1538])
                            ("self" variable nil (reparse-symbol indented_block_body) [1546 1560])
                            ("args" variable nil (reparse-symbol indented_block_body) [1569 1584])
                            ("if" code nil (reparse-symbol indented_block_body) [1593 1691])
                            ("remove" function (:arguments 
                              ( ("wr" variable nil (reparse-symbol function_parameters) [1710 1712])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1714 1721]))                              ) (reparse-symbol indented_block_body) [1699 1954])
                            ("self" variable nil (reparse-symbol indented_block_body) [1962 1983])
                            ("self" variable nil (reparse-symbol indented_block_body) [2031 2058])
                            ("self" variable nil (reparse-symbol indented_block_body) [2067 2090])
                            ("UserDict" code nil (reparse-symbol indented_block_body) [2099 2144]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [1369 1374])
                            ("kw" variable nil (reparse-symbol function_parameters) [1376 1380]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1356 2145])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2171 2175]))                          )
                        (reparse-symbol indented_block_body) [2150 2408])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2429 2433])
                            ("key" variable nil (reparse-symbol function_parameters) [2435 2438]))                          )
                        (reparse-symbol indented_block_body) [2413 2559])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2580 2584])
                            ("key" variable nil (reparse-symbol function_parameters) [2586 2589]))                          )
                        (reparse-symbol indented_block_body) [2564 2690])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2712 2716])
                            ("key" variable nil (reparse-symbol function_parameters) [2718 2721]))                          )
                        (reparse-symbol indented_block_body) [2695 2849])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2866 2870])
                            ("key" variable nil (reparse-symbol function_parameters) [2872 2875]))                          )
                        (reparse-symbol indented_block_body) [2854 3003])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3021 3025]))                          )
                        (reparse-symbol indented_block_body) [3008 3084])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3105 3109])
                            ("key" variable nil (reparse-symbol function_parameters) [3111 3114])
                            ("value" variable nil (reparse-symbol function_parameters) [3116 3121]))                          )
                        (reparse-symbol indented_block_body) [3089 3255])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3270 3274]))                          )
                        (reparse-symbol indented_block_body) [3260 3374])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3388 3392]))                          )
                        (reparse-symbol indented_block_body) [3379 3572])
                    ("__copy__" variable nil (reparse-symbol indented_block_body) [3577 3592])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3615 3619])
                            ("memo" variable nil (reparse-symbol function_parameters) [3621 3625]))                          )
                        (reparse-symbol indented_block_body) [3598 3850])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3863 3867])
                            ("key" variable nil (reparse-symbol function_parameters) [3869 3872])
                            ("default" variable nil (reparse-symbol function_parameters) [3874 3881]))                          )
                        (reparse-symbol indented_block_body) [3855 4163])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4178 4182]))                          )
                        (reparse-symbol indented_block_body) [4168 4345])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4364 4368]))                          )
                        (reparse-symbol indented_block_body) [4350 4560])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4578 4582]))                          )
                        (reparse-symbol indented_block_body) [4565 4688])
                    ("__iter__" variable nil (reparse-symbol indented_block_body) [4693 4712])
                    ("itervaluerefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4736 4740]))                          
                        :documentation "Return an iterator that yields the weak references to the values.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the values around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [4718 5265])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5285 5289]))                          )
                        (reparse-symbol indented_block_body) [5270 5467])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5484 5488]))                          )
                        (reparse-symbol indented_block_body) [5472 5702])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5715 5719])
                            ("key" variable nil (reparse-symbol function_parameters) [5721 5724])
                            ("args" variable nil (reparse-symbol function_parameters) [5726 5731]))                          )
                        (reparse-symbol indented_block_body) [5707 6039])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6059 6063])
                            ("key" variable nil (reparse-symbol function_parameters) [6065 6068])
                            ("default" variable nil (reparse-symbol function_parameters) [6070 6077]))                          )
                        (reparse-symbol indented_block_body) [6044 6365])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [6381 6386])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [6388 6396]))                      ) (reparse-symbol indented_block_body) [6370 7101])
                    ("valuerefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7120 7124]))                          
                        :documentation "Return a list of weak references to the values.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the values around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [7106 7558])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7574 7578]))                          )
                        (reparse-symbol indented_block_body) [7563 7730]))                  
                :type "class")
                nil [853 7730])
            ("KeyedRef" type
               (:documentation "Specialized reference that includes a key corresponding to the value.

    This is used in the WeakValueDictionary to avoid having to create
    a function object for each key stored in the mapping.  A shared
    callback object can use the 'key' attribute of a KeyedRef instead
    of getting a reference to the key from an enclosing scope.

    "
                :superclasses ("ref")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [8116 8134])
                    ("__new__" function (:arguments 
                      ( ("type" variable nil (reparse-symbol function_parameters) [8152 8156])
                        ("ob" variable nil (reparse-symbol function_parameters) [8158 8160])
                        ("callback" variable nil (reparse-symbol function_parameters) [8162 8170])
                        ("key" variable nil (reparse-symbol function_parameters) [8172 8175]))                      ) (reparse-symbol indented_block_body) [8140 8268])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [8320 8365]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8286 8290])
                            ("ob" variable nil (reparse-symbol function_parameters) [8292 8294])
                            ("callback" variable nil (reparse-symbol function_parameters) [8296 8304])
                            ("key" variable nil (reparse-symbol function_parameters) [8306 8309]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8273 8366]))                  
                :type "class")
                nil [7732 8366])
            ("WeakKeyDictionary" type
               (:documentation " Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    "
                :superclasses ("UserDict.UserDict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8860 8874])
                            ("remove" function (:arguments 
                              ( ("k" variable nil (reparse-symbol function_parameters) [8894 8895])
                                ("selfref" variable nil (reparse-symbol function_parameters) [8897 8904]))                              ) (reparse-symbol indented_block_body) [8883 9127])
                            ("self" variable nil (reparse-symbol indented_block_body) [9135 9156])
                            ("self" variable nil (reparse-symbol indented_block_body) [9220 9247])
                            ("self" variable nil (reparse-symbol indented_block_body) [9256 9279])
                            ("if" code nil (reparse-symbol indented_block_body) [9288 9339]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8834 8838])
                            ("dict" variable nil (reparse-symbol function_parameters) [8840 8844]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8821 9339])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9365 9369]))                          )
                        (reparse-symbol indented_block_body) [9344 9816])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9837 9841])
                            ("key" variable nil (reparse-symbol function_parameters) [9843 9846]))                          )
                        (reparse-symbol indented_block_body) [9821 9881])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9902 9906])
                            ("key" variable nil (reparse-symbol function_parameters) [9908 9911]))                          )
                        (reparse-symbol indented_block_body) [9886 9949])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9967 9971]))                          )
                        (reparse-symbol indented_block_body) [9954 10028])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10049 10053])
                            ("key" variable nil (reparse-symbol function_parameters) [10055 10058])
                            ("value" variable nil (reparse-symbol function_parameters) [10060 10065]))                          )
                        (reparse-symbol indented_block_body) [10033 10118])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10132 10136]))                          )
                        (reparse-symbol indented_block_body) [10123 10320])
                    ("__copy__" variable nil (reparse-symbol indented_block_body) [10325 10340])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10363 10367])
                            ("memo" variable nil (reparse-symbol function_parameters) [10369 10373]))                          )
                        (reparse-symbol indented_block_body) [10346 10604])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10617 10621])
                            ("key" variable nil (reparse-symbol function_parameters) [10623 10626])
                            ("default" variable nil (reparse-symbol function_parameters) [10628 10635]))                          )
                        (reparse-symbol indented_block_body) [10609 10690])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10707 10711])
                            ("key" variable nil (reparse-symbol function_parameters) [10713 10716]))                          )
                        (reparse-symbol indented_block_body) [10695 10836])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10858 10862])
                            ("key" variable nil (reparse-symbol function_parameters) [10864 10867]))                          )
                        (reparse-symbol indented_block_body) [10841 10987])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11002 11006]))                          )
                        (reparse-symbol indented_block_body) [10992 11175])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11194 11198]))                          )
                        (reparse-symbol indented_block_body) [11180 11389])
                    ("iterkeyrefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11410 11414]))                          
                        :documentation "Return an iterator that yields the weak references to the keys.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the keys around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [11394 11933])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11951 11955]))                          )
                        (reparse-symbol indented_block_body) [11938 12131])
                    ("__iter__" variable nil (reparse-symbol indented_block_body) [12136 12155])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12176 12180]))                          )
                        (reparse-symbol indented_block_body) [12161 12296])
                    ("keyrefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12313 12317]))                          
                        :documentation "Return a list of weak references to the keys.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the keys around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [12301 12745])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12759 12763]))                          )
                        (reparse-symbol indented_block_body) [12750 12913])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12930 12934]))                          )
                        (reparse-symbol indented_block_body) [12918 13083])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13096 13100])
                            ("key" variable nil (reparse-symbol function_parameters) [13102 13105])
                            ("args" variable nil (reparse-symbol function_parameters) [13107 13112]))                          )
                        (reparse-symbol indented_block_body) [13088 13161])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13181 13185])
                            ("key" variable nil (reparse-symbol function_parameters) [13187 13190])
                            ("default" variable nil (reparse-symbol function_parameters) [13192 13199]))                          )
                        (reparse-symbol indented_block_body) [13166 13275])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13291 13295])
                            ("dict" variable nil (reparse-symbol function_parameters) [13297 13301])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [13308 13316]))                          )
                        (reparse-symbol indented_block_body) [13280 13601]))                  
                :type "class")
                nil [8368 13601]))          
      :file "weakref.py"
      :pointmax 13601
      :fsize 13600
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax '((NAME 6713 . 6717) (IF 6728 . 6730) (ELSE 6736 . 6740)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Utilities for with-statement contexts.  See PEP 343.\"\"\"" code nil nil [1 59])
            ("sys" include nil nil [61 71])
            ("functools" include nil nil [72 99])
            ("warnings" include nil nil [100 125])
            ("__all__" variable nil nil [127 176])
            ("GeneratorContextManager" type
               (:documentation "Helper for @contextmanager decorator."
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [303 317]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [283 287])
                            ("gen" variable nil (reparse-symbol function_parameters) [289 292]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [270 318])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [337 341]))                          )
                        (reparse-symbol indented_block_body) [323 479])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [497 501])
                            ("type" variable nil (reparse-symbol function_parameters) [503 507])
                            ("value" variable nil (reparse-symbol function_parameters) [509 514])
                            ("traceback" variable nil (reparse-symbol function_parameters) [516 525]))                          )
                        (reparse-symbol indented_block_body) [484 1916]))                  
                :type "class")
                nil [178 1916])
            ("contextmanager" function
               (:documentation "@contextmanager decorator.

    Typical usage:

        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        with some_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [1937 1941]))                  )
                nil [1918 2557])
            ("nested" function
               (:documentation "Combine multiple context managers into a single nested context manager.

   This function has been deprecated in favour of the multiple manager form
   of the with statement.

   The one advantage of this function over the multiple manager form of the
   with statement is that argument unpacking allows it to be
   used with a variable number of context managers as follows:

      with nested(*managers):
          do_something()

    "
                :arguments 
                  ( ("managers" variable nil (reparse-symbol function_parameters) [2586 2595]))                  
                :decorators 
                  ( ("contextmanager" function (:type "decorator") nil nil))                  )
                nil [2559 3912])
            ("closing" type
               (:documentation "Context to automatically close something at the end of a block.

    Code like this:

        with closing(<module>.open(<arguments>)) as f:
            <block>

    is equivalent to this:

        f = <module>.open(<arguments>)
        try:
            <block>
        finally:
            f.close()

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4293 4311]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4271 4275])
                            ("thing" variable nil (reparse-symbol function_parameters) [4277 4282]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4258 4312])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4330 4334]))                          )
                        (reparse-symbol indented_block_body) [4316 4363])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4380 4384])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [4386 4395]))                          )
                        (reparse-symbol indented_block_body) [4367 4425]))                  
                :type "class")
                nil [3914 4425]))          
      :file "contextlib.py"
      :pointmax 4425
      :fsize 4424
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax '((INDENT_BLOCK 3452 . 3912) (NEWLINE 3451 . 3452) (COLON 3450 . 3451) (FINALLY 3443 . 3450)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Get useful information from live Python objects.

This module encapsulates the interface provided by the internal special
attributes (func_*, co_*, im_*, tb_*, etc.) in a friendlier fashion.
It also provides some help for examining source code and class layout.

Here are some of the useful functions provided by this module:

    ismodule(), isclass(), ismethod(), isfunction(), isgeneratorfunction(),
        isgenerator(), istraceback(), isframe(), iscode(), isbuiltin(),
        isroutine() - check object types
    getmembers() - get members of an object that satisfy a given condition

    getfile(), getsourcefile(), getsource() - find an object's source code
    getdoc(), getcomments() - get documentation on an object
    getmodule() - determine the module that an object came from
    getclasstree() - arrange classes so as to represent their hierarchy

    getargspec(), getargvalues(), getcallargs() - get info about function arguments
    formatargspec(), formatargvalues() - format an argument spec
    getouterframes(), getinnerframes() - get info about frames
    currentframe() - get the current stack frame
    stack(), trace() - get info about frames on the stack or in a traceback
\"\"\"" code nil nil [30 1238])
            ("__author__" variable nil nil [1296 1337])
            ("__date__" variable nil nil [1338 1361])
            ("sys" include nil nil [1363 1373])
            ("os" include nil nil [1374 1383])
            ("types" include nil nil [1384 1396])
            ("string" include nil nil [1397 1410])
            ("re" include nil nil [1411 1420])
            ("dis" include nil nil [1421 1431])
            ("imp" include nil nil [1432 1442])
            ("tokenize" include nil nil [1443 1458])
            ("linecache" include nil nil [1459 1475])
            ("operator" include nil nil [1476 1507])
            ("collections" include nil nil [1508 1542])
            ("CO_OPTIMIZED, CO_NEWLOCALS, CO_VARARGS, CO_VARKEYWORDS" code nil nil [1587 1662])
            ("CO_NESTED, CO_GENERATOR, CO_NOFREE" code nil nil [1663 1716])
            ("TPFLAGS_IS_ABSTRACT" code nil nil [1740 1769])
            ("ismodule" function
               (:documentation "Return true if the object is a module.

    Module objects provide these attributes:
        __doc__         documentation string
        __file__        filename (missing for built-in modules)"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1860 1866]))                  )
                nil [1847 2121])
            ("isclass" function
               (:documentation "Return true if the object is a class.

    Class objects provide these attributes:
        __doc__         documentation string
        __module__      name of module in which this class was defined"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2134 2140]))                  )
                nil [2122 2407])
            ("ismethod" function
               (:documentation "Return true if the object is an instance method.

    Instance method objects provide these attributes:
        __doc__         documentation string
        __name__        name with which this method was defined
        im_class        class object in which this method belongs
        im_func         function object containing implementation of method
        im_self         instance to which this method is bound, or None"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2421 2427]))                  )
                nil [2408 2915])
            ("ismethoddescriptor" function
               (:documentation "Return true if the object is a method descriptor.

    But not if ismethod() or isclass() or isfunction() are true.

    This is new in Python 2.2, and, for example, is true of int.__add__.
    An object passing this test has a __get__ attribute but not a __set__
    attribute, but beyond that the set of attributes varies.  __name__ is
    usually sensible, and __doc__ often is.

    Methods implemented via descriptors that also pass one of the other
    tests return false from the ismethoddescriptor() test, simply because
    the other tests promise more -- you can, e.g., count on having the
    im_func attribute (etc) when an object passes ismethod()."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2939 2945]))                  )
                nil [2916 3878])
            ("isdatadescriptor" function
               (:documentation "Return true if the object is a data descriptor.

    Data descriptors have both a __get__ and a __set__ attribute.  Examples are
    properties (defined in Python) and getsets and members (defined in C).
    Typically, data descriptors will also have __name__ and __doc__ attributes
    (properties, getsets, and members have both of these attributes), but this
    is not guaranteed."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [3900 3906]))                  )
                nil [3879 4375])
            ("if" code nil nil [4376 4953])
            ("if" code nil nil [4954 5531])
            ("isfunction" function
               (:documentation "Return true if the object is a user-defined function.

    Function objects provide these attributes:
        __doc__         documentation string
        __name__        name with which this function was defined
        func_code       code object containing compiled function bytecode
        func_defaults   tuple of any default values for arguments
        func_doc        (same as __doc__)
        func_globals    global namespace in which this function was defined
        func_name       (same as __name__)"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [5547 5553]))                  )
                nil [5532 6130])
            ("isgeneratorfunction" function
               (:documentation "Return true if the object is a user-defined generator function.

    Generator function objects provides same attributes as functions.

    See help(isfunction) for attributes listing."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [6155 6161]))                  )
                nil [6131 6478])
            ("isgenerator" function
               (:documentation "Return true if the object is a generator.

    Generator objects provide these attributes:
        __iter__        defined to support iteration over container
        close           raises a new GeneratorExit exception inside the
                        generator to terminate the iteration
        gi_code         code object
        gi_frame        frame object or possibly None once the generator has
                        been exhausted
        gi_running      set to 1 when generator is executing, 0 otherwise
        next            return the next item from the container
        send            resumes the generator and \"sends\" a value that becomes
                        the result of the current yield-expression
        throw           used to raise an exception inside the generator"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [6495 6501]))                  )
                nil [6479 7365])
            ("istraceback" function
               (:documentation "Return true if the object is a traceback.

    Traceback objects provide these attributes:
        tb_frame        frame object at this level
        tb_lasti        index of last attempted instruction in bytecode
        tb_lineno       current line number in Python source code
        tb_next         next inner traceback object (called by this level)"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [7382 7388]))                  )
                nil [7366 7807])
            ("isframe" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [7820 7826]))              ) nil [7808 8779])
            ("iscode" function
               (:documentation "Return true if the object is a code object.

    Code objects provide these attributes:
        co_argcount     number of arguments (not including * or ** args)
        co_code         string of raw compiled bytecode
        co_consts       tuple of constants used in the bytecode
        co_filename     name of file in which this code object was created
        co_firstlineno  number of first line in Python source code
        co_flags        bitmap: 1=optimized | 2=newlocals | 4=*arg | 8=**arg
        co_lnotab       encoded mapping of line numbers to bytecode indices
        co_name         name with which this code object was defined
        co_names        tuple of names of local variables
        co_nlocals      number of local variables
        co_stacksize    virtual machine stack space required
        co_varnames     tuple of names of arguments and local variables"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [8791 8797]))                  )
                nil [8780 9742])
            ("isbuiltin" function
               (:documentation "Return true if the object is a built-in function or method.

    Built-in functions and methods provide these attributes:
        __doc__         documentation string
        __name__        original name of this function or method
        __self__        instance to which a method is bound, or None"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [9757 9763]))                  )
                nil [9743 10134])
            ("isroutine" function
               (:documentation "Return true if the object is any kind of function or method."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [10149 10155]))                  )
                nil [10135 10368])
            ("isabstract" function
               (:documentation "Return true if the object is an abstract base class (ABC)."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [10384 10390]))                  )
                nil [10369 10547])
            ("getmembers" function
               (:documentation "Return all members of an object as (name, value) pairs sorted by name.
    Optionally, only return members that satisfy a given predicate."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [10563 10569])
                    ("predicate" variable nil (reparse-symbol function_parameters) [10571 10580]))                  )
                nil [10548 11013])
            ("Attribute" variable nil nil [11014 11084])
            ("classify_class_attrs" function
               (:documentation "Return list of attribute-descriptor tuples.

    For each name in dir(cls), the return list contains a 4-tuple
    with these elements:

        0. The name (a string).

        1. The kind of attribute this is, one of these strings:
               'class method'    created via classmethod()
               'static method'   created via staticmethod()
               'property'        created via property()
               'method'          any other flavor of method
               'data'            not a method

        2. The class which defined this attribute (a class).

        3. The object as obtained directly from the defining class's
           __dict__, not via getattr.  This is especially important for
           data attributes:  C.data is just a data object, but
           C.__dict__['data'] may be a data descriptor with additional
           info, like a __doc__ string.
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [11111 11114]))                  )
                nil [11086 13576])
            ("_searchbases" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [13670 13673])
                ("accum" variable nil (reparse-symbol function_parameters) [13675 13680]))              ) nil [13653 13855])
            ("getmro" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [13867 13870]))              ) nil [13856 14104])
            ("indentsize" function
               (:documentation "Return the indent size, in spaces, at the start of a line of text."
                :arguments 
                  ( ("line" variable nil (reparse-symbol function_parameters) [14196 14200]))                  )
                nil [14181 14372])
            ("getdoc" function
               (:documentation "Get the documentation string for an object.

    All tabs are expanded to spaces.  To clean up docstrings that are
    indented to line up with blocks of code, any whitespace than can be
    uniformly removed from the second line onwards is removed."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [14384 14390]))                  )
                nil [14373 14830])
            ("cleandoc" function
               (:documentation "Clean up indentation from docstrings.

    Any whitespace that can be uniformly removed from the second line
    onwards is removed."
                :arguments 
                  ( ("doc" variable nil (reparse-symbol function_parameters) [14844 14847]))                  )
                nil [14831 15825])
            ("getfile" function
               (:documentation "Work out which source or compiled file an object was defined in."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [15838 15844]))                  )
                nil [15826 16740])
            ("ModuleInfo" variable nil nil [16741 16810])
            ("getmoduleinfo" function
               (:documentation "Get the module name, suffix, mode, and module type for a given file."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [16830 16834]))                  )
                nil [16812 17319])
            ("getmodulename" function
               (:documentation "Return the module name for a given file, or None."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [17338 17342]))                  )
                nil [17320 17464])
            ("getsourcefile" function
               (:documentation "Return the filename that can be used to locate an object's source.
    Return None if no way can be identified to get the source.
    "
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [17483 17489]))                  )
                nil [17465 18301])
            ("getabsfile" function
               (:documentation "Return an absolute path to the source or compiled file for an object.

    The idea is for each object to have a unique origin, so this routine
    normalizes the result as much as possible."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [18317 18323])
                    ("_filename" variable nil (reparse-symbol function_parameters) [18325 18334]))                  )
                nil [18302 18686])
            ("modulesbyfile" variable nil nil [18687 18705])
            ("_filesbymodname" variable nil nil [18706 18726])
            ("getmodule" function
               (:documentation "Return the module an object was defined in, or None if not found."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [18742 18748])
                    ("_filename" variable nil (reparse-symbol function_parameters) [18750 18759]))                  )
                nil [18728 20610])
            ("findsource" function
               (:documentation "Return the entire source file and starting line number for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a list of all the lines
    in the file and the line number indexes a line in that list.  An IOError
    is raised if the source code cannot be retrieved."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [20626 20632]))                  )
                nil [20611 23121])
            ("getcomments" function
               (:documentation "Get lines of comments immediately preceding an object's source code.

    Returns None when source can't be found.
    "
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [23138 23144]))                  )
                nil [23122 24931])
            ("EndOfBlock" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [24932 24966])
            ("BlockFinder" type
               (:documentation "Provide a tokeneater() method to detect the end of a code block."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [25093 25108])
                            ("self" variable nil (reparse-symbol indented_block_body) [25117 25138])
                            ("self" variable nil (reparse-symbol indented_block_body) [25147 25167])
                            ("self" variable nil (reparse-symbol indented_block_body) [25176 25197])
                            ("self" variable nil (reparse-symbol indented_block_body) [25206 25219]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25078 25082]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25065 25220])
                    ("tokeneater" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25240 25244])
                            ("type" variable nil (reparse-symbol function_parameters) [25246 25250])
                            ("token" variable nil (reparse-symbol function_parameters) [25252 25257])
                            ("srow_scol" variable nil (reparse-symbol function_parameters) [25259 25268])
                            ("erow_ecol" variable nil (reparse-symbol function_parameters) [25270 25279])
                            ("line" variable nil (reparse-symbol function_parameters) [25281 25285]))                          )
                        (reparse-symbol indented_block_body) [25225 26685]))                  
                :type "class")
                nil [24967 26685])
            ("getblock" function
               (:documentation "Extract the block of code at the top of the given list of lines."
                :arguments 
                  ( ("lines" variable nil (reparse-symbol function_parameters) [26699 26704]))                  )
                nil [26686 26983])
            ("getsourcelines" function
               (:documentation "Return a list of source lines and starting line number for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a list of the lines
    corresponding to the object and the line number indicates where in the
    original source file the first line of code was found.  An IOError is
    raised if the source code cannot be retrieved."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [27003 27009]))                  )
                nil [26984 27571])
            ("getsource" function
               (:documentation "Return the text of the source code for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a single string.  An
    IOError is raised if the source code cannot be retrieved."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [27586 27592]))                  )
                nil [27572 27943])
            ("walktree" function
               (:documentation "Recursive helper function for getclasstree()."
                :arguments 
                  ( ("classes" variable nil (reparse-symbol function_parameters) [28033 28040])
                    ("children" variable nil (reparse-symbol function_parameters) [28042 28050])
                    ("parent" variable nil (reparse-symbol function_parameters) [28052 28058]))                  )
                nil [28020 28364])
            ("getclasstree" function
               (:documentation "Arrange the given list of classes into a hierarchy of nested lists.

    Where a nested list appears, it contains classes derived from the class
    whose entry immediately precedes the list.  Each entry is a 2-tuple
    containing a class and a tuple of its base classes.  If the 'unique'
    argument is true, exactly one entry appears in the returned structure
    for each class in the given list.  Otherwise, classes using multiple
    inheritance and their descendants will appear multiple times."
                :arguments 
                  ( ("classes" variable nil (reparse-symbol function_parameters) [28382 28389])
                    ("unique" variable nil (reparse-symbol function_parameters) [28391 28397]))                  )
                nil [28365 29461])
            ("Arguments" variable nil nil [29538 29598])
            ("getargs" function
               (:documentation "Get information about the arguments accepted by a code object.

    Three things are returned: (args, varargs, varkw), where 'args' is
    a list of argument names (possibly containing nested lists), and
    'varargs' and 'varkw' are the names of the * and ** arguments or None."
                :arguments 
                  ( ("co" variable nil (reparse-symbol function_parameters) [29612 29614]))                  )
                nil [29600 31950])
            ("ArgSpec" variable nil nil [31951 32016])
            ("getargspec" function
               (:documentation "Get the names and default values of a function's arguments.

    A tuple of four things is returned: (args, varargs, varkw, defaults).
    'args' is a list of the argument names (it may contain nested lists).
    'varargs' and 'varkw' are the names of the * and ** arguments or None.
    'defaults' is an n-tuple of the default values of the last n arguments.
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [32033 32037]))                  )
                nil [32018 32678])
            ("ArgInfo" variable nil nil [32679 32742])
            ("getargvalues" function
               (:documentation "Get information about arguments passed into a particular frame.

    A tuple of four things is returned: (args, varargs, varkw, locals).
    'args' is a list of the argument names (it may contain nested lists).
    'varargs' and 'varkw' are the names of the * and ** arguments or None.
    'locals' is the locals dictionary of the given frame."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [32761 32766]))                  )
                nil [32744 33229])
            ("joinseq" function (:arguments 
              ( ("seq" variable nil (reparse-symbol function_parameters) [33242 33245]))              ) nil [33230 33365])
            ("strseq" function
               (:documentation "Recursively walk a sequence, stringifying each element."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [33377 33383])
                    ("convert" variable nil (reparse-symbol function_parameters) [33385 33392])
                    ("join" variable nil (reparse-symbol function_parameters) [33394 33398]))                  )
                nil [33366 33633])
            ("formatargspec" function
               (:documentation "Format an argument spec from the 4 values returned by getargspec.

    The first four arguments are (args, varargs, varkw, defaults).  The
    other four arguments are the corresponding optional formatting functions
    that are called to turn names and values into strings.  The ninth
    argument is an optional function to format the sequence of arguments."
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [33652 33656])
                    ("varargs" variable nil (reparse-symbol function_parameters) [33658 33665])
                    ("varkw" variable nil (reparse-symbol function_parameters) [33672 33677])
                    ("defaults" variable nil (reparse-symbol function_parameters) [33684 33692])
                    ("formatarg" variable nil (reparse-symbol function_parameters) [33717 33726])
                    ("formatvarargs" variable nil (reparse-symbol function_parameters) [33750 33763])
                    ("formatvarkw" variable nil (reparse-symbol function_parameters) [33807 33818])
                    ("formatvalue" variable nil (reparse-symbol function_parameters) [33863 33874])
                    ("join" variable nil (reparse-symbol function_parameters) [33926 33930]))                  )
                nil [33634 34795])
            ("formatargvalues" function
               (:documentation "Format an argument spec from the 4 values returned by getargvalues.

    The first four arguments are (args, varargs, varkw, locals).  The
    next four arguments are the corresponding optional formatting functions
    that are called to turn names and values into strings.  The ninth
    argument is an optional function to format the sequence of arguments."
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [34816 34820])
                    ("varargs" variable nil (reparse-symbol function_parameters) [34822 34829])
                    ("varkw" variable nil (reparse-symbol function_parameters) [34831 34836])
                    ("locals" variable nil (reparse-symbol function_parameters) [34838 34844])
                    ("formatarg" variable nil (reparse-symbol function_parameters) [34866 34875])
                    ("formatvarargs" variable nil (reparse-symbol function_parameters) [34901 34914])
                    ("formatvarkw" variable nil (reparse-symbol function_parameters) [34960 34971])
                    ("formatvalue" variable nil (reparse-symbol function_parameters) [35018 35029])
                    ("join" variable nil (reparse-symbol function_parameters) [35083 35087]))                  )
                nil [34796 35949])
            ("getcallargs" function
               (:documentation "Get the mapping of arguments to values.

    A dict is returned, with keys the function argument names (including the
    names of the * and ** arguments, if any), and values the respective bound
    values from 'positional' and 'named'."
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [35966 35970])
                    ("positional" variable nil (reparse-symbol function_parameters) [35972 35983])
                    ("named" variable nil (reparse-symbol function_parameters) [35985 35992]))                  )
                nil [35950 39797])
            ("Traceback" variable nil nil [39875 39957])
            ("getframeinfo" function
               (:documentation "Get information about a frame or traceback object.

    A tuple of five things is returned: the filename, the line number of
    the current line, the function name, a list of lines of context from
    the source code, and the index of the current line within that list.
    The optional second argument specifies the number of lines of context
    to return, which are centered around the current line."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [39976 39981])
                    ("context" variable nil (reparse-symbol function_parameters) [39983 39990]))                  )
                nil [39959 41189])
            ("getlineno" function
               (:documentation "Get the line number from a frame object, allowing for optimization."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [41204 41209]))                  )
                nil [41190 41384])
            ("getouterframes" function
               (:documentation "Get a list of records for a frame and all higher (calling) frames.

    Each record contains a frame object, filename, line number, function
    name, a list of lines of context, and index within the context."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [41404 41409])
                    ("context" variable nil (reparse-symbol function_parameters) [41411 41418]))                  )
                nil [41385 41794])
            ("getinnerframes" function
               (:documentation "Get a list of records for a traceback's frame and all lower frames.

    Each record contains a frame object, filename, line number, function
    name, a list of lines of context, and index within the context."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [41814 41816])
                    ("context" variable nil (reparse-symbol function_parameters) [41818 41825]))                  )
                nil [41795 42197])
            ("if" code nil nil [42198 42306])
            ("stack" function
               (:documentation "Return a list of records for the stack above the caller's frame."
                :arguments 
                  ( ("context" variable nil (reparse-symbol function_parameters) [42317 42324]))                  )
                nil [42307 42457])
            ("trace" function
               (:documentation "Return a list of records for the stack below the current exception."
                :arguments 
                  ( ("context" variable nil (reparse-symbol function_parameters) [42468 42475]))                  )
                nil [42458 42612]))          
      :file "inspect.py"
      :pointmax 42612
      :fsize 42615
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax '((NAME 37556 . 37568) (IF 37585 . 37587) (ELSE 37597 . 37601) (NAME 21178 . 21182) (IF 21196 . 21198) (ELSE 21210 . 21214)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Filename matching with shell patterns.

fnmatch(FILENAME, PATTERN) matches according to the local convention.
fnmatchcase(FILENAME, PATTERN) always takes case in account.

The functions operate by translating the pattern into a regular
expression.  They cache the compiled regular expressions for speed.

The function translate(PATTERN) returns a regular expression
corresponding to PATTERN.  (It does not compile it.)
\"\"\"" code nil nil [1 426])
            ("re" include nil nil [428 437])
            ("__all__" variable nil nil [439 498])
            ("_cache" variable nil nil [500 511])
            ("_MAXCACHE" variable nil nil [512 527])
            ("_purge" function (:documentation "Clear the pattern cache") nil [529 596])
            ("fnmatch" function
               (:documentation "Test whether FILENAME matches PATTERN.

    Patterns are Unix shell style:

    *       matches everything
    ?       matches any single character
    [seq]   matches any character in seq
    [!seq]  matches any char not in seq

    An initial period in FILENAME is not special.
    Both FILENAME and PATTERN are first case-normalized
    if the operating system requires it.
    If you don't want this, use fnmatchcase(FILENAME, PATTERN).
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [609 613])
                    ("pat" variable nil (reparse-symbol function_parameters) [615 618]))                  )
                nil [597 1192])
            ("filter" function
               (:documentation "Return the subset of the list NAMES that match PAT"
                :arguments 
                  ( ("names" variable nil (reparse-symbol function_parameters) [1204 1209])
                    ("pat" variable nil (reparse-symbol function_parameters) [1211 1214]))                  )
                nil [1193 1895])
            ("fnmatchcase" function
               (:documentation "Test whether FILENAME matches PATTERN, including case.

    This is a version of fnmatch() which doesn't case-normalize
    its arguments.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1912 1916])
                    ("pat" variable nil (reparse-symbol function_parameters) [1918 1921]))                  )
                nil [1896 2320])
            ("translate" function
               (:documentation "Translate a shell PATTERN to a regular expression.

    There is no way to quote meta-characters.
    "
                :arguments 
                  ( ("pat" variable nil (reparse-symbol function_parameters) [2335 2338]))                  )
                nil [2321 3316]))          
      :file "fnmatch.py"
      :pointmax 3316
      :fsize 3315
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "collections.py"
      :fsize 27798
      :lastmodtime '(22656 53672 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Helper to provide extensibility for pickle/cPickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
\"\"\"" code nil nil [1 179])
            ("types" include nil nil [181 222])
            ("__all__" variable nil nil [224 332])
            ("dispatch_table" variable nil nil [334 353])
            ("pickle" function (:arguments 
              ( ("ob_type" variable nil (reparse-symbol function_parameters) [366 373])
                ("pickle_function" variable nil (reparse-symbol function_parameters) [375 390])
                ("constructor_ob" variable nil (reparse-symbol function_parameters) [392 406]))              ) nil [355 886])
            ("constructor" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [903 909]))              ) nil [887 1009])
            ("try" code nil nil [1068 1233])
            ("_reconstructor" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1295 1298])
                ("base" variable nil (reparse-symbol function_parameters) [1300 1304])
                ("state" variable nil (reparse-symbol function_parameters) [1306 1311]))              ) nil [1276 1518])
            ("_HEAPTYPE" code nil nil [1519 1535])
            ("_reduce_ex" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1614 1618])
                    ("proto" variable nil (reparse-symbol function_parameters) [1620 1625]))                  )
                nil [1599 2561])
            ("__newobj__" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [2616 2619])
                ("args" variable nil (reparse-symbol function_parameters) [2621 2626]))              ) nil [2601 2664])
            ("_slotnames" function
               (:documentation "Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2680 2683]))                  )
                nil [2665 4346])
            ("_extension_registry" variable nil nil [4828 4852])
            ("_inverted_registry" variable nil nil [4882 4905])
            ("_extension_cache" variable nil nil [4936 4957])
            ("add_extension" function
               (:documentation "Register an extension code."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5132 5138])
                    ("name" variable nil (reparse-symbol function_parameters) [5140 5144])
                    ("code" variable nil (reparse-symbol function_parameters) [5146 5150]))                  )
                nil [5114 5861])
            ("remove_extension" function
               (:documentation "Unregister an extension code.  For testing only."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5883 5889])
                    ("name" variable nil (reparse-symbol function_parameters) [5891 5895])
                    ("code" variable nil (reparse-symbol function_parameters) [5897 5901]))                  )
                nil [5862 6321])
            ("clear_extension_cache" function nil nil [6322 6380]))          
      :file "copy_reg.py"
      :pointmax 6801
      :fsize 6800
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Guess the MIME type of a file.

This module defines two useful functions:

guess_type(url, strict=1) -- guess the MIME type and encoding of a URL.

guess_extension(type, strict=1) -- guess the extension for a given MIME type.

It also contains the following, for tuning the behavior:

Data:

knownfiles -- list of files to parse
inited -- flag set when init() has been called
suffix_map -- dictionary mapping suffixes to suffixes
encodings_map -- dictionary mapping suffixes to encodings
types_map -- dictionary mapping suffixes to types

Functions:

init([files]) -- parse a list of files, default knownfiles (on Windows, the
  default values are taken from the registry)
read_mime_types(file) -- parse one file, return a dictionary or None
\"\"\"" code nil nil [1 749])
            ("os" include nil nil [751 760])
            ("sys" include nil nil [761 771])
            ("posixpath" include nil nil [772 788])
            ("urllib" include nil nil [789 802])
            ("try" code nil nil [803 866])
            ("__all__" variable nil nil [867 979])
            ("knownfiles" variable nil nil [981 1466])
            ("inited" variable nil nil [1468 1482])
            ("_db" variable nil nil [1483 1493])
            ("MimeTypes" type
               (:documentation "MIME-types datastore.

    This datastore can handle information from mime.types-style files
    and supports basic determination of MIME type from a filename or
    URL, and can guess a reasonable extension given a MIME type.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1815 1849])
                            ("self" variable nil (reparse-symbol indented_block_body) [1857 1898])
                            ("self" variable nil (reparse-symbol indented_block_body) [1907 1942])
                            ("self" variable nil (reparse-symbol indented_block_body) [1951 1976])
                            ("self" variable nil (reparse-symbol indented_block_body) [2017 2046])
                            ("for" code nil (reparse-symbol indented_block_body) [2055 2136])
                            ("for" code nil (reparse-symbol indented_block_body) [2144 2229])
                            ("for" code nil (reparse-symbol indented_block_body) [2237 2296]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1773 1777])
                            ("filenames" variable nil (reparse-symbol function_parameters) [1779 1788])
                            ("strict" variable nil (reparse-symbol function_parameters) [1793 1799]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1760 2296])
                    ("add_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2314 2318])
                            ("type" variable nil (reparse-symbol function_parameters) [2320 2324])
                            ("ext" variable nil (reparse-symbol function_parameters) [2326 2329])
                            ("strict" variable nil (reparse-symbol function_parameters) [2331 2337]))                          
                        :documentation "Add a mapping between a type and an extension.

        When the extension is already known, the new
        type will replace the old one. When the type
        is already known the extension will be added
        to the list of known extensions.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        ")
                        (reparse-symbol indented_block_body) [2301 2916])
                    ("guess_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2936 2940])
                            ("url" variable nil (reparse-symbol function_parameters) [2942 2945])
                            ("strict" variable nil (reparse-symbol function_parameters) [2947 2953]))                          
                        :documentation "Guess the type of a file based on its URL.

        Return value is a tuple (type, encoding) where type is None if
        the type can't be guessed (no or unknown suffix) or a string
        of the form type/subtype, usable for a MIME Content-type
        header; and encoding is None for no encoding or the name of
        the program used to encode (e.g. compress or gzip).  The
        mappings are table driven.  Encoding suffixes are case
        sensitive; type suffixes are first tried case sensitive, then
        case insensitive.

        The suffixes .tgz, .taz and .tz (case sensitive!) are all
        mapped to '.tar.gz'.  (This is table-driven too, using the
        dictionary suffix_map.)

        Optional `strict' argument when False adds a bunch of commonly found,
        but non-standard types.
        ")
                        (reparse-symbol indented_block_body) [2921 5472])
                    ("guess_all_extensions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5502 5506])
                            ("type" variable nil (reparse-symbol function_parameters) [5508 5512])
                            ("strict" variable nil (reparse-symbol function_parameters) [5514 5520]))                          
                        :documentation "Guess the extensions for a file based on its MIME type.

        Return value is a list of strings giving the possible filename
        extensions, including the leading dot ('.').  The extension is not
        guaranteed to have been associated with any particular data stream,
        but would be mapped to the MIME type `type' by guess_type().

        Optional `strict' argument when false adds a bunch of commonly found,
        but non-standard types.
        ")
                        (reparse-symbol indented_block_body) [5477 6296])
                    ("guess_extension" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6321 6325])
                            ("type" variable nil (reparse-symbol function_parameters) [6327 6331])
                            ("strict" variable nil (reparse-symbol function_parameters) [6333 6339]))                          
                        :documentation "Guess the extension for a file based on its MIME type.

        Return value is a string giving a filename extension,
        including the leading dot ('.').  The extension is not
        guaranteed to have been associated with any particular data
        stream, but would be mapped to the MIME type `type' by
        guess_type().  If no extension can be guessed for `type', None
        is returned.

        Optional `strict' argument when false adds a bunch of commonly found,
        but non-standard types.
        ")
                        (reparse-symbol indented_block_body) [6301 7026])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7040 7044])
                            ("filename" variable nil (reparse-symbol function_parameters) [7046 7054])
                            ("strict" variable nil (reparse-symbol function_parameters) [7056 7062]))                          
                        :documentation "
        Read a single mime.types-format file, specified by pathname.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        ")
                        (reparse-symbol indented_block_body) [7031 7371])
                    ("readfp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7387 7391])
                            ("fp" variable nil (reparse-symbol function_parameters) [7393 7395])
                            ("strict" variable nil (reparse-symbol function_parameters) [7397 7403]))                          
                        :documentation "
        Read a single mime.types-format file.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        ")
                        (reparse-symbol indented_block_body) [7376 8077])
                    ("read_windows_registry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8108 8112])
                            ("strict" variable nil (reparse-symbol function_parameters) [8114 8120]))                          
                        :documentation "
        Load the MIME types database from Windows registry.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        ")
                        (reparse-symbol indented_block_body) [8082 9783]))                  
                :type "class")
                nil [1496 9783])
            ("guess_type" function
               (:documentation "Guess the type of a file based on its URL.

    Return value is a tuple (type, encoding) where type is None if the
    type can't be guessed (no or unknown suffix) or a string of the
    form type/subtype, usable for a MIME Content-type header; and
    encoding is None for no encoding or the name of the program used
    to encode (e.g. compress or gzip).  The mappings are table
    driven.  Encoding suffixes are case sensitive; type suffixes are
    first tried case sensitive, then case insensitive.

    The suffixes .tgz, .taz and .tz (case sensitive!) are all mapped
    to \".tar.gz\".  (This is table-driven too, using the dictionary
    suffix_map).

    Optional `strict' argument when false adds a bunch of commonly found, but
    non-standard types.
    "
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [9799 9802])
                    ("strict" variable nil (reparse-symbol function_parameters) [9804 9810]))                  )
                nil [9784 10669])
            ("guess_all_extensions" function
               (:documentation "Guess the extensions for a file based on its MIME type.

    Return value is a list of strings giving the possible filename
    extensions, including the leading dot ('.').  The extension is not
    guaranteed to have been associated with any particular data
    stream, but would be mapped to the MIME type `type' by
    guess_type().  If no extension can be guessed for `type', None
    is returned.

    Optional `strict' argument when false adds a bunch of commonly found,
    but non-standard types.
    "
                :arguments 
                  ( ("type" variable nil (reparse-symbol function_parameters) [10696 10700])
                    ("strict" variable nil (reparse-symbol function_parameters) [10702 10708]))                  )
                nil [10671 11321])
            ("guess_extension" function
               (:documentation "Guess the extension for a file based on its MIME type.

    Return value is a string giving a filename extension, including the
    leading dot ('.').  The extension is not guaranteed to have been
    associated with any particular data stream, but would be mapped to the
    MIME type `type' by guess_type().  If no extension can be guessed for
    `type', None is returned.

    Optional `strict' argument when false adds a bunch of commonly found,
    but non-standard types.
    "
                :arguments 
                  ( ("type" variable nil (reparse-symbol function_parameters) [11342 11346])
                    ("strict" variable nil (reparse-symbol function_parameters) [11348 11354]))                  )
                nil [11322 11936])
            ("add_type" function
               (:documentation "Add a mapping between a type and an extension.

    When the extension is already known, the new
    type will replace the old one. When the type
    is already known the extension will be added
    to the list of known extensions.

    If strict is true, information will be added to
    list of standard types, else to the list of non-standard
    types.
    "
                :arguments 
                  ( ("type" variable nil (reparse-symbol function_parameters) [11950 11954])
                    ("ext" variable nil (reparse-symbol function_parameters) [11956 11959])
                    ("strict" variable nil (reparse-symbol function_parameters) [11961 11967]))                  )
                nil [11937 12425])
            ("init" function (:arguments 
              ( ("files" variable nil (reparse-symbol function_parameters) [12436 12441]))              ) nil [12427 13043])
            ("read_mime_types" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [13065 13069]))              ) nil [13045 13242])
            ("_default_mime_types" function nil nil [13244 19600])
            ("_default_mime_types" code nil nil [19602 19623])
            ("if" code nil nil [19626 20943]))          
      :file "mimetypes.py"
      :pointmax 20943
      :fsize 20942
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags nil
      :file "string.py"
      :pointmax 21549
      :fsize 21548
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax '(($EOI 21549 . 21549)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Temporary files.

This module provides generic, low- and high-level interfaces for
creating temporary files and directories.  All of the interfaces
provided by this module can be used without fear of race conditions
except for 'mktemp'.  'mktemp' is subject to race conditions and
should not be used; it is provided for backward compatibility only.

This module also provides some data items to the user:

  TMP_MAX  - maximum number of names that will be tried before
             giving up.
  template - the default prefix for all temporary names.
             You may change this to control the default prefix.
  tempdir  - If this is set to a string before the first use of
             any routine from this module, it will be considered as
             another candidate location to store temporary files.
\"\"\"" code nil nil [1 819])
            ("__all__" variable nil nil [821 1164])
            ("io" include nil nil [1179 1195])
            ("os" include nil nil [1196 1212])
            ("errno" include nil nil [1213 1235])
            ("random" include nil nil [1236 1272])
            ("try" code nil nil [1274 1394])
            ("try" code nil nil [1395 1779])
            ("try" code nil nil [1781 1870])
            ("_allocate_lock" variable nil nil [1870 1908])
            ("_text_openflags" code nil nil [1910 1965])
            ("if" code nil nil [1966 2037])
            ("if" code nil nil [2037 2106])
            ("_bin_openflags" variable nil nil [2107 2139])
            ("if" code nil nil [2140 2204])
            ("if" code nil nil [2205 2285])
            ("template" variable nil nil [2286 2302])
            ("_once_lock" variable nil nil [2326 2355])
            ("if" code nil nil [2357 2682])
            ("_exists" function (:arguments 
              ( ("fn" variable nil (reparse-symbol function_parameters) [2695 2697]))              ) nil [2683 2800])
            ("_RandomNameSequence" type
               (:documentation "An instance of _RandomNameSequence generates an endless
    sequence of unpredictable strings which can safely be incorporated
    into file names.  Each string is six characters long.  Multiple
    threads can safely use the same instance at the same time.

    _RandomNameSequence is an iterator."
                :members 
                  ( ("characters" variable nil (reparse-symbol indented_block_body) [3142 3268])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3302 3331])
                            ("self" variable nil (reparse-symbol indented_block_body) [3340 3373]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3287 3291]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3274 3374])
                    ("rng" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3401 3405]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3379 3589])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3607 3611]))                          )
                        (reparse-symbol indented_block_body) [3594 3634])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3648 3652]))                          )
                        (reparse-symbol indented_block_body) [3639 3918]))                  
                :type "class")
                nil [2801 3918])
            ("_candidate_tempdir_list" function (:documentation "Generate a list of candidate temporary directories which
    _get_default_tempdir will try.") nil [3919 4752])
            ("_get_default_tempdir" function (:documentation "Calculate the default directory to use for temporary files.
    This routine should be called exactly once.

    We determine whether or not a candidate temp dir is usable by
    trying to create and write to a file in that directory.  If this
    is successful, the test file is deleted.  To prevent denial of
    service, the name of the test file must be randomized.") nil [4753 6562])
            ("_name_sequence" variable nil nil [6563 6584])
            ("_get_candidate_names" function (:documentation "Common setup sequence for all user-callable interfaces.") nil [6586 6950])
            ("_mkstemp_inner" function
               (:documentation "Code common to mkstemp, TemporaryFile, and NamedTemporaryFile."
                :arguments 
                  ( ("dir" variable nil (reparse-symbol function_parameters) [6971 6974])
                    ("pre" variable nil (reparse-symbol function_parameters) [6976 6979])
                    ("suf" variable nil (reparse-symbol function_parameters) [6981 6984])
                    ("flags" variable nil (reparse-symbol function_parameters) [6986 6991]))                  )
                nil [6952 7859])
            ("gettempprefix" function (:documentation "Accessor for tempdir.template.") nil [7889 7971])
            ("tempdir" variable nil nil [7972 7986])
            ("gettempdir" function (:documentation "Accessor for tempfile.tempdir.") nil [7988 8282])
            ("mkstemp" function (:arguments 
              ( ("suffix" variable nil (reparse-symbol function_parameters) [8295 8301])
                ("prefix" variable nil (reparse-symbol function_parameters) [8306 8312])
                ("dir" variable nil (reparse-symbol function_parameters) [8323 8326])
                ("text" variable nil (reparse-symbol function_parameters) [8333 8337]))              ) nil [8283 9610])
            ("mkdtemp" function
               (:documentation "User-callable function to create and return a unique temporary
    directory.  The return value is the pathname of the directory.

    Arguments are as for mkstemp, except that the 'text' argument is
    not accepted.

    The directory is readable, writable, and searchable only by the
    creating user.

    Caller is responsible for deleting the directory when done with it.
    "
                :arguments 
                  ( ("suffix" variable nil (reparse-symbol function_parameters) [9624 9630])
                    ("prefix" variable nil (reparse-symbol function_parameters) [9635 9641])
                    ("dir" variable nil (reparse-symbol function_parameters) [9652 9655]))                  )
                nil [9612 10844])
            ("mktemp" function
               (:documentation "User-callable function to return a unique temporary file name.  The
    file is not created.

    Arguments are as for mkstemp, except that the 'text' argument is
    not accepted.

    This function is unsafe and should not be used.  The file name
    refers to a file that did not exist at some point, but by the time
    you get around to creating it, someone else may have beaten you to
    the punch.
    "
                :arguments 
                  ( ("suffix" variable nil (reparse-symbol function_parameters) [10856 10862])
                    ("prefix" variable nil (reparse-symbol function_parameters) [10867 10873])
                    ("dir" variable nil (reparse-symbol function_parameters) [10884 10887]))                  )
                nil [10845 11797])
            ("_TemporaryFileWrapper" type
               (:documentation "Temporary file wrapper

    This class provides a wrapper around files opened for
    temporary use.  In particular, it seeks to automatically
    remove the file when it is no longer needed.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [12093 12109])
                            ("self" variable nil (reparse-symbol indented_block_body) [12118 12134])
                            ("self" variable nil (reparse-symbol indented_block_body) [12143 12168])
                            ("self" variable nil (reparse-symbol indented_block_body) [12177 12197]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12053 12057])
                            ("file" variable nil (reparse-symbol function_parameters) [12059 12063])
                            ("name" variable nil (reparse-symbol function_parameters) [12065 12069])
                            ("delete" variable nil (reparse-symbol function_parameters) [12071 12077]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12040 12198])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12219 12223])
                            ("name" variable nil (reparse-symbol function_parameters) [12225 12229]))                          )
                        (reparse-symbol indented_block_body) [12203 12572])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12709 12713]))                          )
                        (reparse-symbol indented_block_body) [12695 12766])
                    ("if" code nil (reparse-symbol indented_block_body) [12978 14011]))                  
                :type "class")
                nil [11799 14011])
            ("NamedTemporaryFile" function
               (:documentation "Create and return a temporary file.
    Arguments:
    'prefix', 'suffix', 'dir' -- as for mkstemp.
    'mode' -- the mode argument to os.fdopen (default \"w+b\").
    'bufsize' -- the buffer size argument to os.fdopen (default -1).
    'delete' -- whether the file is deleted on close (default True).
    The file is created as mkstemp() would do it.

    Returns an object with a file-like interface; the name of the file
    is accessible as its 'name' attribute.  The file will be automatically
    deleted when it is closed unless the 'delete' argument is set to False.
    "
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [14036 14040])
                    ("bufsize" variable nil (reparse-symbol function_parameters) [14048 14055])
                    ("suffix" variable nil (reparse-symbol function_parameters) [14060 14066])
                    ("prefix" variable nil (reparse-symbol function_parameters) [14094 14100])
                    ("dir" variable nil (reparse-symbol function_parameters) [14111 14114])
                    ("delete" variable nil (reparse-symbol function_parameters) [14121 14127]))                  )
                nil [14013 15327])
            ("if" code nil nil [15328 16471])
            ("SpooledTemporaryFile" type
               (:documentation "Temporary file wrapper, specialized to switch from
    StringIO to a real file when it exceeds a certain size or
    when a fileno is needed.
    "
                :members 
                  ( ("_rolled" variable nil (reparse-symbol indented_block_body) [16661 16676])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [16801 16825])
                            ("self" variable nil (reparse-symbol indented_block_body) [16834 16859])
                            ("self" variable nil (reparse-symbol indented_block_body) [16868 16888])
                            ("self" variable nil (reparse-symbol indented_block_body) [16897 16959]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16695 16699])
                            ("max_size" variable nil (reparse-symbol function_parameters) [16701 16709])
                            ("mode" variable nil (reparse-symbol function_parameters) [16713 16717])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [16725 16732])
                            ("suffix" variable nil (reparse-symbol function_parameters) [16754 16760])
                            ("prefix" variable nil (reparse-symbol function_parameters) [16765 16771])
                            ("dir" variable nil (reparse-symbol function_parameters) [16782 16785]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16682 16960])
                    ("_check" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16976 16980])
                            ("file" variable nil (reparse-symbol function_parameters) [16982 16986]))                          )
                        (reparse-symbol indented_block_body) [16965 17131])
                    ("rollover" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17149 17153]))                          )
                        (reparse-symbol indented_block_body) [17136 17427])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17675 17679]))                          )
                        (reparse-symbol indented_block_body) [17661 17802])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17820 17824])
                            ("exc" variable nil (reparse-symbol function_parameters) [17826 17829])
                            ("value" variable nil (reparse-symbol function_parameters) [17831 17836])
                            ("tb" variable nil (reparse-symbol function_parameters) [17838 17840]))                          )
                        (reparse-symbol indented_block_body) [17807 17870])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17908 17912]))                          )
                        (reparse-symbol indented_block_body) [17895 17952])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17967 17971]))                          )
                        (reparse-symbol indented_block_body) [17957 18001])
                    ("closed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18031 18035]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18006 18071])
                    ("fileno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18087 18091]))                          )
                        (reparse-symbol indented_block_body) [18076 18153])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18168 18172]))                          )
                        (reparse-symbol indented_block_body) [18158 18202])
                    ("isatty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18218 18222]))                          )
                        (reparse-symbol indented_block_body) [18207 18260])
                    ("mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18288 18292]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18265 18420])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18448 18452]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18425 18558])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18572 18576]))                          )
                        (reparse-symbol indented_block_body) [18563 18610])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18624 18628])
                            ("args" variable nil (reparse-symbol function_parameters) [18630 18635]))                          )
                        (reparse-symbol indented_block_body) [18615 18676])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18694 18698])
                            ("args" variable nil (reparse-symbol function_parameters) [18700 18705]))                          )
                        (reparse-symbol indented_block_body) [18681 18750])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18769 18773])
                            ("args" variable nil (reparse-symbol function_parameters) [18775 18780]))                          )
                        (reparse-symbol indented_block_body) [18755 18826])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18840 18844])
                            ("args" variable nil (reparse-symbol function_parameters) [18846 18851]))                          )
                        (reparse-symbol indented_block_body) [18831 18885])
                    ("softspace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18918 18922]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18890 18961])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18975 18979]))                          )
                        (reparse-symbol indented_block_body) [18966 19015])
                    ("truncate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19033 19037]))                          )
                        (reparse-symbol indented_block_body) [19020 19070])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19085 19089])
                            ("s" variable nil (reparse-symbol function_parameters) [19091 19092]))                          )
                        (reparse-symbol indented_block_body) [19075 19192])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19212 19216])
                            ("iterable" variable nil (reparse-symbol function_parameters) [19218 19226]))                          )
                        (reparse-symbol indented_block_body) [19197 19338])
                    ("xreadlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19358 19362])
                            ("args" variable nil (reparse-symbol function_parameters) [19364 19369]))                          )
                        (reparse-symbol indented_block_body) [19343 19548]))                  
                :type "class")
                nil [16472 19548]))          
      :file "tempfile.py"
      :pointmax 19548
      :fsize 19547
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax '((INDENT_BLOCK 5973 . 6450) (NEWLINE 5972 . 5973) (COLON 5971 . 5972) (TRY 5548 . 5551) (AS 5967 . 5969)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Path operations common to more than one OS
Do not use directly.  The OS specific modules import the appropriate
functions from this module themselves.
\"\"\"" code nil nil [1 159])
            ("os" include nil nil [160 169])
            ("stat" include nil nil [170 181])
            ("__all__" variable nil nil [183 296])
            ("try" code nil nil [299 485])
            ("exists" function
               (:documentation "Test whether a path exists.  Returns False for broken symbolic links"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [592 596]))                  )
                nil [581 767])
            ("isfile" function
               (:documentation "Test whether a path is a regular file"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [905 909]))                  )
                nil [894 1074])
            ("isdir" function
               (:documentation "Return true if the pathname refers to an existing directory."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1236 1237]))                  )
                nil [1226 1422])
            ("getsize" function
               (:documentation "Return the size of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1436 1444]))                  )
                nil [1424 1544])
            ("getmtime" function
               (:documentation "Return the last modification time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1559 1567]))                  )
                nil [1546 1686])
            ("getatime" function
               (:documentation "Return the last access time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1701 1709]))                  )
                nil [1688 1822])
            ("getctime" function
               (:documentation "Return the metadata change time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1837 1845]))                  )
                nil [1824 1962])
            ("commonprefix" function (:arguments 
              ( ("m" variable nil (reparse-symbol function_parameters) [2031 2032]))              ) nil [2014 2263])
            ("_splitext" function
               (:documentation "Split the extension from a pathname.

    Extension is everything from the last dot to the end, ignoring
    leading dots.  Returns \"(root, ext)\"; ext may be empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [2563 2564])
                    ("sep" variable nil (reparse-symbol function_parameters) [2566 2569])
                    ("altsep" variable nil (reparse-symbol function_parameters) [2571 2577])
                    ("extsep" variable nil (reparse-symbol function_parameters) [2579 2585]))                  )
                nil [2549 3202]))          
      :file "genericpath.py"
      :pointmax 3202
      :fsize 3201
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"" code nil nil [102 159])
            ("types" include nil nil [161 173])
            ("_weakrefset" include nil nil [175 206])
            ("_C" type
               (:members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [238 253])
            ("_InstanceType" variable nil nil [253 279])
            ("abstractmethod" function
               (:documentation "A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    "
                :arguments 
                  ( ("funcobj" variable nil (reparse-symbol function_parameters) [301 308]))                  )
                nil [282 876])
            ("abstractproperty" type
               (:documentation "A decorator indicating abstract properties.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract properties are overridden.
    The abstract properties can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractproperty
            def my_abstract_property(self):
                ...

    This defines a read-only property; you can also define a read-write
    abstract property using the 'long' form of property declaration:

        class C:
            __metaclass__ = ABCMeta
            def getx(self): ...
            def setx(self, value): ...
            x = abstractproperty(getx, setx)
    "
                :superclasses ("property")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1742 1769]))                  
                :type "class")
                nil [878 1770])
            ("ABCMeta" type
               (:documentation "Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).

    "
                :superclasses ("type")
                :members 
                  ( ("_abc_invalidation_counter" variable nil (reparse-symbol indented_block_body) [2614 2643])
                    ("__new__" function (:arguments 
                      ( ("mcls" variable nil (reparse-symbol function_parameters) [2661 2665])
                        ("name" variable nil (reparse-symbol function_parameters) [2667 2671])
                        ("bases" variable nil (reparse-symbol function_parameters) [2673 2678])
                        ("namespace" variable nil (reparse-symbol function_parameters) [2680 2689]))                      ) (reparse-symbol indented_block_body) [2649 3526])
                    ("register" function
                       (:documentation "Register a virtual subclass of an ABC."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3544 3547])
                            ("subclass" variable nil (reparse-symbol function_parameters) [3549 3557]))                          )
                        (reparse-symbol indented_block_body) [3531 4266])
                    ("_dump_registry" function
                       (:documentation "Debug helper to print the ABC registry."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4290 4293])
                            ("file" variable nil (reparse-symbol function_parameters) [4295 4299]))                          )
                        (reparse-symbol indented_block_body) [4271 4698])
                    ("__instancecheck__" function
                       (:documentation "Override for isinstance(instance, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4725 4728])
                            ("instance" variable nil (reparse-symbol function_parameters) [4730 4738]))                          )
                        (reparse-symbol indented_block_body) [4703 5559])
                    ("__subclasscheck__" function
                       (:documentation "Override for issubclass(subclass, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5586 5589])
                            ("subclass" variable nil (reparse-symbol function_parameters) [5591 5599]))                          )
                        (reparse-symbol indented_block_body) [5564 7146]))                  
                :type "class")
                nil [1772 7146]))          
      :file "abc.py"
      :pointmax 7146
      :fsize 7145
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"A more or less complete user-defined wrapper around dictionary objects.\"\"\"" code nil nil [1 78])
            ("UserDict" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [139 275])
                            ("self" variable nil (reparse-symbol indented_block_body) [283 297])
                            ("args" variable nil (reparse-symbol indented_block_body) [306 321])
                            ("if" code nil (reparse-symbol indented_block_body) [330 428])
                            ("if" code nil (reparse-symbol indented_block_body) [436 781])
                            ("self" variable nil (reparse-symbol indented_block_body) [789 803])
                            ("if" code nil (reparse-symbol indented_block_body) [812 863])
                            ("if" code nil (reparse-symbol indented_block_body) [871 919]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [113 118])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [120 128]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [100 919])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [936 940]))                          )
                        (reparse-symbol indented_block_body) [923 966])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [982 986])
                            ("dict" variable nil (reparse-symbol function_parameters) [988 992]))                          )
                        (reparse-symbol indented_block_body) [970 1133])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [1137 1152])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1190 1194]))                          )
                        (reparse-symbol indented_block_body) [1178 1219])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1239 1243])
                            ("key" variable nil (reparse-symbol function_parameters) [1245 1248]))                          )
                        (reparse-symbol indented_block_body) [1223 1450])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1470 1474])
                            ("key" variable nil (reparse-symbol function_parameters) [1476 1479])
                            ("item" variable nil (reparse-symbol function_parameters) [1481 1485]))                          )
                        (reparse-symbol indented_block_body) [1454 1510])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1530 1534])
                            ("key" variable nil (reparse-symbol function_parameters) [1536 1539]))                          )
                        (reparse-symbol indented_block_body) [1514 1561])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1575 1579]))                          )
                        (reparse-symbol indented_block_body) [1565 1600])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1613 1617]))                          )
                        (reparse-symbol indented_block_body) [1604 1908])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1921 1925]))                          )
                        (reparse-symbol indented_block_body) [1912 1952])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1966 1970]))                          )
                        (reparse-symbol indented_block_body) [1956 1998])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2016 2020]))                          )
                        (reparse-symbol indented_block_body) [2002 2052])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2069 2073]))                          )
                        (reparse-symbol indented_block_body) [2056 2104])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2123 2127]))                          )
                        (reparse-symbol indented_block_body) [2108 2160])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2175 2179]))                          )
                        (reparse-symbol indented_block_body) [2164 2208])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2224 2228])
                            ("key" variable nil (reparse-symbol function_parameters) [2230 2233]))                          )
                        (reparse-symbol indented_block_body) [2212 2260])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [2275 2280])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [2282 2290]))                      ) (reparse-symbol indented_block_body) [2264 3282])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3294 3298])
                            ("key" variable nil (reparse-symbol function_parameters) [3300 3303])
                            ("failobj" variable nil (reparse-symbol function_parameters) [3305 3312]))                          )
                        (reparse-symbol indented_block_body) [3286 3400])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3419 3423])
                            ("key" variable nil (reparse-symbol function_parameters) [3425 3428])
                            ("failobj" variable nil (reparse-symbol function_parameters) [3430 3437]))                          )
                        (reparse-symbol indented_block_body) [3404 3530])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3542 3546])
                            ("key" variable nil (reparse-symbol function_parameters) [3548 3551])
                            ("args" variable nil (reparse-symbol function_parameters) [3553 3558]))                          )
                        (reparse-symbol indented_block_body) [3534 3602])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3618 3622]))                          )
                        (reparse-symbol indented_block_body) [3606 3660])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3681 3685])
                            ("key" variable nil (reparse-symbol function_parameters) [3687 3690]))                          )
                        (reparse-symbol indented_block_body) [3664 3725])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3759 3762])
                            ("iterable" variable nil (reparse-symbol function_parameters) [3764 3772])
                            ("value" variable nil (reparse-symbol function_parameters) [3774 3779]))                          )
                        (reparse-symbol indented_block_body) [3729 3878]))                  
                :type "class")
                nil [80 3878])
            ("IterableUserDict" type
               (:superclasses ("UserDict")
                :members 
                  ( ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3930 3934]))                          )
                        (reparse-symbol indented_block_body) [3917 3968]))                  
                :type "class")
                nil [3879 3968])
            ("_abcoll" include nil nil [3969 3983])
            ("_abcoll" code nil nil [3984 4033])
            ("DictMixin" type
               (:members 
                  ( ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4535 4539]))                          )
                        (reparse-symbol indented_block_body) [4522 4592])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4608 4612])
                            ("key" variable nil (reparse-symbol function_parameters) [4614 4617]))                          )
                        (reparse-symbol indented_block_body) [4596 4725])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4746 4750])
                            ("key" variable nil (reparse-symbol function_parameters) [4752 4755]))                          )
                        (reparse-symbol indented_block_body) [4729 4791])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4872 4876]))                          )
                        (reparse-symbol indented_block_body) [4858 4933])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4950 4954]))                          )
                        (reparse-symbol indented_block_body) [4937 4988])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5062 5066]))                          )
                        (reparse-symbol indented_block_body) [5047 5127])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5142 5146]))                          )
                        (reparse-symbol indented_block_body) [5131 5197])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5211 5215]))                          )
                        (reparse-symbol indented_block_body) [5201 5256])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5270 5274]))                          )
                        (reparse-symbol indented_block_body) [5260 5335])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5354 5358])
                            ("key" variable nil (reparse-symbol function_parameters) [5360 5363])
                            ("default" variable nil (reparse-symbol function_parameters) [5365 5372]))                          )
                        (reparse-symbol indented_block_body) [5339 5502])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5514 5518])
                            ("key" variable nil (reparse-symbol function_parameters) [5520 5523])
                            ("args" variable nil (reparse-symbol function_parameters) [5525 5530]))                          )
                        (reparse-symbol indented_block_body) [5506 5863])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5879 5883]))                          )
                        (reparse-symbol indented_block_body) [5867 6063])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6078 6082])
                            ("other" variable nil (reparse-symbol function_parameters) [6084 6089])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6096 6104]))                          )
                        (reparse-symbol indented_block_body) [6067 6594])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6606 6610])
                            ("key" variable nil (reparse-symbol function_parameters) [6612 6615])
                            ("default" variable nil (reparse-symbol function_parameters) [6617 6624]))                          )
                        (reparse-symbol indented_block_body) [6598 6726])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6743 6747]))                          )
                        (reparse-symbol indented_block_body) [6730 6794])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6810 6814])
                            ("other" variable nil (reparse-symbol function_parameters) [6816 6821]))                          )
                        (reparse-symbol indented_block_body) [6798 7006])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7022 7026]))                          )
                        (reparse-symbol indented_block_body) [7010 7061]))                  
                :type "class")
                nil [4036 7061]))          
      :file "UserDict.py"
      :pointmax 7061
      :fsize 7060
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("_weakref" include nil nil [145 169])
            ("__all__" variable nil nil [171 192])
            ("_IterationGuard" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [543 582]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [483 487])
                            ("weakcontainer" variable nil (reparse-symbol function_parameters) [489 502]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [470 583])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [602 606]))                          )
                        (reparse-symbol indented_block_body) [588 723])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [741 745])
                            ("e" variable nil (reparse-symbol function_parameters) [747 748])
                            ("t" variable nil (reparse-symbol function_parameters) [750 751])
                            ("b" variable nil (reparse-symbol function_parameters) [753 754]))                          )
                        (reparse-symbol indented_block_body) [728 931]))                  
                :type "class")
                nil [195 931])
            ("WeakSet" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [999 1016])
                            ("_remove" function (:arguments 
                              ( ("item" variable nil (reparse-symbol function_parameters) [1037 1041])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1043 1050]))                              ) (reparse-symbol indented_block_body) [1025 1283])
                            ("self" variable nil (reparse-symbol indented_block_body) [1291 1313])
                            ("self" variable nil (reparse-symbol indented_block_body) [1361 1388])
                            ("self" variable nil (reparse-symbol indented_block_body) [1397 1420])
                            ("if" code nil (reparse-symbol indented_block_body) [1429 1480]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [973 977])
                            ("data" variable nil (reparse-symbol function_parameters) [979 983]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [960 1480])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1506 1510]))                          )
                        (reparse-symbol indented_block_body) [1485 1630])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1648 1652]))                          )
                        (reparse-symbol indented_block_body) [1635 1965])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1982 1986]))                          )
                        (reparse-symbol indented_block_body) [1970 2049])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2071 2075])
                            ("item" variable nil (reparse-symbol function_parameters) [2077 2081]))                          )
                        (reparse-symbol indented_block_body) [2054 2206])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2226 2230]))                          )
                        (reparse-symbol indented_block_body) [2211 2329])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [2334 2349])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2363 2367])
                            ("item" variable nil (reparse-symbol function_parameters) [2369 2373]))                          )
                        (reparse-symbol indented_block_body) [2355 2494])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2509 2513]))                          )
                        (reparse-symbol indented_block_body) [2499 2613])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2627 2631]))                          )
                        (reparse-symbol indented_block_body) [2618 2670])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2683 2687]))                          )
                        (reparse-symbol indented_block_body) [2675 3016])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3032 3036])
                            ("item" variable nil (reparse-symbol function_parameters) [3038 3042]))                          )
                        (reparse-symbol indented_block_body) [3021 3152])
                    ("discard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3169 3173])
                            ("item" variable nil (reparse-symbol function_parameters) [3175 3179]))                          )
                        (reparse-symbol indented_block_body) [3157 3290])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3306 3310])
                            ("other" variable nil (reparse-symbol function_parameters) [3312 3317]))                          )
                        (reparse-symbol indented_block_body) [3295 3451])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3468 3472])
                            ("other" variable nil (reparse-symbol function_parameters) [3474 3479]))                          )
                        (reparse-symbol indented_block_body) [3456 3529])
                    ("difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3549 3553])
                            ("other" variable nil (reparse-symbol function_parameters) [3555 3560]))                          )
                        (reparse-symbol indented_block_body) [3534 3654])
                    ("__sub__" variable nil (reparse-symbol indented_block_body) [3658 3678])
                    ("difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3706 3710])
                            ("other" variable nil (reparse-symbol function_parameters) [3712 3717]))                          )
                        (reparse-symbol indented_block_body) [3684 3749])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3766 3770])
                            ("other" variable nil (reparse-symbol function_parameters) [3772 3777]))                          )
                        (reparse-symbol indented_block_body) [3753 4010])
                    ("intersection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4032 4036])
                            ("other" variable nil (reparse-symbol function_parameters) [4038 4043]))                          )
                        (reparse-symbol indented_block_body) [4015 4116])
                    ("__and__" variable nil (reparse-symbol indented_block_body) [4120 4142])
                    ("intersection_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4172 4176])
                            ("other" variable nil (reparse-symbol function_parameters) [4178 4183]))                          )
                        (reparse-symbol indented_block_body) [4148 4215])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4232 4236])
                            ("other" variable nil (reparse-symbol function_parameters) [4238 4243]))                          )
                        (reparse-symbol indented_block_body) [4219 4404])
                    ("issubset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4422 4426])
                            ("other" variable nil (reparse-symbol function_parameters) [4428 4433]))                          )
                        (reparse-symbol indented_block_body) [4409 4499])
                    ("__le__" variable nil (reparse-symbol indented_block_body) [4503 4520])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4537 4541])
                            ("other" variable nil (reparse-symbol function_parameters) [4543 4548]))                          )
                        (reparse-symbol indented_block_body) [4526 4611])
                    ("issuperset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4631 4635])
                            ("other" variable nil (reparse-symbol function_parameters) [4637 4642]))                          )
                        (reparse-symbol indented_block_body) [4616 4710])
                    ("__ge__" variable nil (reparse-symbol indented_block_body) [4714 4733])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4750 4754])
                            ("other" variable nil (reparse-symbol function_parameters) [4756 4761]))                          )
                        (reparse-symbol indented_block_body) [4739 4824])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4840 4844])
                            ("other" variable nil (reparse-symbol function_parameters) [4846 4851]))                          )
                        (reparse-symbol indented_block_body) [4829 4999])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5015 5019])
                            ("other" variable nil (reparse-symbol function_parameters) [5021 5026]))                          )
                        (reparse-symbol indented_block_body) [5004 5168])
                    ("symmetric_difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5198 5202])
                            ("other" variable nil (reparse-symbol function_parameters) [5204 5209]))                          )
                        (reparse-symbol indented_block_body) [5173 5313])
                    ("__xor__" variable nil (reparse-symbol indented_block_body) [5317 5347])
                    ("symmetric_difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5385 5389])
                            ("other" variable nil (reparse-symbol function_parameters) [5391 5396]))                          )
                        (reparse-symbol indented_block_body) [5353 5428])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5445 5449])
                            ("other" variable nil (reparse-symbol function_parameters) [5451 5456]))                          )
                        (reparse-symbol indented_block_body) [5432 5713])
                    ("union" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5728 5732])
                            ("other" variable nil (reparse-symbol function_parameters) [5734 5739]))                          )
                        (reparse-symbol indented_block_body) [5718 5809])
                    ("__or__" variable nil (reparse-symbol indented_block_body) [5813 5827])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5848 5852])
                            ("other" variable nil (reparse-symbol function_parameters) [5854 5859]))                          )
                        (reparse-symbol indented_block_body) [5833 5912]))                  
                :type "class")
                nil [933 5912]))          
      :file "_weakrefset.py"
      :pointmax 5912
      :fsize 5911
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
atexit.py - allow programmer to define multiple exit functions to be executed
upon normal program termination.

One public function, register, is defined.
\"\"\"" code nil nil [1 163])
            ("__all__" variable nil nil [165 187])
            ("sys" include nil nil [189 199])
            ("_exithandlers" variable nil nil [201 219])
            ("_run_exitfuncs" function (:documentation "run any registered exit functions

    _exithandlers is traversed in reverse order so functions are executed
    last in, first out.
    ") nil [220 863])
            ("register" function
               (:documentation "register a function to be executed upon normal program termination

    func - function to be called at exit
    targs - optional arguments to pass to func
    kargs - optional keyword arguments to pass to func

    func is returned to facilitate usage as a decorator.
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [878 882])
                    ("targs" variable nil (reparse-symbol function_parameters) [884 890])
                    ("kargs" variable nil (reparse-symbol function_parameters) [892 899]))                  )
                nil [865 1249])
            ("if" code nil nil [1250 1381])
            ("sys" variable nil nil [1381 1410])
            ("if" code nil nil [1412 1706]))          
      :file "atexit.py"
      :pointmax 1706
      :fsize 1705
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Disassembler of Python byte code into mnemonics.\"\"\"" code nil nil [1 55])
            ("sys" include nil nil [57 67])
            ("types" include nil nil [68 80])
            ("opcode" include nil nil [82 102])
            ("opcode" include nil nil [103 145])
            ("__all__" code nil nil [147 255])
            ("del" code nil nil [256 272])
            ("_have_code" variable nil nil [274 378])
            ("dis" function
               (:documentation "Disassemble classes, methods, functions, or code.

    With no argument, disassemble the last traceback.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [388 389]))                  )
                nil [380 1345])
            ("distb" function
               (:documentation "Disassemble a traceback (default: last traceback)."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [1356 1358]))                  )
                nil [1346 1684])
            ("disassemble" function
               (:documentation "Disassemble a code object."
                :arguments 
                  ( ("co" variable nil (reparse-symbol function_parameters) [1701 1703])
                    ("lasti" variable nil (reparse-symbol function_parameters) [1705 1710]))                  )
                nil [1685 3223])
            ("disassemble_string" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [3247 3251])
                ("lasti" variable nil (reparse-symbol function_parameters) [3253 3258])
                ("varnames" variable nil (reparse-symbol function_parameters) [3263 3271])
                ("names" variable nil (reparse-symbol function_parameters) [3278 3283])
                ("constants" variable nil (reparse-symbol function_parameters) [3313 3322]))              ) nil [3224 4534])
            ("disco" variable nil nil [4535 4554])
            ("findlabels" function
               (:documentation "Detect all offsets in a byte code which are jump targets.

    Return the list of offsets.

    "
                :arguments 
                  ( ("code" variable nil (reparse-symbol function_parameters) [4625 4629]))                  )
                nil [4610 5235])
            ("findlinestarts" function
               (:documentation "Find the offsets in a byte code which are start of lines in the source.

    Generate pairs (offset, lineno) as described in Python/compile.c.

    "
                :arguments 
                  ( ("code" variable nil (reparse-symbol function_parameters) [5255 5259]))                  )
                nil [5236 5931])
            ("_test" function (:documentation "Simple test program to disassemble a file.") nil [5932 6460])
            ("if" code nil nil [6461 6500]))          
      :file "dis.py"
      :pointmax 6500
      :fsize 6499
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags nil
      :file "tokenize.py"
      :pointmax 17484
      :fsize 17483
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax '(($EOI 17484 . 17484)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Thread module emulating a subset of Java's threading model.\"\"\"" code nil nil [1 66])
            ("sys" include nil nil [68 86])
            ("try" code nil nil [88 172])
            ("warnings" include nil nil [173 188])
            ("collections" include nil nil [190 229])
            ("itertools" include nil nil [230 267])
            ("time" include nil nil [268 315])
            ("traceback" include nil nil [316 363])
            ("__all__" variable nil nil [944 1206])
            ("_start_new_thread" variable nil nil [1208 1251])
            ("_allocate_lock" variable nil nil [1252 1289])
            ("_get_ident" variable nil nil [1290 1319])
            ("ThreadError" variable nil nil [1320 1346])
            ("del" code nil nil [1347 1357])
            ("warnings" code nil nil [1472 1603])
            ("_VERBOSE" variable nil nil [1886 1902])
            ("if" code nil nil [1904 2827])
            ("_profile_hook" variable nil nil [2867 2887])
            ("_trace_hook" variable nil nil [2888 2906])
            ("setprofile" function
               (:documentation "Set a profile function for all threads started from the threading module.

    The func will be passed to sys.setprofile() for each thread, before its
    run() method is called.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [2923 2927]))                  )
                nil [2908 3175])
            ("settrace" function
               (:documentation "Set a trace function for all threads started from the threading module.

    The func will be passed to sys.settrace() for each thread, before its run()
    method is called.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [3189 3193]))                  )
                nil [3176 3433])
            ("Lock" variable nil nil [3461 3482])
            ("RLock" function
               (:documentation "Factory function that returns a new reentrant lock.

    A reentrant lock must be released by the thread that acquired it. Once a
    thread has acquired a reentrant lock, the same thread may acquire it again
    without blocking; the thread must release it once for each time it has
    acquired it.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [3494 3499])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [3501 3509]))                  )
                nil [3484 3864])
            ("_RLock" type
               (:documentation "A reentrant lock must be released by the thread that acquired it. Once a
       thread has acquired a reentrant lock, the same thread may acquire it
       again without blocking; the thread must release it once for each time it
       has acquired it.
    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [4204 4236])
                            ("self" variable nil (reparse-symbol indented_block_body) [4245 4276])
                            ("self" variable nil (reparse-symbol indented_block_body) [4285 4304])
                            ("self" variable nil (reparse-symbol indented_block_body) [4313 4329]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4175 4179])
                            ("verbose" variable nil (reparse-symbol function_parameters) [4181 4188]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4162 4330])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4348 4352]))                          )
                        (reparse-symbol indented_block_body) [4335 4585])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4602 4606])
                            ("blocking" variable nil (reparse-symbol function_parameters) [4608 4616]))                          )
                        (reparse-symbol indented_block_body) [4590 8048]))                  
                :type "class")
                nil [3865 8048])
            ("Condition" function
               (:documentation "Factory function that returns a new condition variable object.

    A condition variable allows one or more threads to wait until they are
    notified by another thread.

    If the lock argument is given and not None, it must be a Lock or RLock
    object, and it is used as the underlying lock. Otherwise, a new RLock object
    is created and used as the underlying lock.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [8064 8069])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [8071 8079]))                  )
                nil [8050 8513])
            ("_Condition" type
               (:documentation "Condition variables allow one or more threads to wait until they are
       notified by another thread.
    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [8719 8751])
                            ("if" code nil (reparse-symbol indented_block_body) [8760 8804])
                            ("self" variable nil (reparse-symbol indented_block_body) [8812 8830])
                            ("self" variable nil (reparse-symbol indented_block_body) [8899 8926])
                            ("self" variable nil (reparse-symbol indented_block_body) [8935 8962])
                            ("try" code nil (reparse-symbol indented_block_body) [9186 9291])
                            ("try" code nil (reparse-symbol indented_block_body) [9299 9410])
                            ("try" code nil (reparse-symbol indented_block_body) [9418 9515])
                            ("self" variable nil (reparse-symbol indented_block_body) [9523 9542]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8679 8683])
                            ("lock" variable nil (reparse-symbol function_parameters) [8685 8689])
                            ("verbose" variable nil (reparse-symbol function_parameters) [8696 8703]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8666 9543])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9562 9566]))                          )
                        (reparse-symbol indented_block_body) [9548 9608])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9626 9630])
                            ("args" variable nil (reparse-symbol function_parameters) [9632 9637]))                          )
                        (reparse-symbol indented_block_body) [9613 9683])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9701 9705]))                          )
                        (reparse-symbol indented_block_body) [9688 9782])
                    ("_release_save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9805 9809]))                          )
                        (reparse-symbol indented_block_body) [9787 9871])
                    ("_acquire_restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9897 9901])
                            ("x" variable nil (reparse-symbol function_parameters) [9903 9904]))                          )
                        (reparse-symbol indented_block_body) [9876 9968])
                    ("_is_owned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9987 9991]))                          )
                        (reparse-symbol indented_block_body) [9973 10257])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10271 10275])
                            ("timeout" variable nil (reparse-symbol function_parameters) [10277 10284]))                          )
                        (reparse-symbol indented_block_body) [10262 14455]))                  
                :type "class")
                nil [8514 14455])
            ("Semaphore" function
               (:documentation "A factory function that returns a new semaphore.

    Semaphores manage a counter representing the number of release() calls minus
    the number of acquire() calls, plus an initial value. The acquire() method
    blocks if necessary until it can return without making the counter
    negative. If not given, value defaults to 1.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [14471 14476])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [14478 14486]))                  )
                nil [14457 14874])
            ("_Semaphore" type
               (:documentation "Semaphores manage a counter representing the number of release() calls
       minus the number of acquire() calls, plus an initial value. The acquire()
       method blocks if necessary until it can return without making the counter
       negative. If not given, value defaults to 1.

    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [15338 15421])
                            ("_Verbose" code nil (reparse-symbol indented_block_body) [15429 15461])
                            ("self" variable nil (reparse-symbol indented_block_body) [15470 15501])
                            ("self" variable nil (reparse-symbol indented_block_body) [15510 15530]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15300 15304])
                            ("value" variable nil (reparse-symbol function_parameters) [15306 15311])
                            ("verbose" variable nil (reparse-symbol function_parameters) [15315 15322]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15287 15531])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15548 15552])
                            ("blocking" variable nil (reparse-symbol function_parameters) [15554 15562]))                          
                        :documentation "Acquire a semaphore, decrementing the internal counter by one.

        When invoked without arguments: if the internal counter is larger than
        zero on entry, decrement it by one and return immediately. If it is zero
        on entry, block, waiting until some other thread has called release() to
        make it larger than zero. This is done with proper interlocking so that
        if multiple acquire() calls are blocked, release() will wake exactly one
        of them up. The implementation may pick one at random, so the order in
        which blocked threads are awakened should not be relied on. There is no
        return value in this case.

        When invoked with blocking set to true, do the same thing as when called
        without arguments, and return true.

        When invoked with blocking set to false, do not block. If a call without
        an argument would block, return false immediately; otherwise, do the
        same thing as when called without arguments, and return true.

        ")
                        (reparse-symbol indented_block_body) [15536 17198])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [17203 17222])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17240 17244]))                          
                        :documentation "Release a semaphore, incrementing the internal counter by one.

        When the counter is zero on entry and another thread is waiting for it
        to become larger than zero again, wake up that thread.

        ")
                        (reparse-symbol indented_block_body) [17228 17710])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17728 17732])
                            ("t" variable nil (reparse-symbol function_parameters) [17734 17735])
                            ("v" variable nil (reparse-symbol function_parameters) [17737 17738])
                            ("tb" variable nil (reparse-symbol function_parameters) [17740 17742]))                          )
                        (reparse-symbol indented_block_body) [17715 17768]))                  
                :type "class")
                nil [14875 17768])
            ("BoundedSemaphore" function
               (:documentation "A factory function that returns a new bounded semaphore.

    A bounded semaphore checks to make sure its current value doesn't exceed its
    initial value. If it does, ValueError is raised. In most situations
    semaphores are used to guard resources with limited capacity.

    If the semaphore is released too many times it's a sign of a bug. If not
    given, value defaults to 1.

    Like regular semaphores, bounded semaphores manage a counter representing
    the number of release() calls minus the number of acquire() calls, plus an
    initial value. The acquire() method blocks if necessary until it can return
    without making the counter negative. If not given, value defaults to 1.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [17791 17796])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [17798 17806]))                  )
                nil [17770 18572])
            ("_BoundedSemaphore" type
               (:documentation "A bounded semaphore checks to make sure its current value doesn't exceed
       its initial value. If it does, ValueError is raised. In most situations
       semaphores are used to guard resources with limited capacity.
    "
                :superclasses ("_Semaphore")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Semaphore" code nil (reparse-symbol indented_block_body) [18902 18943])
                            ("self" variable nil (reparse-symbol indented_block_body) [18952 18979]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18864 18868])
                            ("value" variable nil (reparse-symbol function_parameters) [18870 18875])
                            ("verbose" variable nil (reparse-symbol function_parameters) [18879 18886]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18851 18980])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18997 19001]))                          
                        :documentation "Release a semaphore, incrementing the internal counter by one.

        When the counter is zero on entry and another thread is waiting for it
        to become larger than zero again, wake up that thread.

        If the number of releases exceeds the number of acquires,
        raise a ValueError.

        ")
                        (reparse-symbol indented_block_body) [18985 19580]))                  
                :type "class")
                nil [18573 19580])
            ("Event" function
               (:documentation "A factory function that returns a new event.

    Events manage a flag that can be set to true with the set() method and reset
    to false with the clear() method. The wait() method blocks until the flag is
    true.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [19592 19597])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [19599 19607]))                  )
                nil [19582 19879])
            ("_Event" type
               (:documentation "A factory function that returns a new event object. An event manages a
       flag that can be set to true with the set() method and reset to false
       with the clear() method. The wait() method blocks until the flag is true.

    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [20255 20287])
                            ("self" variable nil (reparse-symbol indented_block_body) [20296 20327])
                            ("self" variable nil (reparse-symbol indented_block_body) [20336 20355]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20226 20230])
                            ("verbose" variable nil (reparse-symbol function_parameters) [20232 20239]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20213 20356])
                    ("_reset_internal_locks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20387 20391]))                          )
                        (reparse-symbol indented_block_body) [20361 20507])
                    ("isSet" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20522 20526]))                          )
                        (reparse-symbol indented_block_body) [20512 20620])
                    ("is_set" variable nil (reparse-symbol indented_block_body) [20625 20639])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20653 20657]))                          
                        :documentation "Set the internal flag to true.

        All threads waiting for the flag to become true are awakened. Threads
        that call wait() once the flag is true will not block at all.

        ")
                        (reparse-symbol indented_block_body) [20645 20958])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20973 20977]))                          
                        :documentation "Reset the internal flag to false.

        Subsequently, threads calling wait() will block until set() is called to
        set the internal flag to true again.

        ")
                        (reparse-symbol indented_block_body) [20963 21223])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21237 21241])
                            ("timeout" variable nil (reparse-symbol function_parameters) [21243 21250]))                          
                        :documentation "Block until the internal flag is true.

        If the internal flag is true on entry, return immediately. Otherwise,
        block until another thread calls set() to set the flag to true, or until
        the optional timeout occurs.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof).

        This method returns the internal flag on exit, so it will always return
        True except if a timeout is given and the operation times out.

        ")
                        (reparse-symbol indented_block_body) [21228 21988]))                  
                :type "class")
                nil [19880 21988])
            ("_counter" variable nil nil [22027 22051])
            ("_counter" code nil nil [22052 22062])
            ("_newname" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [22123 22131]))              ) nil [22110 22179])
            ("_active_limbo_lock" variable nil nil [22211 22248])
            ("_active" variable nil nil [22249 22261])
            ("_limbo" variable nil nil [22299 22310])
            ("Thread" type
               (:documentation "A class that represents a thread of control.

    This class can be safely subclassed in a limited fashion.

    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__initialized" variable nil (reparse-symbol indented_block_body) [22491 22512])
                    ("__exc_info" variable nil (reparse-symbol indented_block_body) [22763 22789])
                    ("__exc_clear" variable nil (reparse-symbol indented_block_body) [22892 22920])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"This constructor should always be called with keyword arguments. Arguments are:

        *group* should be None; reserved for future extension when a ThreadGroup
        class is implemented.

        *target* is the callable object to be invoked by the run()
        method. Defaults to None, meaning nothing is called.

        *name* is the thread name. By default, a unique name is constructed of
        the form \"Thread-N\" where N is a small decimal number.

        *args* is the argument tuple for the target invocation. Defaults to ().

        *kwargs* is a dictionary of keyword arguments for the target
        invocation. Defaults to {}.

        If a subclass overrides the constructor, it must make sure to invoke
        the base class constructor (Thread.__init__()) before doing anything
        else to the thread.

\"\"\"" code nil (reparse-symbol indented_block_body) [23043 23884])
                            ("assert" code nil (reparse-symbol indented_block_body) [23893 23952])
                            ("_Verbose" code nil (reparse-symbol indented_block_body) [23961 23993])
                            ("if" code nil (reparse-symbol indented_block_body) [24002 24045])
                            ("self" variable nil (reparse-symbol indented_block_body) [24053 24075])
                            ("self" variable nil (reparse-symbol indented_block_body) [24084 24121])
                            ("self" variable nil (reparse-symbol indented_block_body) [24130 24148])
                            ("self" variable nil (reparse-symbol indented_block_body) [24157 24179])
                            ("self" variable nil (reparse-symbol indented_block_body) [24188 24224])
                            ("self" variable nil (reparse-symbol indented_block_body) [24233 24252])
                            ("self" variable nil (reparse-symbol indented_block_body) [24261 24285])
                            ("self" variable nil (reparse-symbol indented_block_body) [24294 24316])
                            ("self" variable nil (reparse-symbol indented_block_body) [24325 24357])
                            ("self" variable nil (reparse-symbol indented_block_body) [24366 24391])
                            ("self" variable nil (reparse-symbol indented_block_body) [24518 24545]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22939 22943])
                            ("group" variable nil (reparse-symbol function_parameters) [22945 22950])
                            ("target" variable nil (reparse-symbol function_parameters) [22957 22963])
                            ("name" variable nil (reparse-symbol function_parameters) [22970 22974])
                            ("args" variable nil (reparse-symbol function_parameters) [22998 23002])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23007 23013])
                            ("verbose" variable nil (reparse-symbol function_parameters) [23020 23027]))                          
                        :documentation "This constructor should always be called with keyword arguments. Arguments are:

        *group* should be None; reserved for future extension when a ThreadGroup
        class is implemented.

        *target* is the callable object to be invoked by the run()
        method. Defaults to None, meaning nothing is called.

        *name* is the thread name. By default, a unique name is constructed of
        the form \"Thread-N\" where N is a small decimal number.

        *args* is the argument tuple for the target invocation. Defaults to ().

        *kwargs* is a dictionary of keyword arguments for the target
        invocation. Defaults to {}.

        If a subclass overrides the constructor, it must make sure to invoke
        the base class constructor (Thread.__init__()) before doing anything
        else to the thread.

"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22926 24546])
                    ("_reset_internal_locks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24577 24581]))                          )
                        (reparse-symbol indented_block_body) [24551 24896])
                    ("_block" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24926 24930]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24901 24990])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25011 25015]))                          )
                        (reparse-symbol indented_block_body) [24995 25110])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25128 25132]))                          )
                        (reparse-symbol indented_block_body) [25115 25576])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25591 25595]))                          
                        :documentation "Start the thread's activity.

        It must be called at most once per thread object. It arranges for the
        object's run() method to be invoked in a separate thread of control.

        This method will raise a RuntimeError if called more than once on the
        same thread object.

        ")
                        (reparse-symbol indented_block_body) [25581 26471])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26484 26488]))                          
                        :documentation "Method representing the thread's activity.

        You may override this method in a subclass. The standard run() method
        invokes the callable object passed to the object's constructor as the
        target argument, if any, with sequential and keyword arguments taken
        from the args and kwargs arguments, respectively.

        ")
                        (reparse-symbol indented_block_body) [26476 27172])
                    ("__bootstrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27193 27197]))                          )
                        (reparse-symbol indented_block_body) [27177 28176])
                    ("_set_ident" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28196 28200]))                          )
                        (reparse-symbol indented_block_body) [28181 28239])
                    ("__bootstrap_inner" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28266 28270]))                          )
                        (reparse-symbol indented_block_body) [28244 31677])
                    ("__stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31693 31697]))                          )
                        (reparse-symbol indented_block_body) [31682 32020])
                    ("__delete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32038 32042]))                          )
                        (reparse-symbol indented_block_body) [32025 33839])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33853 33857])
                            ("timeout" variable nil (reparse-symbol function_parameters) [33859 33866]))                          
                        :documentation "Wait until the thread terminates.

        This blocks the calling thread until the thread whose join() method is
        called terminates -- either normally or through an unhandled exception
        or until the optional timeout occurs.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof). As join() always returns None, you must call
        isAlive() after join() to decide whether a timeout happened -- if the
        thread is still alive, the join() call timed out.

        When the timeout argument is not present or None, the operation will
        block until the thread terminates.

        A thread can be join()ed many times.

        join() raises a RuntimeError if an attempt is made to join the current
        thread as that would cause a deadlock. It is also an error to join() a
        thread before it has been started and attempts to do so raises the same
        exception.

        ")
                        (reparse-symbol indented_block_body) [33844 36173])
                    ("name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36201 36205]))                          
                        :documentation "A string used for identification purposes only.

        It has no semantics. Multiple threads may be given the same name. The
        initial name is set by the constructor.

        ")
                        (reparse-symbol indented_block_body) [36178 36500])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36531 36535])
                            ("name" variable nil (reparse-symbol function_parameters) [36537 36541]))                          
                        :decorators 
                          ( ("name.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [36505 36642])
                    ("ident" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36671 36675]))                          
                        :documentation "Thread identifier of this thread or None if it has not been started.

        This is a nonzero integer. See the thread.get_ident() function. Thread
        identifiers may be recycled when a thread exits and another thread is
        created. The identifier is available even after the thread has exited.

        ")
                        (reparse-symbol indented_block_body) [36647 37102])
                    ("isAlive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37119 37123]))                          
                        :documentation "Return whether the thread is alive.

        This method returns True just before the run() method starts until just
        after the run() method terminates. The module function enumerate()
        returns a list of all alive threads.

        ")
                        (reparse-symbol indented_block_body) [37107 37515])
                    ("is_alive" variable nil (reparse-symbol indented_block_body) [37520 37538])
                    ("daemon" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37569 37573]))                          
                        :documentation "A boolean value indicating whether this thread is a daemon thread (True) or not (False).

        This must be set before start() is called, otherwise RuntimeError is
        raised. Its initial value is inherited from the creating thread; the
        main thread is not a daemon thread and therefore all threads created in
        the main thread default to daemon = False.

        The entire Python program exits when no alive non-daemon threads are
        left.

        ")
                        (reparse-symbol indented_block_body) [37544 38164])
                    ("daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38199 38203])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [38205 38213]))                          
                        :decorators 
                          ( ("daemon.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [38169 38462])
                    ("isDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38480 38484]))                          )
                        (reparse-symbol indented_block_body) [38467 38514])
                    ("setDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38533 38537])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [38539 38547]))                          )
                        (reparse-symbol indented_block_body) [38519 38581])
                    ("getName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38598 38602]))                          )
                        (reparse-symbol indented_block_body) [38586 38630])
                    ("setName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38647 38651])
                            ("name" variable nil (reparse-symbol function_parameters) [38653 38657]))                          )
                        (reparse-symbol indented_block_body) [38635 38685]))                  
                :type "class")
                nil [22339 38685])
            ("Timer" function
               (:documentation "Factory function to create a Timer object.

    Timers call a function after a specified number of seconds:

        t = Timer(30.0, f, args=[], kwargs={})
        t.start()
        t.cancel()     # stop the timer's action if it's still waiting

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [38757 38762])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [38764 38772]))                  )
                nil [38747 39071])
            ("_Timer" type
               (:documentation "Call a function after a specified number of seconds:

            t = Timer(30.0, f, args=[], kwargs={})
            t.start()
            t.cancel()     # stop the timer's action if it's still waiting

    "
                :superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [39385 39406])
                            ("self" variable nil (reparse-symbol indented_block_body) [39415 39439])
                            ("self" variable nil (reparse-symbol indented_block_body) [39448 39472])
                            ("self" variable nil (reparse-symbol indented_block_body) [39481 39497])
                            ("self" variable nil (reparse-symbol indented_block_body) [39506 39526])
                            ("self" variable nil (reparse-symbol indented_block_body) [39535 39558]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39330 39334])
                            ("interval" variable nil (reparse-symbol function_parameters) [39336 39344])
                            ("function" variable nil (reparse-symbol function_parameters) [39346 39354])
                            ("args" variable nil (reparse-symbol function_parameters) [39356 39360])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [39365 39371]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39317 39559])
                    ("cancel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39575 39579]))                          
                        :documentation "Stop the timer if it hasn't finished yet")
                        (reparse-symbol indented_block_body) [39564 39665])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39678 39682]))                          )
                        (reparse-symbol indented_block_body) [39670 39847]))                  
                :type "class")
                nil [39072 39847])
            ("_MainThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [40013 40053])
                            ("self" code nil (reparse-symbol indented_block_body) [40062 40089])
                            ("self" code nil (reparse-symbol indented_block_body) [40098 40115])
                            ("with" code nil (reparse-symbol indented_block_body) [40124 40190]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39998 40002]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39985 40190])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40211 40215]))                          )
                        (reparse-symbol indented_block_body) [40195 40239])
                    ("_exitfunc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40258 40262]))                          )
                        (reparse-symbol indented_block_body) [40244 40617]))                  
                :type "class")
                nil [39953 40617])
            ("_pickSomeNonDaemonThread" function nil nil [40618 40755])
            ("_DummyThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [41254 41302])
                            ("del" code nil (reparse-symbol indented_block_body) [41522 41545])
                            ("self" code nil (reparse-symbol indented_block_body) [41555 41582])
                            ("self" code nil (reparse-symbol indented_block_body) [41591 41608])
                            ("with" code nil (reparse-symbol indented_block_body) [41617 41683]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41239 41243]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41226 41683])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41704 41708]))                          )
                        (reparse-symbol indented_block_body) [41688 41731])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41745 41749])
                            ("timeout" variable nil (reparse-symbol function_parameters) [41751 41758]))                          )
                        (reparse-symbol indented_block_body) [41736 41817]))                  
                :type "class")
                nil [41193 41817])
            ("currentThread" function (:documentation "Return the current Thread object, corresponding to the caller's thread of control.

    If the caller's thread of control was not created through the threading
    module, a dummy thread object with limited functionality is returned.

    ") nil [41843 42283])
            ("current_thread" variable nil nil [42284 42314])
            ("activeCount" function (:documentation "Return the number of Thread objects currently alive.

    The returned count is equal to the length of the list returned by
    enumerate().

    ") nil [42316 42563])
            ("active_count" variable nil nil [42564 42590])
            ("_enumerate" function nil nil [42592 42724])
            ("enumerate" function (:documentation "Return a list of all Thread objects currently alive.

    The list includes daemonic threads, dummy thread objects created by
    current_thread(), and the main thread. It excludes terminated threads and
    threads that have not yet been started.

    ") nil [42725 43085])
            ("thread" include nil nil [43086 43115])
            ("_shutdown" variable nil nil [43231 43266])
            ("try" code nil nil [43365 43468])
            ("_after_fork" function nil nil [43470 44846])
            ("_test" function nil nil [44866 47093])
            ("if" code nil nil [47094 47133]))          
      :file "threading.py"
      :pointmax 47133
      :fsize 47132
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax '((INDENT_BLOCK 31326 . 31361) (NEWLINE 31110 . 31111) (COLON 31109 . 31110) (FINALLY 31102 . 31109)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.

DON'T USE THIS MODULE DIRECTLY!  The classes here should be imported
via collections; they are defined here only to alleviate certain
bootstrapping issues.  Unit tests are in test_collections.
\"\"\"" code nil nil [102 371])
            ("abc" include nil nil [373 412])
            ("sys" include nil nil [413 423])
            ("__all__" variable nil nil [425 708])
            ("_hasattr" function (:arguments 
              ( ("C" variable nil (reparse-symbol function_parameters) [749 750])
                ("attr" variable nil (reparse-symbol function_parameters) [752 756]))              ) nil [736 911])
            ("Hashable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [933 956])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [995 999]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [962 1019])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1062 1065])
                            ("C" variable nil (reparse-symbol function_parameters) [1067 1068]))                          )
                        (reparse-symbol indented_block_body) [1024 1502]))                  
                :type "class")
                nil [913 1502])
            ("Iterable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [1524 1547])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1586 1590]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1553 1637])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1680 1683])
                            ("C" variable nil (reparse-symbol function_parameters) [1685 1686]))                          )
                        (reparse-symbol indented_block_body) [1642 1815]))                  
                :type "class")
                nil [1504 1815])
            ("Iterable" code nil nil [1816 1838])
            ("Iterator" type
               (:superclasses ("Iterable")
                :members 
                  ( ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1901 1905]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1872 2022])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2040 2044]))                          )
                        (reparse-symbol indented_block_body) [2027 2067])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2110 2113])
                            ("C" variable nil (reparse-symbol function_parameters) [2115 2116]))                          )
                        (reparse-symbol indented_block_body) [2072 2269]))                  
                :type "class")
                nil [1841 2269])
            ("Sized" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2288 2311])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2349 2353]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2317 2373])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2416 2419])
                            ("C" variable nil (reparse-symbol function_parameters) [2421 2422]))                          )
                        (reparse-symbol indented_block_body) [2378 2547]))                  
                :type "class")
                nil [2271 2547])
            ("Container" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2570 2593])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2636 2640])
                            ("x" variable nil (reparse-symbol function_parameters) [2642 2643]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2599 2667])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2710 2713])
                            ("C" variable nil (reparse-symbol function_parameters) [2715 2716]))                          )
                        (reparse-symbol indented_block_body) [2672 2850]))                  
                :type "class")
                nil [2549 2850])
            ("Callable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2872 2895])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2934 2938])
                            ("args" variable nil (reparse-symbol function_parameters) [2940 2945])
                            ("kwds" variable nil (reparse-symbol function_parameters) [2947 2953]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2901 2977])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3020 3023])
                            ("C" variable nil (reparse-symbol function_parameters) [3025 3026]))                          )
                        (reparse-symbol indented_block_body) [2982 3155]))                  
                :type "class")
                nil [2852 3155])
            ("Set" type
               (:documentation "A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), redefine __le__ and __ge__,
    then the other operations will automatically follow suit.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3584 3588])
                            ("other" variable nil (reparse-symbol function_parameters) [3590 3595]))                          )
                        (reparse-symbol indented_block_body) [3573 3840])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3856 3860])
                            ("other" variable nil (reparse-symbol function_parameters) [3862 3867]))                          )
                        (reparse-symbol indented_block_body) [3845 4004])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4020 4024])
                            ("other" variable nil (reparse-symbol function_parameters) [4026 4031]))                          )
                        (reparse-symbol indented_block_body) [4009 4168])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4184 4188])
                            ("other" variable nil (reparse-symbol function_parameters) [4190 4195]))                          )
                        (reparse-symbol indented_block_body) [4173 4440])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4456 4460])
                            ("other" variable nil (reparse-symbol function_parameters) [4462 4467]))                          )
                        (reparse-symbol indented_block_body) [4445 4605])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4621 4625])
                            ("other" variable nil (reparse-symbol function_parameters) [4627 4632]))                          )
                        (reparse-symbol indented_block_body) [4610 4670])
                    ("_from_iterable" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4711 4714])
                            ("it" variable nil (reparse-symbol function_parameters) [4716 4718]))                          )
                        (reparse-symbol indented_block_body) [4675 4947])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4964 4968])
                            ("other" variable nil (reparse-symbol function_parameters) [4970 4975]))                          )
                        (reparse-symbol indented_block_body) [4952 5134])
                    ("__rand__" variable nil (reparse-symbol indented_block_body) [5139 5157])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5178 5182])
                            ("other" variable nil (reparse-symbol function_parameters) [5184 5189]))                          )
                        (reparse-symbol indented_block_body) [5163 5359])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5375 5379])
                            ("other" variable nil (reparse-symbol function_parameters) [5381 5386]))                          )
                        (reparse-symbol indented_block_body) [5364 5563])
                    ("__ror__" variable nil (reparse-symbol indented_block_body) [5568 5584])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5602 5606])
                            ("other" variable nil (reparse-symbol function_parameters) [5608 5613]))                          )
                        (reparse-symbol indented_block_body) [5590 5905])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5923 5927])
                            ("other" variable nil (reparse-symbol function_parameters) [5929 5934]))                          )
                        (reparse-symbol indented_block_body) [5910 6226])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6243 6247])
                            ("other" variable nil (reparse-symbol function_parameters) [6249 6254]))                          )
                        (reparse-symbol indented_block_body) [6231 6476])
                    ("__rxor__" variable nil (reparse-symbol indented_block_body) [6481 6499])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [6576 6591])
                    ("_hash" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6607 6611]))                          
                        :documentation "Compute the hash value of a set.

        Note that we don't define __hash__: not all sets are hashable.
        But if you define a hashable set type, its __hash__ should
        call this function.

        This must be compatible __eq__.

        All sets ought to compare equal if they contain the same
        elements, regardless of how they are implemented, and
        regardless of the order of the elements; so there's not much
        freedom for __eq__ or __hash__.  We match the algorithm used
        by the built-in frozenset type.
        ")
                        (reparse-symbol indented_block_body) [6597 7600]))                  
                :type "class")
                nil [3172 7600])
            ("Set" code nil nil [7601 7624])
            ("MutableSet" type
               (:documentation "A mutable set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__, __len__,
    add(), and discard().

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    "
                :superclasses ("Set")
                :members 
                  ( ("add" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8085 8089])
                            ("value" variable nil (reparse-symbol function_parameters) [8091 8096]))                          
                        :documentation "Add an element.")
                        (reparse-symbol indented_block_body) [8057 8163])
                    ("discard" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8200 8204])
                            ("value" variable nil (reparse-symbol function_parameters) [8206 8211]))                          
                        :documentation "Remove an element.  Do not raise an exception if absent.")
                        (reparse-symbol indented_block_body) [8168 8319])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8335 8339])
                            ("value" variable nil (reparse-symbol function_parameters) [8341 8346]))                          
                        :documentation "Remove an element. If not a member, raise a KeyError.")
                        (reparse-symbol indented_block_body) [8324 8509])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8522 8526]))                          
                        :documentation "Return the popped value.  Raise KeyError if empty.")
                        (reparse-symbol indented_block_body) [8514 8766])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8781 8785]))                          
                        :documentation "This is slow (creates N new iterators!) but effective.")
                        (reparse-symbol indented_block_body) [8771 8963])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8980 8984])
                            ("it" variable nil (reparse-symbol function_parameters) [8986 8988]))                          )
                        (reparse-symbol indented_block_body) [8968 9064])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9082 9086])
                            ("it" variable nil (reparse-symbol function_parameters) [9088 9090]))                          )
                        (reparse-symbol indented_block_body) [9069 9179])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9197 9201])
                            ("it" variable nil (reparse-symbol function_parameters) [9203 9205]))                          )
                        (reparse-symbol indented_block_body) [9184 9536])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9554 9558])
                            ("it" variable nil (reparse-symbol function_parameters) [9560 9562]))                          )
                        (reparse-symbol indented_block_body) [9541 9712]))                  
                :type "class")
                nil [7627 9712])
            ("MutableSet" code nil nil [9713 9737])
            ("Mapping" type
               (:documentation "A Mapping is a generic container for associating key/value
    pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __iter__, and __len__.

    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10054 10058])
                            ("key" variable nil (reparse-symbol function_parameters) [10060 10063]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10018 10089])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10102 10106])
                            ("key" variable nil (reparse-symbol function_parameters) [10108 10111])
                            ("default" variable nil (reparse-symbol function_parameters) [10113 10120]))                          )
                        (reparse-symbol indented_block_body) [10094 10293])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10315 10319])
                            ("key" variable nil (reparse-symbol function_parameters) [10321 10324]))                          )
                        (reparse-symbol indented_block_body) [10298 10450])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10468 10472]))                          )
                        (reparse-symbol indented_block_body) [10455 10558])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10578 10582]))                          )
                        (reparse-symbol indented_block_body) [10563 10699])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10718 10722]))                          )
                        (reparse-symbol indented_block_body) [10704 10857])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10871 10875]))                          )
                        (reparse-symbol indented_block_body) [10862 10943])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10958 10962]))                          )
                        (reparse-symbol indented_block_body) [10948 11082])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11098 11102]))                          )
                        (reparse-symbol indented_block_body) [11087 11191])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [11271 11286])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11303 11307])
                            ("other" variable nil (reparse-symbol function_parameters) [11309 11314]))                          )
                        (reparse-symbol indented_block_body) [11292 11451])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11467 11471])
                            ("other" variable nil (reparse-symbol function_parameters) [11473 11478]))                          )
                        (reparse-symbol indented_block_body) [11456 11516]))                  
                :type "class")
                nil [9759 11516])
            ("MappingView" type
               (:superclasses ("Sized")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11585 11608]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11561 11565])
                            ("mapping" variable nil (reparse-symbol function_parameters) [11567 11574]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11548 11609])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11626 11630]))                          )
                        (reparse-symbol indented_block_body) [11614 11667])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11685 11689]))                          )
                        (reparse-symbol indented_block_body) [11672 11761]))                  
                :type "class")
                nil [11517 11761])
            ("KeysView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11838 11842])
                            ("it" variable nil (reparse-symbol function_parameters) [11844 11846]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11802 11872])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11894 11898])
                            ("key" variable nil (reparse-symbol function_parameters) [11900 11903]))                          )
                        (reparse-symbol indented_block_body) [11877 11942])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11960 11964]))                          )
                        (reparse-symbol indented_block_body) [11947 12023]))                  
                :type "class")
                nil [11763 12023])
            ("KeysView" code nil nil [12024 12062])
            ("ItemsView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12140 12144])
                            ("it" variable nil (reparse-symbol function_parameters) [12146 12148]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12104 12174])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12196 12200])
                            ("item" variable nil (reparse-symbol function_parameters) [12202 12206]))                          )
                        (reparse-symbol indented_block_body) [12179 12377])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12395 12399]))                          )
                        (reparse-symbol indented_block_body) [12382 12480]))                  
                :type "class")
                nil [12064 12480])
            ("ItemsView" code nil nil [12481 12521])
            ("ValuesView" type
               (:superclasses ("MappingView")
                :members 
                  ( ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12576 12580])
                            ("value" variable nil (reparse-symbol function_parameters) [12582 12587]))                          )
                        (reparse-symbol indented_block_body) [12559 12717])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12735 12739]))                          )
                        (reparse-symbol indented_block_body) [12722 12813]))                  
                :type "class")
                nil [12523 12813])
            ("ValuesView" code nil nil [12814 12856])
            ("MutableMapping" type
               (:documentation "A MutableMapping is a generic container for associating
    key/value pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __setitem__, __delitem__,
    __iter__, and __len__.

    "
                :superclasses ("Mapping")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13178 13182])
                            ("key" variable nil (reparse-symbol function_parameters) [13184 13187])
                            ("value" variable nil (reparse-symbol function_parameters) [13189 13194]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13142 13220])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13261 13265])
                            ("key" variable nil (reparse-symbol function_parameters) [13267 13270]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13225 13296])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [13301 13320])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13334 13338])
                            ("key" variable nil (reparse-symbol function_parameters) [13340 13343])
                            ("default" variable nil (reparse-symbol function_parameters) [13345 13352]))                          )
                        (reparse-symbol indented_block_body) [13326 13771])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13788 13792]))                          )
                        (reparse-symbol indented_block_body) [13776 14120])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14135 14139]))                          )
                        (reparse-symbol indented_block_body) [14125 14307])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [14323 14328])
                        ("kwds" variable nil (reparse-symbol function_parameters) [14330 14336]))                      ) (reparse-symbol indented_block_body) [14312 15478])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15498 15502])
                            ("key" variable nil (reparse-symbol function_parameters) [15504 15507])
                            ("default" variable nil (reparse-symbol function_parameters) [15509 15516]))                          )
                        (reparse-symbol indented_block_body) [15483 15721]))                  
                :type "class")
                nil [12858 15721])
            ("MutableMapping" code nil nil [15722 15751])
            ("Sequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16008 16012])
                            ("index" variable nil (reparse-symbol function_parameters) [16014 16019]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15972 16047])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16065 16069]))                          )
                        (reparse-symbol indented_block_body) [16052 16244])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16266 16270])
                            ("value" variable nil (reparse-symbol function_parameters) [16272 16277]))                          )
                        (reparse-symbol indented_block_body) [16249 16379])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16401 16405]))                          )
                        (reparse-symbol indented_block_body) [16384 16479])
                    ("index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16494 16498])
                            ("value" variable nil (reparse-symbol function_parameters) [16500 16505]))                          )
                        (reparse-symbol indented_block_body) [16484 16761])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16776 16780])
                            ("value" variable nil (reparse-symbol function_parameters) [16782 16787]))                          )
                        (reparse-symbol indented_block_body) [16766 16917]))                  
                :type "class")
                nil [15774 16917])
            ("Sequence" code nil nil [16918 16942])
            ("Sequence" code nil nil [16943 16972])
            ("Sequence" code nil nil [16973 16998])
            ("Sequence" code nil nil [16999 17024])
            ("MutableSequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must provide __new__ or __init__,
    __getitem__, __setitem__, __delitem__, __len__, and insert().

    "
                :superclasses ("Sequence")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17287 17291])
                            ("index" variable nil (reparse-symbol function_parameters) [17293 17298])
                            ("value" variable nil (reparse-symbol function_parameters) [17300 17305]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17251 17333])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17374 17378])
                            ("index" variable nil (reparse-symbol function_parameters) [17380 17385]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17338 17413])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17449 17453])
                            ("index" variable nil (reparse-symbol function_parameters) [17455 17460])
                            ("value" variable nil (reparse-symbol function_parameters) [17462 17467]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17418 17559])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17575 17579])
                            ("value" variable nil (reparse-symbol function_parameters) [17581 17586]))                          )
                        (reparse-symbol indented_block_body) [17564 17698])
                    ("reverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17715 17719]))                          )
                        (reparse-symbol indented_block_body) [17703 17874])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17890 17894])
                            ("values" variable nil (reparse-symbol function_parameters) [17896 17902]))                          )
                        (reparse-symbol indented_block_body) [17879 18045])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18058 18062])
                            ("index" variable nil (reparse-symbol function_parameters) [18064 18069]))                          )
                        (reparse-symbol indented_block_body) [18050 18308])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18324 18328])
                            ("value" variable nil (reparse-symbol function_parameters) [18330 18335]))                          )
                        (reparse-symbol indented_block_body) [18313 18507])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18525 18529])
                            ("values" variable nil (reparse-symbol function_parameters) [18531 18537]))                          )
                        (reparse-symbol indented_block_body) [18512 18588]))                  
                :type "class")
                nil [17027 18588])
            ("MutableSequence" code nil nil [18589 18619]))          
      :file "_abcoll.py"
      :pointmax 18620
      :fsize 18619
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [296 333])
            ("MAGIC" variable nil nil [381 397])
            ("try" code nil nil [399 510])
            ("error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [617 621]))                  
                :type "class")
                nil [589 622])
            ("FAILURE" variable nil nil [636 655])
            ("SUCCESS" variable nil nil [656 675])
            ("ANY" variable nil nil [677 688])
            ("ANY_ALL" variable nil nil [689 708])
            ("ASSERT" variable nil nil [709 726])
            ("ASSERT_NOT" variable nil nil [727 752])
            ("AT" variable nil nil [753 762])
            ("BIGCHARSET" variable nil nil [763 788])
            ("BRANCH" variable nil nil [789 806])
            ("CALL" variable nil nil [807 820])
            ("CATEGORY" variable nil nil [821 842])
            ("CHARSET" variable nil nil [843 862])
            ("GROUPREF" variable nil nil [863 884])
            ("GROUPREF_IGNORE" variable nil nil [885 920])
            ("GROUPREF_EXISTS" variable nil nil [921 956])
            ("IN" variable nil nil [957 966])
            ("IN_IGNORE" variable nil nil [967 990])
            ("INFO" variable nil nil [991 1004])
            ("JUMP" variable nil nil [1005 1018])
            ("LITERAL" variable nil nil [1019 1038])
            ("LITERAL_IGNORE" variable nil nil [1039 1072])
            ("MARK" variable nil nil [1073 1086])
            ("MAX_REPEAT" variable nil nil [1087 1112])
            ("MAX_UNTIL" variable nil nil [1113 1136])
            ("MIN_REPEAT" variable nil nil [1137 1162])
            ("MIN_UNTIL" variable nil nil [1163 1186])
            ("NEGATE" variable nil nil [1187 1204])
            ("NOT_LITERAL" variable nil nil [1205 1232])
            ("NOT_LITERAL_IGNORE" variable nil nil [1233 1274])
            ("RANGE" variable nil nil [1275 1290])
            ("REPEAT" variable nil nil [1291 1308])
            ("REPEAT_ONE" variable nil nil [1309 1334])
            ("SUBPATTERN" variable nil nil [1335 1360])
            ("MIN_REPEAT_ONE" variable nil nil [1361 1394])
            ("AT_BEGINNING" variable nil nil [1408 1437])
            ("AT_BEGINNING_LINE" variable nil nil [1438 1477])
            ("AT_BEGINNING_STRING" variable nil nil [1478 1521])
            ("AT_BOUNDARY" variable nil nil [1522 1549])
            ("AT_NON_BOUNDARY" variable nil nil [1550 1585])
            ("AT_END" variable nil nil [1586 1603])
            ("AT_END_LINE" variable nil nil [1604 1631])
            ("AT_END_STRING" variable nil nil [1632 1663])
            ("AT_LOC_BOUNDARY" variable nil nil [1664 1699])
            ("AT_LOC_NON_BOUNDARY" variable nil nil [1700 1743])
            ("AT_UNI_BOUNDARY" variable nil nil [1744 1779])
            ("AT_UNI_NON_BOUNDARY" variable nil nil [1780 1823])
            ("CATEGORY_DIGIT" variable nil nil [1838 1871])
            ("CATEGORY_NOT_DIGIT" variable nil nil [1872 1913])
            ("CATEGORY_SPACE" variable nil nil [1914 1947])
            ("CATEGORY_NOT_SPACE" variable nil nil [1948 1989])
            ("CATEGORY_WORD" variable nil nil [1990 2021])
            ("CATEGORY_NOT_WORD" variable nil nil [2022 2061])
            ("CATEGORY_LINEBREAK" variable nil nil [2062 2103])
            ("CATEGORY_NOT_LINEBREAK" variable nil nil [2104 2153])
            ("CATEGORY_LOC_WORD" variable nil nil [2154 2193])
            ("CATEGORY_LOC_NOT_WORD" variable nil nil [2194 2241])
            ("CATEGORY_UNI_DIGIT" variable nil nil [2242 2283])
            ("CATEGORY_UNI_NOT_DIGIT" variable nil nil [2284 2333])
            ("CATEGORY_UNI_SPACE" variable nil nil [2334 2375])
            ("CATEGORY_UNI_NOT_SPACE" variable nil nil [2376 2425])
            ("CATEGORY_UNI_WORD" variable nil nil [2426 2465])
            ("CATEGORY_UNI_NOT_WORD" variable nil nil [2466 2513])
            ("CATEGORY_UNI_LINEBREAK" variable nil nil [2514 2563])
            ("CATEGORY_UNI_NOT_LINEBREAK" variable nil nil [2564 2621])
            ("OPCODES" variable nil nil [2623 3120])
            ("ATCODES" variable nil nil [3122 3346])
            ("CHCODES" variable nil nil [3348 3762])
            ("makedict" function (:arguments 
              ( ("list" variable nil (reparse-symbol function_parameters) [3777 3781]))              ) nil [3764 3878])
            ("OPCODES" variable nil nil [3879 3906])
            ("ATCODES" variable nil nil [3907 3934])
            ("CHCODES" variable nil nil [3935 3962])
            ("OP_IGNORE" variable nil nil [4012 4142])
            ("AT_MULTILINE" variable nil nil [4144 4223])
            ("AT_LOCALE" variable nil nil [4225 4315])
            ("AT_UNICODE" variable nil nil [4317 4408])
            ("CH_LOCALE" variable nil nil [4410 4764])
            ("CH_UNICODE" variable nil nil [4766 5145])
            ("SRE_FLAG_TEMPLATE" variable nil nil [5155 5176])
            ("SRE_FLAG_IGNORECASE" variable nil nil [5216 5239])
            ("SRE_FLAG_LOCALE" variable nil nil [5259 5278])
            ("SRE_FLAG_MULTILINE" variable nil nil [5302 5324])
            ("SRE_FLAG_DOTALL" variable nil nil [5360 5380])
            ("SRE_FLAG_UNICODE" variable nil nil [5415 5436])
            ("SRE_FLAG_VERBOSE" variable nil nil [5458 5479])
            ("SRE_FLAG_DEBUG" variable nil nil [5513 5533])
            ("SRE_INFO_PREFIX" variable nil nil [5574 5593])
            ("SRE_INFO_LITERAL" variable nil nil [5607 5627])
            ("SRE_INFO_CHARSET" variable nil nil [5674 5694])
            ("if" code nil nil [5743 7198]))          
      :file "sre_constants.py"
      :pointmax 7198
      :fsize 7197
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Support to pretty-print lists, tuples, & dictionaries recursively.

Very simple, but useful, especially in debugging data structures.

Classes
-------

PrettyPrinter()
    Handle pretty-printing operations onto a stream using a configured
    set of formatting parameters.

Functions
---------

pformat()
    Format a Python object into a pretty-printed representation.

pprint()
    Pretty-print a Python object to a stream [default is sys.stdout].

saferepr()
    Generate a 'standard' repr()-like value, but protect against recursive
    data structures.

\"\"\"" code nil nil [489 1054])
            ("sys" include nil nil [1056 1074])
            ("warnings" include nil nil [1075 1090])
            ("try" code nil nil [1092 1212])
            ("__all__" variable nil nil [1213 1309])
            ("_commajoin" variable nil nil [1344 1366])
            ("_id" variable nil nil [1367 1375])
            ("_len" variable nil nil [1376 1386])
            ("_type" variable nil nil [1387 1399])
            ("pprint" function
               (:documentation "Pretty-print a Python object to a stream [default is sys.stdout]."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1413 1419])
                    ("stream" variable nil (reparse-symbol function_parameters) [1421 1427])
                    ("indent" variable nil (reparse-symbol function_parameters) [1434 1440])
                    ("width" variable nil (reparse-symbol function_parameters) [1444 1449])
                    ("depth" variable nil (reparse-symbol function_parameters) [1454 1459]))                  )
                nil [1402 1663])
            ("pformat" function
               (:documentation "Format a Python object into a pretty-printed representation."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1676 1682])
                    ("indent" variable nil (reparse-symbol function_parameters) [1684 1690])
                    ("width" variable nil (reparse-symbol function_parameters) [1694 1699])
                    ("depth" variable nil (reparse-symbol function_parameters) [1704 1709]))                  )
                nil [1664 1870])
            ("saferepr" function
               (:documentation "Version of repr() which can handle recursive data structures."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1884 1890]))                  )
                nil [1871 2011])
            ("isreadable" function
               (:documentation "Determine if saferepr(object) is readable by eval()."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2027 2033]))                  )
                nil [2012 2145])
            ("isrecursive" function
               (:documentation "Determine if object requires a recursive representation."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2162 2168]))                  )
                nil [2146 2284])
            ("_sorted" function (:arguments 
              ( ("iterable" variable nil (reparse-symbol function_parameters) [2297 2305]))              ) nil [2285 2551])
            ("PrettyPrinter" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Handle pretty printing operations onto a stream using a set of
        configured parameters.

        indent
            Number of spaces to indent for each level of nesting.

        width
            Attempted maximum number of columns in the output.

        depth
            The maximum depth to print out nested structures.

        stream
            The desired output stream.  If omitted (or false), the standard
            output stream available at construction will be used.

        \"\"\"" code nil (reparse-symbol indented_block_body) [2650 3154])
                            ("indent" variable nil (reparse-symbol indented_block_body) [3163 3183])
                            ("width" variable nil (reparse-symbol indented_block_body) [3192 3210])
                            ("assert" code nil (reparse-symbol indented_block_body) [3219 3260])
                            ("assert" code nil (reparse-symbol indented_block_body) [3269 3323])
                            ("assert" code nil (reparse-symbol indented_block_body) [3332 3366])
                            ("self" variable nil (reparse-symbol indented_block_body) [3375 3394])
                            ("self" variable nil (reparse-symbol indented_block_body) [3403 3434])
                            ("self" variable nil (reparse-symbol indented_block_body) [3443 3462])
                            ("if" code nil (reparse-symbol indented_block_body) [3471 3581]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2590 2594])
                            ("indent" variable nil (reparse-symbol function_parameters) [2596 2602])
                            ("width" variable nil (reparse-symbol function_parameters) [2606 2611])
                            ("depth" variable nil (reparse-symbol function_parameters) [2616 2621])
                            ("stream" variable nil (reparse-symbol function_parameters) [2628 2634]))                          
                        :documentation "Handle pretty printing operations onto a stream using a set of
        configured parameters.

        indent
            Number of spaces to indent for each level of nesting.

        width
            Attempted maximum number of columns in the output.

        depth
            The maximum depth to print out nested structures.

        stream
            The desired output stream.  If omitted (or false), the standard
            output stream available at construction will be used.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2577 3581])
                    ("pprint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3597 3601])
                            ("object" variable nil (reparse-symbol function_parameters) [3603 3609]))                          )
                        (reparse-symbol indented_block_body) [3586 3701])
                    ("pformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3718 3722])
                            ("object" variable nil (reparse-symbol function_parameters) [3724 3730]))                          )
                        (reparse-symbol indented_block_body) [3706 3836])
                    ("isrecursive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3857 3861])
                            ("object" variable nil (reparse-symbol function_parameters) [3863 3869]))                          )
                        (reparse-symbol indented_block_body) [3841 3920])
                    ("isreadable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3940 3944])
                            ("object" variable nil (reparse-symbol function_parameters) [3946 3952]))                          )
                        (reparse-symbol indented_block_body) [3925 4060])
                    ("_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4077 4081])
                            ("object" variable nil (reparse-symbol function_parameters) [4083 4089])
                            ("stream" variable nil (reparse-symbol function_parameters) [4091 4097])
                            ("indent" variable nil (reparse-symbol function_parameters) [4099 4105])
                            ("allowance" variable nil (reparse-symbol function_parameters) [4107 4116])
                            ("context" variable nil (reparse-symbol function_parameters) [4118 4125])
                            ("level" variable nil (reparse-symbol function_parameters) [4127 4132]))                          )
                        (reparse-symbol indented_block_body) [4065 7653])
                    ("_repr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7668 7672])
                            ("object" variable nil (reparse-symbol function_parameters) [7674 7680])
                            ("context" variable nil (reparse-symbol function_parameters) [7682 7689])
                            ("level" variable nil (reparse-symbol function_parameters) [7691 7696]))                          )
                        (reparse-symbol indented_block_body) [7658 7976])
                    ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7992 7996])
                            ("object" variable nil (reparse-symbol function_parameters) [7998 8004])
                            ("context" variable nil (reparse-symbol function_parameters) [8006 8013])
                            ("maxlevels" variable nil (reparse-symbol function_parameters) [8015 8024])
                            ("level" variable nil (reparse-symbol function_parameters) [8026 8031]))                          
                        :documentation "Format object for a specific context, returning a string
        and flags indicating whether the representation is 'readable'
        and whether the object represents a recursive construct.
        ")
                        (reparse-symbol indented_block_body) [7981 8310]))                  
                :type "class")
                nil [2552 8310])
            ("_safe_repr" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [8384 8390])
                ("context" variable nil (reparse-symbol function_parameters) [8392 8399])
                ("maxlevels" variable nil (reparse-symbol function_parameters) [8401 8410])
                ("level" variable nil (reparse-symbol function_parameters) [8412 8417]))              ) nil [8369 11264])
            ("_recursion" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [11281 11287]))              ) nil [11266 11386])
            ("_perfcheck" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [11403 11409]))              ) nil [11388 11733])
            ("if" code nil nil [11734 11778]))          
      :file "pprint.py"
      :pointmax 11778
      :fsize 11777
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
opcode module - potentially shared between dis and other modules which
operate on bytecodes (e.g. peephole optimizers).
\"\"\"" code nil nil [2 129])
            ("__all__" variable nil nil [131 307])
            ("cmp_op" variable nil nil [309 418])
            ("hasconst" variable nil nil [420 433])
            ("hasname" variable nil nil [434 446])
            ("hasjrel" variable nil nil [447 459])
            ("hasjabs" variable nil nil [460 472])
            ("haslocal" variable nil nil [473 486])
            ("hascompare" variable nil nil [487 502])
            ("hasfree" variable nil nil [503 515])
            ("opmap" variable nil nil [517 527])
            ("opname" code nil nil [528 547])
            ("for" code nil nil [548 598])
            ("del" code nil nil [598 604])
            ("def_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [617 621])
                ("op" variable nil (reparse-symbol function_parameters) [623 625]))              ) nil [606 671])
            ("name_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [684 688])
                ("op" variable nil (reparse-symbol function_parameters) [690 692]))              ) nil [672 739])
            ("jrel_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [752 756])
                ("op" variable nil (reparse-symbol function_parameters) [758 760]))              ) nil [740 807])
            ("jabs_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [820 824])
                ("op" variable nil (reparse-symbol function_parameters) [826 828]))              ) nil [808 875])
            ("def_op" code nil nil [963 985])
            ("def_op" code nil nil [986 1006])
            ("def_op" code nil nil [1007 1027])
            ("def_op" code nil nil [1028 1050])
            ("def_op" code nil nil [1051 1071])
            ("def_op" code nil nil [1072 1093])
            ("def_op" code nil nil [1095 1111])
            ("def_op" code nil nil [1112 1140])
            ("def_op" code nil nil [1141 1169])
            ("def_op" code nil nil [1170 1193])
            ("def_op" code nil nil [1194 1221])
            ("def_op" code nil nil [1223 1249])
            ("def_op" code nil nil [1251 1277])
            ("def_op" code nil nil [1278 1307])
            ("def_op" code nil nil [1308 1335])
            ("def_op" code nil nil [1336 1363])
            ("def_op" code nil nil [1364 1388])
            ("def_op" code nil nil [1389 1418])
            ("def_op" code nil nil [1419 1446])
            ("def_op" code nil nil [1447 1480])
            ("def_op" code nil nil [1481 1513])
            ("def_op" code nil nil [1514 1548])
            ("def_op" code nil nil [1549 1582])
            ("def_op" code nil nil [1583 1604])
            ("def_op" code nil nil [1605 1626])
            ("def_op" code nil nil [1627 1648])
            ("def_op" code nil nil [1649 1670])
            ("def_op" code nil nil [1672 1699])
            ("def_op" code nil nil [1700 1727])
            ("def_op" code nil nil [1728 1755])
            ("def_op" code nil nil [1756 1783])
            ("def_op" code nil nil [1785 1813])
            ("def_op" code nil nil [1814 1842])
            ("def_op" code nil nil [1843 1871])
            ("def_op" code nil nil [1872 1900])
            ("def_op" code nil nil [1902 1925])
            ("def_op" code nil nil [1926 1951])
            ("def_op" code nil nil [1952 1982])
            ("def_op" code nil nil [1983 2013])
            ("def_op" code nil nil [2014 2042])
            ("def_op" code nil nil [2043 2071])
            ("def_op" code nil nil [2072 2098])
            ("def_op" code nil nil [2099 2126])
            ("def_op" code nil nil [2127 2154])
            ("def_op" code nil nil [2155 2182])
            ("def_op" code nil nil [2183 2207])
            ("def_op" code nil nil [2208 2232])
            ("def_op" code nil nil [2233 2256])
            ("def_op" code nil nil [2257 2284])
            ("def_op" code nil nil [2285 2307])
            ("def_op" code nil nil [2309 2333])
            ("def_op" code nil nil [2334 2358])
            ("def_op" code nil nil [2359 2386])
            ("def_op" code nil nil [2387 2414])
            ("def_op" code nil nil [2415 2445])
            ("def_op" code nil nil [2446 2474])
            ("def_op" code nil nil [2475 2503])
            ("def_op" code nil nil [2504 2529])
            ("def_op" code nil nil [2530 2555])
            ("def_op" code nil nil [2556 2580])
            ("def_op" code nil nil [2581 2605])
            ("def_op" code nil nil [2606 2632])
            ("def_op" code nil nil [2633 2658])
            ("def_op" code nil nil [2659 2685])
            ("def_op" code nil nil [2686 2711])
            ("def_op" code nil nil [2712 2735])
            ("def_op" code nil nil [2736 2761])
            ("def_op" code nil nil [2762 2785])
            ("def_op" code nil nil [2786 2811])
            ("def_op" code nil nil [2812 2837])
            ("HAVE_ARGUMENT" variable nil nil [2839 2857])
            ("name_op" code nil nil [2910 2935])
            ("name_op" code nil nil [2963 2989])
            ("def_op" code nil nil [3000 3029])
            ("jrel_op" code nil nil [3056 3079])
            ("def_op" code nil nil [3080 3105])
            ("name_op" code nil nil [3106 3131])
            ("name_op" code nil nil [3159 3185])
            ("name_op" code nil nil [3196 3223])
            ("name_op" code nil nil [3233 3261])
            ("def_op" code nil nil [3270 3292])
            ("def_op" code nil nil [3333 3358])
            ("hasconst" code nil nil [3387 3407])
            ("name_op" code nil nil [3408 3433])
            ("def_op" code nil nil [3461 3487])
            ("def_op" code nil nil [3517 3542])
            ("def_op" code nil nil [3572 3596])
            ("def_op" code nil nil [3626 3650])
            ("name_op" code nil nil [3694 3719])
            ("def_op" code nil nil [3747 3772])
            ("hascompare" code nil nil [3801 3823])
            ("name_op" code nil nil [3824 3851])
            ("name_op" code nil nil [3877 3904])
            ("jrel_op" code nil nil [3930 3958])
            ("jabs_op" code nil nil [3988 4024])
            ("jabs_op" code nil nil [4069 4104])
            ("jabs_op" code nil nil [4111 4140])
            ("jabs_op" code nil nil [4153 4186])
            ("jabs_op" code nil nil [4195 4227])
            ("name_op" code nil nil [4238 4265])
            ("jabs_op" code nil nil [4292 4321])
            ("jrel_op" code nil nil [4341 4367])
            ("jrel_op" code nil nil [4402 4430])
            ("jrel_op" code nil nil [4439 4468])
            ("def_op" code nil nil [4477 4501])
            ("haslocal" code nil nil [4533 4553])
            ("def_op" code nil nil [4554 4579])
            ("haslocal" code nil nil [4610 4630])
            ("def_op" code nil nil [4631 4657])
            ("haslocal" code nil nil [4687 4707])
            ("def_op" code nil nil [4709 4737])
            ("def_op" code nil nil [4782 4810])
            ("def_op" code nil nil [4839 4867])
            ("def_op" code nil nil [4908 4934])
            ("def_op" code nil nil [4958 4985])
            ("def_op" code nil nil [4986 5013])
            ("hasfree" code nil nil [5014 5033])
            ("def_op" code nil nil [5034 5059])
            ("hasfree" code nil nil [5060 5079])
            ("def_op" code nil nil [5080 5106])
            ("hasfree" code nil nil [5107 5126])
            ("def_op" code nil nil [5128 5160])
            ("def_op" code nil nil [5190 5221])
            ("def_op" code nil nil [5252 5287])
            ("jrel_op" code nil nil [5315 5341])
            ("def_op" code nil nil [5343 5370])
            ("EXTENDED_ARG" variable nil nil [5371 5389])
            ("def_op" code nil nil [5390 5412])
            ("def_op" code nil nil [5413 5435])
            ("del" code nil nil [5437 5474]))          
      :file "opcode.py"
      :pointmax 5475
      :fsize 5474
      :lastmodtime '(22656 53672 0 0)
      :unmatched-syntax nil))
  :file "!usr!lib!python2.7!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
