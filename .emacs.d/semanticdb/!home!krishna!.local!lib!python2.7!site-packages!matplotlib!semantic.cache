;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Provides a MATLAB-like plotting framework.

:mod:`~matplotlib.pylab` combines pyplot with numpy into a single namespace.
This is convenient for interactive work, but for programming it
is recommended that the namespaces be kept separate, e.g.::

    import numpy as np
    import matplotlib.pyplot as plt

    x = np.arange(0, 5, 0.1);
    y = np.sin(x)
    plt.plot(x, y)

\"\"\"" code nil nil [132 513])
            ("" code nil nil [537 622])
            ("six" include nil nil [624 634])
            ("sys" include nil nil [636 646])
            ("warnings" include nil nil [647 662])
            ("types" include nil nil [663 675])
            ("cycler" include nil nil [677 702])
            ("matplotlib" include nil nil [703 720])
            ("matplotlib.colorbar" include nil nil [721 747])
            ("matplotlib" include nil nil [748 776])
            ("matplotlib" include nil nil [777 827])
            ("matplotlib.cbook" include nil nil [828 904])
            ("matplotlib.cbook" include nil nil [905 949])
            ("matplotlib.cbook" include nil nil [950 989])
            ("matplotlib" include nil nil [990 1022])
            ("matplotlib.backend_bases" include nil nil [1023 1076])
            ("matplotlib.figure" include nil nil [1077 1124])
            ("matplotlib.gridspec" include nil nil [1125 1165])
            ("matplotlib.image" include nil nil [1166 1212])
            ("matplotlib.image" include nil nil [1213 1259])
            ("matplotlib" include nil nil [1260 1321])
            ("matplotlib" include nil nil [1322 1355])
            ("matplotlib.rcsetup" include nil nil [1356 1420])
            ("matplotlib.artist" include nil nil [1421 1468])
            ("matplotlib.artist" include nil nil [1469 1512])
            ("matplotlib.axes" include nil nil [1513 1554])
            ("matplotlib.projections" include nil nil [1555 1599])
            ("matplotlib" include nil nil [1600 1627])
            ("matplotlib.scale" include nil nil [1673 1733])
            ("matplotlib" include nil nil [1735 1760])
            ("matplotlib.cm" include nil nil [1761 1810])
            ("numpy" include nil nil [1812 1830])
            ("matplotlib.colors" include nil nil [1878 1917])
            ("matplotlib.lines" include nil nil [1918 1953])
            ("matplotlib.text" include nil nil [1954 1998])
            ("matplotlib.patches" include nil nil [1999 2063])
            ("matplotlib.widgets" include nil nil [2064 2130])
            ("MaxNLocator" include nil nil [2145 2494])
            ("MultipleLocator" include nil nil [2145 2494])
            ("AutoLocator" include nil nil [2145 2494])
            ("LogLocator" include nil nil [2145 2494])
            ("LinearLocator" include nil nil [2145 2494])
            ("NullLocator" include nil nil [2145 2494])
            ("FixedLocator" include nil nil [2145 2494])
            ("IndexLocator" include nil nil [2145 2494])
            ("Locator" include nil nil [2145 2494])
            ("LogFormatterMathtext" include nil nil [2145 2494])
            ("LogFormatterExponent" include nil nil [2145 2494])
            ("LogFormatter" include nil nil [2145 2494])
            ("ScalarFormatter" include nil nil [2145 2494])
            ("FormatStrFormatter" include nil nil [2145 2494])
            ("FuncFormatter" include nil nil [2145 2494])
            ("NullFormatter" include nil nil [2145 2494])
            ("FixedFormatter" include nil nil [2145 2494])
            ("Formatter" include nil nil [2145 2494])
            ("TickHelper" include nil nil [2145 2494])
            ("_backend_selection" function (:documentation " If rcParams['backend_fallback'] is true, check to see if the
        current backend is compatible with the current running event
        loop, and if not switches to a compatible one.
    ") nil [2521 4114])
            ("_backend_selection" code nil nil [4115 4135])
            ("matplotlib.backends" include nil nil [4151 4194])
            ("_backend_mod, new_figure_manager, draw_if_interactive, _show" code nil nil [4195 4271])
            ("_IP_REGISTERED" variable nil nil [4273 4294])
            ("_INSTALL_FIG_OBSERVER" variable nil nil [4295 4324])
            ("install_repl_displayhook" function (:documentation "
    Install a repl display hook so that any stale figure are automatically
    redrawn when control is returned to the repl.

    This works with IPython terminals and kernels,
    as well as vanilla python shells.
    ") nil [4327 5871])
            ("uninstall_repl_displayhook" function (:documentation "
    Uninstalls the matplotlib display hook.

    .. warning

       Need IPython >= 2 for this to work.  For IPython < 2 will raise a
       ``NotImplementedError``

    .. warning

       If you are using vanilla python and have installed another
       display hook this will reset ``sys.displayhook`` to what ever
       function was there when matplotlib installed it's displayhook,
       possibly discarding your changes.
    ") nil [5873 6833])
            ("draw_all" variable nil nil [6835 6873])
            ("" code nil nil [6898 6914])
            ("findobj" function (:arguments 
              ( ("o" variable nil (reparse-symbol function_parameters) [6927 6928])
                ("match" variable nil (reparse-symbol function_parameters) [6935 6940])
                ("include_self" variable nil (reparse-symbol function_parameters) [6947 6959]))              ) nil [6915 7058])
            ("switch_backend" function
               (:documentation "
    Switch the default backend.  This feature is **experimental**, and
    is only expected to work switching to an image backend.  e.g., if
    you have a bunch of PostScript scripts that you want to run from
    an interactive ipython session, you may want to switch to the PS
    backend before running them to avoid having a bunch of GUI windows
    popup.  If you try to interactively switch from one GUI backend to
    another, you will explode.

    Calling this command will close all open windows.
    "
                :arguments 
                  ( ("newbackend" variable nil (reparse-symbol function_parameters) [7079 7089]))                  )
                nil [7060 7888])
            ("show" function
               (:documentation "
    Display a figure.
    When running in ipython with its pylab mode, display all
    figures and return to the ipython prompt.

    In non-interactive mode, display all figures and block until
    the figures have been closed; in interactive mode it has no
    effect unless figures were created prior to a change from
    non-interactive to interactive mode (not recommended).  In
    that case it displays the figures but does not block.

    A single experimental keyword argument, *block*, may be
    set to True or False to override the blocking behavior
    described above.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [7899 7904])
                    ("kw" variable nil (reparse-symbol function_parameters) [7906 7910]))                  )
                nil [7890 8559])
            ("isinteractive" function (:documentation "
    Return status of interactive mode.
    ") nil [8561 8676])
            ("ioff" function nil nil [8678 8790])
            ("ion" function nil nil [8792 8899])
            ("pause" function
               (:documentation "
    Pause for *interval* seconds.

    If there is an active figure it will be updated and displayed,
    and the GUI event loop will run during the pause.

    If there is no active figure, or if a non-interactive backend
    is in use, this executes time.sleep(interval).

    This can be used for crude animation. For more complex
    animation, see :mod:`matplotlib.animation`.

    This function is experimental; its behavior may be changed
    or extended in a future release.

    "
                :arguments 
                  ( ("interval" variable nil (reparse-symbol function_parameters) [8911 8919]))                  )
                nil [8901 9885])
            ("" code nil nil [9909 9924])
            ("rc" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [9932 9937])
                ("kwargs" variable nil (reparse-symbol function_parameters) [9939 9947]))              ) nil [9925 9985])
            ("" code nil nil [10009 10032])
            ("rc_context" function (:arguments 
              ( ("rc" variable nil (reparse-symbol function_parameters) [10048 10050])
                ("fname" variable nil (reparse-symbol function_parameters) [10057 10062]))              ) nil [10033 10114])
            ("" code nil nil [10138 10161])
            ("rcdefaults" function nil nil [10162 10263])
            ("gci" function nil nil [10393 11118])
            ("sci" function
               (:documentation "
    Set the current image.  This image will be the target of colormap
    commands like :func:`~matplotlib.pyplot.jet`,
    :func:`~matplotlib.pyplot.hot` or
    :func:`~matplotlib.pyplot.clim`).  The current image is an
    attribute of the current axes.
    "
                :arguments 
                  ( ("im" variable nil (reparse-symbol function_parameters) [11128 11130]))                  )
                nil [11120 11424])
            ("" code nil nil [11486 11493])
            ("setp" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [11503 11508])
                ("kwargs" variable nil (reparse-symbol function_parameters) [11510 11518]))              ) nil [11494 11555])
            ("xkcd" function (:arguments 
              ( ("scale" variable nil (reparse-symbol function_parameters) [11566 11571])
                ("length" variable nil (reparse-symbol function_parameters) [11575 11581])
                ("randomness" variable nil (reparse-symbol function_parameters) [11587 11597]))              ) nil [11557 13664])
            ("figure" function (:arguments 
              ( ("num" variable nil (reparse-symbol function_parameters) [13692 13695])
                ("figsize" variable nil (reparse-symbol function_parameters) [13761 13768])
                ("dpi" variable nil (reparse-symbol function_parameters) [13819 13822])
                ("facecolor" variable nil (reparse-symbol function_parameters) [13869 13878])
                ("edgecolor" variable nil (reparse-symbol function_parameters) [13931 13940])
                ("frameon" variable nil (reparse-symbol function_parameters) [13993 14000])
                ("FigureClass" variable nil (reparse-symbol function_parameters) [14018 14029])
                ("kwargs" variable nil (reparse-symbol function_parameters) [14049 14057]))              ) nil [13681 18643])
            ("_auto_draw_if_interactive" function
               (:documentation "
    This is an internal helper function for making sure that auto-redrawing
    works as intended in the plain python repl.

    Parameters
    ----------
    fig : Figure
        A figure object which is assumed to be associated with a canvas
    "
                :arguments 
                  ( ("fig" variable nil (reparse-symbol function_parameters) [18675 18678])
                    ("val" variable nil (reparse-symbol function_parameters) [18680 18683]))                  )
                nil [18645 19052])
            ("gcf" function nil nil [19054 19265])
            ("fignum_exists" function (:arguments 
              ( ("num" variable nil (reparse-symbol function_parameters) [19285 19288]))              ) nil [19267 19363])
            ("get_fignums" function (:documentation "Return a list of existing figure numbers.") nil [19365 19532])
            ("get_figlabels" function nil nil [19534 19766])
            ("get_current_fig_manager" function nil nil [19768 20009])
            ("" code nil nil [20033 20063])
            ("connect" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [20076 20077])
                ("func" variable nil (reparse-symbol function_parameters) [20079 20083]))              ) nil [20064 20151])
            ("" code nil nil [20175 20208])
            ("disconnect" function (:arguments 
              ( ("cid" variable nil (reparse-symbol function_parameters) [20224 20227]))              ) nil [20209 20294])
            ("close" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [20306 20311]))              ) nil [20296 21715])
            ("clf" function (:documentation "
    Clear the current figure.
    ") nil [21717 21790])
            ("draw" function (:documentation "Redraw the current figure.

    This is used to update a figure that has been altered, but not
    automatically re-drawn.  If interactive mode is on (:func:`.ion()`), this
    should be only rarely needed, but there may be ways to modify the state of
    a figure without marking it as `stale`.  Please report these cases as
    bugs.

    A more object-oriented alternative, given any
    :class:`~matplotlib.figure.Figure` instance, :attr:`fig`, that
    was created using a :mod:`~matplotlib.pyplot` function, is::

        fig.canvas.draw_idle()
    ") nil [21792 22419])
            ("" code nil nil [22443 22459])
            ("savefig" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [22472 22477])
                ("kwargs" variable nil (reparse-symbol function_parameters) [22479 22487]))              ) nil [22460 22639])
            ("" code nil nil [22663 22678])
            ("ginput" function
               (:documentation "
    Blocking call to interact with the figure.

    This will wait for *n* clicks from the user and return a list of the
    coordinates of each click.

    If *timeout* is negative, does not timeout.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [22690 22695])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [22697 22705]))                  )
                nil [22679 22966])
            ("" code nil nil [22990 23017])
            ("waitforbuttonpress" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [23041 23046])
                ("kwargs" variable nil (reparse-symbol function_parameters) [23048 23056]))              ) nil [23018 23380])
            ("" code nil nil [23433 23446])
            ("figtext" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [23459 23464])
                ("kwargs" variable nil (reparse-symbol function_parameters) [23466 23474]))              ) nil [23447 23516])
            ("" code nil nil [23540 23557])
            ("suptitle" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [23571 23576])
                ("kwargs" variable nil (reparse-symbol function_parameters) [23578 23586]))              ) nil [23558 23632])
            ("" code nil nil [23656 23673])
            ("figimage" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [23687 23692])
                ("kwargs" variable nil (reparse-symbol function_parameters) [23694 23702]))              ) nil [23674 23748])
            ("figlegend" function
               (:documentation "
    Place a legend in the figure.

    *labels*
      a sequence of strings

    *handles*
      a sequence of :class:`~matplotlib.lines.Line2D` or
      :class:`~matplotlib.patches.Patch` instances

    *loc*
      can be a string or an integer specifying the legend
      location

    A :class:`matplotlib.legend.Legend` instance is returned.

    Example::

      figlegend( (line1, line2, line3),
                 ('label1', 'label2', 'label3'),
                 'upper right' )

    .. seealso::

       :func:`~matplotlib.pyplot.legend`

    "
                :arguments 
                  ( ("handles" variable nil (reparse-symbol function_parameters) [23764 23771])
                    ("labels" variable nil (reparse-symbol function_parameters) [23773 23779])
                    ("loc" variable nil (reparse-symbol function_parameters) [23781 23784])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [23786 23794]))                  )
                nil [23750 24414])
            ("_hold_msg" variable nil nil [24446 24639])
            ("" code nil nil [24652 24678])
            ("hold" function
               (:documentation "
    Set the hold state.  If *b* is None (default), toggle the
    hold state, else set the hold state to boolean value *b*::

      hold()      # toggle hold
      hold(True)  # hold is on
      hold(False) # hold is off

    When *hold* is *True*, subsequent plot commands will add elements to
    the current axes.  When *hold* is *False*, the current axes and
    figure will be cleared on the next plot command.

    "
                :arguments 
                  ( ("b" variable nil (reparse-symbol function_parameters) [24688 24689]))                  )
                nil [24679 25616])
            ("" code nil nil [25628 25654])
            ("ishold" function (:documentation "
    Return the hold status of the current axes.

    ") nil [25655 25757])
            ("" code nil nil [25770 25796])
            ("over" function
               (:documentation "
    Call a function with hold(True).

    Calls::

      func(*args, **kwargs)

    with ``hold(True)`` and then restores the hold state.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [25806 25810])
                    ("args" variable nil (reparse-symbol function_parameters) [25812 25817])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [25819 25827]))                  )
                nil [25797 26080])
            ("axes" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [26103 26108])
                ("kwargs" variable nil (reparse-symbol function_parameters) [26110 26118]))              ) nil [26094 28093])
            ("delaxes" function
               (:documentation "
    Remove an axes from the current figure.  If *ax*
    doesn't exist, an error will be raised.

    ``delaxes()``: delete the current axes
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [28107 28112]))                  )
                nil [28095 28387])
            ("sca" function
               (:documentation "
    Set the current Axes instance to *ax*.

    The current Figure is updated to the parent of *ax*.
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [28397 28399]))                  )
                nil [28389 28812])
            ("gca" function (:arguments 
              ( ("kwargs" variable nil (reparse-symbol function_parameters) [28822 28830]))              ) nil [28814 29345])
            ("subplot" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [29390 29395])
                ("kwargs" variable nil (reparse-symbol function_parameters) [29397 29405]))              ) nil [29378 33095])
            ("subplots" function (:arguments 
              ( ("nrows" variable nil (reparse-symbol function_parameters) [33110 33115])
                ("ncols" variable nil (reparse-symbol function_parameters) [33119 33124])
                ("sharex" variable nil (reparse-symbol function_parameters) [33128 33134])
                ("sharey" variable nil (reparse-symbol function_parameters) [33142 33148])
                ("squeeze" variable nil (reparse-symbol function_parameters) [33156 33163])
                ("subplot_kw" variable nil (reparse-symbol function_parameters) [33183 33193])
                ("gridspec_kw" variable nil (reparse-symbol function_parameters) [33200 33211])
                ("fig_kw" variable nil (reparse-symbol function_parameters) [33218 33226]))              ) nil [33097 134879]))          
      :file "pyplot.py"
      :pointmax 134879
      :fsize 134878
      :lastmodtime '(22681 7108 703474 0)
      :unmatched-syntax '((FROM 2132 . 2136) (PERIOD 2137 . 2138)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("'''
Colorbar toolkit with two classes and a function:

    :class:`ColorbarBase`
        the base class with full colorbar drawing functionality.
        It can be used as-is to make a colorbar for a given colormap;
        a mappable object (e.g., image) is not needed.

    :class:`Colorbar`
        the derived class for use with images or contour plots.

    :func:`make_axes`
        a function for resizing an axes and adding a second axes
        suitable for a colorbar

The :meth:`~matplotlib.figure.Figure.colorbar` method uses :func:`make_axes`
and :class:`Colorbar`; the :func:`~matplotlib.pyplot.colorbar` function
is a thin wrapper over :meth:`~matplotlib.figure.Figure.colorbar`.

'''" code nil nil [1 700])
            ("" code nil nil [724 809])
            ("six" include nil nil [811 821])
            ("six.moves" include nil nil [822 855])
            ("warnings" include nil nil [857 872])
            ("numpy" include nil nil [874 892])
            ("matplotlib" include nil nil [894 918])
            ("matplotlib.artist" include nil nil [919 954])
            ("matplotlib.cbook" include nil nil [955 987])
            ("matplotlib.collections" include nil nil [988 1032])
            ("matplotlib.colors" include nil nil [1033 1067])
            ("matplotlib.contour" include nil nil [1068 1104])
            ("matplotlib.cm" include nil nil [1105 1131])
            ("matplotlib.gridspec" include nil nil [1132 1170])
            ("matplotlib.patches" include nil nil [1171 1208])
            ("matplotlib.path" include nil nil [1209 1240])
            ("matplotlib.ticker" include nil nil [1241 1275])
            ("matplotlib.transforms" include nil nil [1276 1314])
            ("matplotlib" include nil nil [1316 1348])
            ("make_axes_kw_doc" variable nil nil [1350 2314])
            ("colormap_kw_doc" variable nil nil [2316 5751])
            ("colorbar_doc" code nil nil [5753 8501])
            ("docstring" code nil nil [8503 8554])
            ("_set_ticks_on_axis_warn" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [8585 8590])
                ("kw" variable nil (reparse-symbol function_parameters) [8592 8596]))              ) nil [8557 8764])
            ("ColorbarBase" type
               (:superclasses ("cm.ScalarMappable")
                :members 
                  ( ("'''
    Draw a colorbar in an existing axes.

    This is a base class for the :class:`Colorbar` class, which is the
    basis for the :func:`~matplotlib.pyplot.colorbar` function and the
    :meth:`~matplotlib.figure.Figure.colorbar` method, which are the
    usual ways of creating a colorbar.

    It is also useful by itself for showing a colormap.  If the *cmap*
    kwarg is given but *boundaries* and *values* are left as None,
    then the colormap will be displayed on a 0-1 scale. To show the
    under- and over-value colors, specify the *norm* as::

        colors.Normalize(clip=False)

    To show the colors versus index instead of on the 0-1 scale,
    use::

        norm=colors.NoNorm.

    Useful attributes:

        :attr:`ax`
            the Axes instance in which the colorbar is drawn

        :attr:`lines`
            a list of LineCollection if lines were drawn, otherwise
            an empty list

        :attr:`dividers`
            a LineCollection if *drawedges* is True, otherwise None

    Useful public methods are :meth:`set_label` and :meth:`add_lines`.

    '''" code nil (reparse-symbol indented_block_body) [8809 9909])
                    ("_slice_dict" variable nil (reparse-symbol indented_block_body) [9914 10078])
                    ("n_rasterize" variable nil (reparse-symbol indented_block_body) [10084 10100])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10789 10801])
                            ("self" code nil (reparse-symbol indented_block_body) [10810 10826])
                            ("if" code nil (reparse-symbol indented_block_body) [10835 10885])
                            ("if" code nil (reparse-symbol indented_block_body) [10893 10948])
                            ("self" variable nil (reparse-symbol indented_block_body) [10956 10974])
                            ("cm" code nil (reparse-symbol indented_block_body) [10983 11037])
                            ("self" variable nil (reparse-symbol indented_block_body) [11046 11066])
                            ("self" variable nil (reparse-symbol indented_block_body) [11075 11103])
                            ("self" variable nil (reparse-symbol indented_block_body) [11112 11132])
                            ("self" variable nil (reparse-symbol indented_block_body) [11141 11180])
                            ("self" variable nil (reparse-symbol indented_block_body) [11189 11211])
                            ("self" variable nil (reparse-symbol indented_block_body) [11220 11250])
                            ("self" variable nil (reparse-symbol indented_block_body) [11259 11285])
                            ("self" variable nil (reparse-symbol indented_block_body) [11294 11314])
                            ("self" variable nil (reparse-symbol indented_block_body) [11323 11351])
                            ("self" variable nil (reparse-symbol indented_block_body) [11360 11388])
                            ("self" variable nil (reparse-symbol indented_block_body) [11397 11415])
                            ("self" variable nil (reparse-symbol indented_block_body) [11424 11443])
                            ("self" variable nil (reparse-symbol indented_block_body) [11452 11471])
                            ("self" variable nil (reparse-symbol indented_block_body) [11480 11497])
                            ("self" variable nil (reparse-symbol indented_block_body) [11506 11526])
                            ("if" code nil (reparse-symbol indented_block_body) [11536 11643])
                            ("self" variable nil (reparse-symbol indented_block_body) [11651 11683])
                            ("self" code nil (reparse-symbol indented_block_body) [11693 11714])
                            ("if" code nil (reparse-symbol indented_block_body) [11723 11901])
                            ("if" code nil (reparse-symbol indented_block_body) [11909 12503])
                            ("self" code nil (reparse-symbol indented_block_body) [12586 12604])
                            ("self" code nil (reparse-symbol indented_block_body) [12613 12628]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10174 10178])
                            ("ax" variable nil (reparse-symbol function_parameters) [10180 10182])
                            ("cmap" variable nil (reparse-symbol function_parameters) [10184 10188])
                            ("norm" variable nil (reparse-symbol function_parameters) [10212 10216])
                            ("alpha" variable nil (reparse-symbol function_parameters) [10240 10245])
                            ("values" variable nil (reparse-symbol function_parameters) [10269 10275])
                            ("boundaries" variable nil (reparse-symbol function_parameters) [10299 10309])
                            ("orientation" variable nil (reparse-symbol function_parameters) [10333 10344])
                            ("ticklocation" variable nil (reparse-symbol function_parameters) [10374 10386])
                            ("extend" variable nil (reparse-symbol function_parameters) [10412 10418])
                            ("spacing" variable nil (reparse-symbol function_parameters) [10447 10454])
                            ("ticks" variable nil (reparse-symbol function_parameters) [10510 10515])
                            ("format" variable nil (reparse-symbol function_parameters) [10539 10545])
                            ("drawedges" variable nil (reparse-symbol function_parameters) [10569 10578])
                            ("filled" variable nil (reparse-symbol function_parameters) [10603 10609])
                            ("extendfrac" variable nil (reparse-symbol function_parameters) [10633 10643])
                            ("extendrect" variable nil (reparse-symbol function_parameters) [10667 10677])
                            ("label" variable nil (reparse-symbol function_parameters) [10702 10707]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10161 12629])
                    ("_extend_lower" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12652 12656]))                          
                        :documentation "Returns whether the lower limit is open ended.")
                        (reparse-symbol indented_block_body) [12634 12766])
                    ("_extend_upper" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12789 12793]))                          
                        :documentation "Returns whether the uper limit is open ended.")
                        (reparse-symbol indented_block_body) [12771 12902])
                    ("_patch_ax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12921 12925]))                          )
                        (reparse-symbol indented_block_body) [12907 13127])
                    ("draw_all" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13145 13149]))                          )
                        (reparse-symbol indented_block_body) [13132 13502])
                    ("config_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13523 13527]))                          )
                        (reparse-symbol indented_block_body) [13507 14057])
                    ("update_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14079 14083]))                          
                        :documentation "
        Force the update of the ticks and ticklabels. This must be
        called whenever the tick locator and/or tick formatter changes.
        ")
                        (reparse-symbol indented_block_body) [14062 14700])
                    ("set_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14719 14723])
                            ("ticks" variable nil (reparse-symbol function_parameters) [14725 14730])
                            ("update_ticks" variable nil (reparse-symbol function_parameters) [14732 14744]))                          
                        :documentation "
        set tick locations. Tick locations are updated immediately unless
        update_ticks is *False*. To manually update the ticks, call
        *update_ticks* method explicitly.
        ")
                        (reparse-symbol indented_block_body) [14705 15197])
                    ("set_ticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15221 15225])
                            ("ticklabels" variable nil (reparse-symbol function_parameters) [15227 15237])
                            ("update_ticks" variable nil (reparse-symbol function_parameters) [15239 15251]))                          
                        :documentation "
        set tick labels. Tick labels are updated immediately unless
        update_ticks is *False*. To manually update the ticks, call
        *update_ticks* method explicitly.
        ")
                        (reparse-symbol indented_block_body) [15202 15751])
                    ("_config_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15773 15777])
                            ("X" variable nil (reparse-symbol function_parameters) [15779 15780])
                            ("Y" variable nil (reparse-symbol function_parameters) [15782 15783]))                          )
                        (reparse-symbol indented_block_body) [15756 16882])
                    ("_set_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16902 16906]))                          )
                        (reparse-symbol indented_block_body) [16887 17114])
                    ("set_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17133 17137])
                            ("label" variable nil (reparse-symbol function_parameters) [17139 17144])
                            ("kw" variable nil (reparse-symbol function_parameters) [17146 17150]))                          )
                        (reparse-symbol indented_block_body) [17119 17313])
                    ("_outline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17331 17335])
                            ("X" variable nil (reparse-symbol function_parameters) [17337 17338])
                            ("Y" variable nil (reparse-symbol function_parameters) [17340 17341]))                          )
                        (reparse-symbol indented_block_body) [17318 17849])
                    ("_edges" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17865 17869])
                            ("X" variable nil (reparse-symbol function_parameters) [17871 17872])
                            ("Y" variable nil (reparse-symbol function_parameters) [17874 17875]))                          )
                        (reparse-symbol indented_block_body) [17854 18302])
                    ("_add_solids" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18323 18327])
                            ("X" variable nil (reparse-symbol function_parameters) [18329 18330])
                            ("Y" variable nil (reparse-symbol function_parameters) [18332 18333])
                            ("C" variable nil (reparse-symbol function_parameters) [18335 18336]))                          )
                        (reparse-symbol indented_block_body) [18307 19813])
                    ("add_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19832 19836])
                            ("levels" variable nil (reparse-symbol function_parameters) [19838 19844])
                            ("colors" variable nil (reparse-symbol function_parameters) [19846 19852])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [19854 19864])
                            ("erase" variable nil (reparse-symbol function_parameters) [19866 19871]))                          )
                        (reparse-symbol indented_block_body) [19818 20992])
                    ("_ticker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21009 21013]))                          )
                        (reparse-symbol indented_block_body) [20997 23553])
                    ("_process_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23578 23582])
                            ("b" variable nil (reparse-symbol function_parameters) [23584 23585]))                          )
                        (reparse-symbol indented_block_body) [23558 26936])
                    ("_find_range" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26957 26961]))                          )
                        (reparse-symbol indented_block_body) [26941 27209])
                    ("_central_N" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27229 27233]))                          )
                        (reparse-symbol indented_block_body) [27214 27471])
                    ("_extended_N" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27492 27496]))                          )
                        (reparse-symbol indented_block_body) [27476 27776])
                    ("_get_extension_lengths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27808 27812])
                            ("frac" variable nil (reparse-symbol function_parameters) [27814 27818])
                            ("automin" variable nil (reparse-symbol function_parameters) [27820 27827])
                            ("automax" variable nil (reparse-symbol function_parameters) [27829 27836])
                            ("default" variable nil (reparse-symbol function_parameters) [27838 27845]))                          )
                        (reparse-symbol indented_block_body) [27781 29017])
                    ("_uniform_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29037 29041])
                            ("N" variable nil (reparse-symbol function_parameters) [29043 29044]))                          )
                        (reparse-symbol indented_block_body) [29022 29992])
                    ("_proportional_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30017 30021]))                          )
                        (reparse-symbol indented_block_body) [29997 31479])
                    ("_mesh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31494 31498]))                          )
                        (reparse-symbol indented_block_body) [31484 32164])
                    ("_locate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32181 32185])
                            ("x" variable nil (reparse-symbol function_parameters) [32187 32188]))                          )
                        (reparse-symbol indented_block_body) [32169 33153])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33172 33176])
                            ("alpha" variable nil (reparse-symbol function_parameters) [33178 33183]))                          )
                        (reparse-symbol indented_block_body) [33158 33213])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33229 33233]))                          
                        :documentation "
        Remove this colorbar from the figure
        ")
                        (reparse-symbol indented_block_body) [33218 33364]))                  
                :type "class")
                nil [8766 33364])
            ("Colorbar" type
               (:documentation "
    This class connects a :class:`ColorbarBase` to a
    :class:`~matplotlib.cm.ScalarMappable` such as a
    :class:`~matplotlib.image.AxesImage` generated via
    :meth:`~matplotlib.axes.Axes.imshow`.

    It is not intended to be instantiated directly; instead,
    use :meth:`~matplotlib.figure.Figure.colorbar` or
    :func:`~matplotlib.pyplot.colorbar` to make your colorbar.

    "
                :superclasses ("ColorbarBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("mappable" code nil (reparse-symbol indented_block_body) [33981 34006])
                            ("self" variable nil (reparse-symbol indented_block_body) [34016 34040])
                            ("kw" variable nil (reparse-symbol indented_block_body) [34049 34082])
                            ("kw" variable nil (reparse-symbol indented_block_body) [34091 34124])
                            ("if" code nil (reparse-symbol indented_block_body) [34134 34937]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33812 33816])
                            ("ax" variable nil (reparse-symbol function_parameters) [33818 33820])
                            ("mappable" variable nil (reparse-symbol function_parameters) [33822 33830])
                            ("kw" variable nil (reparse-symbol function_parameters) [33832 33836]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33799 34937])
                    ("on_mappable_changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34966 34970])
                            ("mappable" variable nil (reparse-symbol function_parameters) [34972 34980]))                          
                        :documentation "
        Updates this colorbar to match the mappable's properties.

        Typically this is automatically registered as an event handler
        by :func:`colorbar_factory` and should not be called manually.

        ")
                        (reparse-symbol indented_block_body) [34942 35340])
                    ("add_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35359 35363])
                            ("CS" variable nil (reparse-symbol function_parameters) [35365 35367])
                            ("erase" variable nil (reparse-symbol function_parameters) [35369 35374]))                          )
                        (reparse-symbol indented_block_body) [35345 36431])
                    ("update_normal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36454 36458])
                            ("mappable" variable nil (reparse-symbol function_parameters) [36460 36468]))                          )
                        (reparse-symbol indented_block_body) [36436 36905])
                    ("update_bruteforce" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36932 36936])
                            ("mappable" variable nil (reparse-symbol function_parameters) [36938 36946]))                          )
                        (reparse-symbol indented_block_body) [36910 38054])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38431 38435]))                          
                        :documentation "
        Remove this colorbar from the figure.  If the colorbar was created with
        ``use_gridspec=True`` then restore the gridspec to its previous value.
        ")
                        (reparse-symbol indented_block_body) [38420 39275]))                  
                :type "class")
                nil [33366 39275])
            ("" code nil nil [39300 39318])
            ("make_axes" function (:arguments 
              ( ("parents" variable nil (reparse-symbol function_parameters) [39333 39340])
                ("location" variable nil (reparse-symbol function_parameters) [39342 39350])
                ("orientation" variable nil (reparse-symbol function_parameters) [39357 39368])
                ("fraction" variable nil (reparse-symbol function_parameters) [39375 39383])
                ("shrink" variable nil (reparse-symbol function_parameters) [39404 39410])
                ("aspect" variable nil (reparse-symbol function_parameters) [39416 39422])
                ("kw" variable nil (reparse-symbol function_parameters) [39427 39431]))              ) nil [39319 44287])
            ("" code nil nil [44312 44330])
            ("make_axes_gridspec" function (:arguments 
              ( ("parent" variable nil (reparse-symbol function_parameters) [44354 44360])
                ("kw" variable nil (reparse-symbol function_parameters) [44362 44366]))              ) nil [44331 47428])
            ("ColorbarPatch" type
               (:documentation "
    A Colorbar which is created using :class:`~matplotlib.patches.Patch`
    rather than the default :func:`~matplotlib.axes.pcolor`.

    It uses a list of Patch instances instead of a
    :class:`~matplotlib.collections.PatchCollection` because the
    latter does not allow the hatch pattern to vary among the
    members of the collection.
    "
                :superclasses ("Colorbar")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [48037 48061])
                            ("Colorbar" code nil (reparse-symbol indented_block_body) [48070 48113]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47838 47842])
                            ("ax" variable nil (reparse-symbol function_parameters) [47844 47846])
                            ("mappable" variable nil (reparse-symbol function_parameters) [47848 47856])
                            ("kw" variable nil (reparse-symbol function_parameters) [47858 47862]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47825 48114])
                    ("_add_solids" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48135 48139])
                            ("X" variable nil (reparse-symbol function_parameters) [48141 48142])
                            ("Y" variable nil (reparse-symbol function_parameters) [48144 48145])
                            ("C" variable nil (reparse-symbol function_parameters) [48147 48148]))                          
                        :documentation "
        Draw the colors using :class:`~matplotlib.patches.Patch`;
        optionally add separators.
        ")
                        (reparse-symbol indented_block_body) [48119 50055]))                  
                :type "class")
                nil [47430 50055])
            ("colorbar_factory" function
               (:documentation "
    Creates a colorbar on the given axes for the given mappable.

    Typically, for automatic colorbar placement given only a mappable use
    :meth:`~matplotlib.figure.Figure.colorbar`.

    "
                :arguments 
                  ( ("cax" variable nil (reparse-symbol function_parameters) [50078 50081])
                    ("mappable" variable nil (reparse-symbol function_parameters) [50083 50091])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [50093 50101]))                  )
                nil [50057 50794]))          
      :file "colorbar.py"
      :pointmax 50794
      :fsize 50793
      :lastmodtime '(22681 7108 743473 0)
      :unmatched-syntax '((NAME 40772 . 40780) (IF 40791 . 40793) (ELSE 40820 . 40824) (NAME 11575 . 11587) (IF 11599 . 11601) (ELSE 11630 . 11634)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A collection of utility functions and classes.  Originally, many
(but not all) were from the Python Cookbook -- hence the name cbook.

This module is safe to import from anywhere within matplotlib;
it imports matplotlib only at runtime.
\"\"\"" code nil nil [1 245])
            ("" code nil nil [270 355])
            ("six" include nil nil [357 367])
            ("six.moves" include nil nil [368 401])
            ("itertools" include nil nil [402 430])
            ("collections" include nil nil [431 449])
            ("datetime" include nil nil [450 465])
            ("errno" include nil nil [466 478])
            ("functools" include nil nil [479 507])
            ("glob" include nil nil [508 519])
            ("gzip" include nil nil [520 531])
            ("io" include nil nil [532 541])
            ("locale" include nil nil [542 555])
            ("os" include nil nil [556 565])
            ("re" include nil nil [566 575])
            ("sys" include nil nil [576 586])
            ("time" include nil nil [587 598])
            ("traceback" include nil nil [599 615])
            ("types" include nil nil [616 628])
            ("warnings" include nil nil [629 644])
            ("weakref" include nil nil [645 687])
            ("numpy" include nil nil [689 707])
            ("numpy.ma" include nil nil [708 729])
            ("MatplotlibDeprecationWarning" type
               (:documentation "
    A class for issuing deprecation warnings for Matplotlib users.

    In light of the fact that Python builtin DeprecationWarnings are ignored
    by default as of Python 2.7 (see link below), this class was put in to
    allow for the signaling of deprecation, but via UserWarnings which are not
    ignored by default.

    https://docs.python.org/dev/whatsnew/2.7.html#the-future-for-python-2-x
    "
                :superclasses ("UserWarning")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1201 1205]))                  
                :type "class")
                nil [732 1206])
            ("mplDeprecation" variable nil nil [1207 1252])
            ("_generate_deprecation_message" function (:arguments 
              ( ("since" variable nil (reparse-symbol function_parameters) [1289 1294])
                ("message" variable nil (reparse-symbol function_parameters) [1296 1303])
                ("name" variable nil (reparse-symbol function_parameters) [1308 1312])
                ("alternative" variable nil (reparse-symbol function_parameters) [1351 1362])
                ("pending" variable nil (reparse-symbol function_parameters) [1367 1374])
                ("obj_type" variable nil (reparse-symbol function_parameters) [1416 1424]))              ) nil [1255 2088])
            ("warn_deprecated" function
               (:documentation "
    Used to display deprecation warning in a standard way.

    Parameters
    ----------
    since : str
        The release at which this API became deprecated.

    message : str, optional
        Override the default deprecation message.  The format
        specifier `%(func)s` may be used for the name of the function,
        and `%(alternative)s` may be used in the deprecation message
        to insert the name of an alternative to the deprecated
        function.  `%(obj_type)` may be used to insert a friendly name
        for the type of object being deprecated.

    name : str, optional
        The name of the deprecated function; if not provided the name
        is automatically determined from the passed in function,
        though this is useful in the case of renamed functions, where
        the new function is just assigned to the name of the
        deprecated function.  For example::

            def new_function():
                ...
            oldFunction = new_function

    alternative : str, optional
        An alternative function that the user may use in place of the
        deprecated function.  The deprecation warning will tell the user about
        this alternative if provided.

    pending : bool, optional
        If True, uses a PendingDeprecationWarning instead of a
        DeprecationWarning.

    obj_type : str, optional
        The object type being deprecated.

    Examples
    --------

        Basic example::

            # To warn of the deprecation of \"matplotlib.name_of_module\"
            warn_deprecated('1.4.0', name='matplotlib.name_of_module',
                            obj_type='module')

    "
                :arguments 
                  ( ("since" variable nil (reparse-symbol function_parameters) [2119 2124])
                    ("message" variable nil (reparse-symbol function_parameters) [2126 2133])
                    ("name" variable nil (reparse-symbol function_parameters) [2138 2142])
                    ("alternative" variable nil (reparse-symbol function_parameters) [2147 2158])
                    ("pending" variable nil (reparse-symbol function_parameters) [2163 2170])
                    ("obj_type" variable nil (reparse-symbol function_parameters) [2186 2194]))                  )
                nil [2090 4052])
            ("deprecated" function
               (:documentation "
    Decorator to mark a function as deprecated.

    Parameters
    ----------
    since : str
        The release at which this API became deprecated.  This is
        required.

    message : str, optional
        Override the default deprecation message.  The format
        specifier `%(func)s` may be used for the name of the function,
        and `%(alternative)s` may be used in the deprecation message
        to insert the name of an alternative to the deprecated
        function.  `%(obj_type)` may be used to insert a friendly name
        for the type of object being deprecated.

    name : str, optional
        The name of the deprecated function; if not provided the name
        is automatically determined from the passed in function,
        though this is useful in the case of renamed functions, where
        the new function is just assigned to the name of the
        deprecated function.  For example::

            def new_function():
                ...
            oldFunction = new_function

    alternative : str, optional
        An alternative function that the user may use in place of the
        deprecated function.  The deprecation warning will tell the user about
        this alternative if provided.

    pending : bool, optional
        If True, uses a PendingDeprecationWarning instead of a
        DeprecationWarning.

    Examples
    --------

        Basic example::

            @deprecated('1.4.0')
            def the_function_to_deprecate():
                pass

    "
                :arguments 
                  ( ("since" variable nil (reparse-symbol function_parameters) [4069 4074])
                    ("message" variable nil (reparse-symbol function_parameters) [4076 4083])
                    ("name" variable nil (reparse-symbol function_parameters) [4088 4092])
                    ("alternative" variable nil (reparse-symbol function_parameters) [4097 4108])
                    ("pending" variable nil (reparse-symbol function_parameters) [4113 4120])
                    ("obj_type" variable nil (reparse-symbol function_parameters) [4143 4151]))                  )
                nil [4054 7095])
            ("unicode_safe" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [7544 7545]))              ) nil [7527 8079])
            ("converter" type
               (:documentation "
    Base class for handling string -> python type with support for
    missing values
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8273 8295])
                            ("self" variable nil (reparse-symbol indented_block_body) [8304 8332]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8225 8229])
                            ("missing" variable nil (reparse-symbol function_parameters) [8231 8238])
                            ("missingval" variable nil (reparse-symbol function_parameters) [8247 8257]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8212 8333])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8351 8355])
                            ("s" variable nil (reparse-symbol function_parameters) [8357 8358]))                          )
                        (reparse-symbol indented_block_body) [8338 8443])
                    ("is_missing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8463 8467])
                            ("s" variable nil (reparse-symbol function_parameters) [8469 8470]))                          )
                        (reparse-symbol indented_block_body) [8448 8523]))                  
                :type "class")
                nil [8081 8523])
            ("tostr" type
               (:documentation "convert to string or None"
                :superclasses ("converter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("converter" code nil (reparse-symbol indented_block_body) [8648 8712]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8602 8606])
                            ("missing" variable nil (reparse-symbol function_parameters) [8608 8615])
                            ("missingval" variable nil (reparse-symbol function_parameters) [8624 8634]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8589 8713]))                  
                :type "class")
                nil [8525 8713])
            ("todatetime" type
               (:documentation "convert to a datetime or None"
                :superclasses ("converter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("'use a :func:`time.strptime` format string for conversion'" code nil (reparse-symbol indented_block_body) [8865 8923])
                            ("converter" code nil (reparse-symbol indented_block_body) [8932 8977])
                            ("self" variable nil (reparse-symbol indented_block_body) [8986 9000]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8801 8805])
                            ("fmt" variable nil (reparse-symbol function_parameters) [8807 8810])
                            ("missing" variable nil (reparse-symbol function_parameters) [8823 8830])
                            ("missingval" variable nil (reparse-symbol function_parameters) [8839 8849]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8788 9001])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9019 9023])
                            ("s" variable nil (reparse-symbol function_parameters) [9025 9026]))                          )
                        (reparse-symbol indented_block_body) [9006 9179]))                  
                :type "class")
                nil [8715 9179])
            ("todate" type
               (:documentation "convert to a date or None"
                :superclasses ("converter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"use a :func:`time.strptime` format string for conversion\"\"\"" code nil (reparse-symbol indented_block_body) [9323 9385])
                            ("converter" code nil (reparse-symbol indented_block_body) [9394 9439])
                            ("self" variable nil (reparse-symbol indented_block_body) [9448 9462]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9259 9263])
                            ("fmt" variable nil (reparse-symbol function_parameters) [9265 9268])
                            ("missing" variable nil (reparse-symbol function_parameters) [9281 9288])
                            ("missingval" variable nil (reparse-symbol function_parameters) [9297 9307]))                          
                        :documentation "use a :func:`time.strptime` format string for conversion"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9246 9463])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9481 9485])
                            ("s" variable nil (reparse-symbol function_parameters) [9487 9488]))                          )
                        (reparse-symbol indented_block_body) [9468 9637]))                  
                :type "class")
                nil [9181 9637])
            ("tofloat" type
               (:documentation "convert to a float or None"
                :superclasses ("converter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("converter" code nil (reparse-symbol indented_block_body) [9767 9800])
                            ("self" variable nil (reparse-symbol indented_block_body) [9809 9837]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9719 9723])
                            ("missing" variable nil (reparse-symbol function_parameters) [9725 9732])
                            ("missingval" variable nil (reparse-symbol function_parameters) [9741 9751]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9706 9838])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9856 9860])
                            ("s" variable nil (reparse-symbol function_parameters) [9862 9863]))                          )
                        (reparse-symbol indented_block_body) [9843 9956]))                  
                :type "class")
                nil [9639 9956])
            ("toint" type
               (:documentation "convert to an int or None"
                :superclasses ("converter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("converter" code nil (reparse-symbol indented_block_body) [10083 10116]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10035 10039])
                            ("missing" variable nil (reparse-symbol function_parameters) [10041 10048])
                            ("missingval" variable nil (reparse-symbol function_parameters) [10057 10067]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10022 10117])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10135 10139])
                            ("s" variable nil (reparse-symbol function_parameters) [10141 10142]))                          )
                        (reparse-symbol indented_block_body) [10122 10233]))                  
                :type "class")
                nil [9958 10233])
            ("_BoundMethodProxy" type
               (:documentation "
    Our own proxy object which enables weak references to bound and unbound
    methods and arbitrary callables. Pulls information about the function,
    class, and instance out of a bound method. Stores a weak reference to the
    instance to support garbage collection.

    @organization: IBM Corporation
    @copyright: Copyright (c) 2005, 2006 IBM Corporation
    @license: The BSD License

    Minor bugfixes by Michael Droettboom
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10758 10779])
                            ("self" variable nil (reparse-symbol indented_block_body) [10788 10816])
                            ("try" code nil (reparse-symbol indented_block_body) [10825 11417]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10739 10743])
                            ("cb" variable nil (reparse-symbol function_parameters) [10745 10747]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10726 11417])
                    ("add_destroy_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11447 11451])
                            ("callback" variable nil (reparse-symbol function_parameters) [11453 11461]))                          )
                        (reparse-symbol indented_block_body) [11422 11532])
                    ("_destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11550 11554])
                            ("wk" variable nil (reparse-symbol function_parameters) [11556 11558]))                          )
                        (reparse-symbol indented_block_body) [11537 11714])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11736 11740]))                          )
                        (reparse-symbol indented_block_body) [11719 11911])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11933 11937])
                            ("statedict" variable nil (reparse-symbol function_parameters) [11939 11948]))                          )
                        (reparse-symbol indented_block_body) [11916 12121])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12139 12143])
                            ("args" variable nil (reparse-symbol function_parameters) [12145 12150])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [12152 12160]))                          
                        :documentation "
        Proxy for a call to the weak referenced object. Take
        arbitrary params to pass to the callable.

        Raises `ReferenceError`: When the weak reference refers to
        a dead object
        ")
                        (reparse-symbol indented_block_body) [12126 12857])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12873 12877])
                            ("other" variable nil (reparse-symbol function_parameters) [12879 12884]))                          
                        :documentation "
        Compare the held function and instance with that held by
        another proxy.
        ")
                        (reparse-symbol indented_block_body) [12862 13264])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13280 13284])
                            ("other" variable nil (reparse-symbol function_parameters) [13286 13291]))                          
                        :documentation "
        Inverse of __eq__.
        ")
                        (reparse-symbol indented_block_body) [13269 13383])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13401 13405]))                          )
                        (reparse-symbol indented_block_body) [13388 13434]))                  
                :type "class")
                nil [10235 13434])
            ("CallbackRegistry" type
               (:documentation "
    Handle registering and disconnecting for a set of signals and
    callbacks:

        >>> def oneat(x):
        ...    print('eat', x)
        >>> def ondrink(x):
        ...    print('drink', x)

        >>> from matplotlib.cbook import CallbackRegistry
        >>> callbacks = CallbackRegistry()

        >>> id_eat = callbacks.connect('eat', oneat)
        >>> id_drink = callbacks.connect('drink', ondrink)

        >>> callbacks.process('drink', 123)
        drink 123
        >>> callbacks.process('eat', 456)
        eat 456
        >>> callbacks.process('be merry', 456) # nothing will be called
        >>> callbacks.disconnect(id_eat)
        >>> callbacks.process('eat', 456)      # nothing will be called

    In practice, one should always disconnect all callbacks when they
    are no longer needed to avoid dangling references (and thus memory
    leaks).  However, real code in matplotlib rarely does so, and due
    to its design, it is rather difficult to place this kind of code.
    To get around this, and prevent this class of memory leaks, we
    instead store weak references to bound methods only, so when the
    destination object needs to die, the CallbackRegistry won't keep
    it alive.  The Python stdlib weakref module can not create weak
    references to bound methods directly, so we need to create a proxy
    object to handle weak references to bound methods (or regular free
    functions).  This technique was shared by Peter Parente on his
    `\"Mindtrove\" blog
    <http://mindtrove.info/python-weak-references/>`_.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [15078 15101])
                            ("self" variable nil (reparse-symbol indented_block_body) [15110 15123])
                            ("self" variable nil (reparse-symbol indented_block_body) [15132 15155]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15063 15067]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15050 15156])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15178 15182]))                          )
                        (reparse-symbol indented_block_body) [15161 15312])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15334 15338])
                            ("state" variable nil (reparse-symbol function_parameters) [15340 15345]))                          )
                        (reparse-symbol indented_block_body) [15317 15423])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15440 15444])
                            ("s" variable nil (reparse-symbol function_parameters) [15446 15447])
                            ("func" variable nil (reparse-symbol function_parameters) [15449 15453]))                          
                        :documentation "
        register *func* to be called when a signal *s* is generated
        func will be called
        ")
                        (reparse-symbol indented_block_body) [15428 16132])
                    ("_remove_proxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16155 16159])
                            ("proxy" variable nil (reparse-symbol function_parameters) [16161 16166]))                          )
                        (reparse-symbol indented_block_body) [16137 16507])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16527 16531])
                            ("cid" variable nil (reparse-symbol function_parameters) [16533 16536]))                          
                        :documentation "
        disconnect the callback registered with callback id *cid*
        ")
                        (reparse-symbol indented_block_body) [16512 17124])
                    ("process" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17141 17145])
                            ("s" variable nil (reparse-symbol function_parameters) [17147 17148])
                            ("args" variable nil (reparse-symbol function_parameters) [17150 17155])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17157 17165]))                          
                        :documentation "
        process signal *s*.  All of the functions registered to receive
        callbacks on *s* will be called with *\\*args* and *\\*\\*kwargs*
        ")
                        (reparse-symbol indented_block_body) [17129 17586]))                  
                :type "class")
                nil [13436 17586])
            ("silent_list" type
               (:documentation "
    override repr when returning a list of matplotlib artists to
    prevent long, meaningless output.  This is meant to be used for a
    homogeneous list of a given type
    "
                :superclasses ("list")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [17849 17865])
                            ("if" code nil (reparse-symbol indented_block_body) [17874 17923]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17818 17822])
                            ("type" variable nil (reparse-symbol function_parameters) [17824 17828])
                            ("seq" variable nil (reparse-symbol function_parameters) [17830 17833]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17805 17923])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17941 17945]))                          )
                        (reparse-symbol indented_block_body) [17928 18016])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18033 18037]))                          )
                        (reparse-symbol indented_block_body) [18021 18066])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18088 18092]))                          )
                        (reparse-symbol indented_block_body) [18071 18202])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18224 18228])
                            ("state" variable nil (reparse-symbol function_parameters) [18230 18235]))                          )
                        (reparse-symbol indented_block_body) [18207 18306]))                  
                :type "class")
                nil [17588 18306])
            ("IgnoredKeywordWarning" type
               (:documentation "
    A class for issuing warnings about keyword arguments that will be ignored
    by matplotlib
    "
                :superclasses ("UserWarning")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [18466 18470]))                  
                :type "class")
                nil [18308 18471])
            ("local_over_kwdict" function
               (:documentation "
    Enforces the priority of a local variable over potentially conflicting
    argument(s) from a kwargs dict. The following possible output values are
    considered in order of priority:

        local_var > kwargs[keys[0]] > ... > kwargs[keys[-1]]

    The first of these whose value is not None will be returned. If all are
    None then None will be returned. Each key in keys will be removed from the
    kwargs dict in place.

    Parameters
    ----------
        local_var: any object
            The local variable (highest priority)

        kwargs: dict
            Dictionary of keyword arguments; modified in place

        keys: str(s)
            Name(s) of keyword arguments to process, in descending order of
            priority

    Returns
    -------
        out: any object
            Either local_var or one of kwargs[key] for key in keys

    Raises
    ------
        IgnoredKeywordWarning
            For each key in keys that is removed from kwargs but not used as
            the output value

    "
                :arguments 
                  ( ("local_var" variable nil (reparse-symbol function_parameters) [18495 18504])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [18506 18512])
                    ("keys" variable nil (reparse-symbol function_parameters) [18514 18519]))                  )
                nil [18473 19902])
            ("strip_math" function
               (:documentation "remove latex formatting from mathtext"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [19919 19920]))                  )
                nil [19904 81599])
            ("this" code nil nil [81660 81664])
            ("\"\"\"


class Locked(object):
    \"\"\"" code nil nil [81772 81807]))          
      :file "cbook.py"
      :pointmax 83372
      :fsize 83371
      :lastmodtime '(22681 7108 763473 0)
      :unmatched-syntax '((INDENT_BLOCK 81808 . 83372) (AND 81599 . 81602) (NAME 81522 . 81530) ($EOI 83372 . 83372) (INDENT_BLOCK 55620 . 62443) (INDENT_BLOCK 55584 . 55620) (DEDENT 55524 . 55524) (DEF 55524 . 55527) (LPAREN 55541 . 55542) (NEWLINE 52817 . 52818) (COLON 52816 . 52817) (RPAREN 52815 . 52816) (MULT 52810 . 52811) (DEDENT 52785 . 52785) (DEF 52785 . 52788) (LPAREN 52809 . 52810) (NEWLINE 52407 . 52408) (COLON 52406 . 52407) (RPAREN 52405 . 52406) (DEDENT 52380 . 52380) (DEF 52380 . 52383) (LPAREN 52400 . 52401) (NEWLINE 51954 . 51955) (COLON 51953 . 51954) (RPAREN 51952 . 51953) (DEDENT 51912 . 51912) (DEF 51912 . 51915) (LPAREN 51943 . 51944) (NEWLINE 48314 . 48315) (COLON 48313 . 48314) (RPAREN 48312 . 48313) (DEDENT 48292 . 48292) (CLASS 48292 . 48297) (LPAREN 48305 . 48306) (NEWLINE 46022 . 46023) (COLON 46021 . 46022) (RPAREN 46020 . 46021) (DEDENT 45953 . 45953) (DEF 45953 . 45956) (LPAREN 45969 . 45970) (FROM 45801 . 45805) (PERIOD 45806 . 45807) (NEWLINE 44475 . 44476) (COLON 44474 . 44475) (RPAREN 44473 . 44474) (DEDENT 44447 . 44447) (CLASS 44447 . 44452) (LPAREN 44466 . 44467) (NEWLINE 43927 . 43928) (COLON 43926 . 43927) (RPAREN 43925 . 43926) (DEDENT 43888 . 43888) (DEF 43888 . 43891) (LPAREN 43911 . 43912) (NEWLINE 43726 . 43727) (COLON 43725 . 43726) (RPAREN 43724 . 43725) (DEDENT 43696 . 43696) (DEF 43696 . 43699) (LPAREN 43715 . 43716) (NEWLINE 43454 . 43455) (COLON 43453 . 43454) (RPAREN 43452 . 43453) (MULT 43447 . 43448) (DEF 43435 . 43438) (LPAREN 43446 . 43447) (NEWLINE 41574 . 41575) (COLON 41549 . 41550) (RPAREN 41548 . 41549) (DEDENT 41527 . 41527) (DEF 41527 . 41530) (LPAREN 41544 . 41545) (NEWLINE 41333 . 41334) (COLON 41332 . 41333) (RPAREN 41331 . 41332) (DEDENT 41306 . 41306) (DEF 41306 . 41309) (LPAREN 41323 . 41324) (NEWLINE 41172 . 41173) (COLON 41171 . 41172) (RPAREN 41170 . 41171) (DEDENT 41152 . 41152) (DEF 41152 . 41155) (LPAREN 41168 . 41169) (NEWLINE 40728 . 40729) (COLON 40727 . 40728) (RPAREN 40726 . 40727) (DEDENT 40694 . 40694) (DEF 40694 . 40697) (LPAREN 40705 . 40706) (NEWLINE 40623 . 40624) (COLON 40622 . 40623) (RPAREN 40621 . 40622) (DEDENT 40607 . 40607) (DEF 40607 . 40610) (LPAREN 40617 . 40618) (NEWLINE 38071 . 38072) (COLON 38070 . 38071) (RPAREN 38069 . 38070) (DEDENT 38051 . 38051) (CLASS 38051 . 38056) (LPAREN 38062 . 38063) (NEWLINE 37504 . 37505) (COLON 37503 . 37504) (RPAREN 37502 . 37503) (DEDENT 37484 . 37484) (CLASS 37484 . 37489) (LPAREN 37497 . 37498) (NEWLINE 37130 . 37131) (COLON 37129 . 37130) (RPAREN 37128 . 37129) (DEDENT 37114 . 37114) (DEF 37114 . 37117) (LPAREN 37126 . 37127) (NEWLINE 36883 . 36884) (COLON 36882 . 36883) (RPAREN 36881 . 36882) (DEDENT 36866 . 36866) (DEF 36866 . 36869) (LPAREN 36877 . 36878) (NEWLINE 36621 . 36622) (COLON 36620 . 36621) (RPAREN 36619 . 36620) (DEDENT 36604 . 36604) (DEF 36604 . 36607) (LPAREN 36615 . 36616) (NEWLINE 36296 . 36297) (COLON 36295 . 36296) (RPAREN 36294 . 36295) (DEDENT 36278 . 36278) (DEF 36278 . 36281) (LPAREN 36290 . 36291) (NEWLINE 36090 . 36091) (COLON 36089 . 36090) (RPAREN 36088 . 36089) (DEDENT 36061 . 36061) (DEF 36061 . 36064) (LPAREN 36081 . 36082) (NEWLINE 35862 . 35863) (COLON 35861 . 35862) (RPAREN 35860 . 35861) (DEDENT 35839 . 35839) (DEF 35839 . 35842) (LPAREN 35849 . 35850) (NEWLINE 35396 . 35397) (COLON 35395 . 35396) (RPAREN 35394 . 35395) (DEDENT 35363 . 35363) (DEF 35363 . 35366) (LPAREN 35389 . 35390) (NEWLINE 34541 . 34542) (COLON 34540 . 34541) (RPAREN 34539 . 34540) (DEDENT 34478 . 34478) (DEF 34478 . 34481) (LPAREN 34491 . 34492) (NEWLINE 33160 . 33161) (COLON 33159 . 33160) (RPAREN 33158 . 33159) (LPAREN 33156 . 33157) (NEWLINE 33143 . 33144) (RBRACE 33142 . 33143) (LBRACE 33141 . 33142) (NEWLINE 33062 . 33063) (RPAREN 33061 . 33062) (DEDENT 33006 . 33006) (NAME 33006 . 33024) (LPAREN 33037 . 33038) (NEWLINE 32278 . 32279) (COLON 32277 . 32278) (RPAREN 32276 . 32277) (DEDENT 32249 . 32249) (DEF 32249 . 32252) (LPAREN 32257 . 32258) (NEWLINE 31853 . 31854) (COLON 31852 . 31853) (RPAREN 31851 . 31852) (DEDENT 31827 . 31827) (DEF 31827 . 31830) (LPAREN 31844 . 31845) (NEWLINE 30810 . 30811) (COLON 30809 . 30810) (RPAREN 30808 . 30809) (DEDENT 30785 . 30785) (CLASS 30785 . 30790) (LPAREN 30801 . 30802) (NEWLINE 30621 . 30622) (COLON 30620 . 30621) (RPAREN 30619 . 30620) (LPAREN 30611 . 30612) (NEWLINE 30593 . 30594) (RPAREN 30592 . 30593) (DEDENT 30549 . 30549) (NAME 30549 . 30570) (LPAREN 30591 . 30592) (NEWLINE 30066 . 30067) (COLON 30065 . 30066) (RPAREN 30064 . 30065) (DEDENT 30033 . 30033) (CLASS 30033 . 30038) (LPAREN 30057 . 30058) (INDENT_BLOCK 29962 . 30032) (NEWLINE 29961 . 29962) (COLON 29960 . 29961) (TRY 29877 . 29880) (AS 29948 . 29950) (NEWLINE 29570 . 29571) (COLON 29569 . 29570) (RPAREN 29568 . 29569) (DEDENT 29539 . 29539) (DEF 29539 . 29542) (LPAREN 29549 . 29550) (NEWLINE 28966 . 28967) (COLON 28965 . 28966) (RPAREN 28964 . 28965) (DEDENT 28947 . 28947) (CLASS 28947 . 28952) (LPAREN 28957 . 28958) (NEWLINE 28139 . 28140) (COLON 28138 . 28139) (RPAREN 28137 . 28138) (DEDENT 28114 . 28114) (DEF 28114 . 28117) (LPAREN 28125 . 28126) (NEWLINE 27290 . 27291) (COLON 27289 . 27290) (RPAREN 27288 . 27289) (DEDENT 27271 . 27271) (CLASS 27271 . 27276) (LPAREN 27283 . 27284) (NEWLINE 26048 . 26049) (COLON 26047 . 26048) (RPAREN 26046 . 26047) (DEDENT 26027 . 26027) (CLASS 26027 . 26032) (LPAREN 26039 . 26040) (NEWLINE 25425 . 25426) (COLON 25424 . 25425) (RPAREN 25423 . 25424) (DEDENT 25379 . 25379) (DEF 25379 . 25382) (LPAREN 25390 . 25391) (NEWLINE 24240 . 24241) (COLON 24239 . 24240) (RPAREN 24238 . 24239) (DEDENT 24197 . 24197) (DEF 24197 . 24200) (LPAREN 24216 . 24217) (NEWLINE 24000 . 24001) (COLON 23999 . 24000) (RPAREN 23998 . 23999) (DEDENT 23977 . 23977) (DEF 23977 . 23980) (LPAREN 23996 . 23997) (NEWLINE 23852 . 23853) (COLON 23851 . 23852) (RPAREN 23850 . 23851) (DEDENT 23823 . 23823) (DEF 23823 . 23826) (LPAREN 23846 . 23847) (NEWLINE 22953 . 22954) (COLON 22952 . 22953) (RPAREN 22951 . 22952) (DEDENT 22896 . 22896) (DEF 22896 . 22899) (LPAREN 22913 . 22914) (NEWLINE 22754 . 22755) (COLON 22753 . 22754) (RPAREN 22752 . 22753) (DEDENT 22734 . 22734) (DEF 22734 . 22737) (LPAREN 22748 . 22749) (NEWLINE 22604 . 22605) (COLON 22603 . 22604) (RPAREN 22602 . 22603) (DEDENT 22585 . 22585) (DEF 22585 . 22588) (LPAREN 22598 . 22599) (NEWLINE 22363 . 22364) (COLON 22362 . 22363) (RPAREN 22361 . 22362) (DEDENT 22334 . 22334) (DEF 22334 . 22337) (LPAREN 22359 . 22360) (NEWLINE 22192 . 22193) (COLON 22191 . 22192) (RPAREN 22190 . 22191) (DEDENT 22161 . 22161) (DEF 22161 . 22164) (LPAREN 22186 . 22187) (NEWLINE 22026 . 22027) (COLON 22025 . 22026) (RPAREN 22024 . 22025) (DEDENT 22005 . 22005) (DEF 22005 . 22008) (LPAREN 22020 . 22021) (NEWLINE 21610 . 21611) (COLON 21609 . 21610) (RPAREN 21608 . 21609) (DEDENT 21578 . 21578) (DEF 21578 . 21581) (LPAREN 21604 . 21605) (NEWLINE 21181 . 21182) (COLON 21180 . 21181) (RPAREN 21179 . 21180) (DEDENT 21157 . 21157) (DEF 21157 . 21160) (LPAREN 21175 . 21176) (NEWLINE 21025 . 21026) (COLON 21024 . 21025) (RPAREN 21023 . 21024) (DEDENT 21007 . 21007) (DEF 21007 . 21010) (LPAREN 21019 . 21020) (NEWLINE 20893 . 20894) (COLON 20892 . 20893) (RPAREN 20891 . 20892) (DEDENT 20879 . 20879) (DEF 20879 . 20882) (LPAREN 20889 . 20890) (NEWLINE 20152 . 20153) (COLON 20151 . 20152) (RPAREN 20150 . 20151) (DEDENT 20132 . 20132) (CLASS 20132 . 20137) (LPAREN 20143 . 20144)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Abstract base classes define the primitives that renderers and
graphics contexts must implement to serve as a matplotlib backend

:class:`RendererBase`
    An abstract base class to handle drawing/rendering operations.

:class:`FigureCanvasBase`
    The abstraction layer that separates the
    :class:`matplotlib.figure.Figure` from the backend specific
    details like a user interface drawing area

:class:`GraphicsContextBase`
    An abstract base class that provides color, line styles, etc...

:class:`Event`
    The base class for all of the matplotlib event
    handling.  Derived classes such as :class:`KeyEvent` and
    :class:`MouseEvent` store the meta data like keys and buttons
    pressed, x and y locations in pixel and
    :class:`~matplotlib.axes.Axes` coordinates.

:class:`ShowBase`
    The base class for the Show class of each interactive backend;
    the 'show' callable is then set to Show.__call__, inherited from
    ShowBase.

:class:`ToolContainerBase`
     The base class for the Toolbar class of each interactive backend.

:class:`StatusbarBase`
    The base class for the messaging area.
\"\"\"" code nil nil [1 1129])
            ("" code nil nil [1154 1239])
            ("contextlib" include nil nil [1240 1277])
            ("six" include nil nil [1279 1289])
            ("six.moves" include nil nil [1290 1318])
            ("os" include nil nil [1320 1329])
            ("sys" include nil nil [1330 1340])
            ("warnings" include nil nil [1341 1356])
            ("time" include nil nil [1357 1368])
            ("io" include nil nil [1369 1378])
            ("numpy" include nil nil [1380 1398])
            ("matplotlib.cbook" include nil nil [1399 1431])
            ("matplotlib.colors" include nil nil [1432 1466])
            ("matplotlib.transforms" include nil nil [1467 1509])
            ("matplotlib.widgets" include nil nil [1510 1546])
            ("matplotlib" include nil nil [1579 1610])
            ("matplotlib" include nil nil [1611 1648])
            ("matplotlib" include nil nil [1649 1683])
            ("matplotlib._pylab_helpers" include nil nil [1684 1725])
            ("matplotlib" include nil nil [1726 1754])
            ("matplotlib.transforms" include nil nil [1756 1821])
            ("matplotlib.tight_bbox" include nil nil [1823 1865])
            ("matplotlib.textpath" include nil nil [1866 1904])
            ("matplotlib.path" include nil nil [1905 1937])
            ("matplotlib.cbook" include nil nil [1938 1998])
            ("matplotlib.backend_tools" include nil nil [1999 2039])
            ("try" code nil nil [2041 2242])
            ("try" code nil nil [2243 2349])
            ("_default_filetypes" variable nil nil [2351 2688])
            ("_default_backends" variable nil nil [2691 3127])
            ("register_backend" function
               (:documentation "
    Register a backend for saving to a given file format.

    format : str
        File extention

    backend : module string or canvas class
        Backend for handling file output

    description : str, optional
        Description of the file type.  Defaults to an empty string
    "
                :arguments 
                  ( ("format" variable nil (reparse-symbol function_parameters) [3151 3157])
                    ("backend" variable nil (reparse-symbol function_parameters) [3159 3166])
                    ("description" variable nil (reparse-symbol function_parameters) [3168 3179]))                  )
                nil [3130 3626])
            ("get_registered_canvas_class" function
               (:documentation "
    Return the registered default canvas for given file format.
    Handles deferred import of required backend.
    "
                :arguments 
                  ( ("format" variable nil (reparse-symbol function_parameters) [3660 3666]))                  )
                nil [3628 4089])
            ("ShowBase" type
               (:documentation "
    Simple base class to generate a show() callable in backends.

    Subclass must override mainloop() method.
    "
                :superclasses ("object")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4260 4264])
                            ("block" variable nil (reparse-symbol function_parameters) [4266 4271]))                          
                        :documentation "
        Show all figures.  If *block* is not None, then
        it is a boolean that overrides all other factors
        determining whether show blocks by calling mainloop().
        The other factors are:
        it does not block if run inside ipython's \"%pylab\" mode
        it does not block in interactive mode.
        ")
                        (reparse-symbol indented_block_body) [4247 5845])
                    ("mainloop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5863 5867]))                          )
                        (reparse-symbol indented_block_body) [5850 5883]))                  
                :type "class")
                nil [4091 5883])
            ("RendererBase" type
               (:documentation "An abstract base class to handle drawing/rendering operations.

    The following methods must be implemented in the backend for full
    functionality (though just implementing :meth:`draw_path` alone would
    give a highly capable backend):

    * :meth:`draw_path`
    * :meth:`draw_image`
    * :meth:`draw_gouraud_triangle`

    The following methods *should* be implemented in the backend for
    optimization reasons:

    * :meth:`draw_text`
    * :meth:`draw_markers`
    * :meth:`draw_path_collection`
    * :meth:`draw_quad_mesh`

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6503 6526])
                            ("self" variable nil (reparse-symbol indented_block_body) [6536 6575]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6488 6492]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6475 6576])
                    ("open_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6596 6600])
                            ("s" variable nil (reparse-symbol function_parameters) [6602 6603])
                            ("gid" variable nil (reparse-symbol function_parameters) [6605 6608]))                          
                        :documentation "
        Open a grouping element with label *s*. If *gid* is given, use
        *gid* as the id of the group. Is only currently used by
        :mod:`~matplotlib.backends.backend_svg`.
        ")
                        (reparse-symbol indented_block_body) [6581 6837])
                    ("close_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6858 6862])
                            ("s" variable nil (reparse-symbol function_parameters) [6864 6865]))                          
                        :documentation "
        Close a grouping element with label *s*
        Is only currently used by :mod:`~matplotlib.backends.backend_svg`
        ")
                        (reparse-symbol indented_block_body) [6842 7027])
                    ("draw_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7046 7050])
                            ("gc" variable nil (reparse-symbol function_parameters) [7052 7054])
                            ("path" variable nil (reparse-symbol function_parameters) [7056 7060])
                            ("transform" variable nil (reparse-symbol function_parameters) [7062 7071])
                            ("rgbFace" variable nil (reparse-symbol function_parameters) [7073 7080]))                          
                        :documentation "
        Draws a :class:`~matplotlib.path.Path` instance using the
        given affine transform.
        ")
                        (reparse-symbol indented_block_body) [7032 7244])
                    ("draw_markers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7266 7270])
                            ("gc" variable nil (reparse-symbol function_parameters) [7272 7274])
                            ("marker_path" variable nil (reparse-symbol function_parameters) [7276 7287])
                            ("marker_trans" variable nil (reparse-symbol function_parameters) [7289 7301])
                            ("path" variable nil (reparse-symbol function_parameters) [7303 7307])
                            ("trans" variable nil (reparse-symbol function_parameters) [7330 7335])
                            ("rgbFace" variable nil (reparse-symbol function_parameters) [7337 7344]))                          
                        :documentation "
        Draws a marker at each of the vertices in path.  This includes
        all vertices, including control points on curves.  To avoid
        that behavior, those vertices should be removed before calling
        this function.

        *gc*
            the :class:`GraphicsContextBase` instance

        *marker_trans*
            is an affine transform applied to the marker.

        *trans*
             is an affine transform applied to the path.

        This provides a fallback implementation of draw_markers that
        makes multiple calls to :meth:`draw_path`.  Some backends may
        want to override this method in order to draw the marker only
        once and reuse it multiple times.
        ")
                        (reparse-symbol indented_block_body) [7249 8430])
                    ("draw_path_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8460 8464])
                            ("gc" variable nil (reparse-symbol function_parameters) [8466 8468])
                            ("master_transform" variable nil (reparse-symbol function_parameters) [8470 8486])
                            ("paths" variable nil (reparse-symbol function_parameters) [8488 8493])
                            ("all_transforms" variable nil (reparse-symbol function_parameters) [8495 8509])
                            ("offsets" variable nil (reparse-symbol function_parameters) [8540 8547])
                            ("offsetTrans" variable nil (reparse-symbol function_parameters) [8549 8560])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [8562 8572])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [8574 8584])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [8615 8625])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [8627 8637])
                            ("antialiaseds" variable nil (reparse-symbol function_parameters) [8639 8651])
                            ("urls" variable nil (reparse-symbol function_parameters) [8653 8657])
                            ("offset_position" variable nil (reparse-symbol function_parameters) [8688 8703]))                          
                        :documentation "
        Draws a collection of paths selecting drawing properties from
        the lists *facecolors*, *edgecolors*, *linewidths*,
        *linestyles* and *antialiaseds*. *offsets* is a list of
        offsets to apply to each of the paths.  The offsets in
        *offsets* are first transformed by *offsetTrans* before being
        applied.  *offset_position* may be either \"screen\" or \"data\"
        depending on the space that the offsets are in.

        This provides a fallback implementation of
        :meth:`draw_path_collection` that makes multiple calls to
        :meth:`draw_path`.  Some backends may want to override this in
        order to render each set of path data only once, and then
        reference that path multiple times with the different offsets,
        colors, styles etc.  The generator methods
        :meth:`_iter_collection_raw_paths` and
        :meth:`_iter_collection` are provided to help with (and
        standardize) the implementation across backends.  It is highly
        recommended to use those generators, so that changes to the
        behavior of :meth:`draw_path_collection` can be made globally.
        ")
                        (reparse-symbol indented_block_body) [8435 10568])
                    ("draw_quad_mesh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10592 10596])
                            ("gc" variable nil (reparse-symbol function_parameters) [10598 10600])
                            ("master_transform" variable nil (reparse-symbol function_parameters) [10602 10618])
                            ("meshWidth" variable nil (reparse-symbol function_parameters) [10620 10629])
                            ("meshHeight" variable nil (reparse-symbol function_parameters) [10631 10641])
                            ("coordinates" variable nil (reparse-symbol function_parameters) [10666 10677])
                            ("offsets" variable nil (reparse-symbol function_parameters) [10679 10686])
                            ("offsetTrans" variable nil (reparse-symbol function_parameters) [10688 10699])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [10701 10711])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [10736 10747])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [10749 10759]))                          
                        :documentation "
        This provides a fallback implementation of
        :meth:`draw_quad_mesh` that generates paths and then calls
        :meth:`draw_path_collection`.
        ")
                        (reparse-symbol indented_block_body) [10573 11417])
                    ("draw_gouraud_triangle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11448 11452])
                            ("gc" variable nil (reparse-symbol function_parameters) [11454 11456])
                            ("points" variable nil (reparse-symbol function_parameters) [11458 11464])
                            ("colors" variable nil (reparse-symbol function_parameters) [11466 11472])
                            ("transform" variable nil (reparse-symbol function_parameters) [11474 11483]))                          
                        :documentation "
        Draw a Gouraud-shaded triangle.

        *points* is a 3x2 array of (x, y) points for the triangle.

        *colors* is a 3x4 array of RGBA colors for each point of the
        triangle.

        *transform* is an affine transform to apply to the points.
        ")
                        (reparse-symbol indented_block_body) [11422 11808])
                    ("draw_gouraud_triangles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11840 11844])
                            ("gc" variable nil (reparse-symbol function_parameters) [11846 11848])
                            ("triangles_array" variable nil (reparse-symbol function_parameters) [11850 11865])
                            ("colors_array" variable nil (reparse-symbol function_parameters) [11867 11879])
                            ("transform" variable nil (reparse-symbol function_parameters) [11912 11921]))                          
                        :documentation "
        Draws a series of Gouraud triangles.

        *points* is a Nx3x2 array of (x, y) points for the trianglex.

        *colors* is a Nx3x4 array of RGBA colors for each point of the
        triangles.

        *transform* is an affine transform to apply to the points.
        ")
                        (reparse-symbol indented_block_body) [11813 12386])
                    ("_iter_collection_raw_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12422 12426])
                            ("master_transform" variable nil (reparse-symbol function_parameters) [12428 12444])
                            ("paths" variable nil (reparse-symbol function_parameters) [12446 12451])
                            ("all_transforms" variable nil (reparse-symbol function_parameters) [12488 12502]))                          
                        :documentation "
        This is a helper method (along with :meth:`_iter_collection`) to make
        it easier to write a space-efficent :meth:`draw_path_collection`
        implementation in a backend.

        This method yields all of the base path/transform
        combinations, given a master transform, a list of paths and
        list of transforms.

        The arguments should be exactly what is passed in to
        :meth:`draw_path_collection`.

        The backend should take each yielded path and transform and
        create an object that can be referenced (reused) later.
        ")
                        (reparse-symbol indented_block_body) [12391 13524])
                    ("_iter_collection_uses_per_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13564 13568])
                            ("paths" variable nil (reparse-symbol function_parameters) [13570 13575])
                            ("all_transforms" variable nil (reparse-symbol function_parameters) [13577 13591])
                            ("offsets" variable nil (reparse-symbol function_parameters) [13632 13639])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [13641 13651])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [13653 13663]))                          
                        :documentation "
        Compute how many times each raw path object returned by
        _iter_collection_raw_paths would be used when calling
        _iter_collection. This is intended for the backend to decide
        on the tradeoff between using the paths in-line and storing
        them once and reusing. Rounds up in case the number of uses
        is not the same for every path.
        ")
                        (reparse-symbol indented_block_body) [13529 14327])
                    ("_iter_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14353 14357])
                            ("gc" variable nil (reparse-symbol function_parameters) [14359 14361])
                            ("master_transform" variable nil (reparse-symbol function_parameters) [14363 14379])
                            ("all_transforms" variable nil (reparse-symbol function_parameters) [14381 14395])
                            ("path_ids" variable nil (reparse-symbol function_parameters) [14422 14430])
                            ("offsets" variable nil (reparse-symbol function_parameters) [14432 14439])
                            ("offsetTrans" variable nil (reparse-symbol function_parameters) [14441 14452])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [14454 14464])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [14491 14501])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [14503 14513])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [14515 14525])
                            ("antialiaseds" variable nil (reparse-symbol function_parameters) [14552 14564])
                            ("urls" variable nil (reparse-symbol function_parameters) [14566 14570])
                            ("offset_position" variable nil (reparse-symbol function_parameters) [14572 14587]))                          
                        :documentation "
        This is a helper method (along with
        :meth:`_iter_collection_raw_paths`) to make it easier to write
        a space-efficent :meth:`draw_path_collection` implementation in a
        backend.

        This method yields all of the path, offset and graphics
        context combinations to draw the path collection.  The caller
        should already have looped over the results of
        :meth:`_iter_collection_raw_paths` to draw this collection.

        The arguments should be the same as that passed into
        :meth:`draw_path_collection`, with the exception of
        *path_ids*, which is a list of arbitrary objects that the
        backend will use to reference one of the paths created in the
        :meth:`_iter_collection_raw_paths` stage.

        Each yielded result is of the form::

           xo, yo, path_id, gc, rgbFace

        where *xo*, *yo* is an offset; *path_id* is one of the elements of
        *path_ids*; *gc* is a graphics context and *rgbFace* is a color to
        use for filling the path.
        ")
                        (reparse-symbol indented_block_body) [14332 18049])
                    ("get_image_magnification" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18082 18086]))                          
                        :documentation "
        Get the factor by which to magnify images passed to :meth:`draw_image`.
        Allows a backend to have images at a different resolution to other
        artists.
        ")
                        (reparse-symbol indented_block_body) [18054 18304])
                    ("draw_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18324 18328])
                            ("gc" variable nil (reparse-symbol function_parameters) [18330 18332])
                            ("x" variable nil (reparse-symbol function_parameters) [18334 18335])
                            ("y" variable nil (reparse-symbol function_parameters) [18337 18338])
                            ("im" variable nil (reparse-symbol function_parameters) [18340 18342])
                            ("transform" variable nil (reparse-symbol function_parameters) [18344 18353]))                          
                        :documentation "
        Draw an RGBA image.

        *gc*
            a :class:`GraphicsContextBase` instance with clipping information.

        *x*
            the distance in physical units (i.e., dots or pixels) from the left
            hand side of the canvas.

        *y*
            the distance in physical units (i.e., dots or pixels) from the
            bottom side of the canvas.

        *im*
            An NxMx4 array of RGBA pixels (of dtype uint8).

        *transform*
            If and only if the concrete backend is written such that
            :meth:`option_scale_image` returns ``True``, an affine
            transformation *may* be passed to :meth:`draw_image`. It takes the
            form of a :class:`~matplotlib.transforms.Affine2DBase` instance.
            The translation vector of the transformation is given in physical
            units (i.e., dots or pixels). Note that the transformation does not
            override `x` and `y`, and has to be applied *before* translating
            the result by `x` and `y` (this can be accomplished by adding `x`
            and `y` to the translation vector defined by `transform`).
        ")
                        (reparse-symbol indented_block_body) [18309 19568])
                    ("option_image_nocomposite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19602 19606]))                          
                        :documentation "
        override this method for renderers that do not necessarily always
        want to rescale and composite raster images. (like SVG, PDF, or PS)
        ")
                        (reparse-symbol indented_block_body) [19573 19804])
                    ("option_scale_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19832 19836]))                          
                        :documentation "
        override this method for renderers that support arbitrary affine
        transformations in :meth:`draw_image` (most vector backends).
        ")
                        (reparse-symbol indented_block_body) [19809 20027])
                    ("draw_tex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20045 20049])
                            ("gc" variable nil (reparse-symbol function_parameters) [20051 20053])
                            ("x" variable nil (reparse-symbol function_parameters) [20055 20056])
                            ("y" variable nil (reparse-symbol function_parameters) [20058 20059])
                            ("s" variable nil (reparse-symbol function_parameters) [20061 20062])
                            ("prop" variable nil (reparse-symbol function_parameters) [20064 20068])
                            ("angle" variable nil (reparse-symbol function_parameters) [20070 20075])
                            ("ismath" variable nil (reparse-symbol function_parameters) [20077 20083])
                            ("mtext" variable nil (reparse-symbol function_parameters) [20092 20097]))                          
                        :documentation "
        ")
                        (reparse-symbol indented_block_body) [20032 20201])
                    ("draw_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20220 20224])
                            ("gc" variable nil (reparse-symbol function_parameters) [20226 20228])
                            ("x" variable nil (reparse-symbol function_parameters) [20230 20231])
                            ("y" variable nil (reparse-symbol function_parameters) [20233 20234])
                            ("s" variable nil (reparse-symbol function_parameters) [20236 20237])
                            ("prop" variable nil (reparse-symbol function_parameters) [20239 20243])
                            ("angle" variable nil (reparse-symbol function_parameters) [20245 20250])
                            ("ismath" variable nil (reparse-symbol function_parameters) [20252 20258])
                            ("mtext" variable nil (reparse-symbol function_parameters) [20266 20271]))                          
                        :documentation "
        Draw the text instance

        *gc*
            the :class:`GraphicsContextBase` instance

        *x*
            the x location of the text in display coords

        *y*
            the y location of the text baseline in display coords

        *s*
            the text string

        *prop*
          a :class:`matplotlib.font_manager.FontProperties` instance

        *angle*
            the rotation angle in degrees

        *mtext*
            a :class:`matplotlib.text.Text` instance

        **backend implementers note**

        When you are trying to determine if you have gotten your bounding box
        right (which is what enables the text layout/alignment to work
        properly), it helps to change the line in text.py::

            if 0: bbox_artist(self, renderer)

        to if 1, and then the actual bounding box will be plotted along with
        your text.
        ")
                        (reparse-symbol indented_block_body) [20206 21266])
                    ("_get_text_path_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21300 21304])
                            ("x" variable nil (reparse-symbol function_parameters) [21306 21307])
                            ("y" variable nil (reparse-symbol function_parameters) [21309 21310])
                            ("s" variable nil (reparse-symbol function_parameters) [21312 21313])
                            ("prop" variable nil (reparse-symbol function_parameters) [21315 21319])
                            ("angle" variable nil (reparse-symbol function_parameters) [21321 21326])
                            ("ismath" variable nil (reparse-symbol function_parameters) [21328 21334]))                          
                        :documentation "
        return the text path and transform

        *prop*
          font property

        *s*
          text to be converted

        *usetex*
          If True, use matplotlib usetex mode.

        *ismath*
          If True, use mathtext parser. If \"TeX\", use *usetex* mode.
        ")
                        (reparse-symbol indented_block_body) [21271 22650])
                    ("_draw_text_as_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22678 22682])
                            ("gc" variable nil (reparse-symbol function_parameters) [22684 22686])
                            ("x" variable nil (reparse-symbol function_parameters) [22688 22689])
                            ("y" variable nil (reparse-symbol function_parameters) [22691 22692])
                            ("s" variable nil (reparse-symbol function_parameters) [22694 22695])
                            ("prop" variable nil (reparse-symbol function_parameters) [22697 22701])
                            ("angle" variable nil (reparse-symbol function_parameters) [22703 22708])
                            ("ismath" variable nil (reparse-symbol function_parameters) [22710 22716]))                          
                        :documentation "
        draw the text by converting them to paths using textpath module.

        *prop*
          font property

        *s*
          text to be converted

        *usetex*
          If True, use matplotlib usetex mode.

        *ismath*
          If True, use mathtext parser. If \"TeX\", use *usetex* mode.
        ")
                        (reparse-symbol indented_block_body) [22655 23270])
                    ("get_text_width_height_descent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23309 23313])
                            ("s" variable nil (reparse-symbol function_parameters) [23315 23316])
                            ("prop" variable nil (reparse-symbol function_parameters) [23318 23322])
                            ("ismath" variable nil (reparse-symbol function_parameters) [23324 23330]))                          
                        :documentation "
        get the width and height, and the offset from the bottom to the
        baseline (descent), in display coords of the string s with
        :class:`~matplotlib.font_manager.FontProperties` prop
        ")
                        (reparse-symbol indented_block_body) [23275 24586])
                    ("flipy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24601 24605]))                          
                        :documentation "
        Return true if y small numbers are top for renderer Is used
        for drawing text (:mod:`matplotlib.text`) and images
        (:mod:`matplotlib.image`) only
        ")
                        (reparse-symbol indented_block_body) [24591 24820])
                    ("get_canvas_width_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24853 24857]))                          )
                        (reparse-symbol indented_block_body) [24825 24943])
                    ("get_texmanager" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24967 24971]))                          
                        :documentation "
        return the :class:`matplotlib.texmanager.TexManager` instance
        ")
                        (reparse-symbol indented_block_body) [24948 25238])
                    ("new_gc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25254 25258]))                          
                        :documentation "
        Return an instance of a :class:`GraphicsContextBase`
        ")
                        (reparse-symbol indented_block_body) [25243 25383])
                    ("points_to_pixels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25409 25413])
                            ("points" variable nil (reparse-symbol function_parameters) [25415 25421]))                          
                        :documentation "
        Convert points to display units

        *points*
            a float or a numpy array of float

        return points converted to pixels

        You need to override this function (unless your backend
        doesn't have a dpi, e.g., postscript or svg).  Some imaging
        systems assume some value for pixels per inch::

            points to pixels = points * pixels_per_inch/72.0 * dpi/72.0
        ")
                        (reparse-symbol indented_block_body) [25388 25879])
                    ("strip_math" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25899 25903])
                            ("s" variable nil (reparse-symbol function_parameters) [25905 25906]))                          )
                        (reparse-symbol indented_block_body) [25884 25944])
                    ("start_rasterizing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25971 25975]))                          
                        :documentation "
        Used in MixedModeRenderer. Switch to the raster renderer.
        ")
                        (reparse-symbol indented_block_body) [25949 26081])
                    ("stop_rasterizing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26107 26111]))                          
                        :documentation "
        Used in MixedModeRenderer. Switch back to the vector renderer
        and draw the contents of the raster renderer as an image on
        the vector renderer.
        ")
                        (reparse-symbol indented_block_body) [26086 26318])
                    ("start_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26340 26344]))                          
                        :documentation "
        Used in AggRenderer. Switch to a temporary renderer for image
        filtering effects.
        ")
                        (reparse-symbol indented_block_body) [26323 26481])
                    ("stop_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26502 26506])
                            ("filter_func" variable nil (reparse-symbol function_parameters) [26508 26519]))                          
                        :documentation "
        Used in AggRenderer. Switch back to the original renderer.
        The contents of the temporary renderer is processed with the
        *filter_func* and is drawn on the original renderer as an
        image.
        ")
                        (reparse-symbol indented_block_body) [26486 26776]))                  
                :type "class")
                nil [5885 26776])
            ("GraphicsContextBase" type
               (:documentation "
    An abstract base class that provides color, line styles, etc...
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [26930 26947])
                            ("self" variable nil (reparse-symbol indented_block_body) [26956 26982])
                            ("self" variable nil (reparse-symbol indented_block_body) [27032 27053])
                            ("self" variable nil (reparse-symbol indented_block_body) [27108 27131])
                            ("self" variable nil (reparse-symbol indented_block_body) [27140 27161])
                            ("self" variable nil (reparse-symbol indented_block_body) [27170 27191])
                            ("self" variable nil (reparse-symbol indented_block_body) [27200 27225])
                            ("self" variable nil (reparse-symbol indented_block_body) [27234 27259])
                            ("self" variable nil (reparse-symbol indented_block_body) [27268 27293])
                            ("self" variable nil (reparse-symbol indented_block_body) [27302 27321])
                            ("self" variable nil (reparse-symbol indented_block_body) [27330 27362])
                            ("self" variable nil (reparse-symbol indented_block_body) [27371 27389])
                            ("self" variable nil (reparse-symbol indented_block_body) [27398 27457])
                            ("self" variable nil (reparse-symbol indented_block_body) [27466 27517])
                            ("self" variable nil (reparse-symbol indented_block_body) [27526 27542])
                            ("self" variable nil (reparse-symbol indented_block_body) [27551 27567])
                            ("self" variable nil (reparse-symbol indented_block_body) [27576 27593])
                            ("self" variable nil (reparse-symbol indented_block_body) [27602 27621]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26915 26919]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26902 27622])
                    ("copy_properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27647 27651])
                            ("gc" variable nil (reparse-symbol function_parameters) [27653 27655]))                          )
                        (reparse-symbol indented_block_body) [27627 28270])
                    ("restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28287 28291]))                          
                        :documentation "
        Restore the graphics context from the stack - needed only
        for backends that save graphics contexts on a stack
        ")
                        (reparse-symbol indented_block_body) [28275 28457])
                    ("get_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28476 28480]))                          
                        :documentation "
        Return the alpha value used for blending - not supported on
        all backends
        ")
                        (reparse-symbol indented_block_body) [28462 28623])
                    ("get_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28648 28652]))                          )
                        (reparse-symbol indented_block_body) [28628 28763])
                    ("get_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28785 28789]))                          
                        :documentation "
        Return the capstyle as a string in ('butt', 'round', 'projecting')
        ")
                        (reparse-symbol indented_block_body) [28768 28921])
                    ("get_clip_rectangle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28949 28953]))                          
                        :documentation "
        Return the clip rectangle as a :class:`~matplotlib.transforms.Bbox`
        instance
        ")
                        (reparse-symbol indented_block_body) [28926 29103])
                    ("get_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29126 29130]))                          
                        :documentation "
        Return the clip path in the form (path, transform), where path
        is a :class:`~matplotlib.path.Path` instance, and transform is
        an affine transform to apply to the path before clipping.
        ")
                        (reparse-symbol indented_block_body) [29108 29498])
                    ("get_dashes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29518 29522]))                          
                        :documentation "
        Return the dash information as an offset dashlist tuple.

        The dash list is a even size list that gives the ink on, ink
        off in pixels.

        See p107 of to PostScript `BLUEBOOK
        <https://www-cdf.fnal.gov/offline/PostScript/BLUEBOOK.PDF>`_
        for more info.

        Default value is None
        ")
                        (reparse-symbol indented_block_body) [29503 29903])
                    ("get_forced_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29929 29933]))                          
                        :documentation "
        Return whether the value given by get_alpha() should be used to
        override any other alpha-channel values.
        ")
                        (reparse-symbol indented_block_body) [29908 30115])
                    ("get_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30138 30142]))                          
                        :documentation "
        Return the line join style as one of ('miter', 'round', 'bevel')
        ")
                        (reparse-symbol indented_block_body) [30120 30273])
                    ("get_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30296 30300])
                            ("style" variable nil (reparse-symbol function_parameters) [30302 30307]))                          
                        :documentation "
        Return the linestyle: one of ('solid', 'dashed', 'dashdot',
        'dotted').
        ")
                        (reparse-symbol indented_block_body) [30278 30452])
                    ("get_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30475 30479]))                          
                        :documentation "
        Return the line width in points as a scalar
        ")
                        (reparse-symbol indented_block_body) [30457 30589])
                    ("get_rgb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30606 30610]))                          
                        :documentation "
        returns a tuple of three or four floats from 0-1.
        ")
                        (reparse-symbol indented_block_body) [30594 30720])
                    ("get_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30737 30741]))                          
                        :documentation "
        returns a url if one is set, None otherwise
        ")
                        (reparse-symbol indented_block_body) [30725 30845])
                    ("get_gid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30862 30866]))                          
                        :documentation "
        Return the object identifier if one is set, None otherwise.
        ")
                        (reparse-symbol indented_block_body) [30850 30986])
                    ("get_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31004 31008]))                          
                        :documentation "
        returns the snap setting which may be:

          * True: snap vertices to the nearest pixel center

          * False: leave vertices as-is

          * None: (auto) If the path contains only rectilinear line
            segments, round to the nearest pixel center
        ")
                        (reparse-symbol indented_block_body) [30991 31335])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31354 31358])
                            ("alpha" variable nil (reparse-symbol function_parameters) [31360 31365]))                          
                        :documentation "
        Set the alpha value used for blending - not supported on all backends.
        If ``alpha=None`` (the default), the alpha components of the
        foreground and fill colors will be used to set their respective
        transparencies (where applicable); otherwise, ``alpha`` will override
        them.
        ")
                        (reparse-symbol indented_block_body) [31340 31939])
                    ("set_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31964 31968])
                            ("b" variable nil (reparse-symbol function_parameters) [31970 31971]))                          
                        :documentation "
        True if object should be drawn with antialiased rendering
        ")
                        (reparse-symbol indented_block_body) [31944 32240])
                    ("set_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32262 32266])
                            ("cs" variable nil (reparse-symbol function_parameters) [32268 32270]))                          
                        :documentation "
        Set the capstyle as a string in ('butt', 'round', 'projecting')
        ")
                        (reparse-symbol indented_block_body) [32245 32536])
                    ("set_clip_rectangle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32564 32568])
                            ("rectangle" variable nil (reparse-symbol function_parameters) [32570 32579]))                          
                        :documentation "
        Set the clip rectangle with sequence (left, bottom, width, height)
        ")
                        (reparse-symbol indented_block_body) [32541 32716])
                    ("set_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32739 32743])
                            ("path" variable nil (reparse-symbol function_parameters) [32745 32749]))                          
                        :documentation "
        Set the clip path and transformation.  Path should be a
        :class:`~matplotlib.transforms.TransformedPath` instance.
        ")
                        (reparse-symbol indented_block_body) [32721 33176])
                    ("set_dashes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33196 33200])
                            ("dash_offset" variable nil (reparse-symbol function_parameters) [33202 33213])
                            ("dash_list" variable nil (reparse-symbol function_parameters) [33215 33224]))                          
                        :documentation "
        Set the dash style for the gc.

        *dash_offset*
            is the offset (usually 0).

        *dash_list*
            specifies the on-off sequence as points.
            ``(None, None)`` specifies a solid line

        ")
                        (reparse-symbol indented_block_body) [33181 33713])
                    ("set_foreground" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33737 33741])
                            ("fg" variable nil (reparse-symbol function_parameters) [33743 33745])
                            ("isRGBA" variable nil (reparse-symbol function_parameters) [33747 33753]))                          
                        :documentation "
        Set the foreground color.  fg can be a MATLAB format string, a
        html hex color string, an rgb or rgba unit tuple, or a float between 0
        and 1.  In the latter case, grayscale is used.

        If you know fg is rgba, set ``isRGBA=True`` for efficiency.
        ")
                        (reparse-symbol indented_block_body) [33718 34344])
                    ("set_graylevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34367 34371])
                            ("frac" variable nil (reparse-symbol function_parameters) [34373 34377]))                          
                        :documentation "
        Set the foreground color to be a gray level with *frac*
        ")
                        (reparse-symbol indented_block_body) [34349 34816])
                    ("set_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34839 34843])
                            ("js" variable nil (reparse-symbol function_parameters) [34845 34847]))                          
                        :documentation "
        Set the join style to be one of ('miter', 'round', 'bevel')
        ")
                        (reparse-symbol indented_block_body) [34821 35107])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35130 35134])
                            ("w" variable nil (reparse-symbol function_parameters) [35136 35137]))                          
                        :documentation "
        Set the linewidth in points
        ")
                        (reparse-symbol indented_block_body) [35112 35235])
                    ("set_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35258 35262])
                            ("style" variable nil (reparse-symbol function_parameters) [35264 35269]))                          
                        :documentation "
        Set the linestyle to be one of ('solid', 'dashed', 'dashdot',
        'dotted'). These are defined in the rcParams
        `lines.dashed_pattern`, `lines.dashdot_pattern` and
        `lines.dotted_pattern`.  One may also specify customized dash
        styles by providing a tuple of (offset, dash pairs).
        ")
                        (reparse-symbol indented_block_body) [35240 35642])
                    ("set_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35659 35663])
                            ("url" variable nil (reparse-symbol function_parameters) [35665 35668]))                          
                        :documentation "
        Sets the url for links in compatible backends
        ")
                        (reparse-symbol indented_block_body) [35647 35773])
                    ("set_gid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35790 35794])
                            ("id" variable nil (reparse-symbol function_parameters) [35796 35798]))                          
                        :documentation "
        Sets the id.
        ")
                        (reparse-symbol indented_block_body) [35778 35869])
                    ("set_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35887 35891])
                            ("snap" variable nil (reparse-symbol function_parameters) [35893 35897]))                          
                        :documentation "
        Sets the snap setting which may be:

          * True: snap vertices to the nearest pixel center

          * False: leave vertices as-is

          * None: (auto) If the path contains only rectilinear line
            segments, round to the nearest pixel center
        ")
                        (reparse-symbol indented_block_body) [35874 36221])
                    ("set_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36240 36244])
                            ("hatch" variable nil (reparse-symbol function_parameters) [36246 36251]))                          
                        :documentation "
        Sets the hatch style for filling
        ")
                        (reparse-symbol indented_block_body) [36226 36347])
                    ("get_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36366 36370]))                          
                        :documentation "
        Gets the current hatch style
        ")
                        (reparse-symbol indented_block_body) [36352 36461])
                    ("get_hatch_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36485 36489])
                            ("density" variable nil (reparse-symbol function_parameters) [36491 36498]))                          
                        :documentation "
        Returns a Path for the current hatch.
        ")
                        (reparse-symbol indented_block_body) [36466 36679])
                    ("get_hatch_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36704 36708]))                          
                        :documentation "
        Gets the color to use for hatching.
        ")
                        (reparse-symbol indented_block_body) [36684 36812])
                    ("get_hatch_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36841 36845]))                          
                        :documentation "
        Gets the linewidth to use for hatching.
        ")
                        (reparse-symbol indented_block_body) [36817 36957])
                    ("get_sketch_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36984 36988]))                          
                        :documentation "
        Returns the sketch parameters for the artist.

        Returns
        -------
        sketch_params : tuple or `None`

        A 3-tuple with the following elements:

          * `scale`: The amplitude of the wiggle perpendicular to the
            source line.

          * `length`: The length of the wiggle along the line.

          * `randomness`: The scale factor by which the length is
            shrunken or expanded.

        May return `None` if no sketch parameters were set.
        ")
                        (reparse-symbol indented_block_body) [36962 37540])
                    ("set_sketch_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37567 37571])
                            ("scale" variable nil (reparse-symbol function_parameters) [37573 37578])
                            ("length" variable nil (reparse-symbol function_parameters) [37585 37591])
                            ("randomness" variable nil (reparse-symbol function_parameters) [37598 37608]))                          
                        :documentation "
        Sets the sketch parameters.

        Parameters
        ----------

        scale : float, optional
            The amplitude of the wiggle perpendicular to the source
            line, in pixels.  If scale is `None`, or not provided, no
            sketch filter will be provided.

        length : float, optional
             The length of the wiggle along the line, in pixels
             (default 128.0)

        randomness : float, optional
            The scale factor by which the length is shrunken or
            expanded (default 16.0)
        ")
                        (reparse-symbol indented_block_body) [37545 38339]))                  
                :type "class")
                nil [26778 38339])
            ("TimerBase" type
               (:superclasses ("object")
                :members 
                  ( ("'''
    A base class for providing timer events, useful for things animations.
    Backends need to implement a few specific methods in order to use their
    own timing mechanisms so that the timer events are integrated into their
    event loops.

    Mandatory functions that must be implemented:

        * `_timer_start`: Contains backend-specific code for starting
          the timer

        * `_timer_stop`: Contains backend-specific code for stopping
          the timer

    Optional overrides:

        * `_timer_set_single_shot`: Code for setting the timer to
          single shot operating mode, if supported by the timer
          object. If not, the `Timer` class itself will store the flag
          and the `_on_timer` method should be overridden to support
          such behavior.

        * `_timer_set_interval`: Code for setting the interval on the
          timer, if there is a method for doing so on the timer
          object.

        * `_on_timer`: This is the internal function that any timer
          object should call, which will handle the task of running
          all callbacks that have been set.

    Attributes:

        * `interval`: The time between timer events in
          milliseconds. Default is 1000 ms.

        * `single_shot`: Boolean flag indicating whether this timer
          should operate as single shot (run once and then
          stop). Defaults to `False`.

        * `callbacks`: Stores list of (func, args) tuples that will be
          called upon timer events. This list can be manipulated
          directly, or the functions `add_callback` and
          `remove_callback` can be used.
    '''" code nil (reparse-symbol indented_block_body) [38370 40030])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [40174 40301])
                            ("if" code nil (reparse-symbol indented_block_body) [40310 40417])
                            ("self" variable nil (reparse-symbol indented_block_body) [40426 40446])
                            ("self" variable nil (reparse-symbol indented_block_body) [40526 40544]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40048 40052])
                            ("interval" variable nil (reparse-symbol function_parameters) [40054 40062])
                            ("callbacks" variable nil (reparse-symbol function_parameters) [40069 40078]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [40035 40545])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40562 40566]))                          )
                        (reparse-symbol indented_block_body) [40550 40656])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40671 40675])
                            ("interval" variable nil (reparse-symbol function_parameters) [40677 40685]))                          )
                        (reparse-symbol indented_block_body) [40661 40946])
                    ("stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40960 40964]))                          )
                        (reparse-symbol indented_block_body) [40951 41042])
                    ("_timer_start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41064 41068]))                          )
                        (reparse-symbol indented_block_body) [41047 41084])
                    ("_timer_stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41105 41109]))                          )
                        (reparse-symbol indented_block_body) [41089 41125])
                    ("_get_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41148 41152]))                          )
                        (reparse-symbol indented_block_body) [41130 41185])
                    ("_set_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41208 41212])
                            ("interval" variable nil (reparse-symbol function_parameters) [41214 41222]))                          )
                        (reparse-symbol indented_block_body) [41190 41462])
                    ("interval" variable nil (reparse-symbol indented_block_body) [41467 41516])
                    ("_get_single_shot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41543 41547]))                          )
                        (reparse-symbol indented_block_body) [41522 41578])
                    ("_set_single_shot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41604 41608])
                            ("ss" variable nil (reparse-symbol function_parameters) [41610 41612]))                          )
                        (reparse-symbol indented_block_body) [41583 41684])
                    ("single_shot" variable nil (reparse-symbol indented_block_body) [41689 41747])
                    ("add_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41770 41774])
                            ("func" variable nil (reparse-symbol function_parameters) [41776 41780])
                            ("args" variable nil (reparse-symbol function_parameters) [41782 41787])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [41789 41797]))                          )
                        (reparse-symbol indented_block_body) [41753 42012])
                    ("remove_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42037 42041])
                            ("func" variable nil (reparse-symbol function_parameters) [42043 42047])
                            ("args" variable nil (reparse-symbol function_parameters) [42049 42054])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42056 42064]))                          )
                        (reparse-symbol indented_block_body) [42017 42528])
                    ("_timer_set_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42557 42561]))                          )
                        (reparse-symbol indented_block_body) [42533 42636])
                    ("_timer_set_single_shot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42668 42672]))                          )
                        (reparse-symbol indented_block_body) [42641 42750])
                    ("_on_timer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42769 42773]))                          )
                        (reparse-symbol indented_block_body) [42755 43372]))                  
                :type "class")
                nil [38341 43372])
            ("Event" type
               (:documentation "
    A matplotlib event.  Attach additional attributes as defined in
    :meth:`FigureCanvasBase.mpl_connect`.  The following attributes
    are defined and shown with their default values

    *name*
        the event name

    *canvas*
        the FigureCanvas instance generating the event

    *guiEvent*
        the GUI event that triggered the matplotlib event


    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [43840 43856])
                            ("self" variable nil (reparse-symbol indented_block_body) [43865 43885])
                            ("self" variable nil (reparse-symbol indented_block_body) [43894 43918]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43796 43800])
                            ("name" variable nil (reparse-symbol function_parameters) [43802 43806])
                            ("canvas" variable nil (reparse-symbol function_parameters) [43808 43814])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [43816 43824]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43783 43919]))                  
                :type "class")
                nil [43374 43919])
            ("IdleEvent" type
               (:documentation "
    An event triggered by the GUI backend when it is idle -- useful
    for passive animation
    "
                :superclasses ("Event")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [44059 44063]))                  
                :type "class")
                nil [43921 44064])
            ("DrawEvent" type
               (:documentation "
    An event triggered by a draw operation on the canvas

    In addition to the :class:`Event` attributes, the following event
    attributes are defined:

    *renderer*
        the :class:`RendererBase` instance for the draw event

    "
                :superclasses ("Event")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Event" code nil (reparse-symbol indented_block_body) [44397 44431])
                            ("self" variable nil (reparse-symbol indented_block_body) [44440 44464]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44358 44362])
                            ("name" variable nil (reparse-symbol function_parameters) [44364 44368])
                            ("canvas" variable nil (reparse-symbol function_parameters) [44370 44376])
                            ("renderer" variable nil (reparse-symbol function_parameters) [44378 44386]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44345 44465]))                  
                :type "class")
                nil [44066 44465])
            ("ResizeEvent" type
               (:documentation "
    An event triggered by a canvas resize

    In addition to the :class:`Event` attributes, the following event
    attributes are defined:

    *width*
        width of the canvas in pixels

    *height*
        height of the canvas in pixels

    "
                :superclasses ("Event")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Event" code nil (reparse-symbol indented_block_body) [44801 44835])
                            ("self, self" code nil (reparse-symbol indented_block_body) [44844 44895]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44772 44776])
                            ("name" variable nil (reparse-symbol function_parameters) [44778 44782])
                            ("canvas" variable nil (reparse-symbol function_parameters) [44784 44790]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44759 44896]))                  
                :type "class")
                nil [44467 44896])
            ("CloseEvent" type
               (:documentation "
    An event triggered by a figure being closed

    In addition to the :class:`Event` attributes, the following event
    attributes are defined:
    "
                :superclasses ("Event")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Event" code nil (reparse-symbol indented_block_body) [45147 45191]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45103 45107])
                            ("name" variable nil (reparse-symbol function_parameters) [45109 45113])
                            ("canvas" variable nil (reparse-symbol function_parameters) [45115 45121])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [45123 45131]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [45090 45192]))                  
                :type "class")
                nil [44898 45192])
            ("LocationEvent" type
               (:documentation "
    An event that has a screen location

    The following additional attributes are defined and shown with
    their default values.

    In addition to the :class:`Event` attributes, the following
    event attributes are defined:

    *x*
        x position - pixels from left of canvas

    *y*
        y position - pixels from bottom of canvas

    *inaxes*
        the :class:`~matplotlib.axes.Axes` instance if mouse is over axes

    *xdata*
        x coord of mouse in data coords

    *ydata*
        y coord of mouse in data coords

    "
                :superclasses ("Event")
                :members 
                  ( ("x" variable nil (reparse-symbol indented_block_body) [45786 45794])
                    ("y" variable nil (reparse-symbol indented_block_body) [45847 45855])
                    ("inaxes" variable nil (reparse-symbol indented_block_body) [45909 45922])
                    ("xdata" variable nil (reparse-symbol indented_block_body) [45970 45982])
                    ("ydata" variable nil (reparse-symbol indented_block_body) [46023 46035])
                    ("lastevent" variable nil (reparse-symbol indented_block_body) [46133 46149])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *x*, *y* in figure coords, 0,0 = bottom, left
        \"\"\"" code nil (reparse-symbol indented_block_body) [46218 46287])
                            ("Event" code nil (reparse-symbol indented_block_body) [46296 46349])
                            ("self" variable nil (reparse-symbol indented_block_body) [46358 46368])
                            ("self" variable nil (reparse-symbol indented_block_body) [46377 46387])
                            ("if" code nil (reparse-symbol indented_block_body) [46397 46576])
                            ("if" code nil (reparse-symbol indented_block_body) [46630 46845])
                            ("if" code nil (reparse-symbol indented_block_body) [46854 47243])
                            ("try" code nil (reparse-symbol indented_block_body) [47252 47530])
                            ("self" code nil (reparse-symbol indented_block_body) [47539 47565]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46168 46172])
                            ("name" variable nil (reparse-symbol function_parameters) [46174 46178])
                            ("canvas" variable nil (reparse-symbol function_parameters) [46180 46186])
                            ("x" variable nil (reparse-symbol function_parameters) [46188 46189])
                            ("y" variable nil (reparse-symbol function_parameters) [46191 46192])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [46194 46202]))                          
                        :documentation "
        *x*, *y* in figure coords, 0,0 = bottom, left
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [46155 47566])
                    ("_update_enter_leave" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47595 47599]))                          )
                        (reparse-symbol indented_block_body) [47571 48657]))                  
                :type "class")
                nil [45194 48657])
            ("MouseEvent" type
               (:superclasses ("LocationEvent")
                :type "class")
                nil [48659 50877])
            ("PickEvent" type
               (:documentation "
    a pick event, fired when the user picks a location on the canvas
    sufficiently close to an artist.

    Attrs: all the :class:`Event` attributes plus

    *mouseevent*
        the :class:`MouseEvent` that generated the pick

    *artist*
        the :class:`~matplotlib.artist.Artist` picked

    other
        extra class dependent attrs -- e.g., a
        :class:`~matplotlib.lines.Line2D` pick may define different
        extra attributes than a
        :class:`~matplotlib.collections.PatchCollection` pick event


    Example usage::

        ax.plot(np.rand(100), 'o', picker=5)  # 5 points tolerance

        def on_pick(event):
            line = event.artist
            xdata, ydata = line.get_data()
            ind = event.ind
            print('on pick line:', np.array([xdata[ind], ydata[ind]]).T)

        cid = fig.canvas.mpl_connect('pick_event', on_pick)

    "
                :superclasses ("Event")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Event" code nil (reparse-symbol indented_block_body) [51909 51953])
                            ("self" variable nil (reparse-symbol indented_block_body) [51962 51990])
                            ("self" variable nil (reparse-symbol indented_block_body) [51999 52019])
                            ("self" code nil (reparse-symbol indented_block_body) [52028 52056]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51818 51822])
                            ("name" variable nil (reparse-symbol function_parameters) [51824 51828])
                            ("canvas" variable nil (reparse-symbol function_parameters) [51830 51836])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [51838 51848])
                            ("artist" variable nil (reparse-symbol function_parameters) [51850 51856])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [51875 51883])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [51890 51898]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [51805 52057]))                  
                :type "class")
                nil [50879 52057])
            ("KeyEvent" type
               (:documentation "
    A key event (key press, key release).

    Attach additional attributes as defined in
    :meth:`FigureCanvasBase.mpl_connect`.

    In addition to the :class:`Event` and :class:`LocationEvent`
    attributes, the following attributes are defined:

    *key*
        the key(s) pressed. Could be **None**, a single case sensitive ascii
        character (\"g\", \"G\", \"#\", etc.), a special key
        (\"control\", \"shift\", \"f1\", \"up\", etc.) or a
        combination of the above (e.g., \"ctrl+alt+g\", \"ctrl+alt+G\").

    .. note::

        Modifier keys will be prefixed to the pressed key and will be in the
        order \"ctrl\", \"alt\", \"super\". The exception to this rule is when the
        pressed key is itself a modifier key, therefore \"ctrl+alt\" and
        \"alt+control\" can both be valid key values.


    Example usage::

        def on_key(event):
            print('you pressed', event.key, event.xdata, event.ydata)

        cid = fig.canvas.mpl_connect('key_press_event', on_key)

    "
                :superclasses ("LocationEvent")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("LocationEvent" code nil (reparse-symbol indented_block_body) [53177 53244])
                            ("self" variable nil (reparse-symbol indented_block_body) [53253 53267]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53118 53122])
                            ("name" variable nil (reparse-symbol function_parameters) [53124 53128])
                            ("canvas" variable nil (reparse-symbol function_parameters) [53130 53136])
                            ("key" variable nil (reparse-symbol function_parameters) [53138 53141])
                            ("x" variable nil (reparse-symbol function_parameters) [53143 53144])
                            ("y" variable nil (reparse-symbol function_parameters) [53148 53149])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [53153 53161]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [53105 53268]))                  
                :type "class")
                nil [52059 53268])
            ("FigureCanvasBase" type
               (:documentation "
    The canvas the figure renders into.

    Public attributes

        *figure*
            A :class:`matplotlib.figure.Figure` instance

      "
                :superclasses ("object")
                :members 
                  ( ("events" variable nil (reparse-symbol indented_block_body) [53463 53880])
                    ("supports_blit" variable nil (reparse-symbol indented_block_body) [53886 53906])
                    ("fixed_dpi" variable nil (reparse-symbol indented_block_body) [53911 53927])
                    ("filetypes" variable nil (reparse-symbol indented_block_body) [53933 53963])
                    ("if" code nil (reparse-symbol indented_block_body) [53968 54526])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [54567 54595])
                            ("self" variable nil (reparse-symbol indented_block_body) [54604 54627])
                            ("figure" code nil (reparse-symbol indented_block_body) [54636 54659])
                            ("self" variable nil (reparse-symbol indented_block_body) [54668 54688])
                            ("self" variable nil (reparse-symbol indented_block_body) [54772 54813])
                            ("self" variable nil (reparse-symbol indented_block_body) [54822 54858])
                            ("self" variable nil (reparse-symbol indented_block_body) [54867 54886])
                            ("self" variable nil (reparse-symbol indented_block_body) [54917 54933])
                            ("self, self" code nil (reparse-symbol indented_block_body) [54961 54998])
                            ("self" variable nil (reparse-symbol indented_block_body) [55007 55078])
                            ("self" variable nil (reparse-symbol indented_block_body) [55087 55152])
                            ("self" variable nil (reparse-symbol indented_block_body) [55161 55186])
                            ("self" variable nil (reparse-symbol indented_block_body) [55232 55251])
                            ("self" variable nil (reparse-symbol indented_block_body) [55294 55323]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54544 54548])
                            ("figure" variable nil (reparse-symbol function_parameters) [54550 54556]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [54531 55324])
                    ("_idle_draw_cntx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55369 55373]))                          
                        :decorators 
                          ( ("contextmanager" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [55329 55465])
                    ("is_saving" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55484 55488]))                          
                        :documentation "
        Returns `True` when the renderer is in the process of saving
        to a file, rather than rendering for an on-screen buffer.
        ")
                        (reparse-symbol indented_block_body) [55470 55681])
                    ("onRemove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55699 55703])
                            ("ev" variable nil (reparse-symbol function_parameters) [55705 55707]))                          
                        :documentation "
        Mouse event processor which removes the top artist
        under the cursor.  Connect this to the 'mouse_press_event'
        using::

            canvas.mpl_connect('mouse_press_event',canvas.onRemove)
        ")
                        (reparse-symbol indented_block_body) [55686 56503])
                    ("onHilite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56521 56525])
                            ("ev" variable nil (reparse-symbol function_parameters) [56527 56529]))                          
                        :documentation "
        Mouse event processor which highlights the artists
        under the cursor.  Connect this to the 'motion_notify_event'
        using::

            canvas.mpl_connect('motion_notify_event',canvas.onHilite)
        ")
                        (reparse-symbol indented_block_body) [56508 58375])
                    ("pick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58389 58393])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [58395 58405]))                          )
                        (reparse-symbol indented_block_body) [58380 58490])
                    ("blit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58504 58508])
                            ("bbox" variable nil (reparse-symbol function_parameters) [58510 58514]))                          )
                        (reparse-symbol indented_block_body) [58495 58615])
                    ("resize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58631 58635])
                            ("w" variable nil (reparse-symbol function_parameters) [58637 58638])
                            ("h" variable nil (reparse-symbol function_parameters) [58640 58641]))                          
                        :documentation "
        set the canvas size in pixels
        ")
                        (reparse-symbol indented_block_body) [58620 58719])
                    ("draw_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58739 58743])
                            ("renderer" variable nil (reparse-symbol function_parameters) [58745 58753]))                          
                        :documentation "
        This method will be call all functions connected to the
        'draw_event' with a :class:`DrawEvent`
        ")
                        (reparse-symbol indented_block_body) [58724 59003])
                    ("resize_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59025 59029]))                          
                        :documentation "
        This method will be call all functions connected to the
        'resize_event' with a :class:`ResizeEvent`
        ")
                        (reparse-symbol indented_block_body) [59008 59277])
                    ("close_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59298 59302])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [59304 59312]))                          
                        :documentation "
        This method will be called by all functions connected to the
        'close_event' with a :class:`CloseEvent`
        ")
                        (reparse-symbol indented_block_body) [59282 59666])
                    ("key_press_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60037 60041])
                            ("key" variable nil (reparse-symbol function_parameters) [60043 60046])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [60048 60056]))                          
                        :documentation "
        This method will be call all functions connected to the
        'key_press_event' with a :class:`KeyEvent`
        ")
                        (reparse-symbol indented_block_body) [60017 60395])
                    ("key_release_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60422 60426])
                            ("key" variable nil (reparse-symbol function_parameters) [60428 60431])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [60433 60441]))                          
                        :documentation "
        This method will be call all functions connected to the
        'key_release_event' with a :class:`KeyEvent`
        ")
                        (reparse-symbol indented_block_body) [60400 60785])
                    ("pick_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60805 60809])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [60811 60821])
                            ("artist" variable nil (reparse-symbol function_parameters) [60823 60829])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [60831 60839]))                          
                        :documentation "
        This method will be called by artists who are picked and will
        fire off :class:`PickEvent` callbacks registered listeners
        ")
                        (reparse-symbol indented_block_body) [60790 61216])
                    ("scroll_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61238 61242])
                            ("x" variable nil (reparse-symbol function_parameters) [61244 61245])
                            ("y" variable nil (reparse-symbol function_parameters) [61247 61248])
                            ("step" variable nil (reparse-symbol function_parameters) [61250 61254])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [61256 61264]))                          
                        :documentation "
        Backend derived classes should call this function on any
        scroll wheel event.  x,y are the canvas coords: 0,0 is lower,
        left.  button and key are as defined in MouseEvent.

        This method will be call all functions connected to the
        'scroll_event' with a :class:`MouseEvent` instance.
        ")
                        (reparse-symbol indented_block_body) [61221 61925])
                    ("button_press_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61953 61957])
                            ("x" variable nil (reparse-symbol function_parameters) [61959 61960])
                            ("y" variable nil (reparse-symbol function_parameters) [61962 61963])
                            ("button" variable nil (reparse-symbol function_parameters) [61965 61971])
                            ("dblclick" variable nil (reparse-symbol function_parameters) [61973 61981])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [61989 61997]))                          
                        :documentation "
        Backend derived classes should call this function on any mouse
        button press.  x,y are the canvas coords: 0,0 is lower, left.
        button and key are as defined in :class:`MouseEvent`.

        This method will be call all functions connected to the
        'button_press_event' with a :class:`MouseEvent` instance.

        ")
                        (reparse-symbol indented_block_body) [61930 62609])
                    ("button_release_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62639 62643])
                            ("x" variable nil (reparse-symbol function_parameters) [62645 62646])
                            ("y" variable nil (reparse-symbol function_parameters) [62648 62649])
                            ("button" variable nil (reparse-symbol function_parameters) [62651 62657])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [62659 62667]))                          
                        :documentation "
        Backend derived classes should call this function on any mouse
        button release.

        *x*
            the canvas coordinates where 0=left

        *y*
            the canvas coordinates where 0=bottom

        *guiEvent*
            the native UI event that generated the mpl event


        This method will be call all functions connected to the
        'button_release_event' with a :class:`MouseEvent` instance.

        ")
                        (reparse-symbol indented_block_body) [62614 63318])
                    ("motion_notify_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63347 63351])
                            ("x" variable nil (reparse-symbol function_parameters) [63353 63354])
                            ("y" variable nil (reparse-symbol function_parameters) [63356 63357])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [63359 63367]))                          
                        :documentation "
        Backend derived classes should call this function on any
        motion-notify-event.

        *x*
            the canvas coordinates where 0=left

        *y*
            the canvas coordinates where 0=bottom

        *guiEvent*
            the native UI event that generated the mpl event


        This method will be call all functions connected to the
        'motion_notify_event' with a :class:`MouseEvent` instance.

        ")
                        (reparse-symbol indented_block_body) [63323 64060])
                    ("leave_notify_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64088 64092])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [64094 64102]))                          
                        :documentation "
        Backend derived classes should call this function when leaving
        canvas

        *guiEvent*
            the native UI event that generated the mpl event

        ")
                        (reparse-symbol indented_block_body) [64065 64466])
                    ("enter_notify_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64494 64498])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [64500 64508])
                            ("xy" variable nil (reparse-symbol function_parameters) [64515 64517]))                          
                        :documentation "
        Backend derived classes should call this function when entering
        canvas

        *guiEvent*
            the native UI event that generated the mpl event
        *xy*
            the coordinate location of the pointer when the canvas is
            entered

        ")
                        (reparse-symbol indented_block_body) [64471 65035])
                    ("idle_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65055 65059])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [65061 65069]))                          
                        :documentation "Called when GUI is idle.")
                        (reparse-symbol indented_block_body) [65040 65236])
                    ("grab_mouse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65256 65260])
                            ("ax" variable nil (reparse-symbol function_parameters) [65262 65264]))                          
                        :documentation "
        Set the child axes which are currently grabbing the mouse events.
        Usually called by the widgets themselves.
        It is an error to call this if the mouse is already grabbed by
        another axes.
        ")
                        (reparse-symbol indented_block_body) [65241 65667])
                    ("release_mouse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65690 65694])
                            ("ax" variable nil (reparse-symbol function_parameters) [65696 65698]))                          
                        :documentation "
        Release the mouse grab held by the axes, ax.
        Usually called by the widgets.
        It is ok to call this even if you ax doesn't have the mouse
        grab currently.
        ")
                        (reparse-symbol indented_block_body) [65672 65984])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65998 66002])
                            ("args" variable nil (reparse-symbol function_parameters) [66004 66009])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [66011 66019]))                          
                        :documentation "
        Render the :class:`~matplotlib.figure.Figure`
        ")
                        (reparse-symbol indented_block_body) [65989 66113])
                    ("draw_idle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66132 66136])
                            ("args" variable nil (reparse-symbol function_parameters) [66138 66143])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [66145 66153]))                          
                        :documentation "
        :meth:`draw` only if idle; defaults to draw but backends can overrride
        ")
                        (reparse-symbol indented_block_body) [66118 66381])
                    ("draw_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66402 66406])
                            ("event" variable nil (reparse-symbol function_parameters) [66408 66413]))                          
                        :documentation "
        Draw a cursor in the event.axes if inaxes is not None.  Use
        native GUI drawing for efficiency if possible
        ")
                        (reparse-symbol indented_block_body) [66386 66575])
                    ("get_width_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66601 66605]))                          
                        :documentation "
        Return the figure width and height in points or pixels
        (depending on the backend), truncated to integers
        ")
                        (reparse-symbol indented_block_body) [66580 66826])
                    ("get_supported_filetypes" function
                       (:documentation "Return dict of savefig file formats supported by this backend"
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [66876 66879]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [66831 66987])
                    ("get_supported_filetypes_grouped" function
                       (:documentation "Return a dict of savefig file formats supported by this backend,
        where the keys are a file type name, such as 'Joint Photographic
        Experts Group', and the values are a list of filename extensions used
        for that filetype, such as ['jpg', 'jpeg']."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [67045 67048]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [66992 67526])
                    ("_get_output_canvas" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67554 67558])
                            ("format" variable nil (reparse-symbol function_parameters) [67560 67566]))                          
                        :documentation "Return a canvas that is suitable for saving figures to a specified
        file format. If necessary, this function will switch to a registered
        backend that supports the format.
        ")
                        (reparse-symbol indented_block_body) [67531 68432])
                    ("print_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68454 68458])
                            ("filename" variable nil (reparse-symbol function_parameters) [68460 68468])
                            ("dpi" variable nil (reparse-symbol function_parameters) [68470 68473])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [68480 68489])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [68496 68505])
                            ("orientation" variable nil (reparse-symbol function_parameters) [68533 68544])
                            ("format" variable nil (reparse-symbol function_parameters) [68557 68563])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [68570 68578]))                          
                        :documentation "
        Render the figure to hardcopy. Set the figure patch face and edge
        colors.  This is useful because some of the GUIs have a gray figure
        face color background and you'll probably want to override this on
        hardcopy.

        Arguments are:

        *filename*
            can also be a file object on image backends

        *orientation*
            only currently applies to PostScript printing.

        *dpi*
            the dots per inch to save the figure in; if None, use savefig.dpi

        *facecolor*
            the facecolor of the figure; if None, defaults to savefig.facecolor

        *edgecolor*
            the edgecolor of the figure; if None, defaults to savefig.edgecolor

        *orientation*
            landscape' | 'portrait' (not supported on all backends)

        *format*
            when set, forcibly set the file format to save to

        *bbox_inches*
            Bbox in inches. Only the given portion of the figure is
            saved. If 'tight', try to figure out the tight bbox of
            the figure. If None, use savefig.bbox

        *pad_inches*
            Amount of padding around the figure when bbox_inches is
            'tight'. If None, use savefig.pad_inches

        *bbox_extra_artists*
            A list of extra artists that will be considered when the
            tight bbox is calculated.

        ")
                        (reparse-symbol indented_block_body) [68437 75139])
                    ("get_default_filetype" function
                       (:documentation "
        Get the default savefig file format as specified in rcParam
        ``savefig.format``. Returned string excludes period. Overridden
        in backends that only support a single file type.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [75186 75189]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [75144 75456])
                    ("get_window_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75482 75486]))                          
                        :documentation "
        Get the title text of the window containing the figure.
        Return None if there is no window (e.g., a PS backend).
        ")
                        (reparse-symbol indented_block_body) [75461 75729])
                    ("set_window_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75755 75759])
                            ("title" variable nil (reparse-symbol function_parameters) [75761 75766]))                          
                        :documentation "
        Set the title text of the window containing the figure.  Note that
        this has no effect if there is no window (e.g., a PS backend).
        ")
                        (reparse-symbol indented_block_body) [75734 76025])
                    ("get_default_filename" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76055 76059]))                          
                        :documentation "
        Return a string, which includes extension, suitable for use as
        a default filename.
        ")
                        (reparse-symbol indented_block_body) [76030 76849])
                    ("switch_backends" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76874 76878])
                            ("FigureCanvasClass" variable nil (reparse-symbol function_parameters) [76880 76897]))                          
                        :documentation "
        Instantiate an instance of FigureCanvasClass

        This is used for backend switching, e.g., to instantiate a
        FigureCanvasPS from a FigureCanvasGTK.  Note, deep copying is
        not done, so any changes to one of the instances (e.g., setting
        figure size or line props), will be reflected in the other
        ")
                        (reparse-symbol indented_block_body) [76854 77377])
                    ("mpl_connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77398 77402])
                            ("s" variable nil (reparse-symbol function_parameters) [77404 77405])
                            ("func" variable nil (reparse-symbol function_parameters) [77407 77411]))                          
                        :documentation "
        Connect event with string *s* to *func*.  The signature of *func* is::

          def func(event)

        where event is a :class:`matplotlib.backend_bases.Event`.  The
        following events are recognized

        - 'button_press_event'
        - 'button_release_event'
        - 'draw_event'
        - 'key_press_event'
        - 'key_release_event'
        - 'motion_notify_event'
        - 'pick_event'
        - 'resize_event'
        - 'scroll_event'
        - 'figure_enter_event',
        - 'figure_leave_event',
        - 'axes_enter_event',
        - 'axes_leave_event'
        - 'close_event'

        For the location events (button and key press/release), if the
        mouse is over the axes, the variable ``event.inaxes`` will be
        set to the :class:`~matplotlib.axes.Axes` the event occurs is
        over, and additionally, the variables ``event.xdata`` and
        ``event.ydata`` will be defined.  This is the mouse location
        in data coords.  See
        :class:`~matplotlib.backend_bases.KeyEvent` and
        :class:`~matplotlib.backend_bases.MouseEvent` for more info.

        Return value is a connection id that can be used with
        :meth:`~matplotlib.backend_bases.Event.mpl_disconnect`.

        Example usage::

            def on_press(event):
                print('you pressed', event.button, event.xdata, event.ydata)

            cid = canvas.mpl_connect('button_press_event', on_press)

        ")
                        (reparse-symbol indented_block_body) [77382 79182])
                    ("mpl_disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79206 79210])
                            ("cid" variable nil (reparse-symbol function_parameters) [79212 79215]))                          
                        :documentation "
        Disconnect callback id cid

        Example usage::

            cid = canvas.mpl_connect('button_press_event', on_press)
            #...later
            canvas.mpl_disconnect(cid)
        ")
                        (reparse-symbol indented_block_body) [79187 79479])
                    ("new_timer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79498 79502])
                            ("args" variable nil (reparse-symbol function_parameters) [79504 79509])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [79511 79519]))                          
                        :documentation "
        Creates a new backend-specific subclass of
        :class:`backend_bases.Timer`. This is useful for getting periodic
        events through the backend's native event loop. Implemented only for
        backends with GUIs.

        optional arguments:

        *interval*
          Timer interval in milliseconds
        *callbacks*
          Sequence of (func, args, kwargs) where func(*args, **kwargs) will
          be executed by the timer every *interval*.
        ")
                        (reparse-symbol indented_block_body) [79484 80057])
                    ("flush_events" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80079 80083]))                          
                        :documentation "
        Flush the GUI events for the figure. Implemented only for
        backends with GUIs.
        ")
                        (reparse-symbol indented_block_body) [80062 80238])
                    ("start_event_loop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80264 80268])
                            ("timeout" variable nil (reparse-symbol function_parameters) [80270 80277]))                          
                        :documentation "
        Start an event loop.  This is used to start a blocking event
        loop so that interactive functions, such as ginput and
        waitforbuttonpress, can wait for events.  This should not be
        confused with the main GUI event loop, which is always running
        and has nothing to do with this.

        This is implemented only for backends with GUIs.
        ")
                        (reparse-symbol indented_block_body) [80243 80709])
                    ("stop_event_loop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80734 80738]))                          
                        :documentation "
        Stop an event loop.  This is used to stop a blocking event
        loop so that interactive functions, such as ginput and
        waitforbuttonpress, can wait for events.

        This is implemented only for backends with GUIs.
        ")
                        (reparse-symbol indented_block_body) [80714 81036])
                    ("start_event_loop_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81070 81074])
                            ("timeout" variable nil (reparse-symbol function_parameters) [81076 81083]))                          
                        :documentation "
        Start an event loop.  This is used to start a blocking event
        loop so that interactive functions, such as ginput and
        waitforbuttonpress, can wait for events.  This should not be
        confused with the main GUI event loop, which is always running
        and has nothing to do with this.

        This function provides default event loop functionality based
        on time.sleep that is meant to be used until event loop
        functions for each of the GUI backends can be written.  As
        such, it throws a deprecated warning.

        This call blocks until a callback function triggers
        stop_event_loop() or *timeout* is reached.  If *timeout* is
        <=0, never timeout.
        ")
                        (reparse-symbol indented_block_body) [81041 82263])
                    ("stop_event_loop_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82296 82300]))                          
                        :documentation "
        Stop an event loop.  This is used to stop a blocking event
        loop so that interactive functions, such as ginput and
        waitforbuttonpress, can wait for events.

        ")
                        (reparse-symbol indented_block_body) [82268 82537]))                  
                :type "class")
                nil [53270 82537])
            ("key_press_handler" function
               (:documentation "
    Implement the default mpl key bindings for the canvas and toolbar
    described at :ref:`key-event-handling`

    *event*
      a :class:`KeyEvent` instance
    *canvas*
      a :class:`FigureCanvasBase` instance
    *toolbar*
      a :class:`NavigationToolbar2` instance

    "
                :arguments 
                  ( ("event" variable nil (reparse-symbol function_parameters) [82561 82566])
                    ("canvas" variable nil (reparse-symbol function_parameters) [82568 82574])
                    ("toolbar" variable nil (reparse-symbol function_parameters) [82576 82583]))                  )
                nil [82539 86788])
            ("NonGuiException" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [86828 86832]))                  
                :type "class")
                nil [86790 86833])
            ("FigureManagerBase" type
               (:documentation "
    Helper class for pyplot mode, wraps everything up into a neat bundle

    Public attibutes:

    *canvas*
        A :class:`FigureCanvasBase` instance

    *num*
        The figure number
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [87121 87141])
                            ("canvas" variable nil (reparse-symbol indented_block_body) [87150 87171])
                            ("self" variable nil (reparse-symbol indented_block_body) [87209 87223])
                            ("if" code nil (reparse-symbol indented_block_body) [87233 87529])
                            ("\"\"\"
        The returned id from connecting the default key handler via
        :meth:`FigureCanvasBase.mpl_connnect`.

        To disable default key press handling::

            manager, canvas = figure.canvas.manager, figure.canvas
            canvas.mpl_disconnect(manager.key_press_handler_id)

        \"\"\"" code nil (reparse-symbol indented_block_body) [87537 87849]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87093 87097])
                            ("canvas" variable nil (reparse-symbol function_parameters) [87099 87105])
                            ("num" variable nil (reparse-symbol function_parameters) [87107 87110]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [87080 87850])
                    ("show" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87864 87868]))                          
                        :documentation "
        For GUI backends, show the figure window and redraw.
        For non-GUI backends, raise an exception to be caught
        by :meth:`~matplotlib.figure.Figure.show`, for an
        optional warning.
        ")
                        (reparse-symbol indented_block_body) [87855 88134])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88151 88155]))                          )
                        (reparse-symbol indented_block_body) [88139 88171])
                    ("full_screen_toggle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88199 88203]))                          )
                        (reparse-symbol indented_block_body) [88176 88219])
                    ("resize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88235 88239])
                            ("w" variable nil (reparse-symbol function_parameters) [88241 88242])
                            ("h" variable nil (reparse-symbol function_parameters) [88244 88245]))                          
                        :documentation "\"For gui backends, resize the window (in pixels).")
                        (reparse-symbol indented_block_body) [88224 88325])
                    ("key_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88344 88348])
                            ("event" variable nil (reparse-symbol function_parameters) [88350 88355]))                          
                        :documentation "
        Implement the default mpl key bindings defined at
        :ref:`key-event-handling`
        ")
                        (reparse-symbol indented_block_body) [88330 88594])
                    ("show_popup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88614 88618])
                            ("msg" variable nil (reparse-symbol function_parameters) [88620 88623]))                          
                        :documentation "
        Display message in a popup -- GUI only
        ")
                        (reparse-symbol indented_block_body) [88599 88710])
                    ("get_window_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88736 88740]))                          
                        :documentation "
        Get the title text of the window containing the figure.
        Return None for non-GUI backends (e.g., a PS backend).
        ")
                        (reparse-symbol indented_block_body) [88715 88917])
                    ("set_window_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88943 88947])
                            ("title" variable nil (reparse-symbol function_parameters) [88949 88954]))                          
                        :documentation "
        Set the title text of the window containing the figure.  Note that
        this has no effect for non-GUI backends (e.g., a PS backend).
        ")
                        (reparse-symbol indented_block_body) [88922 89139]))                  
                :type "class")
                nil [86835 89139])
            ("cursors" variable nil nil [89141 89164])
            ("NavigationToolbar2" type
               (:documentation "
    Base class for the navigation cursor, version 2

    backends must implement a canvas that handles connections for
    'button_press_event' and 'button_release_event'.  See
    :meth:`FigureCanvasBase.mpl_connect` for more information


    They must also define

      :meth:`save_figure`
         save the current figure

      :meth:`set_cursor`
         if you want the pointer icon to change

      :meth:`_init_toolbar`
         create your toolbar widget

      :meth:`draw_rubberband` (optional)
         draw the zoom to rect \"rubberband\" rectangle

      :meth:`press`  (optional)
         whenever a mouse button is pressed, you'll be notified with
         the event

      :meth:`release` (optional)
         whenever a mouse button is released, you'll be notified with
         the event

      :meth:`dynamic_update` (optional)
         dynamically update the window while navigating

      :meth:`set_message` (optional)
         display message

      :meth:`set_history_buttons` (optional)
         you can change the history back / forward buttons to
         indicate disabled / enabled state.

    That's it, we'll do the rest!
    "
                :superclasses ("object")
                :members 
                  ( ("toolitems" variable nil (reparse-symbol indented_block_body) [90739 91294])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [91336 91356])
                            ("canvas" variable nil (reparse-symbol indented_block_body) [91365 91386])
                            ("self" variable nil (reparse-symbol indented_block_body) [91453 91480])
                            ("self" variable nil (reparse-symbol indented_block_body) [91489 91520])
                            ("self" variable nil (reparse-symbol indented_block_body) [91559 91579])
                            ("self" variable nil (reparse-symbol indented_block_body) [91675 91695])
                            ("self" variable nil (reparse-symbol indented_block_body) [91704 91726])
                            ("self" variable nil (reparse-symbol indented_block_body) [91735 91754])
                            ("self" variable nil (reparse-symbol indented_block_body) [91763 91786])
                            ("self" code nil (reparse-symbol indented_block_body) [91795 91815])
                            ("self" variable nil (reparse-symbol indented_block_body) [91824 91915])
                            ("self" variable nil (reparse-symbol indented_block_body) [91925 91944])
                            ("self" variable nil (reparse-symbol indented_block_body) [91953 91975])
                            ("self" variable nil (reparse-symbol indented_block_body) [91985 92012])
                            ("self" variable nil (reparse-symbol indented_block_body) [92106 92120])
                            ("self" code nil (reparse-symbol indented_block_body) [92165 92191]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91313 91317])
                            ("canvas" variable nil (reparse-symbol function_parameters) [91319 91325]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [91300 92192])
                    ("set_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92213 92217])
                            ("s" variable nil (reparse-symbol function_parameters) [92219 92220]))                          
                        :documentation "Display a message on toolbar or in status bar")
                        (reparse-symbol indented_block_body) [92197 92296])
                    ("back" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92310 92314])
                            ("args" variable nil (reparse-symbol function_parameters) [92316 92321]))                          
                        :documentation "move back up the view lim stack")
                        (reparse-symbol indented_block_body) [92301 92491])
                    ("dynamic_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92515 92519]))                          )
                        (reparse-symbol indented_block_body) [92496 92535])
                    ("draw_rubberband" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92560 92564])
                            ("event" variable nil (reparse-symbol function_parameters) [92566 92571])
                            ("x0" variable nil (reparse-symbol function_parameters) [92573 92575])
                            ("y0" variable nil (reparse-symbol function_parameters) [92577 92579])
                            ("x1" variable nil (reparse-symbol function_parameters) [92581 92583])
                            ("y1" variable nil (reparse-symbol function_parameters) [92585 92587]))                          
                        :documentation "Draw a rectangle rubberband to indicate zoom limits")
                        (reparse-symbol indented_block_body) [92540 92669])
                    ("remove_rubberband" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92696 92700]))                          
                        :documentation "Remove the rubberband")
                        (reparse-symbol indented_block_body) [92674 92752])
                    ("forward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92769 92773])
                            ("args" variable nil (reparse-symbol function_parameters) [92775 92780]))                          
                        :documentation "Move forward in the view lim stack")
                        (reparse-symbol indented_block_body) [92757 92959])
                    ("home" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92973 92977])
                            ("args" variable nil (reparse-symbol function_parameters) [92979 92984]))                          
                        :documentation "Restore the original view")
                        (reparse-symbol indented_block_body) [92964 93148])
                    ("_init_toolbar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93171 93175]))                          
                        :documentation "
        This is where you actually build the GUI widgets (called by
        __init__).  The icons ``home.xpm``, ``back.xpm``, ``forward.xpm``,
        ``hand.xpm``, ``zoom_to_rect.xpm`` and ``filesave.xpm`` are standard
        across backends (there are ppm versions in CVS also).

        You just need to set the callbacks

        home         : self.home
        back         : self.back
        forward      : self.forward
        hand         : self.pan
        zoom_to_rect : self.zoom
        filesave     : self.save_figure

        You only need to define the last one - the others are in the base
        class implementation.

        ")
                        (reparse-symbol indented_block_body) [93153 93876])
                    ("_set_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93897 93901])
                            ("event" variable nil (reparse-symbol function_parameters) [93903 93908]))                          )
                        (reparse-symbol indented_block_body) [93881 94539])
                    ("mouse_move" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94559 94563])
                            ("event" variable nil (reparse-symbol function_parameters) [94565 94570]))                          )
                        (reparse-symbol indented_block_body) [94544 95503])
                    ("pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95516 95520])
                            ("args" variable nil (reparse-symbol function_parameters) [95522 95527]))                          
                        :documentation "Activate the pan/zoom tool. pan with left button, zoom with right")
                        (reparse-symbol indented_block_body) [95508 96611])
                    ("press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96626 96630])
                            ("event" variable nil (reparse-symbol function_parameters) [96632 96637]))                          
                        :documentation "Called whenver a mouse button is pressed.")
                        (reparse-symbol indented_block_body) [96616 96709])
                    ("press_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96728 96732])
                            ("event" variable nil (reparse-symbol function_parameters) [96734 96739]))                          
                        :documentation "the press mouse button in pan/zoom mode callback")
                        (reparse-symbol indented_block_body) [96714 97721])
                    ("press_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97741 97745])
                            ("event" variable nil (reparse-symbol function_parameters) [97747 97752]))                          
                        :documentation "the press mouse button in zoom to rect mode callback")
                        (reparse-symbol indented_block_body) [97726 99320])
                    ("_switch_on_zoom_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99350 99354])
                            ("event" variable nil (reparse-symbol function_parameters) [99356 99361]))                          )
                        (reparse-symbol indented_block_body) [99325 99431])
                    ("_switch_off_zoom_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99462 99466])
                            ("event" variable nil (reparse-symbol function_parameters) [99468 99473]))                          )
                        (reparse-symbol indented_block_body) [99436 99538])
                    ("push_current" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99560 99564]))                          
                        :documentation "push the current view limits and position onto the stack")
                        (reparse-symbol indented_block_body) [99543 100040])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100057 100061])
                            ("event" variable nil (reparse-symbol function_parameters) [100063 100068]))                          
                        :documentation "this will be called whenever mouse button is released")
                        (reparse-symbol indented_block_body) [100045 100152])
                    ("release_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100173 100177])
                            ("event" variable nil (reparse-symbol function_parameters) [100179 100184]))                          
                        :documentation "the release mouse button callback in pan/zoom mode")
                        (reparse-symbol indented_block_body) [100157 100711])
                    ("drag_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100729 100733])
                            ("event" variable nil (reparse-symbol function_parameters) [100735 100740]))                          
                        :documentation "the drag callback in pan/zoom mode")
                        (reparse-symbol indented_block_body) [100716 101076])
                    ("drag_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101095 101099])
                            ("event" variable nil (reparse-symbol function_parameters) [101101 101106]))                          
                        :documentation "the drag callback in zoom mode")
                        (reparse-symbol indented_block_body) [101081 101804])
                    ("release_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101826 101830])
                            ("event" variable nil (reparse-symbol function_parameters) [101832 101837]))                          
                        :documentation "the release mouse button callback in zoom to rect mode")
                        (reparse-symbol indented_block_body) [101809 103569])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103583 103587]))                          
                        :documentation "Redraw the canvases, update the locators")
                        (reparse-symbol indented_block_body) [103574 104211])
                    ("_update_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104233 104237]))                          
                        :documentation "Update the viewlim and position from the view and
        position stack for each axes
        ")
                        (reparse-symbol indented_block_body) [104216 104791])
                    ("save_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104812 104816])
                            ("args" variable nil (reparse-symbol function_parameters) [104818 104823]))                          
                        :documentation "Save the current figure")
                        (reparse-symbol indented_block_body) [104796 104898])
                    ("set_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104918 104922])
                            ("cursor" variable nil (reparse-symbol function_parameters) [104924 104930]))                          
                        :documentation "
        Set the current cursor to one of the :class:`Cursors`
        enums values
        ")
                        (reparse-symbol indented_block_body) [104903 105053])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105069 105073]))                          
                        :documentation "Reset the axes stack")
                        (reparse-symbol indented_block_body) [105058 105206])
                    ("zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105220 105224])
                            ("args" variable nil (reparse-symbol function_parameters) [105226 105231]))                          
                        :documentation "Activate zoom to rect mode")
                        (reparse-symbol indented_block_body) [105211 106260])
                    ("set_history_buttons" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106289 106293]))                          
                        :documentation "Enable or disable back/forward button")
                        (reparse-symbol indented_block_body) [106265 106361]))                  
                :type "class")
                nil [89167 106361])
            ("ToolContainerBase" type
               (:documentation "
    Base class for all tool containers, e.g. toolbars.

    Attributes
    ----------
    toolmanager : `ToolManager` object that holds the tools that
        this `ToolContainer` wants to communicate with.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [106665 106695])
                            ("self" code nil (reparse-symbol indented_block_body) [106704 106830]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106637 106641])
                            ("toolmanager" variable nil (reparse-symbol function_parameters) [106643 106654]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [106624 106831])
                    ("_tool_toggled_cbk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106858 106862])
                            ("event" variable nil (reparse-symbol function_parameters) [106864 106869]))                          
                        :documentation "
        Captures the 'tool_trigger_[name]'

        This only gets used for toggled tools
        ")
                        (reparse-symbol indented_block_body) [106836 107052])
                    ("add_tool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107070 107074])
                            ("tool" variable nil (reparse-symbol function_parameters) [107076 107080])
                            ("group" variable nil (reparse-symbol function_parameters) [107082 107087])
                            ("position" variable nil (reparse-symbol function_parameters) [107089 107097]))                          
                        :documentation "
        Adds a tool to this container

        Parameters
        ----------
        tool : tool_like
            The tool to add, see `ToolManager.get_tool`.
        group : str
            The name of the group to add this tool to.
        position : int (optional)
            The position within the group to place this tool.  Defaults to end.
        ")
                        (reparse-symbol indented_block_body) [107057 107920])
                    ("_remove_tool_cbk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107946 107950])
                            ("event" variable nil (reparse-symbol function_parameters) [107952 107957]))                          
                        :documentation "Captures the 'tool_removed_event' signal and removes the tool")
                        (reparse-symbol indented_block_body) [107925 108082])
                    ("_get_image_filename" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108111 108115])
                            ("image" variable nil (reparse-symbol function_parameters) [108117 108122]))                          
                        :documentation "Find the image based on its name")
                        (reparse-symbol indented_block_body) [108087 108462])
                    ("trigger_tool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108484 108488])
                            ("name" variable nil (reparse-symbol function_parameters) [108490 108494]))                          
                        :documentation "
        Trigger the tool

        Parameters
        ----------
        name : String
            Name(id) of the tool triggered from within the container

        ")
                        (reparse-symbol indented_block_body) [108467 108734])
                    ("add_toolitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108756 108760])
                            ("name" variable nil (reparse-symbol function_parameters) [108762 108766])
                            ("group" variable nil (reparse-symbol function_parameters) [108768 108773])
                            ("position" variable nil (reparse-symbol function_parameters) [108775 108783])
                            ("image" variable nil (reparse-symbol function_parameters) [108785 108790])
                            ("description" variable nil (reparse-symbol function_parameters) [108792 108803])
                            ("toggle" variable nil (reparse-symbol function_parameters) [108805 108811]))                          )
                        (reparse-symbol indented_block_body) [108739 109875])
                    ("toggle_toolitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109900 109904])
                            ("name" variable nil (reparse-symbol function_parameters) [109906 109910])
                            ("toggled" variable nil (reparse-symbol function_parameters) [109912 109919]))                          
                        :documentation "
        Toggle the toolitem without firing event

        Parameters
        ----------
        name : String
            Id of the tool to toggle
        toggled : bool
            Whether to set this tool as toggled or not.
        ")
                        (reparse-symbol indented_block_body) [109880 110206])
                    ("remove_toolitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110231 110235])
                            ("name" variable nil (reparse-symbol function_parameters) [110237 110241]))                          
                        :documentation "
        Remove a toolitem from the `ToolContainer`

        This method must get implemented per backend

        Called when `ToolManager` emits a `tool_removed_event`

        Parameters
        ----------
        name : string
            Name of the tool to remove

        ")
                        (reparse-symbol indented_block_body) [110211 110573]))                  
                :type "class")
                nil [106363 110573])
            ("StatusbarBase" type
               (:documentation "Base class for the statusbar"
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [110688 110718])
                            ("self" code nil (reparse-symbol indented_block_body) [110727 110849]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110660 110664])
                            ("toolmanager" variable nil (reparse-symbol function_parameters) [110666 110677]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [110647 110850])
                    ("_message_cbk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110872 110876])
                            ("event" variable nil (reparse-symbol function_parameters) [110878 110883]))                          
                        :documentation "Captures the 'tool_message_event' and set the message")
                        (reparse-symbol indented_block_body) [110855 110994])
                    ("set_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111015 111019])
                            ("s" variable nil (reparse-symbol function_parameters) [111021 111022]))                          
                        :documentation "
        Display a message on toolbar or in status bar

        Parameters
        ----------
        s : str
            Message text
        ")
                        (reparse-symbol indented_block_body) [110999 111197]))                  
                :type "class")
                nil [110575 111197]))          
      :file "backend_bases.py"
      :pointmax 111197
      :fsize 111196
      :lastmodtime '(22681 7108 703474 0)
      :unmatched-syntax '((INDENT_BLOCK 85421 . 85501) (NEWLINE 85420 . 85421) (COLON 85419 . 85420) (TRY 85341 . 85344) (AS 85413 . 85415)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The figure module provides the top-level
:class:`~matplotlib.artist.Artist`, the :class:`Figure`, which
contains all the plot elements.  The following classes are defined

:class:`SubplotParams`
    control the default spacing of the subplots

:class:`Figure`
    top level container for all plot elements

\"\"\"" code nil nil [1 315])
            ("" code nil nil [340 425])
            ("six" include nil nil [427 437])
            ("warnings" include nil nil [439 454])
            ("operator" include nil nil [455 486])
            ("numpy" include nil nil [488 506])
            ("matplotlib" include nil nil [508 539])
            ("matplotlib" include nil nil [540 572])
            ("matplotlib" include nil nil [573 623])
            ("matplotlib.artist" include nil nil [625 660])
            ("matplotlib.artist" include nil nil [661 718])
            ("matplotlib.cbook" include nil nil [720 752])
            ("matplotlib.cbook" include nil nil [754 798])
            ("matplotlib" include nil nil [800 838])
            ("matplotlib.image" include nil nil [839 879])
            ("matplotlib.colorbar" include nil nil [881 915])
            ("matplotlib.axes" include nil nil [917 985])
            ("matplotlib.blocking_input" include nil nil [986 1065])
            ("matplotlib.legend" include nil nil [1066 1102])
            ("matplotlib.patches" include nil nil [1103 1143])
            ("" code nil nil [1179 1270])
            ("matplotlib.text" include nil nil [1271 1323])
            ("" code nil nil [1358 1443])
            ("matplotlib.backend_bases" include nil nil [1444 1496])
            ("docstring" code nil nil [1498 1563])
            ("_stale_figure_callback" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1593 1597])
                    ("val" variable nil (reparse-symbol function_parameters) [1599 1602]))                  )
                nil [1566 1657])
            ("AxesStack" type
               (:documentation "
    Specialization of the Stack to handle all tracking of Axes in a Figure.
    This stack stores ``key, (ind, axes)`` pairs, where:

        * **key** should be a hash of the args and kwargs
          used in generating the Axes.
        * **ind** is a serial number for tracking the order
          in which axes were added.

    The AxesStack is a callable, where ``ax_stack()`` returns
    the current axes. Alternatively the :meth:`current_key_axes` will
    return the current key and associated axes.

    "
                :superclasses ("Stack")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Stack" code nil (reparse-symbol indented_block_body) [2240 2260])
                            ("self" variable nil (reparse-symbol indented_block_body) [2269 2282]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2225 2229]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2212 2283])
                    ("as_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2300 2304]))                          
                        :documentation "
        Return a list of the Axes instances that have been added to the figure
        ")
                        (reparse-symbol indented_block_body) [2288 2521])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2534 2538])
                            ("key" variable nil (reparse-symbol function_parameters) [2540 2543]))                          
                        :documentation "
        Return the Axes instance that was added with *key*.
        If it is not present, return None.
        ")
                        (reparse-symbol indented_block_body) [2526 2790])
                    ("_entry_from_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2816 2820])
                            ("e" variable nil (reparse-symbol function_parameters) [2822 2823]))                          )
                        (reparse-symbol indented_block_body) [2795 2933])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2949 2953])
                            ("a" variable nil (reparse-symbol function_parameters) [2955 2956]))                          
                        :documentation "Remove the axes from the stack.")
                        (reparse-symbol indented_block_body) [2938 3058])
                    ("bubble" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3074 3078])
                            ("a" variable nil (reparse-symbol function_parameters) [3080 3081]))                          
                        :documentation "
        Move the given axes, which must already exist in the
        stack, to the top.
        ")
                        (reparse-symbol indented_block_body) [3063 3256])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3269 3273])
                            ("key" variable nil (reparse-symbol function_parameters) [3275 3278])
                            ("a" variable nil (reparse-symbol function_parameters) [3280 3281]))                          
                        :documentation "
        Add Axes *a*, with key *key*, to the stack, and return the stack.

        If *a* is already on the stack, don't add it again, but
        return *None*.
        ")
                        (reparse-symbol indented_block_body) [3261 4251])
                    ("current_key_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4277 4281]))                          
                        :documentation "
        Return a tuple of ``(key, axes)`` for the active axes.

        If no axes exists on the stack, then returns ``(None, None)``.

        ")
                        (reparse-symbol indented_block_body) [4256 4630])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4648 4652]))                          )
                        (reparse-symbol indented_block_body) [4635 4697])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4719 4723])
                            ("a" variable nil (reparse-symbol function_parameters) [4725 4726]))                          )
                        (reparse-symbol indented_block_body) [4702 4764]))                  
                :type "class")
                nil [1659 4764])
            ("SubplotParams" type
               (:documentation "
    A class to hold the parameters for a subplot
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        All dimensions are fraction of the figure width or height.
        All values default to their rc params

        The following attributes are available

        left  : 0.125
            The left side of the subplots of the figure

        right : 0.9
            The right side of the subplots of the figure

        bottom : 0.1
            The bottom of the subplots of the figure

        top : 0.9
            The top of the subplots of the figure

        wspace : 0.2
            The amount of width reserved for blank space between subplots,
            expressed as a fraction of the average axis width

        hspace : 0.2
            The amount of height reserved for white space between subplots,
            expressed as a fraction of the average axis height
        \"\"\"" code nil (reparse-symbol indented_block_body) [4981 5778])
                            ("self" variable nil (reparse-symbol indented_block_body) [5788 5808])
                            ("self" code nil (reparse-symbol indented_block_body) [5817 5870]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4877 4881])
                            ("left" variable nil (reparse-symbol function_parameters) [4883 4887])
                            ("bottom" variable nil (reparse-symbol function_parameters) [4894 4900])
                            ("right" variable nil (reparse-symbol function_parameters) [4907 4912])
                            ("top" variable nil (reparse-symbol function_parameters) [4919 4922])
                            ("wspace" variable nil (reparse-symbol function_parameters) [4946 4952])
                            ("hspace" variable nil (reparse-symbol function_parameters) [4959 4965]))                          
                        :documentation "
        All dimensions are fraction of the figure width or height.
        All values default to their rc params

        The following attributes are available

        left  : 0.125
            The left side of the subplots of the figure

        right : 0.9
            The right side of the subplots of the figure

        bottom : 0.1
            The bottom of the subplots of the figure

        top : 0.9
            The top of the subplots of the figure

        wspace : 0.2
            The amount of width reserved for blank space between subplots,
            expressed as a fraction of the average axis width

        hspace : 0.2
            The amount of height reserved for white space between subplots,
            expressed as a fraction of the average axis height
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4864 5871])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5887 5891])
                            ("left" variable nil (reparse-symbol function_parameters) [5893 5897])
                            ("bottom" variable nil (reparse-symbol function_parameters) [5904 5910])
                            ("right" variable nil (reparse-symbol function_parameters) [5917 5922])
                            ("top" variable nil (reparse-symbol function_parameters) [5929 5932])
                            ("wspace" variable nil (reparse-symbol function_parameters) [5954 5960])
                            ("hspace" variable nil (reparse-symbol function_parameters) [5967 5973]))                          
                        :documentation "
        Update the current values.  If any kwarg is None, default to
        the current value, if set, otherwise to rc

        ")
                        (reparse-symbol indented_block_body) [5876 7182])
                    ("_update_this" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7204 7208])
                            ("s" variable nil (reparse-symbol function_parameters) [7210 7211])
                            ("val" variable nil (reparse-symbol function_parameters) [7213 7216]))                          )
                        (reparse-symbol indented_block_body) [7187 7423]))                  
                :type "class")
                nil [4766 7423])
            ("Figure" type
               (:documentation "
    The Figure instance supports callbacks through a *callbacks*
    attribute which is a :class:`matplotlib.cbook.CallbackRegistry`
    instance.  The events you can connect to are 'dpi_changed', and
    the callback will be called with ``func(fig)`` where fig is the
    :class:`Figure` instance.

    *patch*
       The figure patch is drawn by a
       :class:`matplotlib.patches.Rectangle` instance

    *suppressComposite*
       For multiple figure images, the figure will make composite
       images depending on the renderer option_image_nocomposite
       function.  If suppressComposite is True|False, this will
       override the renderer.
    "
                :superclasses ("Artist")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8135 8139]))                          )
                        (reparse-symbol indented_block_body) [8123 8197])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *figsize*
            w,h tuple in inches

        *dpi*
            Dots per inch

        *facecolor*
            The figure patch facecolor; defaults to rc ``figure.facecolor``

        *edgecolor*
            The figure patch edge color; defaults to rc ``figure.edgecolor``

        *linewidth*
            The figure patch edge linewidth; the default linewidth of the frame

        *frameon*
            If *False*, suppress drawing the figure frame

        *subplotpars*
            A :class:`SubplotParams` instance, defaults to rc

        *tight_layout*
            If *False* use *subplotpars*; if *True* adjust subplot
            parameters using :meth:`tight_layout` with default padding.
            When providing a dict containing the keys `pad`, `w_pad`, `h_pad`
            and `rect`, the default :meth:`tight_layout` paddings will be
            overridden.
            Defaults to rc ``figure.autolayout``.
        \"\"\"" code nil (reparse-symbol indented_block_body) [8772 9725])
                            ("Artist" code nil (reparse-symbol indented_block_body) [9734 9755])
                            ("del" code nil (reparse-symbol indented_block_body) [9999 10013])
                            ("self" variable nil (reparse-symbol indented_block_body) [10022 10063])
                            ("if" code nil (reparse-symbol indented_block_body) [10073 10142])
                            ("if" code nil (reparse-symbol indented_block_body) [10150 10207])
                            ("if" code nil (reparse-symbol indented_block_body) [10215 10290])
                            ("if" code nil (reparse-symbol indented_block_body) [10298 10373])
                            ("if" code nil (reparse-symbol indented_block_body) [10381 10450])
                            ("self" variable nil (reparse-symbol indented_block_body) [10459 10492])
                            ("self" variable nil (reparse-symbol indented_block_body) [10501 10515])
                            ("self" variable nil (reparse-symbol indented_block_body) [10524 10575])
                            ("self" variable nil (reparse-symbol indented_block_body) [10584 10651])
                            ("self" variable nil (reparse-symbol indented_block_body) [10661 10683])
                            ("self" variable nil (reparse-symbol indented_block_body) [10693 10738])
                            ("self" variable nil (reparse-symbol indented_block_body) [10793 10964])
                            ("self" code nil (reparse-symbol indented_block_body) [10974 11008])
                            ("self" code nil (reparse-symbol indented_block_body) [11017 11041])
                            ("self" variable nil (reparse-symbol indented_block_body) [11051 11085])
                            ("if" code nil (reparse-symbol indented_block_body) [11094 11147])
                            ("self" variable nil (reparse-symbol indented_block_body) [11156 11174])
                            ("self" variable nil (reparse-symbol indented_block_body) [11183 11204])
                            ("if" code nil (reparse-symbol indented_block_body) [11214 11280])
                            ("self" variable nil (reparse-symbol indented_block_body) [11289 11319])
                            ("self" code nil (reparse-symbol indented_block_body) [11328 11363])
                            ("self" variable nil (reparse-symbol indented_block_body) [11373 11400])
                            ("self" code nil (reparse-symbol indented_block_body) [11451 11461])
                            ("self" variable nil (reparse-symbol indented_block_body) [11470 11497]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8215 8219])
                            ("figsize" variable nil (reparse-symbol function_parameters) [8238 8245])
                            ("dpi" variable nil (reparse-symbol function_parameters) [8302 8305])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [8358 8367])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [8426 8435])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [8494 8503])
                            ("frameon" variable nil (reparse-symbol function_parameters) [8564 8571])
                            ("subplotpars" variable nil (reparse-symbol function_parameters) [8638 8649])
                            ("tight_layout" variable nil (reparse-symbol function_parameters) [8690 8702]))                          
                        :documentation "
        *figsize*
            w,h tuple in inches

        *dpi*
            Dots per inch

        *facecolor*
            The figure patch facecolor; defaults to rc ``figure.facecolor``

        *edgecolor*
            The figure patch edge color; defaults to rc ``figure.edgecolor``

        *linewidth*
            The figure patch edge linewidth; the default linewidth of the frame

        *frameon*
            If *False*, suppress drawing the figure frame

        *subplotpars*
            A :class:`SubplotParams` instance, defaults to rc

        *tight_layout*
            If *False* use *subplotpars*; if *True* adjust subplot
            parameters using :meth:`tight_layout` with default padding.
            When providing a dict containing the keys `pad`, `w_pad`, `h_pad`
            and `rect`, the default :meth:`tight_layout` paddings will be
            overridden.
            Defaults to rc ``figure.autolayout``.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8202 11498])
                    ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11681 11685]))                          )
                        (reparse-symbol indented_block_body) [11665 12019])
                    ("show" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12033 12037])
                            ("warn" variable nil (reparse-symbol function_parameters) [12039 12043]))                          
                        :documentation "
        If using a GUI backend with pyplot, display the figure window.

        If the figure was not created using
        :func:`~matplotlib.pyplot.figure`, it will lack a
        :class:`~matplotlib.backend_bases.FigureManagerBase`, and
        will raise an AttributeError.

        For non-GUI backends, this does nothing, in which case
        a warning will be issued if *warn* is True (default).
        ")
                        (reparse-symbol indented_block_body) [12024 13175])
                    ("_get_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13194 13198]))                          )
                        (reparse-symbol indented_block_body) [13180 13240])
                    ("axes" variable nil (reparse-symbol indented_block_body) [13245 13317])
                    ("_get_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13336 13340]))                          )
                        (reparse-symbol indented_block_body) [13323 13368])
                    ("_set_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13386 13390])
                            ("dpi" variable nil (reparse-symbol function_parameters) [13392 13395]))                          )
                        (reparse-symbol indented_block_body) [13373 13527])
                    ("dpi" variable nil (reparse-symbol indented_block_body) [13531 13565])
                    ("get_tight_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13592 13596]))                          
                        :documentation "
        Return the Boolean flag, True to use :meth`tight_layout` when drawing.
        ")
                        (reparse-symbol indented_block_body) [13571 13729])
                    ("set_tight_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13755 13759])
                            ("tight" variable nil (reparse-symbol function_parameters) [13761 13766]))                          
                        :documentation "
        Set whether :meth:`tight_layout` is used upon drawing.
        If None, the rcParams['figure.autolayout'] value will be set.

        When providing a dict containing the keys `pad`, `w_pad`, `h_pad`
        and `rect`, the default :meth:`tight_layout` paddings will be
        overridden.

        ACCEPTS: [True | False | dict | None ]
        ")
                        (reparse-symbol indented_block_body) [13734 14349])
                    ("autofmt_xdate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14372 14376])
                            ("bottom" variable nil (reparse-symbol function_parameters) [14378 14384])
                            ("rotation" variable nil (reparse-symbol function_parameters) [14390 14398])
                            ("ha" variable nil (reparse-symbol function_parameters) [14403 14405]))                          
                        :documentation "
        Date ticklabels often overlap, so it is useful to rotate them
        and right align them.  Also, a common use case is a number of
        subplots with shared xaxes where the x-axis is date data.  The
        ticklabels are often long, and it helps to rotate them on the
        bottom subplot and turn them off on other subplots, as well as
        turn off xlabels.

        *bottom*
            The bottom of the subplots for :meth:`subplots_adjust`

        *rotation*
            The rotation of the xtick labels

        *ha*
            The horizontal alignment of the xticklabels
        ")
                        (reparse-symbol indented_block_body) [14354 15888])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15910 15914]))                          )
                        (reparse-symbol indented_block_body) [15893 16287])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16305 16309])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [16311 16321]))                          
                        :documentation "
        Test whether the mouse event occurred on the figure.

        Returns True,{}
        ")
                        (reparse-symbol indented_block_body) [16292 16677])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16704 16708])
                            ("args" variable nil (reparse-symbol function_parameters) [16710 16715])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16717 16725]))                          )
                        (reparse-symbol indented_block_body) [16682 16825])
                    ("suptitle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16843 16847])
                            ("t" variable nil (reparse-symbol function_parameters) [16849 16850])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16852 16860]))                          
                        :documentation "
        Add a centered title to the figure.

        kwargs are :class:`matplotlib.text.Text` properties.  Using figure
        coordinates, the defaults are:

          x : 0.5
            The x location of the text in figure coords

          y : 0.98
            The y location of the text in figure coords

          horizontalalignment : 'center'
            The horizontal alignment of the text

          verticalalignment : 'top'
            The vertical alignment of the text

        If the `fontproperties` keyword argument is given then the
        rcParams defaults for `fontsize` (`figure.titlesize`) and
        `fontweight` (`figure.titleweight`) will be ignored in favour
        of the `FontProperties` defaults.

        A :class:`matplotlib.text.Text` instance is returned.

        Example::

          fig.suptitle('this is the figure title', fontsize=12)
        ")
                        (reparse-symbol indented_block_body) [16830 18733])
                    ("set_canvas" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18753 18757])
                            ("canvas" variable nil (reparse-symbol function_parameters) [18759 18765]))                          
                        :documentation "
        Set the canvas that contains the figure

        ACCEPTS: a FigureCanvas instance
        ")
                        (reparse-symbol indented_block_body) [18738 18911])
                    ("" code nil (reparse-symbol indented_block_body) [18933 18940])
                    ("hold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18954 18958])
                            ("b" variable nil (reparse-symbol function_parameters) [18960 18961]))                          
                        :documentation "
        Set the hold state.  If hold is None (default), toggle the
        hold state.  Else set the hold state to boolean value b.

        e.g.::

            hold()      # toggle hold
            hold(True)  # hold is on
            hold(False) # hold is off

        All \"hold\" machinery is deprecated.
        ")
                        (reparse-symbol indented_block_body) [18945 19403])
                    ("figimage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19421 19425])
                            ("X" variable nil (reparse-symbol function_parameters) [19427 19428])
                            ("xo" variable nil (reparse-symbol function_parameters) [19447 19449])
                            ("yo" variable nil (reparse-symbol function_parameters) [19470 19472])
                            ("alpha" variable nil (reparse-symbol function_parameters) [19493 19498])
                            ("norm" variable nil (reparse-symbol function_parameters) [19522 19526])
                            ("cmap" variable nil (reparse-symbol function_parameters) [19550 19554])
                            ("vmin" variable nil (reparse-symbol function_parameters) [19578 19582])
                            ("vmax" variable nil (reparse-symbol function_parameters) [19606 19610])
                            ("origin" variable nil (reparse-symbol function_parameters) [19634 19640])
                            ("resize" variable nil (reparse-symbol function_parameters) [19664 19670])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19695 19703]))                          
                        :documentation "
        Adds a non-resampled image to the figure.

        call signatures::

          figimage(X, **kwargs)

        adds a non-resampled array *X* to the figure.

        ::

          figimage(X, xo, yo)

        with pixel offsets *xo*, *yo*,

        *X* must be a float array:

        * If *X* is MxN, assume luminance (grayscale)
        * If *X* is MxNx3, assume RGB
        * If *X* is MxNx4, assume RGBA

        Optional keyword arguments:

          =========   =========================================================
          Keyword     Description
          =========   =========================================================
          resize      a boolean, True or False. If \"True\", then re-size the
                      Figure to match the given image size.
          xo or yo    An integer, the *x* and *y* image offset in pixels
          cmap        a :class:`matplotlib.colors.Colormap` instance, e.g.,
                      cm.jet. If *None*, default to the rc ``image.cmap``
                      value
          norm        a :class:`matplotlib.colors.Normalize` instance. The
                      default is normalization().  This scales luminance -> 0-1
          vmin|vmax   are used to scale a luminance image to 0-1.  If either
                      is *None*, the min and max of the luminance values will
                      be used.  Note if you pass a norm instance, the settings
                      for *vmin* and *vmax* will be ignored.
          alpha       the alpha blending value, default is *None*
          origin      [ 'upper' | 'lower' ] Indicates where the [0,0] index of
                      the array is in the upper left or lower left corner of
                      the axes. Defaults to the rc image.origin value
          =========   =========================================================

        figimage complements the axes image
        (:meth:`~matplotlib.axes.Axes.imshow`) which will be resampled
        to fit the current axes.  If you want a resampled image to
        fill the entire figure, you can define an
        :class:`~matplotlib.axes.Axes` with extent [0,0,1,1].

        An :class:`matplotlib.image.FigureImage` instance is returned.

        .. plot:: mpl_examples/pylab_examples/figimage_demo.py


        Additional kwargs are Artist kwargs passed on to
        :class:`~matplotlib.image.FigureImage`
        ")
                        (reparse-symbol indented_block_body) [19408 22727])
                    ("set_size_inches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22752 22756])
                            ("w" variable nil (reparse-symbol function_parameters) [22758 22759])
                            ("h" variable nil (reparse-symbol function_parameters) [22761 22762])
                            ("forward" variable nil (reparse-symbol function_parameters) [22769 22776]))                          
                        :documentation "
        set_size_inches(w,h, forward=False)

        Set the figure size in inches (1in == 2.54cm)

        Usage::

             fig.set_size_inches(w,h)  # OR
             fig.set_size_inches((w,h) )

        optional kwarg *forward=True* will cause the canvas size to be
        automatically updated; e.g., you can resize the figure window
        from the shell

        ACCEPTS: a w,h tuple with w,h in inches

        See Also
        --------

        matplotlib.Figure.get_size_inches
        ")
                        (reparse-symbol indented_block_body) [22732 23882])
                    ("get_size_inches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23907 23911]))                          
                        :documentation "
        Returns the current size of the figure in inches (1in == 2.54cm)
        as an numpy array.

        Returns
        -------
        size : ndarray
           The size of the figure in inches

        See Also
        --------

        matplotlib.Figure.set_size_inches
        ")
                        (reparse-symbol indented_block_body) [23887 24261])
                    ("get_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24284 24288]))                          )
                        (reparse-symbol indented_block_body) [24266 24386])
                    ("get_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24409 24413]))                          )
                        (reparse-symbol indented_block_body) [24391 24511])
                    ("get_figwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24533 24537]))                          )
                        (reparse-symbol indented_block_body) [24516 24619])
                    ("get_figheight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24642 24646]))                          )
                        (reparse-symbol indented_block_body) [24624 24730])
                    ("get_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24747 24751]))                          )
                        (reparse-symbol indented_block_body) [24735 24814])
                    ("get_frameon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24835 24839]))                          )
                        (reparse-symbol indented_block_body) [24819 24915])
                    ("set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24938 24942])
                            ("color" variable nil (reparse-symbol function_parameters) [24944 24949]))                          
                        :documentation "
        Set the edge color of the Figure rectangle

        ACCEPTS: any matplotlib color - see help(colors)
        ")
                        (reparse-symbol indented_block_body) [24920 25125])
                    ("set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25148 25152])
                            ("color" variable nil (reparse-symbol function_parameters) [25154 25159]))                          
                        :documentation "
        Set the face color of the Figure rectangle

        ACCEPTS: any matplotlib color - see help(colors)
        ")
                        (reparse-symbol indented_block_body) [25130 25335])
                    ("set_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25352 25356])
                            ("val" variable nil (reparse-symbol function_parameters) [25358 25361]))                          
                        :documentation "
        Set the dots-per-inch of the figure

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [25340 25505])
                    ("set_figwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25527 25531])
                            ("val" variable nil (reparse-symbol function_parameters) [25533 25536])
                            ("forward" variable nil (reparse-symbol function_parameters) [25538 25545]))                          
                        :documentation "
        Set the width of the figure in inches

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [25510 25721])
                    ("set_figheight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25744 25748])
                            ("val" variable nil (reparse-symbol function_parameters) [25750 25753])
                            ("forward" variable nil (reparse-symbol function_parameters) [25755 25762]))                          
                        :documentation "
        Set the height of the figure in inches

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [25726 25938])
                    ("set_frameon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25959 25963])
                            ("b" variable nil (reparse-symbol function_parameters) [25965 25966]))                          
                        :documentation "
        Set whether the figure frame (background) is displayed or invisible

        ACCEPTS: boolean
        ")
                        (reparse-symbol indented_block_body) [25943 26146])
                    ("delaxes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26163 26167])
                            ("a" variable nil (reparse-symbol function_parameters) [26169 26170]))                          )
                        (reparse-symbol indented_block_body) [26151 26356])
                    ("_make_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26375 26379])
                            ("args" variable nil (reparse-symbol function_parameters) [26381 26386])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [26388 26396]))                          )
                        (reparse-symbol indented_block_body) [26361 27389])
                    ("add_axes" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27437 27441])
                            ("args" variable nil (reparse-symbol function_parameters) [27443 27448])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27450 27458]))                          
                        :documentation "
        Add an axes at position *rect* [*left*, *bottom*, *width*,
        *height*] where all quantities are in fractions of figure
        width and height.  kwargs are legal
        :class:`~matplotlib.axes.Axes` kwargs plus *projection* which
        sets the projection type of the axes.  (For backward
        compatibility, ``polar=True`` may also be provided, which is
        equivalent to ``projection='polar'``).  Valid values for
        *projection* are: %(projection_names)s.  Some of these
        projections support  additional kwargs, which may be provided
        to :meth:`add_axes`. Typical usage::

            rect = l,b,w,h
            fig.add_axes(rect)
            fig.add_axes(rect, frameon=False, facecolor='g')
            fig.add_axes(rect, polar=True)
            fig.add_axes(rect, projection='polar')
            fig.add_axes(ax)

        If the figure already has an axes with the same parameters,
        then it will simply make that axes current and return it.  If
        you do not want this behavior, e.g., you want to force the
        creation of a new Axes, you must use a unique set of args and
        kwargs.  The axes :attr:`~matplotlib.axes.Axes.label`
        attribute has been exposed for this purpose.  e.g., if you want
        two axes that are otherwise identical to be added to the
        figure, make sure you give them unique labels::

            fig.add_axes(rect, label='axes1')
            fig.add_axes(rect, label='axes2')

        In rare circumstances, add_axes may be called with a single
        argument, an Axes instance already created in the present
        figure but not in the figure's list of axes.  For example,
        if an axes has been removed with :meth:`delaxes`, it can
        be restored with::

            fig.add_axes(ax)

        In all cases, the :class:`~matplotlib.axes.Axes` instance
        will be returned.

        In addition to *projection*, the following kwargs are supported:

        %(Axes)s
        ")
                        (reparse-symbol indented_block_body) [27394 30804])
                    ("add_subplot" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30855 30859])
                            ("args" variable nil (reparse-symbol function_parameters) [30861 30866])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [30868 30876]))                          
                        :documentation "
        Add a subplot.  Examples::

            fig.add_subplot(111)

            # equivalent but more general
            fig.add_subplot(1,1,1)

            # add subplot with red background
            fig.add_subplot(212, facecolor='r')

            # add a polar subplot
            fig.add_subplot(111, projection='polar')

            # add Subplot instance sub
            fig.add_subplot(sub)

        *kwargs* are legal :class:`~matplotlib.axes.Axes` kwargs plus
        *projection*, which chooses a projection type for the axes.
        (For backward compatibility, *polar=True* may also be
        provided, which is equivalent to *projection='polar'*). Valid
        values for *projection* are: %(projection_names)s.  Some of
        these projections
        support additional *kwargs*, which may be provided to
        :meth:`add_axes`.

        The :class:`~matplotlib.axes.Axes` instance will be returned.

        If the figure already has a subplot with key (*args*,
        *kwargs*) then it will simply make that subplot current and
        return it.

        .. seealso:: :meth:`~matplotlib.pyplot.subplot` for an
           explanation of the args.

        The following kwargs are supported:

        %(Axes)s
        ")
                        (reparse-symbol indented_block_body) [30809 34052])
                    ("__remove_ax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34073 34077])
                            ("ax" variable nil (reparse-symbol function_parameters) [34079 34081]))                          )
                        (reparse-symbol indented_block_body) [34057 34999])
                    ("clf" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35012 35016])
                            ("keep_observers" variable nil (reparse-symbol function_parameters) [35018 35032]))                          
                        :documentation "
        Clear the figure.

        Set *keep_observers* to True if, for example,
        a gui widget is tracking the axes in the figure.
        ")
                        (reparse-symbol indented_block_body) [35004 35865])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35880 35884]))                          
                        :documentation "
        Clear the figure -- synonym for :meth:`clf`.
        ")
                        (reparse-symbol indented_block_body) [35870 35983])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36022 36026])
                            ("renderer" variable nil (reparse-symbol function_parameters) [36028 36036]))                          
                        :documentation "
        Render the figure using :class:`matplotlib.backend_bases.RendererBase`
        instance *renderer*.
        ")
                        (reparse-symbol indented_block_body) [35988 37745])
                    ("draw_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37766 37770])
                            ("a" variable nil (reparse-symbol function_parameters) [37772 37773]))                          
                        :documentation "
        draw :class:`matplotlib.artist.Artist` instance *a* only --
        this is available only after the figure is drawn
        ")
                        (reparse-symbol indented_block_body) [37750 38160])
                    ("get_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38178 38182]))                          )
                        (reparse-symbol indented_block_body) [38165 38210])
                    ("legend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38226 38230])
                            ("handles" variable nil (reparse-symbol function_parameters) [38232 38239])
                            ("labels" variable nil (reparse-symbol function_parameters) [38241 38247])
                            ("args" variable nil (reparse-symbol function_parameters) [38249 38254])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [38256 38264]))                          )
                        (reparse-symbol indented_block_body) [38215 62576]))                  
                :type "class")
                nil [7425 62576]))          
      :file "figure.py"
      :pointmax 62576
      :fsize 62575
      :lastmodtime '(22681 7108 743473 0)
      :unmatched-syntax '((NAME 14257 . 14261) (IF 14288 . 14290) (ELSE 14315 . 14319) (INDENT_BLOCK 12584 . 12829) (NEWLINE 12583 . 12584) (COLON 12582 . 12583) (TRY 12487 . 12490) (AS 12576 . 12578)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
:mod:`~matplotlib.gridspec` is a module which specifies the location
of the subplot in the figure.

    ``GridSpec``
        specifies the geometry of the grid that a subplot will be
        placed. The number of rows and number of columns of the grid
        need to be set. Optionally, the subplot layout parameters
        (e.g., left, right, etc.) can be tuned.

    ``SubplotSpec``
        specifies the location of the subplot in the given *GridSpec*.


\"\"\"" code nil nil [1 468])
            ("" code nil nil [493 578])
            ("six" include nil nil [580 590])
            ("six.moves" include nil nil [591 616])
            ("matplotlib" include nil nil [618 635])
            ("rcParams" variable nil nil [636 666])
            ("matplotlib.transforms" include nil nil [668 711])
            ("numpy" include nil nil [713 731])
            ("warnings" include nil nil [732 747])
            ("GridSpecBase" type
               (:documentation "
    A base class of GridSpec that specifies the geometry of the grid
    that a subplot will be placed.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The number of rows and number of columns of the grid need to
        be set. Optionally, the ratio of heights and widths of rows and
        columns can be specified.
        \"\"\"" code nil (reparse-symbol indented_block_body) [1000 1190])
                            ("self, self" code nil (reparse-symbol indented_block_body) [1229 1269])
                            ("self" code nil (reparse-symbol indented_block_body) [1279 1316])
                            ("self" code nil (reparse-symbol indented_block_body) [1325 1360]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [915 919])
                            ("nrows" variable nil (reparse-symbol function_parameters) [921 926])
                            ("ncols" variable nil (reparse-symbol function_parameters) [928 933])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [952 965])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [972 984]))                          
                        :documentation "
        The number of rows and number of columns of the grid need to
        be set. Optionally, the ratio of heights and widths of rows and
        columns can be specified.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [902 1361])
                    ("get_geometry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1383 1387]))                          )
                        (reparse-symbol indented_block_body) [1366 1480])
                    ("get_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1508 1512])
                            ("fig" variable nil (reparse-symbol function_parameters) [1514 1517]))                          )
                        (reparse-symbol indented_block_body) [1485 1538])
                    ("new_subplotspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1563 1567])
                            ("loc" variable nil (reparse-symbol function_parameters) [1569 1572])
                            ("rowspan" variable nil (reparse-symbol function_parameters) [1574 1581])
                            ("colspan" variable nil (reparse-symbol function_parameters) [1585 1592]))                          
                        :documentation "
        create and return a SuplotSpec instance.
        ")
                        (reparse-symbol indented_block_body) [1543 1787])
                    ("set_width_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1813 1817])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [1819 1831]))                          )
                        (reparse-symbol indented_block_body) [1792 2103])
                    ("get_width_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2129 2133]))                          )
                        (reparse-symbol indented_block_body) [2108 2174])
                    ("set_height_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2201 2205])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [2207 2220]))                          )
                        (reparse-symbol indented_block_body) [2179 2494])
                    ("get_height_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2521 2525]))                          )
                        (reparse-symbol indented_block_body) [2499 2567])
                    ("get_grid_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2595 2599])
                            ("fig" variable nil (reparse-symbol function_parameters) [2601 2604]))                          
                        :documentation "
        return lists of bottom and top position of rows, left and
        right positions of columns.
        ")
                        (reparse-symbol indented_block_body) [2572 4523])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4544 4548])
                            ("key" variable nil (reparse-symbol function_parameters) [4550 4553]))                          
                        :documentation "
        create and return a SuplotSpec instance.
        ")
                        (reparse-symbol indented_block_body) [4528 5993]))                  
                :type "class")
                nil [749 5993])
            ("GridSpec" type
               (:documentation "
    A class that specifies the geometry of the grid that a subplot
    will be placed. The location of grid is determined by similar way
    as the SubplotParams.
    "
                :superclasses ("GridSpecBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The number of rows and number of columns of the
        grid need to be set. Optionally, the subplot layout parameters
        (e.g., left, right, etc.) can be tuned.
        \"\"\"" code nil (reparse-symbol indented_block_body) [6413 6603])
                            ("self" variable nil (reparse-symbol indented_block_body) [6642 6656])
                            ("self" variable nil (reparse-symbol indented_block_body) [6665 6683])
                            ("self" variable nil (reparse-symbol indented_block_body) [6692 6708])
                            ("self" variable nil (reparse-symbol indented_block_body) [6717 6729])
                            ("self" variable nil (reparse-symbol indented_block_body) [6738 6756])
                            ("self" variable nil (reparse-symbol indented_block_body) [6765 6783])
                            ("GridSpecBase" code nil (reparse-symbol indented_block_body) [6793 6950]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6222 6226])
                            ("nrows" variable nil (reparse-symbol function_parameters) [6228 6233])
                            ("ncols" variable nil (reparse-symbol function_parameters) [6235 6240])
                            ("left" variable nil (reparse-symbol function_parameters) [6259 6263])
                            ("bottom" variable nil (reparse-symbol function_parameters) [6270 6276])
                            ("right" variable nil (reparse-symbol function_parameters) [6283 6288])
                            ("top" variable nil (reparse-symbol function_parameters) [6295 6298])
                            ("wspace" variable nil (reparse-symbol function_parameters) [6322 6328])
                            ("hspace" variable nil (reparse-symbol function_parameters) [6335 6341])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [6365 6377])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [6384 6397]))                          
                        :documentation "
        The number of rows and number of columns of the
        grid need to be set. Optionally, the subplot layout parameters
        (e.g., left, right, etc.) can be tuned.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6209 6951])
                    ("_AllowedKeys" variable nil (reparse-symbol indented_block_body) [7049 7118])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7135 7139])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7141 7149]))                          
                        :documentation "
        Update the current values.  If any kwarg is None, default to
        the current value, if set, otherwise to rc.
        ")
                        (reparse-symbol indented_block_body) [7124 8688])
                    ("get_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8718 8722])
                            ("fig" variable nil (reparse-symbol function_parameters) [8724 8727]))                          
                        :documentation "
        return a dictionary of subplot layout parameters. The default
        parameters are from rcParams unless a figure attribute is set.
        ")
                        (reparse-symbol indented_block_body) [8695 9367])
                    ("locally_modified_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9408 9412]))                          )
                        (reparse-symbol indented_block_body) [9372 9481])
                    ("tight_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9504 9508])
                            ("fig" variable nil (reparse-symbol function_parameters) [9510 9513])
                            ("renderer" variable nil (reparse-symbol function_parameters) [9515 9523])
                            ("pad" variable nil (reparse-symbol function_parameters) [9530 9533])
                            ("h_pad" variable nil (reparse-symbol function_parameters) [9540 9545])
                            ("w_pad" variable nil (reparse-symbol function_parameters) [9552 9557])
                            ("rect" variable nil (reparse-symbol function_parameters) [9564 9568]))                          
                        :documentation "
        Adjust subplot parameters to give specified padding.

        Parameters:

        pad : float
            padding between the figure edge and the edges of subplots, as a fraction of the font-size.
        h_pad, w_pad : float
            padding (height/width) between edges of adjacent subplots.
            Defaults to `pad_inches`.
        rect : if rect is given, it is interpreted as a rectangle
            (left, bottom, right, top) in the normalized figure
            coordinate that the whole subplots area (including
            labels) will fit into. Default is (0, 0, 1, 1).
        ")
                        (reparse-symbol indented_block_body) [9487 11066]))                  
                :type "class")
                nil [5995 11066])
            ("GridSpecFromSubplotSpec" type
               (:documentation "
    GridSpec whose subplot layout parameters are inherited from the
    location specified by a given SubplotSpec.
    "
                :superclasses ("GridSpecBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The number of rows and number of columns of the grid need to
        be set. An instance of SubplotSpec is also needed to be set
        from which the layout parameters will be inherited. The wspace
        and hspace of the layout can be optionally specified or the
        default values (from the figure or rcParams) will be used.
        \"\"\"" code nil (reparse-symbol indented_block_body) [11420 11778])
                            ("self" variable nil (reparse-symbol indented_block_body) [11787 11806])
                            ("self" variable nil (reparse-symbol indented_block_body) [11815 11834])
                            ("self" variable nil (reparse-symbol indented_block_body) [11844 11877])
                            ("GridSpecBase" code nil (reparse-symbol indented_block_body) [11887 12044]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11261 11265])
                            ("nrows" variable nil (reparse-symbol function_parameters) [11267 11272])
                            ("ncols" variable nil (reparse-symbol function_parameters) [11274 11279])
                            ("subplot_spec" variable nil (reparse-symbol function_parameters) [11298 11310])
                            ("wspace" variable nil (reparse-symbol function_parameters) [11329 11335])
                            ("hspace" variable nil (reparse-symbol function_parameters) [11342 11348])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [11372 11385])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [11392 11404]))                          
                        :documentation "
        The number of rows and number of columns of the grid need to
        be set. An instance of SubplotSpec is also needed to be set
        from which the layout parameters will be inherited. The wspace
        and hspace of the layout can be optionally specified or the
        default values (from the figure or rcParams) will be used.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11248 12045])
                    ("get_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12074 12078])
                            ("fig" variable nil (reparse-symbol function_parameters) [12080 12083]))                          
                        :documentation "
        return a dictionary of subplot layout parameters.
        ")
                        (reparse-symbol indented_block_body) [12051 12990])
                    ("get_topmost_subplotspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13024 13028]))                          )
                        (reparse-symbol indented_block_body) [12996 13166]))                  
                :type "class")
                nil [11068 13166])
            ("SubplotSpec" type
               (:documentation "
    specifies the location of the subplot in the given *GridSpec*.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The subplot will occupy the num1-th cell of the given
        gridspec.  If num2 is provided, the subplot will span between
        num1-th cell and num2-th cell.

        The index stars from 0.
        \"\"\"" code nil (reparse-symbol indented_block_body) [13338 13557])
                            ("rows, cols" code nil (reparse-symbol indented_block_body) [13567 13603])
                            ("total" code nil (reparse-symbol indented_block_body) [13612 13629])
                            ("self" variable nil (reparse-symbol indented_block_body) [13639 13664])
                            ("self" variable nil (reparse-symbol indented_block_body) [13673 13689])
                            ("self" variable nil (reparse-symbol indented_block_body) [13698 13714]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13296 13300])
                            ("gridspec" variable nil (reparse-symbol function_parameters) [13302 13310])
                            ("num1" variable nil (reparse-symbol function_parameters) [13312 13316])
                            ("num2" variable nil (reparse-symbol function_parameters) [13318 13322]))                          
                        :documentation "
        The subplot will occupy the num1-th cell of the given
        gridspec.  If num2 is provided, the subplot will span between
        num1-th cell and num2-th cell.

        The index stars from 0.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13283 13715])
                    ("get_gridspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13737 13741]))                          )
                        (reparse-symbol indented_block_body) [13720 13774])
                    ("get_geometry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13797 13801]))                          
                        :documentation "
        get the subplot geometry, e.g., 2,2,3. Unlike SuplorParams,
        index is 0-based
        ")
                        (reparse-symbol indented_block_body) [13780 14025])
                    ("get_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14048 14052])
                            ("fig" variable nil (reparse-symbol function_parameters) [14054 14057])
                            ("return_all" variable nil (reparse-symbol function_parameters) [14059 14069]))                          
                        :documentation "
        update the subplot position from fig.subplotpars
        ")
                        (reparse-symbol indented_block_body) [14031 15252])
                    ("get_topmost_subplotspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15286 15290]))                          )
                        (reparse-symbol indented_block_body) [15258 15556])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15572 15576])
                            ("other" variable nil (reparse-symbol function_parameters) [15578 15583]))                          )
                        (reparse-symbol indented_block_body) [15561 15982])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16000 16004]))                          )
                        (reparse-symbol indented_block_body) [15987 16113]))                  
                :type "class")
                nil [13168 16113]))          
      :file "gridspec.py"
      :pointmax 16113
      :fsize 16112
      :lastmodtime '(22681 7108 751473 0)
      :unmatched-syntax '((FROM 10206 . 10210) (PERIOD 10211 . 10212)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The image module supports basic image loading, rescaling and display
operations.

\"\"\"" code nil nil [1 90])
            ("" code nil nil [114 199])
            ("six" include nil nil [201 211])
            ("six.moves.urllib.parse" include nil nil [212 255])
            ("six.moves.urllib.request" include nil nil [256 300])
            ("io" include nil nil [301 323])
            ("math" include nil nil [325 346])
            ("os" include nil nil [347 356])
            ("numpy" include nil nil [358 376])
            ("matplotlib" include nil nil [378 409])
            ("matplotlib.artist" include nil nil [410 445])
            ("matplotlib.artist" include nil nil [446 495])
            ("matplotlib.colors" include nil nil [496 531])
            ("matplotlib.cm" include nil nil [532 558])
            ("matplotlib.cbook" include nil nil [559 591])
            ("matplotlib._image" include nil nil [663 697])
            ("matplotlib._png" include nil nil [698 728])
            ("matplotlib._image" include nil nil [822 853])
            ("" code nil nil [889 1001])
            ("_interpd_" variable nil nil [1051 1664])
            ("interpolations_names" variable nil nil [1666 1717])
            ("composite_images" function
               (:documentation "
    Composite a number of RGBA images into one.  The images are
    composited in the order in which they appear in the `images` list.

    Parameters
    ----------
    images : list of Images
        Each must have a `make_image` method.  For each image,
        `can_composite` should return `True`, though this is not
        enforced by this function.  Each image must have a purely
        affine transformation with no shear.

    renderer : RendererBase instance

    magnification : float
        The additional magnification to apply for the renderer in use.

    Returns
    -------
    tuple : image, offset_x, offset_y
        Returns the tuple:

        - image: A numpy array of the same type as the input images.

        - offset_x, offset_y: The offset of the image (left, bottom)
          in the output figure.
    "
                :arguments 
                  ( ("images" variable nil (reparse-symbol function_parameters) [1741 1747])
                    ("renderer" variable nil (reparse-symbol function_parameters) [1749 1757])
                    ("magnification" variable nil (reparse-symbol function_parameters) [1759 1772]))                  )
                nil [1720 3574])
            ("_draw_list_compositing_images" function
               (:documentation "
    Draw a sorted list of artists, compositing images into a single
    image where possible.

    For internal matplotlib use only: It is here to reduce duplication
    between `Figure.draw` and `Axes.draw`, but otherwise should not be
    generally useful.
    "
                :arguments 
                  ( ("renderer" variable nil (reparse-symbol function_parameters) [3619 3627])
                    ("parent" variable nil (reparse-symbol function_parameters) [3629 3635])
                    ("dsu" variable nil (reparse-symbol function_parameters) [3637 3640])
                    ("suppress_composite" variable nil (reparse-symbol function_parameters) [3642 3660]))                  )
                nil [3576 5267])
            ("_rgb_to_rgba" function
               (:documentation "
    Convert an RGB image to RGBA, as required by the image resample C++
    extension.
    "
                :arguments 
                  ( ("A" variable nil (reparse-symbol function_parameters) [5286 5287]))                  )
                nil [5269 5593])
            ("_ImageBase" type
               (:superclasses ("martist.Artist" "cm.ScalarMappable")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [5652 5662])
                    ("_interpd" variable nil (reparse-symbol indented_block_body) [5773 5793])
                    ("_interpdr" variable nil (reparse-symbol indented_block_body) [5824 5887])
                    ("iterpnames" variable nil (reparse-symbol indented_block_body) [5892 5925])
                    ("set_cmap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5968 5972])
                            ("cmap" variable nil (reparse-symbol function_parameters) [5974 5978]))                          )
                        (reparse-symbol indented_block_body) [5955 6054])
                    ("set_norm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6072 6076])
                            ("norm" variable nil (reparse-symbol function_parameters) [6078 6082]))                          )
                        (reparse-symbol indented_block_body) [6059 6158])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6175 6179]))                          )
                        (reparse-symbol indented_block_body) [6163 6253])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        interpolation and cmap default to their rc settings

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        extent is data axes (left, right, bottom, top) for making image plots
        registered with data plots.  Default is to label the pixel
        centers with the zero-based row and column indices.

        Additional kwargs are matplotlib.artist properties

        \"\"\"" code nil (reparse-symbol indented_block_body) [6554 7008])
                            ("martist" code nil (reparse-symbol indented_block_body) [7017 7046])
                            ("cm" code nil (reparse-symbol indented_block_body) [7055 7099])
                            ("self" variable nil (reparse-symbol indented_block_body) [7108 7130])
                            ("if" code nil (reparse-symbol indented_block_body) [7139 7204])
                            ("self" variable nil (reparse-symbol indented_block_body) [7212 7232])
                            ("self" code nil (reparse-symbol indented_block_body) [7241 7272])
                            ("self" code nil (reparse-symbol indented_block_body) [7281 7310])
                            ("self" code nil (reparse-symbol indented_block_body) [7319 7356])
                            ("self" code nil (reparse-symbol indented_block_body) [7365 7392])
                            ("self" variable nil (reparse-symbol indented_block_body) [7401 7415])
                            ("self" variable nil (reparse-symbol indented_block_body) [7425 7445])
                            ("self" code nil (reparse-symbol indented_block_body) [7455 7474]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6271 6275])
                            ("ax" variable nil (reparse-symbol function_parameters) [6277 6279])
                            ("cmap" variable nil (reparse-symbol function_parameters) [6298 6302])
                            ("norm" variable nil (reparse-symbol function_parameters) [6326 6330])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [6354 6367])
                            ("origin" variable nil (reparse-symbol function_parameters) [6391 6397])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [6421 6431])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [6452 6461])
                            ("resample" variable nil (reparse-symbol function_parameters) [6484 6492])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6517 6525]))                          
                        :documentation "
        interpolation and cmap default to their rc settings

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        extent is data axes (left, right, bottom, top) for making image plots
        registered with data plots.  Default is to label the pixel
        centers with the zero-based row and column indices.

        Additional kwargs are matplotlib.artist properties

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6258 7475])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7497 7501]))                          )
                        (reparse-symbol indented_block_body) [7480 7666])
                    ("get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7684 7688]))                          
                        :documentation "Get the numrows, numcols of the input image")
                        (reparse-symbol indented_block_body) [7671 7880])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7899 7903])
                            ("alpha" variable nil (reparse-symbol function_parameters) [7905 7910]))                          
                        :documentation "
        Set the alpha value used for blending - not supported on
        all backends

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [7885 8122])
                    ("changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8139 8143]))                          
                        :documentation "
        Call this whenever the mappable is changed so observers can
        update state
        ")
                        (reparse-symbol indented_block_body) [8127 8359])
                    ("_make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8380 8384])
                            ("A" variable nil (reparse-symbol function_parameters) [8386 8387])
                            ("in_bbox" variable nil (reparse-symbol function_parameters) [8389 8396])
                            ("out_bbox" variable nil (reparse-symbol function_parameters) [8398 8406])
                            ("clip_bbox" variable nil (reparse-symbol function_parameters) [8408 8417])
                            ("magnification" variable nil (reparse-symbol function_parameters) [8419 8432])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [8458 8467])
                            ("round_to_pixel_border" variable nil (reparse-symbol function_parameters) [8475 8496]))                          
                        :documentation "
        Normalize, rescale and color the image `A` from the given
        in_bbox (in data space), to the given out_bbox (in pixel
        space) clipped to the given clip_bbox (also in pixel space),
        and magnified by the magnification factor.

        `A` may be a greyscale image (MxN) with a dtype of `float32`,
        `float64`, `uint16` or `uint8`, or an RGBA image (MxNx4) with
        a dtype of `float32`, `float64`, or `uint8`.

        If `unsampled` is True, the image will not be scaled, but an
        appropriate affine transformation will be returned instead.

        If `round_to_pixel_border` is True, the output image size will
        be rounded to the nearest pixel boundary.  This makes the
        images align correctly with the axes.  It should not be used
        in cases where you want exact scaling, however, such as
        FigureImage.

        Returns the resulting (image, x, y, trans), where (x, y) is
        the upper left corner of the result in pixel space, and
        `trans` is the affine transformation from the image to pixel
        space.
        ")
                        (reparse-symbol indented_block_body) [8364 16238])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16258 16262])
                            ("renderer" variable nil (reparse-symbol function_parameters) [16264 16272])
                            ("magnification" variable nil (reparse-symbol function_parameters) [16274 16287])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [16293 16302]))                          )
                        (reparse-symbol indented_block_body) [16243 16383])
                    ("_draw_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16414 16418])
                            ("renderer" variable nil (reparse-symbol function_parameters) [16420 16428])
                            ("gc" variable nil (reparse-symbol function_parameters) [16430 16432]))                          
                        :documentation "
        draw unsampled image. The renderer should support a draw_image method
        with scale parameter.
        ")
                        (reparse-symbol indented_block_body) [16388 16797])
                    ("_check_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16829 16833])
                            ("renderer" variable nil (reparse-symbol function_parameters) [16835 16843]))                          
                        :documentation "
        return True if the image is better to be drawn unsampled.
        The derived class needs to override it.
        ")
                        (reparse-symbol indented_block_body) [16802 17005])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17044 17048])
                            ("renderer" variable nil (reparse-symbol function_parameters) [17050 17058])
                            ("args" variable nil (reparse-symbol function_parameters) [17060 17065])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17067 17075]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17010 17712])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17730 17734])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [17736 17746]))                          
                        :documentation "
        Test whether the mouse event occured within the image.
        ")
                        (reparse-symbol indented_block_body) [17717 18620])
                    ("write_png" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18639 18643])
                            ("fname" variable nil (reparse-symbol function_parameters) [18645 18650]))                          
                        :documentation "Write the image to png file with fname")
                        (reparse-symbol indented_block_body) [18625 18798])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18816 18820])
                            ("A" variable nil (reparse-symbol function_parameters) [18822 18823]))                          
                        :documentation "
        Set the image array

        ACCEPTS: numpy/PIL Image A
        ")
                        (reparse-symbol indented_block_body) [18803 19562])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19581 19585])
                            ("A" variable nil (reparse-symbol function_parameters) [19587 19588]))                          
                        :documentation "
        Retained for backwards compatibility - use set_data instead

        ACCEPTS: numpy array A or PIL Image")
                        (reparse-symbol indented_block_body) [19567 19896])
                    ("get_interpolation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19923 19927]))                          
                        :documentation "
        Return the interpolation method the image uses when resizing.

        One of 'nearest', 'bilinear', 'bicubic', 'spline16', 'spline36',
        'hanning', 'hamming', 'hermite', 'kaiser', 'quadric', 'catrom',
        'gaussian', 'bessel', 'mitchell', 'sinc', 'lanczos', or 'none'.

        ")
                        (reparse-symbol indented_block_body) [19901 20278])
                    ("set_interpolation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20305 20309])
                            ("s" variable nil (reparse-symbol function_parameters) [20311 20312]))                          
                        :documentation "
        Set the interpolation method the image uses when resizing.

        if None, use a value from rc setting. If 'none', the image is
        shown as is without interpolating. 'none' is only supported in
        agg, ps and pdf backends and will fall back to 'nearest' mode
        for other backends.

        ACCEPTS: ['nearest' | 'bilinear' | 'bicubic' | 'spline16' |
          'spline36' | 'hanning' | 'hamming' | 'hermite' | 'kaiser' |
          'quadric' | 'catrom' | 'gaussian' | 'bessel' | 'mitchell' |
          'sinc' | 'lanczos' | 'none' |]

        ")
                        (reparse-symbol indented_block_body) [20283 21139])
                    ("can_composite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21162 21166]))                          
                        :documentation "
        Returns `True` if the image can be composited with its neighbors.
        ")
                        (reparse-symbol indented_block_body) [21144 21431])
                    ("set_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21453 21457])
                            ("v" variable nil (reparse-symbol function_parameters) [21459 21460]))                          
                        :documentation "
        Set whether or not image resampling is used

        ACCEPTS: True|False
        ")
                        (reparse-symbol indented_block_body) [21436 21686])
                    ("get_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21708 21712]))                          
                        :documentation "Return the image resample boolean")
                        (reparse-symbol indented_block_body) [21691 21793])
                    ("set_filternorm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21817 21821])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [21823 21833]))                          
                        :documentation "
        Set whether the resize filter norms the weights -- see
        help for imshow

        ACCEPTS: 0 or 1
        ")
                        (reparse-symbol indented_block_body) [21798 22102])
                    ("get_filternorm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22126 22130]))                          
                        :documentation "Return the filternorm setting")
                        (reparse-symbol indented_block_body) [22107 22209])
                    ("set_filterrad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22232 22236])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [22238 22247]))                          
                        :documentation "
        Set the resize filter radius only applicable to some
        interpolation schemes -- see help for imshow

        ACCEPTS: positive float
        ")
                        (reparse-symbol indented_block_body) [22214 22599])
                    ("get_filterrad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22622 22626]))                          
                        :documentation "return the filterrad setting")
                        (reparse-symbol indented_block_body) [22604 22703]))                  
                :type "class")
                nil [5595 22703])
            ("AxesImage" type
               (:superclasses ("_ImageBase")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22750 22754]))                          )
                        (reparse-symbol indented_block_body) [22738 22828])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        interpolation and cmap default to their rc settings

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        extent is data axes (left, right, bottom, top) for making image plots
        registered with data plots.  Default is to label the pixel
        centers with the zero-based row and column indices.

        Additional kwargs are matplotlib.artist properties

        \"\"\"" code nil (reparse-symbol indented_block_body) [23160 23614])
                            ("self" variable nil (reparse-symbol indented_block_body) [23624 23645])
                            ("super" code nil (reparse-symbol indented_block_body) [23655 23947]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22846 22850])
                            ("ax" variable nil (reparse-symbol function_parameters) [22852 22854])
                            ("cmap" variable nil (reparse-symbol function_parameters) [22873 22877])
                            ("norm" variable nil (reparse-symbol function_parameters) [22901 22905])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [22929 22942])
                            ("origin" variable nil (reparse-symbol function_parameters) [22966 22972])
                            ("extent" variable nil (reparse-symbol function_parameters) [22996 23002])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [23026 23036])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [23057 23066])
                            ("resample" variable nil (reparse-symbol function_parameters) [23089 23097])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23122 23130]))                          
                        :documentation "
        interpolation and cmap default to their rc settings

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        extent is data axes (left, right, bottom, top) for making image plots
        registered with data plots.  Default is to label the pixel
        centers with the zero-based row and column indices.

        Additional kwargs are matplotlib.artist properties

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22833 23948])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23975 23979])
                            ("renderer" variable nil (reparse-symbol function_parameters) [23981 23989]))                          )
                        (reparse-symbol indented_block_body) [23953 24139])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24159 24163])
                            ("renderer" variable nil (reparse-symbol function_parameters) [24165 24173])
                            ("magnification" variable nil (reparse-symbol function_parameters) [24175 24188])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [24194 24203]))                          )
                        (reparse-symbol indented_block_body) [24144 24596])
                    ("_check_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24628 24632])
                            ("renderer" variable nil (reparse-symbol function_parameters) [24634 24642]))                          
                        :documentation "
        return True if the image is better to be drawn unsampled.
        ")
                        (reparse-symbol indented_block_body) [24601 24880])
                    ("set_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24900 24904])
                            ("extent" variable nil (reparse-symbol function_parameters) [24906 24912]))                          
                        :documentation "
        extent is data axes (left, right, bottom, top) for making image plots

        This updates ax.dataLim, and, if autoscaling, sets viewLim
        to tightly fit the image, regardless of dataLim.  Autoscaling
        state is not changed, so following this with ax.autoscale_view
        will redo the autoscaling in accord with dataLim.

        ")
                        (reparse-symbol indented_block_body) [24885 25745])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25765 25769]))                          
                        :documentation "Get the image extent: left, right, bottom, top")
                        (reparse-symbol indented_block_body) [25750 26164])
                    ("get_cursor_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26189 26193])
                            ("event" variable nil (reparse-symbol function_parameters) [26195 26200]))                          
                        :documentation "Get the cursor data for a given event")
                        (reparse-symbol indented_block_body) [26169 26900]))                  
                :type "class")
                nil [22705 26900])
            ("NonUniformImage" type
               (:superclasses ("AxesImage")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        kwargs are identical to those for AxesImage, except
        that 'nearest' and 'bilinear' are the only supported 'interpolation'
        options.
        \"\"\"" code nil (reparse-symbol indented_block_body) [26982 27151])
                            ("interp" variable nil (reparse-symbol indented_block_body) [27160 27207])
                            ("super" code nil (reparse-symbol indented_block_body) [27216 27267])
                            ("self" code nil (reparse-symbol indented_block_body) [27276 27306]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26953 26957])
                            ("ax" variable nil (reparse-symbol function_parameters) [26959 26961])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [26963 26971]))                          
                        :documentation "
        kwargs are identical to those for AxesImage, except
        that 'nearest' and 'bilinear' are the only supported 'interpolation'
        options.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26940 27307])
                    ("_check_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27339 27343])
                            ("renderer" variable nil (reparse-symbol function_parameters) [27345 27353]))                          
                        :documentation "
        return False. Do not use unsampled image.
        ")
                        (reparse-symbol indented_block_body) [27312 27451])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27471 27475])
                            ("renderer" variable nil (reparse-symbol function_parameters) [27477 27485])
                            ("magnification" variable nil (reparse-symbol function_parameters) [27487 27500])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [27506 27515]))                          )
                        (reparse-symbol indented_block_body) [27456 28933])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28951 28955])
                            ("x" variable nil (reparse-symbol function_parameters) [28957 28958])
                            ("y" variable nil (reparse-symbol function_parameters) [28960 28961])
                            ("A" variable nil (reparse-symbol function_parameters) [28963 28964]))                          
                        :documentation "
        Set the grid for the pixel centers, and the pixel values.

          *x* and *y* are monotonic 1-D ndarrays of lengths N and M,
             respectively, specifying pixel centers

          *A* is an (M,N) ndarray or masked array of values to be
            colormapped, or a (M,N,3) RGB array, or a (M,N,4) RGBA
            array.
        ")
                        (reparse-symbol indented_block_body) [28938 30094])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30113 30117])
                            ("args" variable nil (reparse-symbol function_parameters) [30119 30124]))                          )
                        (reparse-symbol indented_block_body) [30099 30185])
                    ("set_interpolation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30212 30216])
                            ("s" variable nil (reparse-symbol function_parameters) [30218 30219]))                          )
                        (reparse-symbol indented_block_body) [30190 30476])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30496 30500]))                          )
                        (reparse-symbol indented_block_body) [30481 30653])
                    ("set_filternorm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30677 30681])
                            ("s" variable nil (reparse-symbol function_parameters) [30683 30684]))                          )
                        (reparse-symbol indented_block_body) [30658 30700])
                    ("set_filterrad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30723 30727])
                            ("s" variable nil (reparse-symbol function_parameters) [30729 30730]))                          )
                        (reparse-symbol indented_block_body) [30705 30746])
                    ("set_norm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30764 30768])
                            ("norm" variable nil (reparse-symbol function_parameters) [30770 30774]))                          )
                        (reparse-symbol indented_block_body) [30751 30935])
                    ("set_cmap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30953 30957])
                            ("cmap" variable nil (reparse-symbol function_parameters) [30959 30963]))                          )
                        (reparse-symbol indented_block_body) [30940 31124]))                  
                :type "class")
                nil [26902 31124])
            ("PcolorImage" type
               (:documentation "
    Make a pcolor-style plot with an irregular rectangular grid.

    This uses a variation of the original irregular image code,
    and it is used by pcolorfast for the corresponding grid type.
    "
                :superclasses ("AxesImage")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        cmap defaults to its rc setting

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        Additional kwargs are matplotlib.artist properties

        \"\"\"" code nil (reparse-symbol indented_block_body) [31580 31808])
                            ("super" code nil (reparse-symbol indented_block_body) [31817 31876])
                            ("self" code nil (reparse-symbol indented_block_body) [31885 31904])
                            ("if" code nil (reparse-symbol indented_block_body) [31913 31966]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31385 31389])
                            ("ax" variable nil (reparse-symbol function_parameters) [31391 31393])
                            ("x" variable nil (reparse-symbol function_parameters) [31412 31413])
                            ("y" variable nil (reparse-symbol function_parameters) [31437 31438])
                            ("A" variable nil (reparse-symbol function_parameters) [31462 31463])
                            ("cmap" variable nil (reparse-symbol function_parameters) [31487 31491])
                            ("norm" variable nil (reparse-symbol function_parameters) [31515 31519])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [31543 31551]))                          
                        :documentation "
        cmap defaults to its rc setting

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        Additional kwargs are matplotlib.artist properties

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31372 31966])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31986 31990])
                            ("renderer" variable nil (reparse-symbol function_parameters) [31992 32000])
                            ("magnification" variable nil (reparse-symbol function_parameters) [32002 32015])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [32021 32030]))                          )
                        (reparse-symbol indented_block_body) [31971 33229])
                    ("_check_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33261 33265])
                            ("renderer" variable nil (reparse-symbol function_parameters) [33267 33275]))                          )
                        (reparse-symbol indented_block_body) [33234 33299])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33317 33321])
                            ("x" variable nil (reparse-symbol function_parameters) [33323 33324])
                            ("y" variable nil (reparse-symbol function_parameters) [33326 33327])
                            ("A" variable nil (reparse-symbol function_parameters) [33329 33330]))                          
                        :documentation "
        Set the grid for the rectangle boundaries, and the data values.

          *x* and *y* are monotonic 1-D ndarrays of lengths N+1 and M+1,
             respectively, specifying rectangle boundaries.  If None,
             they will be created as uniform arrays from 0 through N
             and 0 through M, respectively.

          *A* is an (M,N) ndarray or masked array of values to be
            colormapped, or a (M,N,3) RGB array, or a (M,N,4) RGBA
            array.

        ")
                        (reparse-symbol indented_block_body) [33304 35246])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35265 35269])
                            ("args" variable nil (reparse-symbol function_parameters) [35271 35276]))                          )
                        (reparse-symbol indented_block_body) [35251 35337])
                    ("get_cursor_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35362 35366])
                            ("event" variable nil (reparse-symbol function_parameters) [35368 35373]))                          
                        :documentation "Get the cursor data for a given event")
                        (reparse-symbol indented_block_body) [35342 35773]))                  
                :type "class")
                nil [31126 35773])
            ("FigureImage" type
               (:superclasses ("_ImageBase")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [35810 35820])
                    ("_interpolation" variable nil (reparse-symbol indented_block_body) [35826 35852])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        kwargs are an optional list of Artist keyword args
        \"\"\"" code nil (reparse-symbol indented_block_body) [36079 36265])
                            ("super" code nil (reparse-symbol indented_block_body) [36274 36408])
                            ("self" variable nil (reparse-symbol indented_block_body) [36417 36434])
                            ("self" variable nil (reparse-symbol indented_block_body) [36443 36460])
                            ("self" variable nil (reparse-symbol indented_block_body) [36469 36486])
                            ("self" code nil (reparse-symbol indented_block_body) [36495 36514])
                            ("self" variable nil (reparse-symbol indented_block_body) [36523 36547]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35871 35875])
                            ("fig" variable nil (reparse-symbol function_parameters) [35877 35880])
                            ("cmap" variable nil (reparse-symbol function_parameters) [35899 35903])
                            ("norm" variable nil (reparse-symbol function_parameters) [35927 35931])
                            ("offsetx" variable nil (reparse-symbol function_parameters) [35955 35962])
                            ("offsety" variable nil (reparse-symbol function_parameters) [35983 35990])
                            ("origin" variable nil (reparse-symbol function_parameters) [36011 36017])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [36041 36049]))                          
                        :documentation "
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        kwargs are an optional list of Artist keyword args
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35858 36548])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36568 36572]))                          
                        :documentation "Get the image extent: left, right, bottom, top")
                        (reparse-symbol indented_block_body) [36553 36789])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36809 36813])
                            ("renderer" variable nil (reparse-symbol function_parameters) [36815 36823])
                            ("magnification" variable nil (reparse-symbol function_parameters) [36825 36838])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [36844 36853]))                          )
                        (reparse-symbol indented_block_body) [36794 37211])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37229 37233])
                            ("A" variable nil (reparse-symbol function_parameters) [37235 37236]))                          
                        :documentation "Set the image array.")
                        (reparse-symbol indented_block_body) [37216 37419]))                  
                :type "class")
                nil [35775 37419])
            ("BboxImage" type
               (:documentation "The Image class whose size is determined by the given bbox."
                :superclasses ("_ImageBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        interp_at_native is a flag that determines whether or not
        interpolation should still be applied when the image is
        displayed at its native resolution.  A common use case for this
        is when displaying an image for annotational purposes; it is
        treated similarly to Photoshop (interpolation is only used when
        displaying the image at non-native resolutions).


        kwargs are an optional list of Artist keyword args

        \"\"\"" code nil (reparse-symbol indented_block_body) [37863 38452])
                            ("super" code nil (reparse-symbol indented_block_body) [38461 38755])
                            ("self" variable nil (reparse-symbol indented_block_body) [38765 38781])
                            ("self" variable nil (reparse-symbol indented_block_body) [38790 38830])
                            ("self" variable nil (reparse-symbol indented_block_body) [38839 38876]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37537 37541])
                            ("bbox" variable nil (reparse-symbol function_parameters) [37543 37547])
                            ("cmap" variable nil (reparse-symbol function_parameters) [37566 37570])
                            ("norm" variable nil (reparse-symbol function_parameters) [37594 37598])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [37622 37635])
                            ("origin" variable nil (reparse-symbol function_parameters) [37659 37665])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [37689 37699])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [37720 37729])
                            ("resample" variable nil (reparse-symbol function_parameters) [37752 37760])
                            ("interp_at_native" variable nil (reparse-symbol function_parameters) [37785 37801])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [37825 37833]))                          
                        :documentation "
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        interp_at_native is a flag that determines whether or not
        interpolation should still be applied when the image is
        displayed at its native resolution.  A common use case for this
        is when displaying an image for annotational purposes; it is
        treated similarly to Photoshop (interpolation is only used when
        displaying the image at non-native resolutions).


        kwargs are an optional list of Artist keyword args

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37524 38877])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38900 38904]))                          )
                        (reparse-symbol indented_block_body) [38882 38938])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38965 38969])
                            ("renderer" variable nil (reparse-symbol function_parameters) [38971 38979]))                          )
                        (reparse-symbol indented_block_body) [38943 39291])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39309 39313])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [39315 39325]))                          
                        :documentation "Test whether the mouse event occured within the image.")
                        (reparse-symbol indented_block_body) [39296 39725])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39745 39749])
                            ("renderer" variable nil (reparse-symbol function_parameters) [39751 39759])
                            ("magnification" variable nil (reparse-symbol function_parameters) [39761 39774])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [39780 39789]))                          )
                        (reparse-symbol indented_block_body) [39730 40258]))                  
                :type "class")
                nil [37421 40258])
            ("imread" function
               (:documentation "
    Read an image from a file into an array.

    *fname* may be a string path, a valid URL, or a Python
    file-like object.  If using a file object, it must be opened in binary
    mode.

    If *format* is provided, will try to read file of that type,
    otherwise the format is deduced from the filename.  If nothing can
    be deduced, PNG is tried.

    Return value is a :class:`numpy.array`.  For grayscale images, the
    return array is MxN.  For RGB images, the return value is MxNx3.
    For RGBA images the return value is MxNx4.

    matplotlib can only read PNGs natively, but if `PIL
    <http://www.pythonware.com/products/pil/>`_ is installed, it will
    use it to load the image and return an array (if possible) which
    can be used with :func:`~matplotlib.pyplot.imshow`. Note, URL strings
    may not be compatible with PIL. Check the PIL documentation for more
    information.
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [40271 40276])
                    ("format" variable nil (reparse-symbol function_parameters) [40278 40284]))                  )
                nil [40260 42913])
            ("imsave" function
               (:documentation "
    Save an array as in image file.

    The output formats available depend on the backend being used.

    Arguments:
      *fname*:
        A string containing a path to a filename, or a Python file-like object.
        If *format* is *None* and *fname* is a string, the output
        format is deduced from the extension of the filename.
      *arr*:
        An MxN (luminance), MxNx3 (RGB) or MxNx4 (RGBA) array.
    Keyword arguments:
      *vmin*/*vmax*: [ None | scalar ]
        *vmin* and *vmax* set the color scaling for the image by fixing the
        values that map to the colormap color limits. If either *vmin*
        or *vmax* is None, that limit is determined from the *arr*
        min/max value.
      *cmap*:
        cmap is a colors.Colormap instance, e.g., cm.jet.
        If None, default to the rc image.cmap value.
      *format*:
        One of the file extensions supported by the active
        backend.  Most backends support png, pdf, ps, eps and svg.
      *origin*
        [ 'upper' | 'lower' ] Indicates where the [0,0] index of
        the array is in the upper left or lower left corner of
        the axes. Defaults to the rc image.origin value.
      *dpi*
        The DPI to store in the metadata of the file.  This does not affect the
        resolution of the output image.
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [42926 42931])
                    ("arr" variable nil (reparse-symbol function_parameters) [42933 42936])
                    ("vmin" variable nil (reparse-symbol function_parameters) [42938 42942])
                    ("vmax" variable nil (reparse-symbol function_parameters) [42949 42953])
                    ("cmap" variable nil (reparse-symbol function_parameters) [42960 42964])
                    ("format" variable nil (reparse-symbol function_parameters) [42971 42977])
                    ("origin" variable nil (reparse-symbol function_parameters) [42995 43001])
                    ("dpi" variable nil (reparse-symbol function_parameters) [43008 43011]))                  )
                nil [42915 45059])
            ("pil_to_array" function
               (:documentation "
    Load a PIL image and return it as a numpy array.  For grayscale
    images, the return array is MxN.  For RGB images, the return value
    is MxNx3.  For RGBA images the return value is MxNx4
    "
                :arguments 
                  ( ("pilImage" variable nil (reparse-symbol function_parameters) [45078 45086]))                  )
                nil [45061 46705])
            ("thumbnail" function
               (:documentation "
    make a thumbnail of image in *infile* with output filename
    *thumbfile*.

      *infile* the image file -- must be PNG or Pillow-readable if you
         have `Pillow <http://python-pillow.org/>`_ installed

      *thumbfile*
        the thumbnail filename

      *scale*
        the scale factor for the thumbnail

      *interpolation*
        the interpolation scheme used in the resampling


      *preview*
        if True, the default backend (presumably a user interface
        backend) will be used which will cause a figure to be raised
        if :func:`~matplotlib.pyplot.show` is called.  If it is False,
        a pure image backend will be used depending on the extension,
        'png'->FigureCanvasAgg, 'pdf'->FigureCanvasPdf,
        'svg'->FigureCanvasSVG


    See examples/misc/image_thumbnail.py.

    .. htmlonly::

        :ref:`misc-image_thumbnail`

    Return value is the figure instance containing the thumbnail

    "
                :arguments 
                  ( ("infile" variable nil (reparse-symbol function_parameters) [46721 46727])
                    ("thumbfile" variable nil (reparse-symbol function_parameters) [46729 46738])
                    ("scale" variable nil (reparse-symbol function_parameters) [46740 46745])
                    ("interpolation" variable nil (reparse-symbol function_parameters) [46751 46764])
                    ("preview" variable nil (reparse-symbol function_parameters) [46791 46798]))                  )
                nil [46707 49269]))          
      :file "image.py"
      :pointmax 49269
      :fsize 49268
      :lastmodtime '(22681 7108 707473 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The rcsetup module contains the default values and the validation code for
customization using matplotlib's rc settings.

Each rc setting is assigned a default value and a function used to validate
any attempted changes to that setting. The default values and validation
functions are defined in the rcsetup module, and are used to construct the
rcParams global object which stores the settings and is referenced throughout
matplotlib.

These default values should be consistent with the default matplotlibrc file
that actually reflects the values given here. Any additions or deletions to the
parameter set listed here should also be visited to the
:file:`matplotlibrc.template` in matplotlib's root source directory.
\"\"\"" code nil nil [1 727])
            ("" code nil nil [751 836])
            ("six" include nil nil [838 848])
            ("functools" include nil nil [850 878])
            ("operator" include nil nil [879 894])
            ("os" include nil nil [895 904])
            ("warnings" include nil nil [905 920])
            ("re" include nil nil [921 930])
            ("try" code nil nil [932 1036])
            ("matplotlib.fontconfig_pattern" include nil nil [1036 1102])
            ("matplotlib.colors" include nil nil [1103 1146])
            ("cycler" include nil nil [1216 1260])
            ("interactive_bk" variable nil nil [1472 1651])
            ("non_interactive_bk" variable nil nil [1654 1759])
            ("all_backends" code nil nil [1760 1810])
            ("ValidateInStrings" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("'valid is a list of legal strings'" code nil (reparse-symbol indented_block_body) [1908 1942])
                            ("self" variable nil (reparse-symbol indented_block_body) [1951 1965])
                            ("self" variable nil (reparse-symbol indented_block_body) [1974 2002])
                            ("func" function (:arguments 
                              ( ("s" variable nil (reparse-symbol function_parameters) [2021 2022]))                              ) (reparse-symbol indented_block_body) [2012 2128])
                            ("self" variable nil (reparse-symbol indented_block_body) [2136 2184]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1863 1867])
                            ("key" variable nil (reparse-symbol function_parameters) [1869 1872])
                            ("valid" variable nil (reparse-symbol function_parameters) [1874 1879])
                            ("ignorecase" variable nil (reparse-symbol function_parameters) [1881 1891]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1850 2185])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2203 2207])
                            ("s" variable nil (reparse-symbol function_parameters) [2209 2210]))                          )
                        (reparse-symbol indented_block_body) [2190 2481]))                  
                :type "class")
                nil [1813 2481])
            ("_listify_validator" function (:arguments 
              ( ("scalar_validator" variable nil (reparse-symbol function_parameters) [2506 2522])
                ("allow_stringlist" variable nil (reparse-symbol function_parameters) [2524 2540]))              ) nil [2483 4029])
            ("validate_any" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [4048 4049]))              ) nil [4031 4065])
            ("validate_anylist" variable nil nil [4065 4116])
            ("validate_path_exists" function
               (:documentation "If s is a path, return s, else False"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [4144 4145]))                  )
                nil [4119 4364])
            ("validate_bool" function
               (:documentation "Convert b to a boolean or raise"
                :arguments 
                  ( ("b" variable nil (reparse-symbol function_parameters) [4384 4385]))                  )
                nil [4366 4731])
            ("validate_bool_maybe_none" function (:arguments 
              ( ("b" variable nil (reparse-symbol function_parameters) [4762 4763]))              ) nil [4733 5158])
            ("deprecate_axes_hold" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [5184 5189]))              ) nil [5160 5422])
            ("validate_float" function
               (:documentation "convert s to float or raise"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [5443 5444]))                  )
                nil [5424 5605])
            ("validate_floatlist" variable nil nil [5605 5660])
            ("validate_float_or_None" function
               (:documentation "convert s to float, None or raise"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [5690 5691]))                  )
                nil [5663 6221])
            ("validate_string_or_None" function
               (:documentation "convert s to string or raise"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [6251 6252]))                  )
                nil [6223 6461])
            ("validate_axisbelow" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [6486 6487]))              ) nil [6463 6794])
            ("validate_dpi" function
               (:documentation "confirm s is string 'figure' or convert s to float or raise"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [6813 6814]))                  )
                nil [6796 7097])
            ("validate_int" function
               (:documentation "convert s to int or raise"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7116 7117]))                  )
                nil [7099 7272])
            ("validate_int_or_None" function
               (:documentation "if not None, tries to validate as an int"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7299 7300]))                  )
                nil [7274 7543])
            ("validate_fonttype" function
               (:documentation "
    confirm that this is a Postscript of PDF font type that we know how to
    convert to
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7567 7568]))                  )
                nil [7545 8256])
            ("_validate_standard_backends" variable nil nil [8258 8443])
            ("validate_backend" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [8467 8468]))              ) nil [8446 8578])
            ("validate_qt4" variable nil nil [8580 8659])
            ("validate_qt5" variable nil nil [8660 8718])
            ("validate_toolbar" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [8742 8743]))              ) nil [8721 8918])
            ("validate_maskedarray" function (:arguments 
              ( ("v" variable nil (reparse-symbol function_parameters) [8945 8946]))              ) nil [8920 9263])
            ("_seq_err_msg" variable nil nil [9266 9377])
            ("_str_err_msg" variable nil nil [9379 9538])
            ("validate_nseq_float" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9616 9626]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9593 9597])
                            ("n" variable nil (reparse-symbol function_parameters) [9599 9600]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9580 9627])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9645 9649])
                            ("s" variable nil (reparse-symbol function_parameters) [9651 9652]))                          
                        :documentation "return a seq of n floats or raise")
                        (reparse-symbol indented_block_body) [9632 10164]))                  
                :type "class")
                nil [9541 10164])
            ("validate_nseq_int" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10239 10249]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10216 10220])
                            ("n" variable nil (reparse-symbol function_parameters) [10222 10223]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10203 10250])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10268 10272])
                            ("s" variable nil (reparse-symbol function_parameters) [10274 10275]))                          
                        :documentation "return a seq of n ints or raise")
                        (reparse-symbol indented_block_body) [10255 10781]))                  
                :type "class")
                nil [10166 10781])
            ("validate_color_or_inherit" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [10813 10814]))              ) nil [10783 10917])
            ("validate_color_or_auto" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [10946 10947]))              ) nil [10919 11016])
            ("validate_color_for_prop_cycle" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [11052 11053]))              ) nil [11018 11652])
            ("validate_color" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [11673 11674]))              ) nil [11654 12684])
            ("deprecate_axes_colorcycle" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [12716 12721]))              ) nil [12686 12890])
            ("validate_colorlist" variable nil nil [12892 12970])
            ("validate_colorlist" variable nil nil [12971 13029])
            ("validate_stringlist" variable nil nil [13031 13086])
            ("validate_stringlist" variable nil nil [13087 13132])
            ("validate_orientation" variable nil nil [13134 13221])
            ("validate_aspect" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [13244 13245]))              ) nil [13224 13413])
            ("validate_fontsize" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [13437 13438]))              ) nil [13415 13866])
            ("validate_fontsizelist" variable nil nil [13868 13929])
            ("validate_font_properties" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [13961 13962]))              ) nil [13932 14010])
            ("validate_fontset" variable nil nil [14012 14135])
            ("validate_mathtext_default" variable nil nil [14137 14268])
            ("validate_verbose" variable nil nil [14270 14376])
            ("validate_whiskers" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [14400 14401]))              ) nil [14378 14800])
            ("deprecate_savefig_extension" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [14834 14839]))              ) nil [14802 14988])
            ("update_savefig_format" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [15016 15021]))              ) nil [14990 15257])
            ("validate_ps_papersize" variable nil nil [15259 15529])
            ("validate_ps_distiller" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [15558 15559]))              ) nil [15532 15917])
            ("validate_joinstyle" variable nil nil [15918 16093])
            ("validate_joinstylelist" variable nil nil [16094 16157])
            ("validate_capstyle" variable nil nil [16159 16334])
            ("validate_capstylelist" variable nil nil [16335 16396])
            ("validate_fillstyle" variable nil nil [16398 16588])
            ("validate_fillstylelist" variable nil nil [16589 16652])
            ("validate_negative_linestyle" variable nil nil [16654 16857])
            ("validate_negative_linestyle_legacy" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [16899 16900]))              ) nil [16860 17216])
            ("validate_corner_mask" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [17243 17244]))              ) nil [17218 17328])
            ("validate_tkpythoninspect" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [17359 17360]))              ) nil [17330 17488])
            ("validate_legend_loc" variable nil nil [17489 17768])
            ("deprecate_svg_image_noscale" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [17803 17808]))              ) nil [17771 17929])
            ("deprecate_svg_embed_char_paths" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [17966 17971]))              ) nil [17931 18079])
            ("validate_svg_fonttype" variable nil nil [18081 18209])
            ("validate_hinting" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [18233 18234]))              ) nil [18212 18443])
            ("validate_pgf_texsystem" variable nil nil [18444 18583])
            ("validate_movie_writer" variable nil nil [18585 18781])
            ("validate_movie_frame_fmt" variable nil nil [18783 18897])
            ("validate_axis_locator" variable nil nil [18899 18977])
            ("validate_movie_html_fmt" variable nil nil [18979 19063])
            ("validate_bbox" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [19083 19084]))              ) nil [19065 19483])
            ("validate_sketch" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [19504 19505]))              ) nil [19484 19940])
            ("ValidateInterval" type
               (:documentation "
    Value must be in interval
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [20095 20111])
                            ("self" variable nil (reparse-symbol indented_block_body) [20120 20136])
                            ("self" variable nil (reparse-symbol indented_block_body) [20145 20166])
                            ("self" variable nil (reparse-symbol indented_block_body) [20175 20196]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20036 20040])
                            ("vmin" variable nil (reparse-symbol function_parameters) [20042 20046])
                            ("vmax" variable nil (reparse-symbol function_parameters) [20048 20052])
                            ("closedmin" variable nil (reparse-symbol function_parameters) [20054 20063])
                            ("closedmax" variable nil (reparse-symbol function_parameters) [20070 20079]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20023 20197])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20215 20219])
                            ("s" variable nil (reparse-symbol function_parameters) [20221 20222]))                          )
                        (reparse-symbol indented_block_body) [20202 20998]))                  
                :type "class")
                nil [19941 20998])
            ("validate_grid_axis" variable nil nil [20999 21075])
            ("validate_hatch" function
               (:documentation "
    Validate a hatch pattern.
    A hatch pattern string can have any sequence of the following
    characters: ``\\\\ / | - + * . x o O``.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [21097 21098]))                  )
                nil [21078 54500]))          
      :file "rcsetup.py"
      :pointmax 54500
      :fsize 54499
      :lastmodtime '(22681 7108 763473 0)
      :unmatched-syntax '((INDENT_BLOCK 26263 . 26377) (NEWLINE 26262 . 26263) (COLON 26261 . 26262) (TRY 25227 . 25230) (AS 26257 . 26259) (INDENT_BLOCK 22488 . 22494) (INDENT_BLOCK 21730 . 22488) (NEWLINE 21729 . 21730) (LBRACE 21728 . 21729) (NEWLINE 21707 . 21708) (RPAREN 21706 . 21707) (LPAREN 21684 . 21685) (NEWLINE 21645 . 21646) (RPAREN 21644 . 21645) (DEDENT 21590 . 21590) (NAME 21590 . 21608) (LPAREN 21629 . 21630)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("" code nil nil [24 109])
            ("six" include nil nil [111 121])
            ("collections" include nil nil [122 169])
            ("re" include nil nil [171 180])
            ("warnings" include nil nil [181 196])
            ("inspect" include nil nil [197 211])
            ("numpy" include nil nil [212 230])
            ("matplotlib" include nil nil [231 248])
            ("matplotlib.cbook" include nil nil [249 281])
            ("matplotlib.cbook" include nil nil [282 325])
            ("matplotlib" include nil nil [326 368])
            ("" code nil nil [393 488])
            ("Path" include nil nil [500 511])
            ("allow_rasterization" function
               (:documentation "
    Decorator for Artist.draw method. Provides routines
    that run before and after the draw call. The before and after functions
    are useful for changing artist-dependant renderer attributes or making
    other setup function calls, such as starting and flushing a mixed-mode
    renderer.
    "
                :arguments 
                  ( ("draw" variable nil (reparse-symbol function_parameters) [1275 1279]))                  )
                nil [1251 2528])
            ("_stale_axes_callback" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [2555 2559])
                    ("val" variable nil (reparse-symbol function_parameters) [2561 2564]))                  )
                nil [2530 2615])
            ("_XYPair" variable nil nil [2617 2655])
            ("Artist" type
               (:documentation "
    Abstract base class for someone who renders into a
    :class:`FigureCanvas`.
    "
                :superclasses ("object")
                :members 
                  ( ("aname" variable nil (reparse-symbol indented_block_body) [2783 2799])
                    ("zorder" variable nil (reparse-symbol indented_block_body) [2804 2814])
                    ("_prop_order" variable nil (reparse-symbol indented_block_body) [2966 2994])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3028 3046])
                            ("self" variable nil (reparse-symbol indented_block_body) [3055 3081])
                            ("self" variable nil (reparse-symbol indented_block_body) [3090 3107])
                            ("self" variable nil (reparse-symbol indented_block_body) [3116 3134])
                            ("self" variable nil (reparse-symbol indented_block_body) [3144 3166])
                            ("self" variable nil (reparse-symbol indented_block_body) [3175 3201])
                            ("self" variable nil (reparse-symbol indented_block_body) [3210 3230])
                            ("self" variable nil (reparse-symbol indented_block_body) [3239 3261])
                            ("self" variable nil (reparse-symbol indented_block_body) [3270 3288])
                            ("self" variable nil (reparse-symbol indented_block_body) [3297 3316])
                            ("self" variable nil (reparse-symbol indented_block_body) [3325 3346])
                            ("self" variable nil (reparse-symbol indented_block_body) [3355 3374])
                            ("self" variable nil (reparse-symbol indented_block_body) [3383 3399])
                            ("self" variable nil (reparse-symbol indented_block_body) [3408 3427])
                            ("self" variable nil (reparse-symbol indented_block_body) [3436 3457])
                            ("self" variable nil (reparse-symbol indented_block_body) [3466 3489])
                            ("self" variable nil (reparse-symbol indented_block_body) [3498 3521])
                            ("self" variable nil (reparse-symbol indented_block_body) [3530 3553])
                            ("self" variable nil (reparse-symbol indented_block_body) [3562 3583])
                            ("self" variable nil (reparse-symbol indented_block_body) [3624 3637])
                            ("self" variable nil (reparse-symbol indented_block_body) [3664 3688])
                            ("try" code nil (reparse-symbol indented_block_body) [3726 3878])
                            ("self" variable nil (reparse-symbol indented_block_body) [3886 3912])
                            ("self" variable nil (reparse-symbol indented_block_body) [3921 3937])
                            ("self" variable nil (reparse-symbol indented_block_body) [3946 3962])
                            ("self" variable nil (reparse-symbol indented_block_body) [3971 3988])
                            ("self" variable nil (reparse-symbol indented_block_body) [3997 4035])
                            ("self" variable nil (reparse-symbol indented_block_body) [4044 4089])
                            ("self" variable nil (reparse-symbol indented_block_body) [4098 4134]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3013 3017]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3000 4135])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4157 4161]))                          )
                        (reparse-symbol indented_block_body) [4140 4419])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4435 4439]))                          
                        :documentation "
        Remove the artist from the figure if possible.  The effect
        will not be visible until the figure is redrawn, e.g., with
        :meth:`matplotlib.axes.Axes.draw_idle`.  Call
        :meth:`matplotlib.axes.Axes.relim` to update the axes limits
        if desired.

        Note: :meth:`~matplotlib.axes.Axes.relim` will not see
        collections even if the collection was added to axes with
        *autolim* = True.

        Note: there is no support for removing the artist's legend entry.
        ")
                        (reparse-symbol indented_block_body) [4424 6020])
                    ("have_units" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6378 6382]))                          )
                        (reparse-symbol indented_block_body) [6363 6602])
                    ("convert_xunits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6626 6630])
                            ("x" variable nil (reparse-symbol function_parameters) [6632 6633]))                          
                        :documentation "For artists in an axes, if the xaxis has units support,
        convert *x* using xaxis unit type
        ")
                        (reparse-symbol indented_block_body) [6607 6903])
                    ("convert_yunits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6927 6931])
                            ("y" variable nil (reparse-symbol function_parameters) [6933 6934]))                          
                        :documentation "For artists in an axes, if the yaxis has units support,
        convert *y* using yaxis unit type
        ")
                        (reparse-symbol indented_block_body) [6908 7204])
                    ("set_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7222 7226])
                            ("axes" variable nil (reparse-symbol function_parameters) [7228 7232]))                          
                        :documentation "
        Set the :class:`~matplotlib.axes.Axes` instance in which the
        artist resides, if any.

        This has been deprecated in mpl 1.5, please use the
        axes property.  Will be removed in 1.7 or 2.0.

        ACCEPTS: an :class:`~matplotlib.axes.Axes` instance
        ")
                        (reparse-symbol indented_block_body) [7209 7670])
                    ("get_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7688 7692]))                          
                        :documentation "
        Return the :class:`~matplotlib.axes.Axes` instance the artist
        resides in, or *None*.

        This has been deprecated in mpl 1.5, please use the
        axes property.  Will be removed in 1.7 or 2.0.
        ")
                        (reparse-symbol indented_block_body) [7675 8069])
                    ("axes" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8097 8101]))                          
                        :documentation "
        The :class:`~matplotlib.axes.Axes` instance the artist
        resides in, or *None*.
        ")
                        (reparse-symbol indented_block_body) [8074 8248])
                    ("axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8279 8283])
                            ("new_axes" variable nil (reparse-symbol function_parameters) [8285 8293]))                          
                        :decorators 
                          ( ("axes.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8253 8815])
                    ("stale" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8844 8848]))                          
                        :documentation "
        If the artist is 'stale' and needs to be re-drawn for the output to
        match the internal state of the artist.
        ")
                        (reparse-symbol indented_block_body) [8820 9026])
                    ("stale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9059 9063])
                            ("val" variable nil (reparse-symbol function_parameters) [9065 9068]))                          
                        :decorators 
                          ( ("stale.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9031 9462])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9489 9493])
                            ("renderer" variable nil (reparse-symbol function_parameters) [9495 9503]))                          
                        :documentation "
        Get the axes bounding box in display space.
        Subclasses should override for inclusion in the bounding box
        \"tight\" calculation. Default is to return an empty bounding
        box at 0, 0.

        Be careful when using this function, the results will not update
        if the artist window extent of the artist changes.  The extent
        can change due to any changes in the transform stack, such as
        changing the axes limits, the figure size, or the canvas used
        (as is done when saving a figure).  This can lead to unexpected
        behavior where interactive figures will look fine on the screen,
        but will save incorrectly.
        ")
                        (reparse-symbol indented_block_body) [9467 10243])
                    ("add_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10265 10269])
                            ("func" variable nil (reparse-symbol function_parameters) [10271 10275]))                          
                        :documentation "
        Adds a callback function that will be called whenever one of
        the :class:`Artist`'s properties changes.

        Returns an *id* that is useful for removing the callback with
        :meth:`remove_callback` later.
        ")
                        (reparse-symbol indented_block_body) [10248 10637])
                    ("remove_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10662 10666])
                            ("oid" variable nil (reparse-symbol function_parameters) [10668 10671]))                          
                        :documentation "
        Remove a callback based on its *id*.

        .. seealso::

            :meth:`add_callback`
               For adding callbacks

        ")
                        (reparse-symbol indented_block_body) [10642 10932])
                    ("pchanged" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10950 10954]))                          
                        :documentation "
        Fire an event when property changed, calling all of the
        registered callbacks.
        ")
                        (reparse-symbol indented_block_body) [10937 11159])
                    ("is_transform_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11185 11189]))                          
                        :documentation "
        Returns *True* if :class:`Artist` has a transform explicitly
        set.
        ")
                        (reparse-symbol indented_block_body) [11164 11332])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11355 11359])
                            ("t" variable nil (reparse-symbol function_parameters) [11361 11362]))                          
                        :documentation "
        Set the :class:`~matplotlib.transforms.Transform` instance
        used by this artist.

        ACCEPTS: :class:`~matplotlib.transforms.Transform` instance
        ")
                        (reparse-symbol indented_block_body) [11337 11666])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11689 11693]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform`
        instance used by this artist.
        ")
                        (reparse-symbol indented_block_body) [11671 12134])
                    ("hitlist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12151 12155])
                            ("event" variable nil (reparse-symbol function_parameters) [12157 12162]))                          
                        :documentation "
        List the children of the artist which contain the mouse event *event*.
        ")
                        (reparse-symbol indented_block_body) [12139 12630])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12652 12656]))                          
                        :documentation "
        Return a list of the child :class:`Artist`s this
        :class:`Artist` contains.
        ")
                        (reparse-symbol indented_block_body) [12635 12792])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12810 12814])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [12816 12826]))                          
                        :documentation "Test whether the artist contains the mouse event.

        Returns the truth value and a dictionary of artist specific details of
        selection, such as which points are contained in the pick radius.  See
        individual artists for details.
        ")
                        (reparse-symbol indented_block_body) [12797 13299])
                    ("set_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13321 13325])
                            ("picker" variable nil (reparse-symbol function_parameters) [13327 13333]))                          
                        :documentation "
        Replace the contains test used by this artist. The new picker
        should be a callable function which determines whether the
        artist is hit by the mouse event::

            hit, props = picker(artist, mouseevent)

        If the mouse event is over the artist, return *hit* = *True*
        and *props* is a dictionary of properties you want returned
        with the contains test.

        ACCEPTS: a callable function
        ")
                        (reparse-symbol indented_block_body) [13304 13833])
                    ("get_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13855 13859]))                          
                        :documentation "
        Return the _contains test used by the artist, or *None* for default.
        ")
                        (reparse-symbol indented_block_body) [13838 13993])
                    ("pickable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14011 14015]))                          )
                        (reparse-symbol indented_block_body) [13998 14211])
                    ("pick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14225 14229])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [14231 14241]))                          
                        :documentation "
        Process pick event

        each child artist will fire a pick event if *mouseevent* is over
        the artist and the artist has picker set
        ")
                        (reparse-symbol indented_block_body) [14216 15469])
                    ("set_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15489 15493])
                            ("picker" variable nil (reparse-symbol function_parameters) [15495 15501]))                          
                        :documentation "
        Set the epsilon for picking used by this artist

        *picker* can be one of the following:

          * *None*: picking is disabled for this artist (default)

          * A boolean: if *True* then picking will be enabled and the
            artist will fire a pick event if the mouse event is over
            the artist

          * A float: if picker is a number it is interpreted as an
            epsilon tolerance in points and the artist will fire
            off an event if it's data is within epsilon of the mouse
            event.  For some artists like lines and patch collections,
            the artist may provide additional data to the pick event
            that is generated, e.g., the indices of the data within
            epsilon of the pick event

          * A function: if picker is callable, it is a user supplied
            function which determines whether the artist is hit by the
            mouse event::

              hit, props = picker(artist, mouseevent)

            to determine the hit test.  if the mouse event is over the
            artist, return *hit=True* and props is a dictionary of
            properties you want added to the PickEvent attributes.

        ACCEPTS: [None|float|boolean|callable]
        ")
                        (reparse-symbol indented_block_body) [15474 16815])
                    ("get_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16835 16839]))                          )
                        (reparse-symbol indented_block_body) [16820 16925])
                    ("is_figure_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16948 16952]))                          
                        :documentation "
        Returns True if the artist is assigned to a
        :class:`~matplotlib.figure.Figure`.
        ")
                        (reparse-symbol indented_block_body) [16930 17114])
                    ("get_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17131 17135]))                          
                        :documentation "
        Returns the url
        ")
                        (reparse-symbol indented_block_body) [17119 17211])
                    ("set_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17228 17232])
                            ("url" variable nil (reparse-symbol function_parameters) [17234 17237]))                          
                        :documentation "
        Sets the url for the artist

        ACCEPTS: a url string
        ")
                        (reparse-symbol indented_block_body) [17216 17355])
                    ("get_gid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17372 17376]))                          
                        :documentation "
        Returns the group id
        ")
                        (reparse-symbol indented_block_body) [17360 17457])
                    ("set_gid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17474 17478])
                            ("gid" variable nil (reparse-symbol function_parameters) [17480 17483]))                          
                        :documentation "
        Sets the (group) id for the artist

        ACCEPTS: an id string
        ")
                        (reparse-symbol indented_block_body) [17462 17608])
                    ("get_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17626 17630]))                          
                        :documentation "
        Returns the snap setting which may be:

          * True: snap vertices to the nearest pixel center

          * False: leave vertices as-is

          * None: (auto) If the path contains only rectilinear line
            segments, round to the nearest pixel center

        Only supported by the Agg and MacOSX backends.
        ")
                        (reparse-symbol indented_block_body) [17613 18090])
                    ("set_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18108 18112])
                            ("snap" variable nil (reparse-symbol function_parameters) [18114 18118]))                          
                        :documentation "
        Sets the snap setting which may be:

          * True: snap vertices to the nearest pixel center

          * False: leave vertices as-is

          * None: (auto) If the path contains only rectilinear line
            segments, round to the nearest pixel center

        Only supported by the Agg and MacOSX backends.
        ")
                        (reparse-symbol indented_block_body) [18095 18524])
                    ("get_sketch_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18551 18555]))                          
                        :documentation "
        Returns the sketch parameters for the artist.

        Returns
        -------
        sketch_params : tuple or `None`

        A 3-tuple with the following elements:

          * `scale`: The amplitude of the wiggle perpendicular to the
            source line.

          * `length`: The length of the wiggle along the line.

          * `randomness`: The scale factor by which the length is
            shrunken or expanded.

        May return `None` if no sketch parameters were set.
        ")
                        (reparse-symbol indented_block_body) [18529 19107])
                    ("set_sketch_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19134 19138])
                            ("scale" variable nil (reparse-symbol function_parameters) [19140 19145])
                            ("length" variable nil (reparse-symbol function_parameters) [19152 19158])
                            ("randomness" variable nil (reparse-symbol function_parameters) [19165 19175]))                          
                        :documentation "
        Sets the sketch parameters.

        Parameters
        ----------

        scale : float, optional
            The amplitude of the wiggle perpendicular to the source
            line, in pixels.  If scale is `None`, or not provided, no
            sketch filter will be provided.

        length : float, optional
             The length of the wiggle along the line, in pixels
             (default 128.0)

        randomness : float, optional
            The scale factor by which the length is shrunken or
            expanded (default 16.0)
        ")
                        (reparse-symbol indented_block_body) [19112 19932])
                    ("set_path_effects" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19958 19962])
                            ("path_effects" variable nil (reparse-symbol function_parameters) [19964 19976]))                          
                        :documentation "
        set path_effects, which should be a list of instances of
        matplotlib.patheffect._Base class or its derivatives.
        ")
                        (reparse-symbol indented_block_body) [19937 20198])
                    ("get_path_effects" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20224 20228]))                          )
                        (reparse-symbol indented_block_body) [20203 20265])
                    ("get_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20285 20289]))                          
                        :documentation "
        Return the :class:`~matplotlib.figure.Figure` instance the
        artist belongs to.
        ")
                        (reparse-symbol indented_block_body) [20270 20437])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20457 20461])
                            ("fig" variable nil (reparse-symbol function_parameters) [20463 20466]))                          
                        :documentation "
        Set the :class:`~matplotlib.figure.Figure` instance the artist
        belongs to.

        ACCEPTS: a :class:`matplotlib.figure.Figure` instance
        ")
                        (reparse-symbol indented_block_body) [20442 21345])
                    ("set_clip_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21367 21371])
                            ("clipbox" variable nil (reparse-symbol function_parameters) [21373 21380]))                          
                        :documentation "
        Set the artist's clip :class:`~matplotlib.transforms.Bbox`.

        ACCEPTS: a :class:`matplotlib.transforms.Bbox` instance
        ")
                        (reparse-symbol indented_block_body) [21350 21621])
                    ("set_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21644 21648])
                            ("path" variable nil (reparse-symbol function_parameters) [21650 21654])
                            ("transform" variable nil (reparse-symbol function_parameters) [21656 21665]))                          
                        :documentation "
        Set the artist's clip path, which may be:

          * a :class:`~matplotlib.patches.Patch` (or subclass) instance

          * a :class:`~matplotlib.path.Path` instance, in which case
             an optional :class:`~matplotlib.transforms.Transform`
             instance may be provided, which will be applied to the
             path before using it for clipping.

          * *None*, to remove the clipping path

        For efficiency, if the path happens to be an axis-aligned
        rectangle, this method will set the clipping box to the
        corresponding rectangle and set the clipping path to *None*.

        ACCEPTS: [ (:class:`~matplotlib.path.Path`,
        :class:`~matplotlib.transforms.Transform`) |
        :class:`~matplotlib.patches.Patch` | None ]
        ")
                        (reparse-symbol indented_block_body) [21626 23740])
                    ("get_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23759 23763]))                          
                        :documentation "
        Return the alpha value used for blending - not supported on all
        backends
        ")
                        (reparse-symbol indented_block_body) [23745 23906])
                    ("get_visible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23927 23931]))                          )
                        (reparse-symbol indented_block_body) [23911 24003])
                    ("get_animated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24025 24029]))                          )
                        (reparse-symbol indented_block_body) [24008 24107])
                    ("get_clip_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24128 24132]))                          )
                        (reparse-symbol indented_block_body) [24112 24209])
                    ("get_clip_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24231 24235]))                          )
                        (reparse-symbol indented_block_body) [24214 24298])
                    ("get_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24321 24325]))                          )
                        (reparse-symbol indented_block_body) [24303 24392])
                    ("get_transformed_clip_path_and_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24438 24442]))                          )
                        (reparse-symbol indented_block_body) [24397 24756])
                    ("set_clip_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24777 24781])
                            ("b" variable nil (reparse-symbol function_parameters) [24783 24784]))                          
                        :documentation "
        Set whether artist uses clipping.

        When False artists will be visible out side of the axes which
        can lead to unexpected results.

        ACCEPTS: [True | False]
        ")
                        (reparse-symbol indented_block_body) [24761 25181])
                    ("_set_gc_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25203 25207])
                            ("gc" variable nil (reparse-symbol function_parameters) [25209 25211]))                          )
                        (reparse-symbol indented_block_body) [25186 25509])
                    ("get_rasterized" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25533 25537]))                          )
                        (reparse-symbol indented_block_body) [25514 25628])
                    ("set_rasterized" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25652 25656])
                            ("rasterized" variable nil (reparse-symbol function_parameters) [25658 25668]))                          
                        :documentation "
        Force rasterized (bitmap) drawing in vector backend output.

        Defaults to None, which implies the backend's default behavior

        ACCEPTS: [True | False | None]
        ")
                        (reparse-symbol indented_block_body) [25633 26065])
                    ("get_agg_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26089 26093]))                          )
                        (reparse-symbol indented_block_body) [26070 26187])
                    ("set_agg_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26211 26215])
                            ("filter_func" variable nil (reparse-symbol function_parameters) [26217 26228]))                          
                        :documentation "
        set agg_filter fuction.

        ")
                        (reparse-symbol indented_block_body) [26192 26353])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26367 26371])
                            ("renderer" variable nil (reparse-symbol function_parameters) [26373 26381])
                            ("args" variable nil (reparse-symbol function_parameters) [26383 26388])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [26390 26398]))                          )
                        (reparse-symbol indented_block_body) [26358 26523])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26542 26546])
                            ("alpha" variable nil (reparse-symbol function_parameters) [26548 26553]))                          
                        :documentation "
        Set the alpha value used for blending - not supported on
        all backends.

        ACCEPTS: float (0.0 transparent through 1.0 opaque)
        ")
                        (reparse-symbol indented_block_body) [26528 26806])
                    ("set_visible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26827 26831])
                            ("b" variable nil (reparse-symbol function_parameters) [26833 26834]))                          
                        :documentation "
        Set the artist's visiblity.

        ACCEPTS: [True | False]
        ")
                        (reparse-symbol indented_block_body) [26811 27006])
                    ("set_animated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27028 27032])
                            ("b" variable nil (reparse-symbol function_parameters) [27034 27035]))                          
                        :documentation "
        Set the artist's animation state.

        ACCEPTS: [True | False]
        ")
                        (reparse-symbol indented_block_body) [27011 27228])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27244 27248])
                            ("props" variable nil (reparse-symbol function_parameters) [27250 27255]))                          
                        :documentation "
        Update the properties of this :class:`Artist` from the
        dictionary *prop*.
        ")
                        (reparse-symbol indented_block_body) [27233 28590])
                    ("get_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28609 28613]))                          
                        :documentation "
        Get the label used for this artist in the legend.
        ")
                        (reparse-symbol indented_block_body) [28595 28725])
                    ("set_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28744 28748])
                            ("s" variable nil (reparse-symbol function_parameters) [28750 28751]))                          
                        :documentation "
        Set the label to *s* for auto legend.

        ACCEPTS: string or anything printable with '%s' conversion.
        ")
                        (reparse-symbol indented_block_body) [28730 29053])
                    ("get_zorder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29073 29077]))                          
                        :documentation "
        Return the :class:`Artist`'s zorder.
        ")
                        (reparse-symbol indented_block_body) [29058 29176])
                    ("set_zorder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29196 29200])
                            ("level" variable nil (reparse-symbol function_parameters) [29202 29207]))                          
                        :documentation "
        Set the zorder for the artist.  Artists with lower zorder
        values are drawn first.

        ACCEPTS: any number
        ")
                        (reparse-symbol indented_block_body) [29181 29439])
                    ("sticky_edges" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29475 29479]))                          
                        :documentation "
        `x` and `y` sticky edge lists.

        When performing autoscaling, if a data limit coincides with a value in
        the corresponding sticky_edges list, then no margin will be added--the
        view limit \"sticks\" to the edge. A typical usecase is histograms,
        where one usually expects no margin on the bottom edge (0) of the
        histogram.

        This attribute cannot be assigned to; however, the `x` and `y` lists
        can be modified in place as needed.

        Examples
        --------

        >>> artist.sticky_edges.x[:] = (xmin, xmax)
        >>> artist.sticky_edges.y[:] = (ymin, ymax)

        ")
                        (reparse-symbol indented_block_body) [29444 30168])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30189 30193])
                            ("other" variable nil (reparse-symbol function_parameters) [30195 30200]))                          )
                        (reparse-symbol indented_block_body) [30173 30819])
                    ("properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30839 30843]))                          
                        :documentation "
        return a dictionary mapping property name -> value for all Artist props
        ")
                        (reparse-symbol indented_block_body) [30824 31000])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31013 31017])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [31019 31027]))                          
                        :documentation "A property batch setter. Pass *kwargs* to set properties.
        ")
                        (reparse-symbol indented_block_body) [31005 31297])
                    ("findobj" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31314 31318])
                            ("match" variable nil (reparse-symbol function_parameters) [31320 31325])
                            ("include_self" variable nil (reparse-symbol function_parameters) [31332 31344]))                          
                        :documentation "
        Find artist objects.

        Recursively find all :class:`~matplotlib.artist.Artist` instances
        contained in self.

        *match* can be

          - None: return all objects contained in artist.

          - function with signature ``boolean = match(artist)``
            used to filter matches

          - class instance: e.g., Line2D.  Only return artists of class type.

        If *include_self* is True (default), include self in the list to be
        checked for a match.

        ")
                        (reparse-symbol indented_block_body) [31302 32712])
                    ("get_cursor_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32737 32741])
                            ("event" variable nil (reparse-symbol function_parameters) [32743 32748]))                          
                        :documentation "
        Get the cursor data for a given event.
        ")
                        (reparse-symbol indented_block_body) [32717 32842])
                    ("format_cursor_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32870 32874])
                            ("data" variable nil (reparse-symbol function_parameters) [32876 32880]))                          
                        :documentation "
        Return *cursor data* string formatted.
        ")
                        (reparse-symbol indented_block_body) [32847 33194])
                    ("mouseover" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33227 33231]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33199 33265])
                    ("mouseover" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33306 33310])
                            ("val" variable nil (reparse-symbol function_parameters) [33312 33315]))                          
                        :decorators 
                          ( ("mouseover.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33270 33538]))                  
                :type "class")
                nil [2658 33538])
            ("ArtistInspector" type
               (:documentation "
    A helper class to inspect an :class:`~matplotlib.artist.Artist`
    and return information about it's settable properties and their
    current values.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the artist inspector with an
        :class:`~matplotlib.artist.Artist` or sequence of :class:`Artists`.
        If a sequence is used, we assume it is a homogeneous sequence (all
        :class:`Artists` are of the same type) and it is your responsibility
        to make sure this is so.
        \"\"\"" code nil (reparse-symbol indented_block_body) [33778 34102])
                            ("if" code nil (reparse-symbol indented_block_body) [34111 34165])
                            ("self" variable nil (reparse-symbol indented_block_body) [34174 34188])
                            ("if" code nil (reparse-symbol indented_block_body) [34197 34249])
                            ("self" variable nil (reparse-symbol indented_block_body) [34257 34267])
                            ("self" variable nil (reparse-symbol indented_block_body) [34277 34309]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33760 33764])
                            ("o" variable nil (reparse-symbol function_parameters) [33766 33767]))                          
                        :documentation "
        Initialize the artist inspector with an
        :class:`~matplotlib.artist.Artist` or sequence of :class:`Artists`.
        If a sequence is used, we assume it is a homogeneous sequence (all
        :class:`Artists` are of the same type) and it is your responsibility
        to make sure this is so.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33747 34310])
                    ("get_aliases" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34331 34335]))                          
                        :documentation "
        Get a dict mapping *fullname* -> *alias* for each *alias* in
        the :class:`~matplotlib.artist.ArtistInspector`.

        e.g., for lines::

          {'markerfacecolor': 'mfc',
           'linewidth'      : 'lw',
          }

        ")
                        (reparse-symbol indented_block_body) [34315 35097])
                    ("_get_valid_values_regex" variable nil (reparse-symbol indented_block_body) [35102 35199])
                    ("get_valid_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35226 35230])
                            ("attr" variable nil (reparse-symbol function_parameters) [35232 35236]))                          
                        :documentation "
        Get the legal arguments for the setter associated with *attr*.

        This is done by querying the docstring of the function *set_attr*
        for a line that begins with ACCEPTS:

        e.g., for a line linestyle, return
        \"[ ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'steps'`` | ``'None'``
        ]\"
        ")
                        (reparse-symbol indented_block_body) [35205 36108])
                    ("_get_setters_and_targets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36142 36146]))                          
                        :documentation "
        Get the attribute strings and a full path to where the setter
        is defined for all setters in an object.
        ")
                        (reparse-symbol indented_block_body) [36113 37135])
                    ("get_setters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37156 37160]))                          
                        :documentation "
        Get the attribute strings with setters for object.  e.g., for a line,
        return ``['markerfacecolor', 'linewidth', ....]``.
        ")
                        (reparse-symbol indented_block_body) [37140 37399])
                    ("is_alias" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37417 37421])
                            ("o" variable nil (reparse-symbol function_parameters) [37423 37424]))                          
                        :documentation "
        Return *True* if method object *o* is an alias for another
        function.
        ")
                        (reparse-symbol indented_block_body) [37404 37650])
                    ("aliased_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37672 37676])
                            ("s" variable nil (reparse-symbol function_parameters) [37678 37679]))                          
                        :documentation "
        return 'PROPNAME or alias' if *s* has an alias, else return
        PROPNAME.

        e.g., for the line markerfacecolor property, which has an
        alias, return 'markerfacecolor or mfc' and for the transform
        property, which does not, return 'transform'
        ")
                        (reparse-symbol indented_block_body) [37655 38157])
                    ("aliased_name_rest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38184 38188])
                            ("s" variable nil (reparse-symbol function_parameters) [38190 38191])
                            ("target" variable nil (reparse-symbol function_parameters) [38193 38199]))                          
                        :documentation "
        return 'PROPNAME or alias' if *s* has an alias, else return
        PROPNAME formatted for ReST

        e.g., for the line markerfacecolor property, which has an
        alias, return 'markerfacecolor or mfc' and for the transform
        property, which does not, return 'transform'
        ")
                        (reparse-symbol indented_block_body) [38162 38755])
                    ("pprint_setters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38779 38783])
                            ("prop" variable nil (reparse-symbol function_parameters) [38785 38789])
                            ("leadingspace" variable nil (reparse-symbol function_parameters) [38796 38808]))                          
                        :documentation "
        If *prop* is *None*, return a list of strings of all settable properies
        and their valid values.

        If *prop* is not *None*, it is a valid property name and that
        property will be returned as a string of property : valid
        values.
        ")
                        (reparse-symbol indented_block_body) [38760 39629])
                    ("pprint_setters_rest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39658 39662])
                            ("prop" variable nil (reparse-symbol function_parameters) [39664 39668])
                            ("leadingspace" variable nil (reparse-symbol function_parameters) [39675 39687]))                          
                        :documentation "
        If *prop* is *None*, return a list of strings of all settable properies
        and their valid values.  Format the output for ReST

        If *prop* is not *None*, it is a valid property name and that
        property will be returned as a string of property : valid
        values.
        ")
                        (reparse-symbol indented_block_body) [39634 41368])
                    ("properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41388 41392]))                          
                        :documentation "
        return a dictionary mapping property name -> value
        ")
                        (reparse-symbol indented_block_body) [41373 42079])
                    ("pprint_getters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42103 42107]))                          
                        :documentation "
        Return the getters and actual values as list of strings.
        ")
                        (reparse-symbol indented_block_body) [42084 42730])
                    ("findobj" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42747 42751])
                            ("match" variable nil (reparse-symbol function_parameters) [42753 42758]))                          
                        :documentation "
        Recursively find all :class:`matplotlib.artist.Artist`
        instances contained in *self*.

        If *match* is not None, it can be

          - function with signature ``boolean = match(artist)``

          - class instance: e.g., :class:`~matplotlib.lines.Line2D`

        used to filter matches.
        ")
                        (reparse-symbol indented_block_body) [42735 43950]))                  
                :type "class")
                nil [33540 43950])
            ("getp" function
               (:documentation "
    Return the value of object's property.  *property* is an optional string
    for the property you want to return

    Example usage::

        getp(obj)  # get all the object properties
        getp(obj, 'linestyle')  # get the linestyle property

    *obj* is a :class:`Artist` instance, e.g.,
    :class:`~matplotllib.lines.Line2D` or an instance of a
    :class:`~matplotlib.axes.Axes` or :class:`matplotlib.text.Text`.
    If the *property* is 'somename', this function returns

      obj.get_somename()

    :func:`getp` can be used to query all the gettable properties with
    ``getp(obj)``. Many properties have aliases for shorter typing, e.g.
    'lw' is an alias for 'linewidth'.  In the output, aliases and full
    property names will be listed as:

      property or alias = value

    e.g.:

      linewidth or lw = 2
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [43961 43964])
                    ("property" variable nil (reparse-symbol function_parameters) [43966 43974]))                  )
                nil [43952 45039])
            ("get" variable nil nil [45048 45058])
            ("setp" function
               (:documentation "
    Set a property on an artist object.

    matplotlib supports the use of :func:`setp` (\"set property\") and
    :func:`getp` to set and get object properties, as well as to do
    introspection on the object.  For example, to set the linestyle of a
    line to be dashed, you can do::

      >>> line, = plot([1,2,3])
      >>> setp(line, linestyle='--')

    If you want to know the valid types of arguments, you can provide the
    name of the property you want to set without a value::

      >>> setp(line, 'linestyle')
          linestyle: [ '-' | '--' | '-.' | ':' | 'steps' | 'None' ]

    If you want to see all the properties that can be set, and their
    possible values, you can do::

      >>> setp(line)
          ... long output listing omitted

    :func:`setp` operates on a single instance or a list of instances.
    If you are in query mode introspecting the possible values, only
    the first instance in the sequence is used.  When actually setting
    values, all the instances will be set.  e.g., suppose you have a
    list of two lines, the following will make both lines thicker and
    red::

      >>> x = arange(0,1.0,0.01)
      >>> y1 = sin(2*pi*x)
      >>> y2 = sin(4*pi*x)
      >>> lines = plot(x, y1, x, y2)
      >>> setp(lines, linewidth=2, color='r')

    :func:`setp` works with the MATLAB style string/value pairs or
    with python kwargs.  For example, the following are equivalent::

      >>> setp(lines, 'linewidth', 2, 'color', 'r')  # MATLAB style
      >>> setp(lines, linewidth=2, color='r')        # python style
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [45070 45073])
                    ("args" variable nil (reparse-symbol function_parameters) [45075 45080])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [45082 45090]))                  )
                nil [45061 47421])
            ("kwdoc" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [47433 47434]))              ) nil [47423 47704])
            ("docstring" code nil nil [47705 47751])
            ("_get_axes_msg" variable nil nil [47753 47874]))          
      :file "artist.py"
      :pointmax 47875
      :fsize 47874
      :lastmodtime '(22681 7108 751473 0)
      :unmatched-syntax '((FROM 489 . 493) (PERIOD 494 . 495) (FROM 369 . 373) (PERIOD 374 . 375)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("" code nil nil [24 109])
            ("six" include nil nil [111 121])
            ("numpy" include nil nil [123 141])
            ("numpy" include nil nil [142 162])
            ("matplotlib.cbook" include nil nil [164 199])
            ("" code nil nil [230 334])
            ("" code nil nil [365 471])
            ("matplotlib.transforms" include nil nil [472 534])
            ("matplotlib" include nil nil [535 567])
            ("ScaleBase" type
               (:documentation "
    The base class for all scales.

    Scales are separable transformations, working on a single dimension.

    Any subclasses will want to override:

      - :attr:`name`
      - :meth:`get_transform`
      - :meth:`set_default_locators_and_formatters`

    And optionally:
      - :meth:`limit_range_for_scale`
    "
                :superclasses ("object")
                :members 
                  ( ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [948 952]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` object
        associated with this scale.
        ")
                        (reparse-symbol indented_block_body) [930 1119])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1164 1168])
                            ("axis" variable nil (reparse-symbol function_parameters) [1170 1174]))                          
                        :documentation "
        Set the :class:`~matplotlib.ticker.Locator` and
        :class:`~matplotlib.ticker.Formatter` objects on the given
        axis to match this scale.
        ")
                        (reparse-symbol indented_block_body) [1124 1394])
                    ("limit_range_for_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1425 1429])
                            ("vmin" variable nil (reparse-symbol function_parameters) [1431 1435])
                            ("vmax" variable nil (reparse-symbol function_parameters) [1437 1441])
                            ("minpos" variable nil (reparse-symbol function_parameters) [1443 1449]))                          
                        :documentation "
        Returns the range *vmin*, *vmax*, possibly limited to the
        domain supported by this scale.

        *minpos* should be the minimum positive value in the data.
         This is used by log scales to determine a minimum value.
        ")
                        (reparse-symbol indented_block_body) [1399 1742]))                  
                :type "class")
                nil [570 1742])
            ("LinearScale" type
               (:documentation "
    The default linear scale.
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [1825 1840])
                    ("__init__" function
                       (:suite 
                          ( ("pass" code nil (reparse-symbol indented_block_body) [1890 1894]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1859 1863])
                            ("axis" variable nil (reparse-symbol function_parameters) [1865 1869])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1871 1879]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1846 1895])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1940 1944])
                            ("axis" variable nil (reparse-symbol function_parameters) [1946 1950]))                          
                        :documentation "
        Set the locators and formatters to reasonable defaults for
        linear scaling.
        ")
                        (reparse-symbol indented_block_body) [1900 2262])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2285 2289]))                          
                        :documentation "
        The transform for linear scaling is just the
        :class:`~matplotlib.transforms.IdentityTransform`.
        ")
                        (reparse-symbol indented_block_body) [2267 2463]))                  
                :type "class")
                nil [1744 2463])
            ("LogTransformBase" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [2504 2518])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [2523 2538])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [2543 2562])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [2567 2585])
                    ("__init__" function
                       (:suite 
                          ( ("Transform" code nil (reparse-symbol indented_block_body) [2627 2651])
                            ("if" code nil (reparse-symbol indented_block_body) [2660 2771]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2604 2608])
                            ("nonpos" variable nil (reparse-symbol function_parameters) [2610 2616]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2591 2771])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2801 2805])
                            ("a" variable nil (reparse-symbol function_parameters) [2807 2808]))                          )
                        (reparse-symbol indented_block_body) [2776 2978]))                  
                :type "class")
                nil [2465 2978])
            ("InvertedLogTransformBase" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [3027 3041])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [3046 3061])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [3066 3085])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [3090 3108])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3139 3143])
                            ("a" variable nil (reparse-symbol function_parameters) [3145 3146]))                          )
                        (reparse-symbol indented_block_body) [3114 3187]))                  
                :type "class")
                nil [2980 3187])
            ("Log10Transform" type
               (:superclasses ("LogTransformBase")
                :members 
                  ( ("base" variable nil (reparse-symbol indented_block_body) [3233 3244])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3263 3267]))                          )
                        (reparse-symbol indented_block_body) [3250 3310]))                  
                :type "class")
                nil [3189 3310])
            ("InvertedLog10Transform" type
               (:superclasses ("InvertedLogTransformBase")
                :members 
                  ( ("base" variable nil (reparse-symbol indented_block_body) [3372 3383])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3402 3406]))                          )
                        (reparse-symbol indented_block_body) [3389 3441]))                  
                :type "class")
                nil [3312 3441])
            ("Log2Transform" type
               (:superclasses ("LogTransformBase")
                :members 
                  ( ("base" variable nil (reparse-symbol indented_block_body) [3486 3496])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3515 3519]))                          )
                        (reparse-symbol indented_block_body) [3502 3561]))                  
                :type "class")
                nil [3443 3561])
            ("InvertedLog2Transform" type
               (:superclasses ("InvertedLogTransformBase")
                :members 
                  ( ("base" variable nil (reparse-symbol indented_block_body) [3622 3632])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3651 3655]))                          )
                        (reparse-symbol indented_block_body) [3638 3689]))                  
                :type "class")
                nil [3563 3689])
            ("NaturalLogTransform" type
               (:superclasses ("LogTransformBase")
                :members 
                  ( ("base" variable nil (reparse-symbol indented_block_body) [3740 3751])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3770 3774]))                          )
                        (reparse-symbol indented_block_body) [3757 3822]))                  
                :type "class")
                nil [3691 3822])
            ("InvertedNaturalLogTransform" type
               (:superclasses ("InvertedLogTransformBase")
                :members 
                  ( ("base" variable nil (reparse-symbol indented_block_body) [3889 3900])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3919 3923]))                          )
                        (reparse-symbol indented_block_body) [3906 3963]))                  
                :type "class")
                nil [3824 3963])
            ("LogTransform" type
               (:superclasses ("LogTransformBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("LogTransformBase" code nil (reparse-symbol indented_block_body) [4049 4088])
                            ("self" variable nil (reparse-symbol indented_block_body) [4097 4113]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4020 4024])
                            ("base" variable nil (reparse-symbol function_parameters) [4026 4030])
                            ("nonpos" variable nil (reparse-symbol function_parameters) [4032 4038]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4007 4114])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4132 4136]))                          )
                        (reparse-symbol indented_block_body) [4119 4186]))                  
                :type "class")
                nil [3965 4186])
            ("InvertedLogTransform" type
               (:superclasses ("InvertedLogTransformBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("InvertedLogTransformBase" code nil (reparse-symbol indented_block_body) [4280 4319])
                            ("self" variable nil (reparse-symbol indented_block_body) [4328 4344]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4259 4263])
                            ("base" variable nil (reparse-symbol function_parameters) [4265 4269]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4246 4345])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4363 4367]))                          )
                        (reparse-symbol indented_block_body) [4350 4409]))                  
                :type "class")
                nil [4188 4409])
            ("LogScale" type
               (:documentation "
    A standard logarithmic scale.  Care is taken so non-positive
    values are not plotted.

    For computational efficiency (to push as much as possible to Numpy
    C code in the common cases), this scale provides different
    transforms depending on the base of the logarithm:

       - base 10 (:class:`Log10Transform`)
       - base 2 (:class:`Log2Transform`)
       - base e (:class:`NaturalLogTransform`)
       - arbitrary base (:class:`LogTransform`)
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [4921 4933])
                    ("LogTransformBase" variable nil (reparse-symbol indented_block_body) [4964 4999])
                    ("Log10Transform" variable nil (reparse-symbol indented_block_body) [5004 5035])
                    ("InvertedLog10Transform" variable nil (reparse-symbol indented_block_body) [5040 5087])
                    ("Log2Transform" variable nil (reparse-symbol indented_block_body) [5092 5121])
                    ("InvertedLog2Transform" variable nil (reparse-symbol indented_block_body) [5126 5171])
                    ("NaturalLogTransform" variable nil (reparse-symbol indented_block_body) [5176 5217])
                    ("InvertedNaturalLogTransform" variable nil (reparse-symbol indented_block_body) [5222 5279])
                    ("LogTransform" variable nil (reparse-symbol indented_block_body) [5284 5311])
                    ("InvertedLogTransform" variable nil (reparse-symbol indented_block_body) [5316 5359])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *basex*/*basey*:
           The base of the logarithm

        *nonposx*/*nonposy*: ['mask' | 'clip' ]
          non-positive values in *x* or *y* can be masked as
          invalid, or clipped to a very small positive number

        *subsx*/*subsy*:
           Where to place the subticks between each major tick.
           Should be a sequence of integers.  For example, in a log10
           scale: ``[2, 3, 4, 5, 6, 7, 8, 9]``

           will place 8 logarithmically spaced minor ticks between
           each major tick.
        \"\"\"" code nil (reparse-symbol indented_block_body) [5409 5961])
                            ("if" code nil (reparse-symbol indented_block_body) [5970 6292])
                            ("if" code nil (reparse-symbol indented_block_body) [6301 6416])
                            ("if" code nil (reparse-symbol indented_block_body) [6425 6749])
                            ("self" variable nil (reparse-symbol indented_block_body) [6758 6774])
                            ("self" variable nil (reparse-symbol indented_block_body) [6783 6799]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5378 5382])
                            ("axis" variable nil (reparse-symbol function_parameters) [5384 5388])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5390 5398]))                          
                        :documentation "
        *basex*/*basey*:
           The base of the logarithm

        *nonposx*/*nonposy*: ['mask' | 'clip' ]
          non-positive values in *x* or *y* can be masked as
          invalid, or clipped to a very small positive number

        *subsx*/*subsy*:
           Where to place the subticks between each major tick.
           Should be a sequence of integers.  For example, in a log10
           scale: ``[2, 3, 4, 5, 6, 7, 8, 9]``

           will place 8 logarithmically spaced minor ticks between
           each major tick.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5365 6800])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6845 6849])
                            ("axis" variable nil (reparse-symbol function_parameters) [6851 6855]))                          
                        :documentation "
        Set the locators and formatters to specialized versions for
        log scaling.
        ")
                        (reparse-symbol indented_block_body) [6805 7308])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7331 7335]))                          
                        :documentation "
        Return a :class:`~matplotlib.transforms.Transform` instance
        appropriate for the given logarithm base.
        ")
                        (reparse-symbol indented_block_body) [7313 7511])
                    ("limit_range_for_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7542 7546])
                            ("vmin" variable nil (reparse-symbol function_parameters) [7548 7552])
                            ("vmax" variable nil (reparse-symbol function_parameters) [7554 7558])
                            ("minpos" variable nil (reparse-symbol function_parameters) [7560 7566]))                          
                        :documentation "
        Limit the domain to positive values.
        ")
                        (reparse-symbol indented_block_body) [7516 7894]))                  
                :type "class")
                nil [4411 7894])
            ("SymmetricalLogTransform" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [7942 7956])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [7961 7976])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [7981 8000])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [8005 8023])
                    ("__init__" function
                       (:suite 
                          ( ("Transform" code nil (reparse-symbol indented_block_body) [8084 8108])
                            ("self" variable nil (reparse-symbol indented_block_body) [8117 8133])
                            ("self" variable nil (reparse-symbol indented_block_body) [8142 8168])
                            ("self" variable nil (reparse-symbol indented_block_body) [8177 8201])
                            ("self" variable nil (reparse-symbol indented_block_body) [8210 8267])
                            ("self" variable nil (reparse-symbol indented_block_body) [8276 8305]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8042 8046])
                            ("base" variable nil (reparse-symbol function_parameters) [8048 8052])
                            ("linthresh" variable nil (reparse-symbol function_parameters) [8054 8063])
                            ("linscale" variable nil (reparse-symbol function_parameters) [8065 8073]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8029 8306])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8336 8340])
                            ("a" variable nil (reparse-symbol function_parameters) [8342 8343]))                          )
                        (reparse-symbol indented_block_body) [8311 8836])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8854 8858]))                          )
                        (reparse-symbol indented_block_body) [8841 8997]))                  
                :type "class")
                nil [7896 8997])
            ("InvertedSymmetricalLogTransform" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [9053 9067])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [9072 9087])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [9092 9111])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [9116 9134])
                    ("__init__" function
                       (:suite 
                          ( ("Transform" code nil (reparse-symbol indented_block_body) [9195 9219])
                            ("symlog" variable nil (reparse-symbol indented_block_body) [9228 9287])
                            ("self" variable nil (reparse-symbol indented_block_body) [9296 9312])
                            ("self" variable nil (reparse-symbol indented_block_body) [9321 9347])
                            ("self" variable nil (reparse-symbol indented_block_body) [9356 9403])
                            ("self" variable nil (reparse-symbol indented_block_body) [9412 9436])
                            ("self" variable nil (reparse-symbol indented_block_body) [9445 9502]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9153 9157])
                            ("base" variable nil (reparse-symbol function_parameters) [9159 9163])
                            ("linthresh" variable nil (reparse-symbol function_parameters) [9165 9174])
                            ("linscale" variable nil (reparse-symbol function_parameters) [9176 9184]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9140 9503])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9533 9537])
                            ("a" variable nil (reparse-symbol function_parameters) [9539 9540]))                          )
                        (reparse-symbol indented_block_body) [9508 9970])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9988 9992]))                          )
                        (reparse-symbol indented_block_body) [9975 10115]))                  
                :type "class")
                nil [8999 10115])
            ("SymmetricalLogScale" type
               (:documentation "
    The symmetrical logarithmic scale is logarithmic in both the
    positive and negative directions from the origin.

    Since the values close to zero tend toward infinity, there is a
    need to have a range around zero that is linear.  The parameter
    *linthresh* allows the user to specify the size of this range
    (-*linthresh*, *linthresh*).
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [10530 10545])
                    ("SymmetricalLogTransform" variable nil (reparse-symbol indented_block_body) [10575 10624])
                    ("InvertedSymmetricalLogTransform" variable nil (reparse-symbol indented_block_body) [10629 10694])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *basex*/*basey*:
           The base of the logarithm

        *linthreshx*/*linthreshy*:
          The range (-*x*, *x*) within which the plot is linear (to
          avoid having the plot go to infinity around zero).

        *subsx*/*subsy*:
           Where to place the subticks between each major tick.
           Should be a sequence of integers.  For example, in a log10
           scale: ``[2, 3, 4, 5, 6, 7, 8, 9]``

           will place 8 logarithmically spaced minor ticks between
           each major tick.

        *linscalex*/*linscaley*:
           This allows the linear range (-*linthresh* to *linthresh*)
           to be stretched relative to the logarithmic range.  Its
           value is the number of decades to use for each half of the
           linear range.  For example, when *linscale* == 1.0 (the
           default), the space used for the positive and negative
           halves of the linear range will be equal to one decade in
           the logarithmic range.
        \"\"\"" code nil (reparse-symbol indented_block_body) [10744 11766])
                            ("if" code nil (reparse-symbol indented_block_body) [11775 12207])
                            ("if" code nil (reparse-symbol indented_block_body) [12216 12300])
                            ("if" code nil (reparse-symbol indented_block_body) [12308 12402])
                            ("if" code nil (reparse-symbol indented_block_body) [12410 12502])
                            ("self" variable nil (reparse-symbol indented_block_body) [12511 12694])
                            ("self" variable nil (reparse-symbol indented_block_body) [12704 12720])
                            ("self" variable nil (reparse-symbol indented_block_body) [12729 12755])
                            ("self" variable nil (reparse-symbol indented_block_body) [12764 12788])
                            ("self" variable nil (reparse-symbol indented_block_body) [12797 12813]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10713 10717])
                            ("axis" variable nil (reparse-symbol function_parameters) [10719 10723])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10725 10733]))                          
                        :documentation "
        *basex*/*basey*:
           The base of the logarithm

        *linthreshx*/*linthreshy*:
          The range (-*x*, *x*) within which the plot is linear (to
          avoid having the plot go to infinity around zero).

        *subsx*/*subsy*:
           Where to place the subticks between each major tick.
           Should be a sequence of integers.  For example, in a log10
           scale: ``[2, 3, 4, 5, 6, 7, 8, 9]``

           will place 8 logarithmically spaced minor ticks between
           each major tick.

        *linscalex*/*linscaley*:
           This allows the linear range (-*linthresh* to *linthresh*)
           to be stretched relative to the logarithmic range.  Its
           value is the number of decades to use for each half of the
           linear range.  For example, when *linscale* == 1.0 (the
           default), the space used for the positive and negative
           halves of the linear range will be equal to one decade in
           the logarithmic range.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10700 12814])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12859 12863])
                            ("axis" variable nil (reparse-symbol function_parameters) [12865 12869]))                          
                        :documentation "
        Set the locators and formatters to specialized versions for
        symmetrical log scaling.
        ")
                        (reparse-symbol indented_block_body) [12819 13332])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13355 13359]))                          
                        :documentation "
        Return a :class:`SymmetricalLogTransform` instance.
        ")
                        (reparse-symbol indented_block_body) [13337 13477]))                  
                :type "class")
                nil [10117 13477])
            ("LogitTransform" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [13516 13530])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [13535 13550])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [13555 13574])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [13579 13597])
                    ("__init__" function
                       (:suite 
                          ( ("Transform" code nil (reparse-symbol indented_block_body) [13639 13663])
                            ("if" code nil (reparse-symbol indented_block_body) [13672 13783])
                            ("self" variable nil (reparse-symbol indented_block_body) [13791 13812]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13616 13620])
                            ("nonpos" variable nil (reparse-symbol function_parameters) [13622 13628]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13603 13813])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13843 13847])
                            ("a" variable nil (reparse-symbol function_parameters) [13849 13850]))                          
                        :documentation "logit transform (base 10), masked or clipped")
                        (reparse-symbol indented_block_body) [13818 14099])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14117 14121]))                          )
                        (reparse-symbol indented_block_body) [14104 14171]))                  
                :type "class")
                nil [13479 14171])
            ("LogisticTransform" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [14213 14227])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [14232 14247])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [14252 14271])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [14276 14294])
                    ("__init__" function
                       (:suite 
                          ( ("Transform" code nil (reparse-symbol indented_block_body) [14343 14367])
                            ("self" variable nil (reparse-symbol indented_block_body) [14376 14397]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14313 14317])
                            ("nonpos" variable nil (reparse-symbol function_parameters) [14319 14325]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14300 14398])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14428 14432])
                            ("a" variable nil (reparse-symbol function_parameters) [14434 14435]))                          
                        :documentation "logistic transform (base 10)")
                        (reparse-symbol indented_block_body) [14403 14517])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14535 14539]))                          )
                        (reparse-symbol indented_block_body) [14522 14586]))                  
                :type "class")
                nil [14173 14586])
            ("LogitScale" type
               (:documentation "
    Logit scale for data between zero and one, both excluded.

    This scale is similar to a log scale close to zero and to one, and almost
    linear around 0.5. It maps the interval ]0, 1[ onto ]-infty, +infty[.
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [14852 14866])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *nonpos*: ['mask' | 'clip' ]
          values beyond ]0, 1[ can be masked as invalid, or clipped to a number
          very close to 0 or 1
        \"\"\"" code nil (reparse-symbol indented_block_body) [14921 15084])
                            ("if" code nil (reparse-symbol indented_block_body) [15093 15208])
                            ("self" variable nil (reparse-symbol indented_block_body) [15217 15257]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14885 14889])
                            ("axis" variable nil (reparse-symbol function_parameters) [14891 14895])
                            ("nonpos" variable nil (reparse-symbol function_parameters) [14897 14903]))                          
                        :documentation "
        *nonpos*: ['mask' | 'clip' ]
          values beyond ]0, 1[ can be masked as invalid, or clipped to a number
          very close to 0 or 1
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14872 15258])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15281 15285]))                          
                        :documentation "
        Return a :class:`LogitTransform` instance.
        ")
                        (reparse-symbol indented_block_body) [15263 15394])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15439 15443])
                            ("axis" variable nil (reparse-symbol function_parameters) [15445 15449]))                          )
                        (reparse-symbol indented_block_body) [15399 15704])
                    ("limit_range_for_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15735 15739])
                            ("vmin" variable nil (reparse-symbol function_parameters) [15741 15745])
                            ("vmax" variable nil (reparse-symbol function_parameters) [15747 15751])
                            ("minpos" variable nil (reparse-symbol function_parameters) [15753 15759]))                          
                        :documentation "
        Limit the domain to values between 0 and 1 (excluded).
        ")
                        (reparse-symbol indented_block_body) [15709 16108]))                  
                :type "class")
                nil [14588 16108])
            ("_scale_mapping" variable nil nil [16110 16246])
            ("get_scale_names" function nil nil [16249 16353])
            ("scale_factory" function
               (:documentation "
    Return a scale class by name.

    ACCEPTS: [ %(names)s ]
    "
                :arguments 
                  ( ("scale" variable nil (reparse-symbol function_parameters) [16373 16378])
                    ("axis" variable nil (reparse-symbol function_parameters) [16380 16384])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [16386 16394]))                  )
                nil [16355 16695])
            ("scale_factory" code nil nil [16695 16797])
            ("register_scale" function
               (:documentation "
    Register a new kind of scale.

    *scale_class* must be a subclass of :class:`ScaleBase`.
    "
                :arguments 
                  ( ("scale_class" variable nil (reparse-symbol function_parameters) [16819 16830]))                  )
                nil [16800 16995])
            ("get_scale_docs" function (:documentation "
    Helper function for generating docstrings related to scales.
    ") nil [16997 17509])
            ("docstring" code nil nil [17511 17644]))          
      :file "scale.py"
      :pointmax 17645
      :fsize 17644
      :lastmodtime '(22681 7108 707473 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module provides a large set of colormaps, functions for
registering new colormaps and for getting a colormap by name,
and a mixin class for adding color mapping functionality.

\"\"\"" code nil nil [1 190])
            ("" code nil nil [214 299])
            ("six" include nil nil [301 311])
            ("os" include nil nil [313 322])
            ("warnings" include nil nil [323 351])
            ("numpy" include nil nil [390 408])
            ("numpy" include nil nil [409 429])
            ("matplotlib" include nil nil [430 454])
            ("matplotlib.colors" include nil nil [455 489])
            ("matplotlib.cbook" include nil nil [490 522])
            ("matplotlib._cm" include nil nil [523 575])
            ("matplotlib._cm" include nil nil [576 612])
            ("matplotlib._cm_listed" include nil nil [613 668])
            ("cmap_d" variable nil nil [670 699])
            ("_reverser" function (:arguments 
              ( ("f" variable nil (reparse-symbol function_parameters) [799 800]))              ) nil [785 870])
            ("revcmap" function
               (:documentation "Can only handle specification *data* in dictionary format."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [884 888]))                  )
                nil [872 1493])
            ("_reverse_cmap_spec" function
               (:documentation "Reverses cmap specification *spec*, can handle both dict and tuple
    type specs."
                :arguments 
                  ( ("spec" variable nil (reparse-symbol function_parameters) [1518 1522]))                  )
                nil [1495 1938])
            ("_generate_cmap" function
               (:documentation "Generates the requested cmap from its *name*.  The lut size is
    *lutsize*."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1959 1963])
                    ("lutsize" variable nil (reparse-symbol function_parameters) [1965 1972]))                  )
                nil [1940 2386])
            ("LUTSIZE" variable nil nil [2387 2422])
            ("with" code nil nil [2548 3086])
            ("cmap_d" code nil nil [3087 3114])
            ("locals" code nil nil [3116 3139])
            ("register_cmap" function
               (:documentation "
    Add a colormap to the set recognized by :func:`get_cmap`.

    It can be used in two ways::

        register_cmap(name='swirly', cmap=swirly_cmap)

        register_cmap(name='choppy', data=choppydata, lut=128)

    In the first case, *cmap* must be a :class:`matplotlib.colors.Colormap`
    instance.  The *name* is optional; if absent, the name will
    be the :attr:`~matplotlib.colors.Colormap.name` attribute of the *cmap*.

    In the second case, the three arguments are passed to
    the :class:`~matplotlib.colors.LinearSegmentedColormap` initializer,
    and the resulting colormap is registered.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3194 3198])
                    ("cmap" variable nil (reparse-symbol function_parameters) [3205 3209])
                    ("data" variable nil (reparse-symbol function_parameters) [3216 3220])
                    ("lut" variable nil (reparse-symbol function_parameters) [3227 3230]))                  )
                nil [3176 4417])
            ("get_cmap" function
               (:documentation "
    Get a colormap instance, defaulting to rc values if *name* is None.

    Colormaps added with :func:`register_cmap` take precedence over
    built-in colormaps.

    If *name* is a :class:`matplotlib.colors.Colormap` instance, it will be
    returned.

    If *lut* is not None it must be an integer giving the number of
    entries desired in the lookup table, and *name* must be a standard
    mpl colormap name.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4432 4436])
                    ("lut" variable nil (reparse-symbol function_parameters) [4443 4446]))                  )
                nil [4419 5317])
            ("ScalarMappable" type
               (:documentation "
    This is a mixin class to support scalar data to RGBA mapping.
    The ScalarMappable makes use of data normalization before returning
    RGBA colors from the given colormap.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("r\"\"\"

        Parameters
        ----------
        norm : :class:`matplotlib.colors.Normalize` instance
            The normalizing object which scales data, typically into the
            interval ``[0, 1]``.
            If *None*, *norm* defaults to a *colors.Normalize* object which
            initializes its scaling based on the first data processed.
        cmap : str or :class:`~matplotlib.colors.Colormap` instance
            The colormap used to map normalized data values to RGBA colors.
        \"\"\"" code nil (reparse-symbol indented_block_body) [5599 6112])
                            ("self" variable nil (reparse-symbol indented_block_body) [6122 6165])
                            ("if" code nil (reparse-symbol indented_block_body) [6175 6222])
                            ("if" code nil (reparse-symbol indented_block_body) [6230 6285])
                            ("self" variable nil (reparse-symbol indented_block_body) [6294 6308])
                            ("self" variable nil (reparse-symbol indented_block_body) [6379 6395])
                            ("self" variable nil (reparse-symbol indented_block_body) [6461 6487])
                            ("self" variable nil (reparse-symbol indented_block_body) [6575 6595])
                            ("self" variable nil (reparse-symbol indented_block_body) [6604 6639]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5562 5566])
                            ("norm" variable nil (reparse-symbol function_parameters) [5568 5572])
                            ("cmap" variable nil (reparse-symbol function_parameters) [5579 5583]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5549 6640])
                    ("to_rgba" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6657 6661])
                            ("x" variable nil (reparse-symbol function_parameters) [6663 6664])
                            ("alpha" variable nil (reparse-symbol function_parameters) [6666 6671])
                            ("bytes" variable nil (reparse-symbol function_parameters) [6678 6683])
                            ("norm" variable nil (reparse-symbol function_parameters) [6691 6695]))                          
                        :documentation "
        Return a normalized rgba array corresponding to *x*.

        In the normal case, *x* is a 1-D or 2-D sequence of scalars, and
        the corresponding ndarray of rgba values will be returned,
        based on the norm and colormap set for this ScalarMappable.

        There is one special case, for handling images that are already
        rgb or rgba, such as might have been read from an image file.
        If *x* is an ndarray with 3 dimensions,
        and the last dimension is either 3 or 4, then it will be
        treated as an rgb or rgba array, and no mapping will be done.
        If the last dimension is 3, the *alpha* kwarg (defaulting to 1)
        will be used to fill in the transparency.  If the last dimension
        is 4, the *alpha* kwarg is ignored; it does not
        replace the pre-existing alpha.  A ValueError will be raised
        if the third dimension is other than 3 or 4.

        In either case, if *bytes* is *False* (default), the rgba
        array will be floats in the 0-1 range; if it is *True*,
        the returned rgba array will be uint8 in the 0 to 255 range.

        If norm is False, no normalization of the input data is
        performed, and it is assumed to already be in the range (0-1).

        Note: this method assumes the input is well-behaved; it does
        not check for anomalies such as *x* being a masked rgba
        array, or being an integer type other than uint8, or being
        a floating point rgba array with values outside the 0-1 range.
        ")
                        (reparse-symbol indented_block_body) [6645 9440])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9459 9463])
                            ("A" variable nil (reparse-symbol function_parameters) [9465 9466]))                          )
                        (reparse-symbol indented_block_body) [9445 9581])
                    ("get_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9600 9604]))                          )
                        (reparse-symbol indented_block_body) [9586 9657])
                    ("get_cmap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9675 9679]))                          )
                        (reparse-symbol indented_block_body) [9662 9737])
                    ("get_clim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9755 9759]))                          )
                        (reparse-symbol indented_block_body) [9742 9876])
                    ("set_clim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9894 9898])
                            ("vmin" variable nil (reparse-symbol function_parameters) [9900 9904])
                            ("vmax" variable nil (reparse-symbol function_parameters) [9911 9915]))                          
                        :documentation "
        set the norm limits for image scaling; if *vmin* is a length2
        sequence, interpret it as ``(vmin, vmax)`` which is used to
        support setp

        ACCEPTS: a length 2 sequence of floats
        ")
                        (reparse-symbol indented_block_body) [9881 10442])
                    ("set_cmap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10460 10464])
                            ("cmap" variable nil (reparse-symbol function_parameters) [10466 10470]))                          
                        :documentation "
        set the colormap for luminance data

        ACCEPTS: a colormap or registered colormap name
        ")
                        (reparse-symbol indented_block_body) [10447 10676])
                    ("set_norm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10694 10698])
                            ("norm" variable nil (reparse-symbol function_parameters) [10700 10704]))                          )
                        (reparse-symbol indented_block_body) [10681 10859])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10878 10882]))                          
                        :documentation "
        Autoscale the scalar limits on the norm instance using the
        current array
        ")
                        (reparse-symbol indented_block_body) [10864 11155])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11179 11183]))                          
                        :documentation "
        Autoscale the scalar limits on the norm instance using the
        current array, changing only limits that are None
        ")
                        (reparse-symbol indented_block_body) [11160 11497])
                    ("add_checker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11518 11522])
                            ("checker" variable nil (reparse-symbol function_parameters) [11524 11531]))                          
                        :documentation "
        Add an entry to a dictionary of boolean flags
        that are set to True when the mappable is changed.
        ")
                        (reparse-symbol indented_block_body) [11502 11713])
                    ("check_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11735 11739])
                            ("checker" variable nil (reparse-symbol function_parameters) [11741 11748]))                          
                        :documentation "
        If mappable has changed since the last check,
        return True; else return False
        ")
                        (reparse-symbol indented_block_body) [11718 11997])
                    ("changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12014 12018]))                          
                        :documentation "
        Call this whenever the mappable is changed to notify all the
        callbackSM listeners to the 'changed' signal
        ")
                        (reparse-symbol indented_block_body) [12002 12296]))                  
                :type "class")
                nil [5319 12296]))          
      :file "cm.py"
      :pointmax 12296
      :fsize 12295
      :lastmodtime '(22681 7108 739473 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module for converting numbers or color arguments to *RGB* or *RGBA*

*RGB* and *RGBA* are sequences of, respectively, 3 or 4 floats in the
range 0-1.

This module includes functions and classes for color specification
conversions, and for mapping numbers to colors in a 1-D array of colors called
a colormap. Colormapping typically involves two steps: a data array is first
mapped onto the range 0-1 using an instance of :class:`Normalize` or of a
subclass; then this number in the 0-1 range is mapped to a color using an
instance of a subclass of :class:`Colormap`.  Two are provided here:
:class:`LinearSegmentedColormap`, which is used to generate all the built-in
colormap instances, but is also useful for making custom colormaps, and
:class:`ListedColormap`, which is used for generating a custom colormap from a
list of color specifications.

The module also provides functions for checking whether an object can be
interpreted as a color (:func:`is_color_like`), for converting such an object
to an RGBA tuple (:func:`to_rgba`) or to an HTML-like hex string in the
`#rrggbb` format (:func:`to_hex`), and a sequence of colors to an `(n, 4)`
RGBA array (:func:`to_rgba_array`).  Caching is used for efficiency.

Commands which take color arguments can use several formats to specify
the colors.  For the basic built-in colors, you can use a single letter

    - `b`: blue
    - `g`: green
    - `r`: red
    - `c`: cyan
    - `m`: magenta
    - `y`: yellow
    - `k`: black
    - `w`: white

To use the colors that are part of the active color cycle in the current style,
use `C` followed by a digit.  For example:

    - `C0`: The first color in the cycle
    - `C1`: The second color in the cycle

Gray shades can be given as a string encoding a float in the 0-1 range, e.g.::

    color = '0.75'

For a greater range of colors, you have two options.  You can specify the
color using an html hex string, as in::

    color = '#eeefff'

(possibly specifying an alpha value as well), or you can pass an `(r, g, b)`
or `(r, g, b, a)` tuple, where each of `r`, `g`, `b` and `a` are in the range
[0,1].

Finally, legal html names for colors, like 'red', 'burlywood' and 'chartreuse'
are supported.
\"\"\"" code nil nil [1 2211])
            ("" code nil nil [2236 2321])
            ("re" include nil nil [2322 2331])
            ("six" include nil nil [2332 2342])
            ("six.moves" include nil nil [2343 2368])
            ("warnings" include nil nil [2369 2384])
            ("numpy" include nil nil [2386 2404])
            ("numpy" include nil nil [2405 2425])
            ("matplotlib.cbook" include nil nil [2426 2458])
            ("XKCD_COLORS" include nil nil [2477 2537])
            ("CSS4_COLORS" include nil nil [2477 2537])
            ("TABLEAU_COLORS" include nil nil [2477 2537])
            ("BASE_COLORS" include nil nil [2477 2537])
            ("_ColorMapping" type
               (:superclasses ("dict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [2608 2652])
                            ("self" variable nil (reparse-symbol indented_block_body) [2661 2676]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2584 2588])
                            ("mapping" variable nil (reparse-symbol function_parameters) [2590 2597]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2571 2677])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2698 2702])
                            ("key" variable nil (reparse-symbol function_parameters) [2704 2707])
                            ("value" variable nil (reparse-symbol function_parameters) [2709 2714]))                          )
                        (reparse-symbol indented_block_body) [2682 2803])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2824 2828])
                            ("key" variable nil (reparse-symbol function_parameters) [2830 2833])
                            ("value" variable nil (reparse-symbol function_parameters) [2835 2840]))                          )
                        (reparse-symbol indented_block_body) [2808 2929]))                  
                :type "class")
                nil [2540 2929])
            ("_colors_full_map" variable nil nil [2931 2952])
            ("_colors_full_map" code nil nil [2986 3022])
            ("_colors_full_map" code nil nil [3023 3175])
            ("_colors_full_map" code nil nil [3176 3212])
            ("_colors_full_map" code nil nil [3213 3252])
            ("_colors_full_map" code nil nil [3253 3408])
            ("_colors_full_map" code nil nil [3409 3445])
            ("_colors_full_map" variable nil nil [3446 3496])
            ("get_named_colors_mapping" function (:documentation "Return the global mapping of names to named colors.
    ") nil [3499 3626])
            ("_is_nth_color" function
               (:documentation "Return whether `c` can be interpreted as an item in the color cycle.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [3646 3647]))                  )
                nil [3628 3808])
            ("is_color_like" function
               (:documentation "Return whether `c` can be interpreted as an RGB(A) color.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [3828 3829]))                  )
                nil [3810 4136])
            ("to_rgba" function
               (:documentation "Convert `c` to an RGBA color.

    If `alpha` is not `None`, it forces the alpha value, except if `c` is
    \"none\" (case-insensitive), which always maps to `(0, 0, 0, 0)`.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [4150 4151])
                    ("alpha" variable nil (reparse-symbol function_parameters) [4153 4158]))                  )
                nil [4138 4935])
            ("_to_rgba_no_colorcycle" function
               (:documentation "Convert `c` to an RGBA color, with no support for color-cycle syntax.

    If `alpha` is not `None`, it forces the alpha value, except if `c` is
    \"none\" (case-insensitive), which always maps to `(0, 0, 0, 0)`.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [4964 4965])
                    ("alpha" variable nil (reparse-symbol function_parameters) [4967 4972]))                  )
                nil [4937 6960])
            ("to_rgba_array" function
               (:documentation "Convert `c` to a (n, 4) array of RGBA colors.

    If `alpha` is not `None`, it forces the alpha value.  If `c` is \"none\"
    (case-insensitive) or an empty list, an empty array is returned.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [6980 6981])
                    ("alpha" variable nil (reparse-symbol function_parameters) [6983 6988]))                  )
                nil [6962 8306])
            ("to_rgb" function
               (:documentation "Convert `c` to an RGB color, silently dropping the alpha channel.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [8319 8320]))                  )
                nil [8308 8430])
            ("to_hex" function
               (:documentation "Convert `c` to a hex color.

    Uses the #rrggbb format if `keep_alpha` is False (the default), `#rrggbbaa`
    otherwise.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [8443 8444])
                    ("keep_alpha" variable nil (reparse-symbol function_parameters) [8446 8456]))                  )
                nil [8432 8768])
            ("cnames" variable nil nil [8817 8837])
            ("hexColorPattern" variable nil nil [8838 8889])
            ("rgb2hex" function (:arguments 
              ( ("c" variable nil (reparse-symbol function_parameters) [8904 8905]))              ) nil [8892 9002])
            ("hex2color" function
               (:documentation "
    Take a hex string *s* and return the corresponding rgb 3-tuple
    Example: #efefef -> (0.93725, 0.93725, 0.93725)
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [9018 9019]))                  )
                nil [9004 9193])
            ("ColorConverter" type
               (:documentation "
    Provides methods for converting color specifications to *RGB* or *RGBA*

    Caching is used for more efficient conversion upon repeated calls
    with the same argument.

    Ordinarily only the single instance instantiated in this module,
    *colorConverter*, is needed.
    "
                :superclasses ("object")
                :members 
                  ( ("colors" variable nil (reparse-symbol indented_block_body) [9524 9549])
                    ("cache" variable nil (reparse-symbol indented_block_body) [9554 9584])
                    ("to_rgb" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("arg" variable nil (reparse-symbol function_parameters) [9619 9622]))                          
                        :documentation "
        Returns an *RGB* tuple of three floats from 0-1.

        *arg* can be an *RGB* or *RGBA* sequence or a string in any of
        several forms:

            1) a letter from the set 'rgbcmykw'
            2) a hex color string, like '#00FFFF'
            3) a standard name, like 'aqua'
            4) a string representation of a float, like '0.4',
               indicating gray on a 0-1 scale

        if *arg* is *RGBA*, the *A* will simply be discarded.
        ")
                        (reparse-symbol indented_block_body) [9590 10143])
                    ("to_rgba" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("arg" variable nil (reparse-symbol function_parameters) [10178 10181])
                            ("alpha" variable nil (reparse-symbol function_parameters) [10183 10188]))                          
                        :documentation "
        Returns an *RGBA* tuple of four floats from 0-1.

        For acceptable values of *arg*, see :meth:`to_rgb`.
        In addition, if *arg* is \"none\" (case-insensitive),
        then (0,0,0,0) will be returned.
        If *arg* is an *RGBA* sequence and *alpha* is not *None*,
        *alpha* will replace the original *A*.
        ")
                        (reparse-symbol indented_block_body) [10148 10587])
                    ("to_rgba_array" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("arg" variable nil (reparse-symbol function_parameters) [10628 10631])
                            ("alpha" variable nil (reparse-symbol function_parameters) [10633 10638]))                          
                        :documentation "
        Returns a numpy array of *RGBA* tuples.

        Accepts a single mpl color spec or a sequence of specs.

        Special case to handle \"no color\": if *c* is \"none\" (case-insensitive),
        then an empty array will be returned.  Same for an empty list.
        ")
                        (reparse-symbol indented_block_body) [10592 10976]))                  
                :type "class")
                nil [9195 10976])
            ("colorConverter" variable nil nil [10978 11011])
            ("makeMappingArray" function
               (:documentation "Create an *N* -element 1-d lookup table

    *data* represented by a list of x,y0,y1 mapping correspondences.
    Each element in this list represents how a value between 0 and 1
    (inclusive) represented by x is mapped to a corresponding value
    between 0 and 1 (inclusive). The two values of y are to allow
    for discontinuous mapping functions (say as might be found in a
    sawtooth) where y0 represents the value of y for values of x
    <= to that given, and y1 is the value to be used for x > than
    that given). The list must start with x=0, end with x=1, and
    all values of x must be in increasing order. Values between
    the given mapping points are determined by simple linear interpolation.

    Alternatively, data can be a function mapping values between 0 - 1
    to 0 - 1.

    The function returns an array \"result\" where ``result[x*(N-1)]``
    gives the closest value for values of x between 0 and 1.
    "
                :arguments 
                  ( ("N" variable nil (reparse-symbol function_parameters) [11089 11090])
                    ("data" variable nil (reparse-symbol function_parameters) [11092 11096])
                    ("gamma" variable nil (reparse-symbol function_parameters) [11098 11103]))                  )
                nil [11068 13248])
            ("Colormap" type
               (:documentation "
    Baseclass for all scalar to RGBA mappings.

    Typically Colormap instances are used to convert data values (floats) from
    the interval ``[0, 1]`` to the RGBA color that the respective Colormap
    represents. For scaling of data into the ``[0, 1]`` interval see
    :class:`matplotlib.colors.Normalize`. It is worth noting that
    :class:`matplotlib.cm.ScalarMappable` subclasses make heavy use of this
    ``data->normalize->map-to-color`` processing chain.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        name : str
            The name of the colormap.
        N : int
            The number of rgb quantization levels.

        \"\"\"" code nil (reparse-symbol indented_block_body) [13805 13983])
                            ("self" variable nil (reparse-symbol indented_block_body) [13992 14008])
                            ("self" variable nil (reparse-symbol indented_block_body) [14017 14032])
                            ("self" variable nil (reparse-symbol indented_block_body) [14072 14109])
                            ("self" variable nil (reparse-symbol indented_block_body) [14151 14174])
                            ("self" variable nil (reparse-symbol indented_block_body) [14183 14205])
                            ("self" variable nil (reparse-symbol indented_block_body) [14214 14236])
                            ("self" code nil (reparse-symbol indented_block_body) [14245 14270])
                            ("self" code nil (reparse-symbol indented_block_body) [14279 14303])
                            ("self" variable nil (reparse-symbol indented_block_body) [14312 14332])
                            ("self" variable nil (reparse-symbol indented_block_body) [14624 14652]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13777 13781])
                            ("name" variable nil (reparse-symbol function_parameters) [13783 13787])
                            ("N" variable nil (reparse-symbol function_parameters) [13789 13790]))                          
                        :documentation "
        Parameters
        ----------
        name : str
            The name of the colormap.
        N : int
            The number of rgb quantization levels.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13764 14653])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14671 14675])
                            ("X" variable nil (reparse-symbol function_parameters) [14677 14678])
                            ("alpha" variable nil (reparse-symbol function_parameters) [14680 14685])
                            ("bytes" variable nil (reparse-symbol function_parameters) [14692 14697]))                          
                        :documentation "
        Parameters
        ----------
        X : scalar, ndarray
            The data value(s) to convert to RGBA.
            For floats, X should be in the interval ``[0.0, 1.0]`` to
            return the RGBA values ``X*100`` percent along the Colormap line.
            For integers, X should be in the interval ``[0, Colormap.N)`` to
            return RGBA values *indexed* from the Colormap with index ``X``.
        alpha : float, None
            Alpha must be a scalar between 0 and 1, or None.
        bytes : bool
            If False (default), the returned RGBA values will be floats in the
            interval ``[0, 1]`` otherwise they will be uint8s in the interval
            ``[0, 255]``.

        Returns
        -------
        Tuple of RGBA values if X is scalar, othewise an array of
        RGBA values with a shape of ``X.shape + (4, )``.

        ")
                        (reparse-symbol indented_block_body) [14658 18433])
                    ("set_bad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18450 18454])
                            ("color" variable nil (reparse-symbol function_parameters) [18456 18461])
                            ("alpha" variable nil (reparse-symbol function_parameters) [18467 18472]))                          
                        :documentation "Set color to be used for masked values.
        ")
                        (reparse-symbol indented_block_body) [18438 18663])
                    ("set_under" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18682 18686])
                            ("color" variable nil (reparse-symbol function_parameters) [18688 18693])
                            ("alpha" variable nil (reparse-symbol function_parameters) [18699 18704]))                          
                        :documentation "Set color to be used for low out-of-range values.
           Requires norm.clip = False
        ")
                        (reparse-symbol indented_block_body) [18668 18945])
                    ("set_over" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18963 18967])
                            ("color" variable nil (reparse-symbol function_parameters) [18969 18974])
                            ("alpha" variable nil (reparse-symbol function_parameters) [18980 18985]))                          
                        :documentation "Set color to be used for high out-of-range values.
           Requires norm.clip = False
        ")
                        (reparse-symbol indented_block_body) [18950 19226])
                    ("_set_extremes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19249 19253]))                          )
                        (reparse-symbol indented_block_body) [19231 19611])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19626 19630]))                          
                        :documentation "Generate the lookup table, self._lut")
                        (reparse-symbol indented_block_body) [19616 19741])
                    ("is_gray" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19758 19762]))                          )
                        (reparse-symbol indented_block_body) [19746 19950])
                    ("_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19969 19973])
                            ("lutsize" variable nil (reparse-symbol function_parameters) [19975 19982]))                          
                        :documentation "
        Return a new color map with *lutsize* entries.
        ")
                        (reparse-symbol indented_block_body) [19955 20100]))                  
                :type "class")
                nil [13250 20100])
            ("LinearSegmentedColormap" type
               (:documentation "Colormap objects based on lookup tables using linear segments.

    The lookup table is generated using linear interpolation for each
    primary color, with the 0-1 domain divided into any number of
    segments.
    "
                :superclasses ("Colormap")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create color map from linear mapping segments

        segmentdata argument is a dictionary with a red, green and blue
        entries. Each entry should be a list of *x*, *y0*, *y1* tuples,
        forming rows in a table. Entries for alpha are optional.

        Example: suppose you want red to increase from 0 to 1 over
        the bottom half, green to do the same over the middle half,
        and blue over the top half.  Then you would use::

            cdict = {'red':   [(0.0,  0.0, 0.0),
                               (0.5,  1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'green': [(0.0,  0.0, 0.0),
                               (0.25, 0.0, 0.0),
                               (0.75, 1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'blue':  [(0.0,  0.0, 0.0),
                               (0.5,  0.0, 0.0),
                               (1.0,  1.0, 1.0)]}

        Each row in the table for a given color is a sequence of
        *x*, *y0*, *y1* tuples.  In each sequence, *x* must increase
        monotonically from 0 to 1.  For any input value *z* falling
        between *x[i]* and *x[i+1]*, the output value of a given color
        will be linearly interpolated between *y1[i]* and *y0[i+1]*::

            row i:   x  y0  y1
                           /
                          /
            row i+1: x  y0  y1

        Hence y0 in the first row and y1 in the last row are never used.


        .. seealso::

               :meth:`LinearSegmentedColormap.from_list`
               Static method; factory function for generating a
               smoothly-varying LinearSegmentedColormap.

               :func:`makeMappingArray`
               For information about making a mapping array.
        \"\"\"" code nil (reparse-symbol indented_block_body) [20441 22243])
                            ("self" variable nil (reparse-symbol indented_block_body) [22331 22354])
                            ("Colormap" code nil (reparse-symbol indented_block_body) [22363 22395])
                            ("self" variable nil (reparse-symbol indented_block_body) [22404 22435])
                            ("self" variable nil (reparse-symbol indented_block_body) [22444 22463]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20389 20393])
                            ("name" variable nil (reparse-symbol function_parameters) [20395 20399])
                            ("segmentdata" variable nil (reparse-symbol function_parameters) [20401 20412])
                            ("N" variable nil (reparse-symbol function_parameters) [20414 20415])
                            ("gamma" variable nil (reparse-symbol function_parameters) [20421 20426]))                          
                        :documentation "Create color map from linear mapping segments

        segmentdata argument is a dictionary with a red, green and blue
        entries. Each entry should be a list of *x*, *y0*, *y1* tuples,
        forming rows in a table. Entries for alpha are optional.

        Example: suppose you want red to increase from 0 to 1 over
        the bottom half, green to do the same over the middle half,
        and blue over the top half.  Then you would use::

            cdict = {'red':   [(0.0,  0.0, 0.0),
                               (0.5,  1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'green': [(0.0,  0.0, 0.0),
                               (0.25, 0.0, 0.0),
                               (0.75, 1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'blue':  [(0.0,  0.0, 0.0),
                               (0.5,  0.0, 0.0),
                               (1.0,  1.0, 1.0)]}

        Each row in the table for a given color is a sequence of
        *x*, *y0*, *y1* tuples.  In each sequence, *x* must increase
        monotonically from 0 to 1.  For any input value *z* falling
        between *x[i]* and *x[i+1]*, the output value of a given color
        will be linearly interpolated between *y1[i]* and *y0[i+1]*::

            row i:   x  y0  y1
                           /
                          /
            row i+1: x  y0  y1

        Hence y0 in the first row and y1 in the last row are never used.


        .. seealso::

               :meth:`LinearSegmentedColormap.from_list`
               Static method; factory function for generating a
               smoothly-varying LinearSegmentedColormap.

               :func:`makeMappingArray`
               For information about making a mapping array.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20376 22464])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22479 22483]))                          )
                        (reparse-symbol indented_block_body) [22469 23062])
                    ("set_gamma" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23081 23085])
                            ("gamma" variable nil (reparse-symbol function_parameters) [23087 23092]))                          
                        :documentation "
        Set a new gamma value and regenerate color map.
        ")
                        (reparse-symbol indented_block_body) [23067 23224])
                    ("from_list" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("name" variable nil (reparse-symbol function_parameters) [23261 23265])
                            ("colors" variable nil (reparse-symbol function_parameters) [23267 23273])
                            ("N" variable nil (reparse-symbol function_parameters) [23275 23276])
                            ("gamma" variable nil (reparse-symbol function_parameters) [23282 23287]))                          
                        :documentation "
        Make a linear segmented colormap with *name* from a sequence
        of *colors* which evenly transitions from colors[0] at val=0
        to colors[-1] at val=1.  *N* is the number of rgb quantization
        levels.
        Alternatively, a list of (value, color) tuples can be given
        to divide the range unevenly.
        ")
                        (reparse-symbol indented_block_body) [23229 24426])
                    ("_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24445 24449])
                            ("lutsize" variable nil (reparse-symbol function_parameters) [24451 24458]))                          
                        :documentation "
        Return a new color map with *lutsize* entries.
        ")
                        (reparse-symbol indented_block_body) [24431 24618]))                  
                :type "class")
                nil [20102 24618])
            ("ListedColormap" type
               (:documentation "Colormap object generated from a list of colors.

    This may be most useful when indexing directly into a colormap,
    but it can also be used to generate special colormaps for ordinary
    mapping.
    "
                :superclasses ("Colormap")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Make a colormap from a list of colors.

        *colors*
            a list of matplotlib color specifications,
            or an equivalent Nx3 or Nx4 floating point array
            (*N* rgb or rgba values)
        *name*
            a string to identify the colormap
        *N*
            the number of entries in the map.  The default is *None*,
            in which case there is one colormap entry for each
            element in the list of colors.  If::

                N < len(colors)

            the list will be truncated at *N*.  If::

                N > len(colors)

            the list will be extended by repetition.
        \"\"\"" code nil (reparse-symbol indented_block_body) [24935 25597])
                            ("self" variable nil (reparse-symbol indented_block_body) [25606 25626])
                            ("self" variable nil (reparse-symbol indented_block_body) [25635 25658])
                            ("if" code nil (reparse-symbol indented_block_body) [25774 26618])
                            ("Colormap" code nil (reparse-symbol indented_block_body) [26626 26658]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24886 24890])
                            ("colors" variable nil (reparse-symbol function_parameters) [24892 24898])
                            ("name" variable nil (reparse-symbol function_parameters) [24900 24904])
                            ("N" variable nil (reparse-symbol function_parameters) [24918 24919]))                          
                        :documentation "
        Make a colormap from a list of colors.

        *colors*
            a list of matplotlib color specifications,
            or an equivalent Nx3 or Nx4 floating point array
            (*N* rgb or rgba values)
        *name*
            a string to identify the colormap
        *N*
            the number of entries in the map.  The default is *None*,
            in which case there is one colormap entry for each
            element in the list of colors.  If::

                N < len(colors)

            the list will be truncated at *N*.  If::

                N > len(colors)

            the list will be extended by repetition.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24873 26659])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26674 26678]))                          )
                        (reparse-symbol indented_block_body) [26664 26881])
                    ("_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26900 26904])
                            ("lutsize" variable nil (reparse-symbol function_parameters) [26906 26913]))                          
                        :documentation "
        Return a new color map with *lutsize* entries.
        ")
                        (reparse-symbol indented_block_body) [26886 27099]))                  
                :type "class")
                nil [24620 27099])
            ("Normalize" type
               (:documentation "
    A class which, when called, can normalize data into
    the ``[0.0, 1.0]`` interval.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        If *vmin* or *vmax* is not given, they are initialized from the
        minimum and maximum value respectively of the first input
        processed.  That is, *__call__(A)* calls *autoscale_None(A)*.
        If *clip* is *True* and the given value falls outside the range,
        the returned value will be 0 or 1, whichever is closer.
        Returns 0 if::

            vmin==vmax

        Works with scalars or arrays, including masked arrays.  If
        *clip* is *True*, masked values are set to 1; otherwise they
        remain masked.  Clipping silently defeats the purpose of setting
        the over, under, and masked colors in the colormap, so it is
        likely to lead to surprises; therefore the default is
        *clip* = *False*.
        \"\"\"" code nil (reparse-symbol indented_block_body) [27298 28072])
                            ("self" variable nil (reparse-symbol indented_block_body) [28081 28097])
                            ("self" variable nil (reparse-symbol indented_block_body) [28106 28122])
                            ("self" variable nil (reparse-symbol indented_block_body) [28131 28147]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27249 27253])
                            ("vmin" variable nil (reparse-symbol function_parameters) [27255 27259])
                            ("vmax" variable nil (reparse-symbol function_parameters) [27266 27270])
                            ("clip" variable nil (reparse-symbol function_parameters) [27277 27281]))                          
                        :documentation "
        If *vmin* or *vmax* is not given, they are initialized from the
        minimum and maximum value respectively of the first input
        processed.  That is, *__call__(A)* calls *autoscale_None(A)*.
        If *clip* is *True* and the given value falls outside the range,
        the returned value will be 0 or 1, whichever is closer.
        Returns 0 if::

            vmin==vmax

        Works with scalars or arrays, including masked arrays.  If
        *clip* is *True*, masked values are set to 1; otherwise they
        remain masked.  Clipping silently defeats the purpose of setting
        the over, under, and masked colors in the colormap, so it is
        likely to lead to surprises; therefore the default is
        *clip* = *False*.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27236 28148])
                    ("process_value" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("value" variable nil (reparse-symbol function_parameters) [28189 28194]))                          
                        :documentation "
        Homogenize the input *value* for easy and efficient normalization.

        *value* can be a scalar or sequence.

        Returns *result*, *is_scalar*, where *result* is a
        masked array matching *value*.  Float dtypes are preserved;
        integer types with two bytes or smaller are converted to
        np.float32, and larger types are converted to np.float.
        Preserving float32 when possible, and using in-place operations,
        can greatly improve speed for large arrays.

        Experimental; we may want to add an option to force the
        use of float32.
        ")
                        (reparse-symbol indented_block_body) [28153 29237])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29255 29259])
                            ("value" variable nil (reparse-symbol function_parameters) [29261 29266])
                            ("clip" variable nil (reparse-symbol function_parameters) [29268 29272]))                          
                        :documentation "
        Normalize *value* data in the ``[vmin, vmax]`` interval into
        the ``[0.0, 1.0]`` interval and return it.  *clip* defaults
        to *self.clip* (which defaults to *False*).  If not already
        initialized, *vmin* and *vmax* are initialized using
        *autoscale_None(value)*.
        ")
                        (reparse-symbol indented_block_body) [29242 30760])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30777 30781])
                            ("value" variable nil (reparse-symbol function_parameters) [30783 30788]))                          )
                        (reparse-symbol indented_block_body) [30765 31162])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31181 31185])
                            ("A" variable nil (reparse-symbol function_parameters) [31187 31188]))                          
                        :documentation "
        Set *vmin*, *vmax* to min, max of *A*.
        ")
                        (reparse-symbol indented_block_body) [31167 31322])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31346 31350])
                            ("A" variable nil (reparse-symbol function_parameters) [31352 31353]))                          )
                        (reparse-symbol indented_block_body) [31327 31573])
                    ("scaled" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31589 31593]))                          )
                        (reparse-symbol indented_block_body) [31578 31704]))                  
                :type "class")
                nil [27101 31704])
            ("LogNorm" type
               (:documentation "
    Normalize a given value to the 0-1 range on a log scale
    "
                :superclasses ("Normalize")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31825 31829])
                            ("value" variable nil (reparse-symbol function_parameters) [31831 31836])
                            ("clip" variable nil (reparse-symbol function_parameters) [31838 31842]))                          )
                        (reparse-symbol indented_block_body) [31812 33099])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33116 33120])
                            ("value" variable nil (reparse-symbol function_parameters) [33122 33127]))                          )
                        (reparse-symbol indented_block_body) [33104 33454])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33473 33477])
                            ("A" variable nil (reparse-symbol function_parameters) [33479 33480]))                          
                        :documentation "
        Set *vmin*, *vmax* to min, max of *A*.
        ")
                        (reparse-symbol indented_block_body) [33459 33665])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33689 33693])
                            ("A" variable nil (reparse-symbol function_parameters) [33695 33696]))                          )
                        (reparse-symbol indented_block_body) [33670 34008]))                  
                :type "class")
                nil [31706 34008])
            ("SymLogNorm" type
               (:documentation "
    The symmetrical logarithmic scale is logarithmic in both the
    positive and negative directions from the origin.

    Since the values close to zero tend toward infinity, there is a
    need to have a range around zero that is linear.  The parameter
    *linthresh* allows the user to specify the size of this range
    (-*linthresh*, *linthresh*).
    "
                :superclasses ("Normalize")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *linthresh*:
        The range within which the plot is linear (to
        avoid having the plot go to infinity around zero).

        *linscale*:
        This allows the linear range (-*linthresh* to *linthresh*)
        to be stretched relative to the logarithmic range.  Its
        value is the number of decades to use for each half of the
        linear range.  For example, when *linscale* == 1.0 (the
        default), the space used for the positive and negative
        halves of the linear range will be equal to one decade in
        the logarithmic range. Defaults to 1.
        \"\"\"" code nil (reparse-symbol indented_block_body) [34519 35126])
                            ("Normalize" code nil (reparse-symbol indented_block_body) [35135 35177])
                            ("self" variable nil (reparse-symbol indented_block_body) [35186 35219])
                            ("self" variable nil (reparse-symbol indented_block_body) [35228 35280])
                            ("if" code nil (reparse-symbol indented_block_body) [35289 35371]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34427 34431])
                            ("linthresh" variable nil (reparse-symbol function_parameters) [34434 34443])
                            ("linscale" variable nil (reparse-symbol function_parameters) [34445 34453])
                            ("vmin" variable nil (reparse-symbol function_parameters) [34476 34480])
                            ("vmax" variable nil (reparse-symbol function_parameters) [34487 34491])
                            ("clip" variable nil (reparse-symbol function_parameters) [34498 34502]))                          
                        :documentation "
        *linthresh*:
        The range within which the plot is linear (to
        avoid having the plot go to infinity around zero).

        *linscale*:
        This allows the linear range (-*linthresh* to *linthresh*)
        to be stretched relative to the logarithmic range.  Its
        value is the number of decades to use for each half of the
        linear range.  For example, when *linscale* == 1.0 (the
        default), the space used for the positive and negative
        halves of the linear range will be equal to one decade in
        the logarithmic range. Defaults to 1.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34414 35371])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35389 35393])
                            ("value" variable nil (reparse-symbol function_parameters) [35395 35400])
                            ("clip" variable nil (reparse-symbol function_parameters) [35402 35406]))                          )
                        (reparse-symbol indented_block_body) [35376 36230])
                    ("_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36250 36254])
                            ("a" variable nil (reparse-symbol function_parameters) [36256 36257]))                          
                        :documentation "
        Inplace transformation.
        ")
                        (reparse-symbol indented_block_body) [36235 36593])
                    ("_inv_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36617 36621])
                            ("a" variable nil (reparse-symbol function_parameters) [36623 36624]))                          
                        :documentation "
        Inverse inplace Transformation.
        ")
                        (reparse-symbol indented_block_body) [36598 36988])
                    ("_transform_vmin_vmax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37018 37022]))                          
                        :documentation "
        Calculates vmin and vmax in the transformed system.
        ")
                        (reparse-symbol indented_block_body) [36993 37261])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37278 37282])
                            ("value" variable nil (reparse-symbol function_parameters) [37284 37289]))                          )
                        (reparse-symbol indented_block_body) [37266 37516])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37535 37539])
                            ("A" variable nil (reparse-symbol function_parameters) [37541 37542]))                          
                        :documentation "
        Set *vmin*, *vmax* to min, max of *A*.
        ")
                        (reparse-symbol indented_block_body) [37521 37712])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37736 37740])
                            ("A" variable nil (reparse-symbol function_parameters) [37742 37743]))                          
                        :documentation " autoscale only None-valued vmin or vmax ")
                        (reparse-symbol indented_block_body) [37717 38043]))                  
                :type "class")
                nil [34010 38043])
            ("PowerNorm" type
               (:documentation "
    Normalize a given value to the ``[0, 1]`` interval with a power-law
    scaling. This will clip any negative data points to 0.
    "
                :superclasses ("Normalize")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Normalize" code nil (reparse-symbol indented_block_body) [38293 38335])
                            ("self" variable nil (reparse-symbol indented_block_body) [38344 38362]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38237 38241])
                            ("gamma" variable nil (reparse-symbol function_parameters) [38243 38248])
                            ("vmin" variable nil (reparse-symbol function_parameters) [38250 38254])
                            ("vmax" variable nil (reparse-symbol function_parameters) [38261 38265])
                            ("clip" variable nil (reparse-symbol function_parameters) [38272 38276]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38224 38363])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38381 38385])
                            ("value" variable nil (reparse-symbol function_parameters) [38387 38392])
                            ("clip" variable nil (reparse-symbol function_parameters) [38394 38398]))                          )
                        (reparse-symbol indented_block_body) [38368 39345])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39362 39366])
                            ("value" variable nil (reparse-symbol function_parameters) [39368 39373]))                          )
                        (reparse-symbol indented_block_body) [39350 39753])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39772 39776])
                            ("A" variable nil (reparse-symbol function_parameters) [39778 39779]))                          
                        :documentation "
        Set *vmin*, *vmax* to min, max of *A*.
        ")
                        (reparse-symbol indented_block_body) [39758 40092])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40116 40120])
                            ("A" variable nil (reparse-symbol function_parameters) [40122 40123]))                          )
                        (reparse-symbol indented_block_body) [40097 40538]))                  
                :type "class")
                nil [38045 40538])
            ("BoundaryNorm" type
               (:documentation "
    Generate a colormap index based on discrete intervals.

    Unlike :class:`Normalize` or :class:`LogNorm`,
    :class:`BoundaryNorm` maps values to integers instead of to the
    interval 0-1.

    Mapping to the 0-1 interval could have been done via
    piece-wise linear interpolation, but using integers seems
    simpler, and reduces the number of conversions back and forth
    between integer and floating point.
    "
                :superclasses ("Normalize")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *boundaries*
            a monotonically increasing sequence
        *ncolors*
            number of colors in the colormap to be used

        If::

            b[i] <= v < b[i+1]

        then v is mapped to color j;
        as i varies from 0 to len(boundaries)-2,
        j goes from 0 to ncolors-1.

        Out-of-range values are mapped
        to -1 if low and ncolors if high; these are converted
        to valid indices by
        :meth:`Colormap.__call__` .
        If clip == True, out-of-range values
        are mapped to 0 if low and ncolors-1 if high.
        \"\"\"" code nil (reparse-symbol indented_block_body) [41075 41667])
                            ("self" variable nil (reparse-symbol indented_block_body) [41676 41692])
                            ("self" variable nil (reparse-symbol indented_block_body) [41701 41726])
                            ("self" variable nil (reparse-symbol indented_block_body) [41735 41761])
                            ("self" variable nil (reparse-symbol indented_block_body) [41770 41810])
                            ("self" variable nil (reparse-symbol indented_block_body) [41819 41848])
                            ("self" variable nil (reparse-symbol indented_block_body) [41857 41877])
                            ("if" code nil (reparse-symbol indented_block_body) [41886 41994]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41027 41031])
                            ("boundaries" variable nil (reparse-symbol function_parameters) [41033 41043])
                            ("ncolors" variable nil (reparse-symbol function_parameters) [41045 41052])
                            ("clip" variable nil (reparse-symbol function_parameters) [41054 41058]))                          
                        :documentation "
        *boundaries*
            a monotonically increasing sequence
        *ncolors*
            number of colors in the colormap to be used

        If::

            b[i] <= v < b[i+1]

        then v is mapped to color j;
        as i varies from 0 to len(boundaries)-2,
        j goes from 0 to ncolors-1.

        Out-of-range values are mapped
        to -1 if low and ncolors if high; these are converted
        to valid indices by
        :meth:`Colormap.__call__` .
        If clip == True, out-of-range values
        are mapped to 0 if low and ncolors-1 if high.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41014 41994])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42012 42016])
                            ("value" variable nil (reparse-symbol function_parameters) [42018 42023])
                            ("clip" variable nil (reparse-symbol function_parameters) [42025 42029]))                          )
                        (reparse-symbol indented_block_body) [41999 42861])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42878 42882])
                            ("value" variable nil (reparse-symbol function_parameters) [42884 42889]))                          )
                        (reparse-symbol indented_block_body) [42866 42952]))                  
                :type "class")
                nil [40540 42952])
            ("NoNorm" type
               (:documentation "
    Dummy replacement for Normalize, for the case where we
    want to use indices directly in a
    :class:`~matplotlib.cm.ScalarMappable` .
    "
                :superclasses ("Normalize")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43154 43158])
                            ("value" variable nil (reparse-symbol function_parameters) [43160 43165])
                            ("clip" variable nil (reparse-symbol function_parameters) [43167 43171]))                          )
                        (reparse-symbol indented_block_body) [43141 43200])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43217 43221])
                            ("value" variable nil (reparse-symbol function_parameters) [43223 43228]))                          )
                        (reparse-symbol indented_block_body) [43205 43252]))                  
                :type "class")
                nil [42954 43252])
            ("rgb_to_hsv" function
               (:documentation "
    convert float rgb values (in the range [0, 1]), in a numpy array to hsv
    values.

    Parameters
    ----------
    arr : (..., 3) array-like
       All values must be in the range [0, 1]

    Returns
    -------
    hsv : (..., 3) ndarray
       Colors converted to hsv values in range [0, 1]
    "
                :arguments 
                  ( ("arr" variable nil (reparse-symbol function_parameters) [43269 43272]))                  )
                nil [43254 44805])
            ("hsv_to_rgb" function
               (:documentation "
    convert hsv values in a numpy array to rgb values
    all values assumed to be in range [0, 1]

    Parameters
    ----------
    hsv : (..., 3) array-like
       All values assumed to be in range [0, 1]

    Returns
    -------
    rgb : (..., 3) ndarray
       Colors converted to RGB values in range [0, 1]
    "
                :arguments 
                  ( ("hsv" variable nil (reparse-symbol function_parameters) [44822 44825]))                  )
                nil [44807 46693])
            ("LightSource" type
               (:documentation "
    Create a light source coming from the specified azimuth and elevation.
    Angles are in degrees, with the azimuth measured
    clockwise from north and elevation up from the zero plane of the surface.

    The :meth:`shade` is used to produce \"shaded\" rgb values for a data array.
    :meth:`shade_rgb` can be used to combine an rgb image with
    The :meth:`shade_rgb`
    The :meth:`hillshade` produces an illumination map of a surface.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Specify the azimuth (measured clockwise from south) and altitude
        (measured up from the plane of the surface) of the light source
        in degrees.

        Parameters
        ----------
        azdeg : number, optional
            The azimuth (0-360, degrees clockwise from North) of the light
            source. Defaults to 315 degrees (from the northwest).
        altdeg : number, optional
            The altitude (0-90, degrees up from horizontal) of the light
            source.  Defaults to 45 degrees from horizontal.

        Notes
        -----
        For backwards compatibility, the parameters *hsv_min_val*,
        *hsv_max_val*, *hsv_min_sat*, and *hsv_max_sat* may be supplied at
        initialization as well.  However, these parameters will only be used if
        \"blend_mode='hsv'\" is passed into :meth:`shade` or :meth:`shade_rgb`.
        See the documentation for :meth:`blend_hsv` for more details.
        \"\"\"" code nil (reparse-symbol indented_block_body) [47313 48273])
                            ("self" variable nil (reparse-symbol indented_block_body) [48282 48300])
                            ("self" variable nil (reparse-symbol indented_block_body) [48309 48329])
                            ("self" variable nil (reparse-symbol indented_block_body) [48338 48368])
                            ("self" variable nil (reparse-symbol indented_block_body) [48377 48407])
                            ("self" variable nil (reparse-symbol indented_block_body) [48416 48446])
                            ("self" variable nil (reparse-symbol indented_block_body) [48455 48485])
                            ("\"\"\"
        Calculates the illumination intensity for a surface using the defined
        azimuth and elevation for the light source.

        Imagine an artificial sun placed at infinity in some azimuth and
        elevation position illuminating our surface. The parts of the surface
        that slope toward the sun should brighten while those sides facing away
        should become darker.

        Parameters
        ----------
        elevation : array-like
            A 2d array (or equivalent) of the height values used to generate an
            illumination map
        vert_exag : number, optional
            The amount to exaggerate the elevation values by when calculating
            illumination. This can be used either to correct for differences in
            units between the x-y coordinate system and the elevation
            coordinate system (e.g. decimal degrees vs meters) or to exaggerate
            or de-emphasize topographic effects.
        dx : number, optional
            The x-spacing (columns) of the input *elevation* grid.
        dy : number, optional
            The y-spacing (rows) of the input *elevation* grid.
        fraction : number, optional
            Increases or decreases the contrast of the hillshade.  Values
            greater than one will cause intermediate values to move closer to
            full illumination or shadow (and clipping any values that move
            beyond 0 or 1). Note that this is not visually or mathematically
            the same as vertical exaggeration.
        Returns
        -------
        intensity : ndarray
            A 2d array of illumination values between 0-1, where 0 is
            completely in shadow and 1 is completely illuminated.
        \"\"\"" code nil (reparse-symbol indented_block_body) [48569 50323])
                            ("az" variable nil (reparse-symbol indented_block_body) [50467 50499])
                            ("alt" variable nil (reparse-symbol indented_block_body) [50508 50537])
                            ("dy" code nil (reparse-symbol indented_block_body) [50756 50764])
                            ("dy, dx" code nil (reparse-symbol indented_block_body) [50836 50887])
                            ("aspect" variable nil (reparse-symbol indented_block_body) [50975 51004])
                            ("slope" code nil (reparse-symbol indented_block_body) [51013 51062])
                            ("intensity" variable nil (reparse-symbol indented_block_body) [51071 51185])
                            ("imin, imax" code nil (reparse-symbol indented_block_body) [51228 51273])
                            ("intensity" variable nil (reparse-symbol indented_block_body) [51282 51303])
                            ("if" code nil (reparse-symbol indented_block_body) [51488 51876])
                            ("intensity" variable nil (reparse-symbol indented_block_body) [51884 51931])
                            ("return" code nil (reparse-symbol indented_block_body) [51941 51957])
                            ("self, data, cmap, norm" code nil (reparse-symbol indented_block_body) [51973 52034]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47199 47203])
                            ("azdeg" variable nil (reparse-symbol function_parameters) [47205 47210])
                            ("altdeg" variable nil (reparse-symbol function_parameters) [47216 47222])
                            ("hsv_min_val" variable nil (reparse-symbol function_parameters) [47227 47238])
                            ("hsv_max_val" variable nil (reparse-symbol function_parameters) [47242 47253])
                            ("hsv_min_sat" variable nil (reparse-symbol function_parameters) [47274 47285])
                            ("hsv_max_sat" variable nil (reparse-symbol function_parameters) [47289 47300]))                          
                        :documentation "
        Specify the azimuth (measured clockwise from south) and altitude
        (measured up from the plane of the surface) of the light source
        in degrees.

        Parameters
        ----------
        azdeg : number, optional
            The azimuth (0-360, degrees clockwise from North) of the light
            source. Defaults to 315 degrees (from the northwest).
        altdeg : number, optional
            The altitude (0-90, degrees up from horizontal) of the light
            source.  Defaults to 45 degrees from horizontal.

        Notes
        -----
        For backwards compatibility, the parameters *hsv_min_val*,
        *hsv_max_val*, *hsv_min_sat*, and *hsv_max_sat* may be supplied at
        initialization as well.  However, these parameters will only be used if
        \"blend_mode='hsv'\" is passed into :meth:`shade` or :meth:`shade_rgb`.
        See the documentation for :meth:`blend_hsv` for more details.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47186 64424]))                  
                :type "class")
                nil [46695 64424])
            ("from_levels_and_colors" function (:arguments 
              ( ("levels" variable nil (reparse-symbol function_parameters) [64453 64459])
                ("colors" variable nil (reparse-symbol function_parameters) [64461 64467])
                ("extend" variable nil (reparse-symbol function_parameters) [64469 64475]))              ) nil [64426 66673]))          
      :file "colors.py"
      :pointmax 66673
      :fsize 66672
      :lastmodtime '(22681 7108 763473 0)
      :unmatched-syntax '((INDENT_BLOCK 55796 . 64424) (INDENT_BLOCK 52108 . 55795) (INDENT_BLOCK 52035 . 52108) (DEDENT 51959 . 51963) (DEF 51963 . 51966) (LPAREN 51972 . 51973) (NEWLINE 48560 . 48561) (COLON 48559 . 48560) (RPAREN 48558 . 48559) (DEDENT 48487 . 48491) (DEF 48491 . 48494) (LPAREN 48504 . 48505) (NAME 7823 . 7829) (IF 7845 . 7847) (ELSE 7866 . 7870) (FROM 2459 . 2463) (PERIOD 2464 . 2465)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module contains all the 2D line class which can draw with a
variety of line styles, markers and colors.
\"\"\"" code nil nil [1 117])
            ("" code nil nil [182 267])
            ("six" include nil nil [269 279])
            ("warnings" include nil nil [281 296])
            ("numpy" include nil nil [298 316])
            ("numpy" include nil nil [317 337])
            ("colors" include nil nil [345 377])
            ("artist" include nil nil [345 377])
            ("Artist" include nil nil [391 404])
            ("" code nil nil [424 588])
            ("Path" include nil nil [601 612])
            ("IdentityTransform" include nil nil [630 677])
            ("TransformedPath" include nil nil [630 677])
            ("Bbox" include nil nil [630 677])
            ("matplotlib" include nil nil [679 710])
            ("allow_rasterization" include nil nil [724 750])
            ("matplotlib" include nil nil [751 783])
            ("matplotlib.markers" include nil nil [784 826])
            ("matplotlib.markers" include nil nil [911 979])
            ("" code nil nil [1011 1122])
            ("matplotlib" include nil nil [1124 1152])
            ("_get_dash_pattern" function
               (:documentation "Convert linestyle -> dash pattern

    "
                :arguments 
                  ( ("style" variable nil (reparse-symbol function_parameters) [1177 1182]))                  )
                nil [1155 1993])
            ("_scale_dashes" function (:arguments 
              ( ("offset" variable nil (reparse-symbol function_parameters) [2013 2019])
                ("dashes" variable nil (reparse-symbol function_parameters) [2021 2027])
                ("lw" variable nil (reparse-symbol function_parameters) [2029 2031]))              ) nil [1995 2411])
            ("segment_hits" function
               (:documentation "
    Determine if any line segments are within radius of a
    point. Returns the list of line segments that are within that
    radius.
    "
                :arguments 
                  ( ("cx" variable nil (reparse-symbol function_parameters) [2430 2432])
                    ("cy" variable nil (reparse-symbol function_parameters) [2434 2436])
                    ("x" variable nil (reparse-symbol function_parameters) [2438 2439])
                    ("y" variable nil (reparse-symbol function_parameters) [2441 2442])
                    ("radius" variable nil (reparse-symbol function_parameters) [2444 2450]))                  )
                nil [2413 4065])
            ("_mark_every_path" function
               (:documentation "
    Helper function that sorts out how to deal the input
    `markevery` and returns the points where markers should be drawn.

    Takes in the `markevery` value and the line path and returns the
    sub-sampled path.
    "
                :arguments 
                  ( ("markevery" variable nil (reparse-symbol function_parameters) [4088 4097])
                    ("tpath" variable nil (reparse-symbol function_parameters) [4099 4104])
                    ("affine" variable nil (reparse-symbol function_parameters) [4106 4112])
                    ("ax_transform" variable nil (reparse-symbol function_parameters) [4114 4126]))                  )
                nil [4067 8516])
            ("Line2D" type
               (:documentation "
    A line - the line can have both a solid linestyle connecting all
    the vertices, and a marker at each vertex.  Additionally, the
    drawing of the solid line is influenced by the drawstyle, e.g., one
    can create \"stepped\" lines in various styles.


    "
                :superclasses ("Artist")
                :members 
                  ( ("lineStyles" variable nil (reparse-symbol indented_block_body) [8819 9108])
                    ("_drawStyles_l" variable nil (reparse-symbol indented_block_body) [9114 9298])
                    ("_drawStyles_s" variable nil (reparse-symbol indented_block_body) [9304 9363])
                    ("drawStyles" variable nil (reparse-symbol indented_block_body) [9369 9384])
                    ("drawStyles" code nil (reparse-symbol indented_block_body) [9389 9421])
                    ("drawStyles" code nil (reparse-symbol indented_block_body) [9426 9458])
                    ("drawStyleKeys" variable nil (reparse-symbol indented_block_body) [9512 9620])
                    ("markers" variable nil (reparse-symbol indented_block_body) [9705 9734])
                    ("filled_markers" variable nil (reparse-symbol indented_block_body) [9739 9782])
                    ("fillStyles" variable nil (reparse-symbol indented_block_body) [9787 9822])
                    ("zorder" variable nil (reparse-symbol indented_block_body) [9828 9838])
                    ("validCap" variable nil (reparse-symbol indented_block_body) [9843 9885])
                    ("validJoin" variable nil (reparse-symbol indented_block_body) [9890 9929])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9947 9951]))                          )
                        (reparse-symbol indented_block_body) [9935 10454])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a :class:`~matplotlib.lines.Line2D` instance with *x*
        and *y* data in sequences *xdata*, *ydata*.

        The kwargs are :class:`~matplotlib.lines.Line2D` properties:

        %(Line2D)s

        See :meth:`set_linestyle` for a decription of the line styles,
        :meth:`set_marker` for a description of the markers, and
        :meth:`set_drawstyle` for a description of the draw styles.

        \"\"\"" code nil (reparse-symbol indented_block_body) [11210 11642])
                            ("Artist" code nil (reparse-symbol indented_block_body) [11651 11672])
                            ("if" code nil (reparse-symbol indented_block_body) [11725 11808])
                            ("if" code nil (reparse-symbol indented_block_body) [11816 11899])
                            ("if" code nil (reparse-symbol indented_block_body) [11908 11982])
                            ("if" code nil (reparse-symbol indented_block_body) [11991 12065])
                            ("if" code nil (reparse-symbol indented_block_body) [12073 12138])
                            ("if" code nil (reparse-symbol indented_block_body) [12146 12208])
                            ("if" code nil (reparse-symbol indented_block_body) [12217 12294])
                            ("if" code nil (reparse-symbol indented_block_body) [12302 12382])
                            ("if" code nil (reparse-symbol indented_block_body) [12390 12476])
                            ("if" code nil (reparse-symbol indented_block_body) [12484 12573])
                            ("if" code nil (reparse-symbol indented_block_body) [12581 12670])
                            ("if" code nil (reparse-symbol indented_block_body) [12678 12770])
                            ("if" code nil (reparse-symbol indented_block_body) [12779 13288])
                            ("if" code nil (reparse-symbol indented_block_body) [13297 13353])
                            ("self" variable nil (reparse-symbol indented_block_body) [13362 13387])
                            ("self" variable nil (reparse-symbol indented_block_body) [13396 13422])
                            ("self" variable nil (reparse-symbol indented_block_body) [13431 13458])
                            ("self" variable nil (reparse-symbol indented_block_body) [13467 13493])
                            ("self" code nil (reparse-symbol indented_block_body) [13502 13539])
                            ("self" code nil (reparse-symbol indented_block_body) [13548 13587])
                            ("self" code nil (reparse-symbol indented_block_body) [13596 13635])
                            ("self" code nil (reparse-symbol indented_block_body) [13644 13685])
                            ("self" variable nil (reparse-symbol indented_block_body) [13695 13718])
                            ("self" variable nil (reparse-symbol indented_block_body) [13727 13749])
                            ("self" variable nil (reparse-symbol indented_block_body) [13758 13785])
                            ("self" variable nil (reparse-symbol indented_block_body) [13826 13846])
                            ("self" variable nil (reparse-symbol indented_block_body) [13855 13875])
                            ("self" variable nil (reparse-symbol indented_block_body) [13980 14003])
                            ("self" variable nil (reparse-symbol indented_block_body) [14012 14035])
                            ("self" code nil (reparse-symbol indented_block_body) [14045 14074])
                            ("self" code nil (reparse-symbol indented_block_body) [14083 14112])
                            ("self" code nil (reparse-symbol indented_block_body) [14121 14150])
                            ("self" variable nil (reparse-symbol indented_block_body) [14160 14178])
                            ("self" code nil (reparse-symbol indented_block_body) [14187 14208])
                            ("self" variable nil (reparse-symbol indented_block_body) [14217 14245])
                            ("self" code nil (reparse-symbol indented_block_body) [14254 14277])
                            ("self" variable nil (reparse-symbol indented_block_body) [14287 14309])
                            ("self" variable nil (reparse-symbol indented_block_body) [14318 14341])
                            ("self" variable nil (reparse-symbol indented_block_body) [14350 14374])
                            ("self" code nil (reparse-symbol indented_block_body) [14384 14413])
                            ("self" code nil (reparse-symbol indented_block_body) [14422 14455])
                            ("self" code nil (reparse-symbol indented_block_body) [14464 14495])
                            ("self" variable nil (reparse-symbol indented_block_body) [14505 14533])
                            ("self" variable nil (reparse-symbol indented_block_body) [14542 14570])
                            ("self" variable nil (reparse-symbol indented_block_body) [14579 14607])
                            ("self" variable nil (reparse-symbol indented_block_body) [14616 14647])
                            ("self" code nil (reparse-symbol indented_block_body) [14657 14698])
                            ("self" code nil (reparse-symbol indented_block_body) [14707 14754])
                            ("self" code nil (reparse-symbol indented_block_body) [14763 14804])
                            ("self" code nil (reparse-symbol indented_block_body) [14813 14854])
                            ("self" code nil (reparse-symbol indented_block_body) [14864 14893])
                            ("self" variable nil (reparse-symbol indented_block_body) [14903 14929])
                            ("self" code nil (reparse-symbol indented_block_body) [15060 15079])
                            ("self" variable nil (reparse-symbol indented_block_body) [15088 15116])
                            ("self" variable nil (reparse-symbol indented_block_body) [15125 15144])
                            ("if" code nil (reparse-symbol indented_block_body) [15153 15225])
                            ("self" variable nil (reparse-symbol indented_block_body) [15234 15262])
                            ("self" variable nil (reparse-symbol indented_block_body) [15271 15299])
                            ("self" variable nil (reparse-symbol indented_block_body) [15308 15329])
                            ("self" variable nil (reparse-symbol indented_block_body) [15338 15359])
                            ("self" variable nil (reparse-symbol indented_block_body) [15368 15382])
                            ("self" variable nil (reparse-symbol indented_block_body) [15391 15405])
                            ("self" variable nil (reparse-symbol indented_block_body) [15414 15429])
                            ("self" variable nil (reparse-symbol indented_block_body) [15438 15455])
                            ("self" variable nil (reparse-symbol indented_block_body) [15464 15493])
                            ("self" variable nil (reparse-symbol indented_block_body) [15502 15524])
                            ("self" variable nil (reparse-symbol indented_block_body) [15533 15554])
                            ("self" code nil (reparse-symbol indented_block_body) [15604 15631]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10472 10476])
                            ("xdata" variable nil (reparse-symbol function_parameters) [10478 10483])
                            ("ydata" variable nil (reparse-symbol function_parameters) [10485 10490])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [10509 10518])
                            ("linestyle" variable nil (reparse-symbol function_parameters) [10569 10578])
                            ("color" variable nil (reparse-symbol function_parameters) [10602 10607])
                            ("marker" variable nil (reparse-symbol function_parameters) [10631 10637])
                            ("markersize" variable nil (reparse-symbol function_parameters) [10661 10671])
                            ("markeredgewidth" variable nil (reparse-symbol function_parameters) [10695 10710])
                            ("markeredgecolor" variable nil (reparse-symbol function_parameters) [10734 10749])
                            ("markerfacecolor" variable nil (reparse-symbol function_parameters) [10773 10788])
                            ("markerfacecoloralt" variable nil (reparse-symbol function_parameters) [10812 10830])
                            ("fillstyle" variable nil (reparse-symbol function_parameters) [10856 10865])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [10889 10900])
                            ("dash_capstyle" variable nil (reparse-symbol function_parameters) [10924 10937])
                            ("solid_capstyle" variable nil (reparse-symbol function_parameters) [10961 10975])
                            ("dash_joinstyle" variable nil (reparse-symbol function_parameters) [10999 11013])
                            ("solid_joinstyle" variable nil (reparse-symbol function_parameters) [11037 11052])
                            ("pickradius" variable nil (reparse-symbol function_parameters) [11076 11086])
                            ("drawstyle" variable nil (reparse-symbol function_parameters) [11107 11116])
                            ("markevery" variable nil (reparse-symbol function_parameters) [11140 11149])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11173 11181]))                          
                        :documentation "
        Create a :class:`~matplotlib.lines.Line2D` instance with *x*
        and *y* data in sequences *xdata*, *ydata*.

        The kwargs are :class:`~matplotlib.lines.Line2D` properties:

        %(Line2D)s

        See :meth:`set_linestyle` for a decription of the line styles,
        :meth:`set_marker` for a description of the markers, and
        :meth:`set_drawstyle` for a description of the draw styles.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10459 15632])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15654 15658]))                          )
                        (reparse-symbol indented_block_body) [15637 15821])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15839 15843])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [15845 15855]))                          
                        :documentation "
        Test whether the mouse event occurred on the line.  The pick
        radius determines the precision of the location test (usually
        within five points of the value).  Use
        :meth:`~matplotlib.lines.Line2D.get_pickradius` or
        :meth:`~matplotlib.lines.Line2D.set_pickradius` to view or
        modify it.

        Returns *True* if any values are within the radius along with
        ``{'ind': pointlist}``, where *pointlist* is the set of points
        within the radius.

        TODO: sort returned indices by distance
        ")
                        (reparse-symbol indented_block_body) [15826 18704])
                    ("get_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18728 18732]))                          
                        :documentation "return the pick radius used for containment tests")
                        (reparse-symbol indented_block_body) [18709 18830])
                    ("set_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18854 18858])
                            ("d" variable nil (reparse-symbol function_parameters) [18860 18861]))                          
                        :documentation "Sets the pick radius used for containment tests

        ACCEPTS: float distance in points
        ")
                        (reparse-symbol indented_block_body) [18835 19006])
                    ("get_fillstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19029 19033]))                          
                        :documentation "
        return the marker fillstyle
        ")
                        (reparse-symbol indented_block_body) [19011 19140])
                    ("set_fillstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19163 19167])
                            ("fs" variable nil (reparse-symbol function_parameters) [19169 19171]))                          
                        :documentation "
        Set the marker fill style; 'full' means fill the whole marker.
        'none' means no filling; other options are for half-filled markers.

        ACCEPTS: ['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']
        ")
                        (reparse-symbol indented_block_body) [19145 19484])
                    ("set_markevery" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19507 19511])
                            ("every" variable nil (reparse-symbol function_parameters) [19513 19518]))                          
                        :documentation "Set the markevery property to subsample the plot when using markers.

        e.g., if `every=5`, every 5-th marker will be plotted.

        ACCEPTS: [None | int | length-2 tuple of int | slice |
        list/array of int | float | length-2 tuple of float]

        Parameters
        ----------
        every: None | int | length-2 tuple of int | slice | list/array of int |
        float | length-2 tuple of float
            Which markers to plot.

            - every=None, every point will be plotted.
            - every=N, every N-th marker will be plotted starting with
              marker 0.
            - every=(start, N), every N-th marker, starting at point
              start, will be plotted.
            - every=slice(start, end, N), every N-th marker, starting at
              point start, upto but not including point end, will be plotted.
            - every=[i, j, m, n], only markers at points i, j, m, and n
              will be plotted.
            - every=0.1, (i.e. a float) then markers will be spaced at
              approximately equal distances along the line; the distance
              along the line between markers is determined by multiplying the
              display-coordinate distance of the axes bounding-box diagonal
              by the value of every.
            - every=(0.5, 0.1) (i.e. a length-2 tuple of float), the
              same functionality as every=0.1 is exhibited but the first
              marker will be 0.5 multiplied by the
              display-cordinate-diagonal-distance along the line.

        Notes
        -----
        Setting the markevery property will only show markers at actual data
        points.  When using float arguments to set the markevery property
        on irregularly spaced data, the markers will likely not appear evenly
        spaced because the actual data points do not coincide with the
        theoretical spacing between markers.

        When using a start offset to specify the first marker, the offset will
        be from the first data point which may be different from the first
        the visible data point if the plot is zoomed in.

        If zooming in on a plot when using float arguments then the actual
        data points that have markers will change because the distance between
        markers is always determined from the display-coordinates
        axes-bounding-box-diagonal regardless of the actual axes data limits.

        ")
                        (reparse-symbol indented_block_body) [19489 22087])
                    ("get_markevery" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22110 22114]))                          
                        :documentation "return the markevery setting")
                        (reparse-symbol indented_block_body) [22092 22191])
                    ("set_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22211 22215])
                            ("p" variable nil (reparse-symbol function_parameters) [22217 22218]))                          
                        :documentation "Sets the event picker details for the line.

        ACCEPTS: float distance in points or callable pick function
        ``fn(artist, event)``
        ")
                        (reparse-symbol indented_block_body) [22196 22517])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22544 22548])
                            ("renderer" variable nil (reparse-symbol function_parameters) [22550 22558]))                          )
                        (reparse-symbol indented_block_body) [22522 22962])
                    ("axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23000 23004])
                            ("ax" variable nil (reparse-symbol function_parameters) [23006 23008]))                          
                        :decorators 
                          ( ("Artist.axes.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22967 23535])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23553 23557])
                            ("args" variable nil (reparse-symbol function_parameters) [23559 23564]))                          
                        :documentation "
        Set the x and y data

        ACCEPTS: 2D array (rows are x, y) or two 1D arrays
        ")
                        (reparse-symbol indented_block_body) [23540 23825])
                    ("recache_always" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23849 23853]))                          )
                        (reparse-symbol indented_block_body) [23830 23890])
                    ("recache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23907 23911])
                            ("always" variable nil (reparse-symbol function_parameters) [23913 23919]))                          )
                        (reparse-symbol indented_block_body) [23895 26070])
                    ("_transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26095 26099])
                            ("subslice" variable nil (reparse-symbol function_parameters) [26101 26109]))                          
                        :documentation "
        Puts a TransformedPath instance at self._transformed_path;
        all invalidation of the transform is then handled by the
        TransformedPath instance.
        ")
                        (reparse-symbol indented_block_body) [26075 26658])
                    ("_get_transformed_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26689 26693]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.TransformedPath` instance
        of this line.
        ")
                        (reparse-symbol indented_block_body) [26663 26934])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26957 26961])
                            ("t" variable nil (reparse-symbol function_parameters) [26963 26964]))                          
                        :documentation "
        set the Transformation instance used by this artist

        ACCEPTS: a :class:`matplotlib.transforms.Transform` instance
        ")
                        (reparse-symbol indented_block_body) [26939 27245])
                    ("_is_sorted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27265 27269])
                            ("x" variable nil (reparse-symbol function_parameters) [27271 27272]))                          
                        :documentation "return True if x is sorted in ascending order")
                        (reparse-symbol indented_block_body) [27250 27430])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27469 27473])
                            ("renderer" variable nil (reparse-symbol function_parameters) [27475 27483]))                          
                        :documentation "draw the Line with `renderer` unless visibility is False")
                        (reparse-symbol indented_block_body) [27435 32720])
                    ("get_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32745 32749]))                          )
                        (reparse-symbol indented_block_body) [32725 32785])
                    ("get_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32804 32808]))                          )
                        (reparse-symbol indented_block_body) [32790 32838])
                    ("get_drawstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32861 32865]))                          )
                        (reparse-symbol indented_block_body) [32843 32899])
                    ("get_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32922 32926]))                          )
                        (reparse-symbol indented_block_body) [32904 32960])
                    ("get_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32983 32987]))                          )
                        (reparse-symbol indented_block_body) [32965 33021])
                    ("get_marker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33041 33045]))                          )
                        (reparse-symbol indented_block_body) [33026 33089])
                    ("get_markeredgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33118 33122]))                          )
                        (reparse-symbol indented_block_body) [33094 33572])
                    ("get_markeredgewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33601 33605]))                          )
                        (reparse-symbol indented_block_body) [33577 33645])
                    ("_get_markerfacecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33675 33679])
                            ("alt" variable nil (reparse-symbol function_parameters) [33681 33684]))                          )
                        (reparse-symbol indented_block_body) [33650 34029])
                    ("get_markerfacecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34058 34062]))                          )
                        (reparse-symbol indented_block_body) [34034 34117])
                    ("get_markerfacecoloralt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34149 34153]))                          )
                        (reparse-symbol indented_block_body) [34122 34207])
                    ("get_markersize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34231 34235]))                          )
                        (reparse-symbol indented_block_body) [34212 34270])
                    ("get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34288 34292])
                            ("orig" variable nil (reparse-symbol function_parameters) [34294 34298]))                          
                        :documentation "
        Return the xdata, ydata.

        If *orig* is *True*, return the original data.
        ")
                        (reparse-symbol indented_block_body) [34275 34487])
                    ("get_xdata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34506 34510])
                            ("orig" variable nil (reparse-symbol function_parameters) [34512 34516]))                          
                        :documentation "
        Return the xdata.

        If *orig* is *True*, return the original data, else the
        processed data.
        ")
                        (reparse-symbol indented_block_body) [34492 34788])
                    ("get_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34807 34811])
                            ("orig" variable nil (reparse-symbol function_parameters) [34813 34817]))                          
                        :documentation "
        Return the ydata.

        If *orig* is *True*, return the original data, else the
        processed data.
        ")
                        (reparse-symbol indented_block_body) [34793 35089])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35107 35111]))                          
                        :documentation "
        Return the :class:`~matplotlib.path.Path` object associated
        with this line.
        ")
                        (reparse-symbol indented_block_body) [35094 35328])
                    ("get_xydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35348 35352]))                          
                        :documentation "
        Return the *xy* data as a Nx2 numpy array.
        ")
                        (reparse-symbol indented_block_body) [35333 35526])
                    ("set_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35551 35555])
                            ("b" variable nil (reparse-symbol function_parameters) [35557 35558]))                          
                        :documentation "
        True if line should be drawin with antialiased rendering

        ACCEPTS: [True | False]
        ")
                        (reparse-symbol indented_block_body) [35531 35778])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35797 35801])
                            ("color" variable nil (reparse-symbol function_parameters) [35803 35808]))                          
                        :documentation "
        Set the color of the line

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [35783 35962])
                    ("set_drawstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35985 35989])
                            ("drawstyle" variable nil (reparse-symbol function_parameters) [35991 36000]))                          
                        :documentation "
        Set the drawstyle of the plot

        'default' connects the points with lines. The steps variants
        produce step-plots. 'steps' is equivalent to 'steps-pre' and
        is maintained for backward-compatibility.

        ACCEPTS: ['default' | 'steps' | 'steps-pre' | 'steps-mid' |
                  'steps-post']
        ")
                        (reparse-symbol indented_block_body) [35967 36687])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36710 36714])
                            ("w" variable nil (reparse-symbol function_parameters) [36716 36717]))                          
                        :documentation "
        Set the line width in points

        ACCEPTS: float value in points
        ")
                        (reparse-symbol indented_block_body) [36692 37097])
                    ("_split_drawstyle_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37133 37137])
                            ("ls" variable nil (reparse-symbol function_parameters) [37139 37141]))                          )
                        (reparse-symbol indented_block_body) [37102 37985])
                    ("set_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38008 38012])
                            ("ls" variable nil (reparse-symbol function_parameters) [38014 38016]))                          
                        :documentation "
        Set the linestyle of the line (also accepts drawstyles,
        e.g., ``'steps--'``)


        ===========================   =================
        linestyle                     description
        ===========================   =================
        ``'-'`` or ``'solid'``        solid line
        ``'--'`` or  ``'dashed'``     dashed line
        ``'-.'`` or  ``'dashdot'``    dash-dotted line
        ``':'`` or ``'dotted'``       dotted line
        ``'None'``                    draw nothing
        ``' '``                       draw nothing
        ``''``                        draw nothing
        ===========================   =================

        'steps' is equivalent to 'steps-pre' and is maintained for
        backward-compatibility.

        Alternatively a dash tuple of the following form can be provided::

            (offset, onoffseq),

        where ``onoffseq`` is an even length tuple of on and off ink
        in points.


        ACCEPTS: ['solid' | 'dashed', 'dashdot', 'dotted' |
                   (offset, on-off-dash-seq) |
                   ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` |
                   ``' '`` | ``''``]

        .. seealso::

            :meth:`set_drawstyle`
               To set the drawing style (stepping) of the plot.

        Parameters
        ----------
        ls : { ``'-'``,  ``'--'``, ``'-.'``, ``':'``} and more see description
            The line style.
        ")
                        (reparse-symbol indented_block_body) [37990 40493])
                    ("set_marker" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40543 40547])
                            ("marker" variable nil (reparse-symbol function_parameters) [40549 40555]))                          
                        :documentation "
        Set the line marker

        ACCEPTS: :mod:`A valid marker style <matplotlib.markers>`

        Parameters
        ----------

        marker: marker style
            See `~matplotlib.markers` for full description of possible
            argument

        ")
                        (reparse-symbol indented_block_body) [40498 40905])
                    ("set_markeredgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40934 40938])
                            ("ec" variable nil (reparse-symbol function_parameters) [40940 40942]))                          
                        :documentation "
        Set the marker edge color

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [40910 41194])
                    ("set_markeredgewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41223 41227])
                            ("ew" variable nil (reparse-symbol function_parameters) [41229 41231]))                          
                        :documentation "
        Set the marker edge width in points

        ACCEPTS: float value in points
        ")
                        (reparse-symbol indented_block_body) [41199 41521])
                    ("set_markerfacecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41550 41554])
                            ("fc" variable nil (reparse-symbol function_parameters) [41556 41558]))                          
                        :documentation "
        Set the marker face color.

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [41526 41811])
                    ("set_markerfacecoloralt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41843 41847])
                            ("fc" variable nil (reparse-symbol function_parameters) [41849 41851]))                          
                        :documentation "
        Set the alternate marker face color.

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [41816 42120])
                    ("set_markersize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42144 42148])
                            ("sz" variable nil (reparse-symbol function_parameters) [42150 42152]))                          
                        :documentation "
        Set the marker size in points

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [42125 42359])
                    ("set_xdata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42378 42382])
                            ("x" variable nil (reparse-symbol function_parameters) [42384 42385]))                          
                        :documentation "
        Set the data np.array for x

        ACCEPTS: 1D array
        ")
                        (reparse-symbol indented_block_body) [42364 42555])
                    ("set_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42574 42578])
                            ("y" variable nil (reparse-symbol function_parameters) [42580 42581]))                          
                        :documentation "
        Set the data np.array for y

        ACCEPTS: 1D array
        ")
                        (reparse-symbol indented_block_body) [42560 42751])
                    ("set_dashes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42771 42775])
                            ("seq" variable nil (reparse-symbol function_parameters) [42777 42780]))                          
                        :documentation "
        Set the dash sequence, sequence of dashes with on off ink in
        points.  If seq is empty or if seq = (None, None), the
        linestyle will be set to solid.

        ACCEPTS: sequence of on/off ink in points
        ")
                        (reparse-symbol indented_block_body) [42756 43170])
                    ("_draw_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43191 43195])
                            ("renderer" variable nil (reparse-symbol function_parameters) [43197 43205])
                            ("gc" variable nil (reparse-symbol function_parameters) [43207 43209])
                            ("path" variable nil (reparse-symbol function_parameters) [43211 43215])
                            ("trans" variable nil (reparse-symbol function_parameters) [43217 43222]))                          )
                        (reparse-symbol indented_block_body) [43175 43275])
                    ("_draw_steps_pre" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43300 43304])
                            ("renderer" variable nil (reparse-symbol function_parameters) [43306 43314])
                            ("gc" variable nil (reparse-symbol function_parameters) [43316 43318])
                            ("path" variable nil (reparse-symbol function_parameters) [43320 43324])
                            ("trans" variable nil (reparse-symbol function_parameters) [43326 43331]))                          )
                        (reparse-symbol indented_block_body) [43280 43537])
                    ("_draw_steps_post" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43563 43567])
                            ("renderer" variable nil (reparse-symbol function_parameters) [43569 43577])
                            ("gc" variable nil (reparse-symbol function_parameters) [43579 43581])
                            ("path" variable nil (reparse-symbol function_parameters) [43583 43587])
                            ("trans" variable nil (reparse-symbol function_parameters) [43589 43594]))                          )
                        (reparse-symbol indented_block_body) [43542 43801])
                    ("_draw_steps_mid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43826 43830])
                            ("renderer" variable nil (reparse-symbol function_parameters) [43832 43840])
                            ("gc" variable nil (reparse-symbol function_parameters) [43842 43844])
                            ("path" variable nil (reparse-symbol function_parameters) [43846 43850])
                            ("trans" variable nil (reparse-symbol function_parameters) [43852 43857]))                          )
                        (reparse-symbol indented_block_body) [43806 44063])
                    ("_draw_solid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44084 44088])
                            ("renderer" variable nil (reparse-symbol function_parameters) [44090 44098])
                            ("gc" variable nil (reparse-symbol function_parameters) [44100 44102])
                            ("path" variable nil (reparse-symbol function_parameters) [44104 44108])
                            ("trans" variable nil (reparse-symbol function_parameters) [44110 44115]))                          )
                        (reparse-symbol indented_block_body) [44068 44251])
                    ("_draw_dashed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44273 44277])
                            ("renderer" variable nil (reparse-symbol function_parameters) [44279 44287])
                            ("gc" variable nil (reparse-symbol function_parameters) [44289 44291])
                            ("path" variable nil (reparse-symbol function_parameters) [44293 44297])
                            ("trans" variable nil (reparse-symbol function_parameters) [44299 44304]))                          )
                        (reparse-symbol indented_block_body) [44256 44441])
                    ("_draw_dash_dot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44465 44469])
                            ("renderer" variable nil (reparse-symbol function_parameters) [44471 44479])
                            ("gc" variable nil (reparse-symbol function_parameters) [44481 44483])
                            ("path" variable nil (reparse-symbol function_parameters) [44485 44489])
                            ("trans" variable nil (reparse-symbol function_parameters) [44491 44496]))                          )
                        (reparse-symbol indented_block_body) [44446 44634])
                    ("_draw_dotted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44656 44660])
                            ("renderer" variable nil (reparse-symbol function_parameters) [44662 44670])
                            ("gc" variable nil (reparse-symbol function_parameters) [44672 44674])
                            ("path" variable nil (reparse-symbol function_parameters) [44676 44680])
                            ("trans" variable nil (reparse-symbol function_parameters) [44682 44687]))                          )
                        (reparse-symbol indented_block_body) [44639 44824])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44845 44849])
                            ("other" variable nil (reparse-symbol function_parameters) [44851 44856]))                          
                        :documentation "copy properties from other to self")
                        (reparse-symbol indented_block_body) [44829 45940])
                    ("_get_rgba_face" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45964 45968])
                            ("alt" variable nil (reparse-symbol function_parameters) [45970 45973]))                          )
                        (reparse-symbol indented_block_body) [45945 46236])
                    ("_get_rgba_ln_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46264 46268])
                            ("alt" variable nil (reparse-symbol function_parameters) [46270 46273]))                          )
                        (reparse-symbol indented_block_body) [46241 46339])
                    ("set_aa" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46378 46382])
                            ("val" variable nil (reparse-symbol function_parameters) [46384 46387]))                          )
                        (reparse-symbol indented_block_body) [46367 46460])
                    ("set_c" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46475 46479])
                            ("val" variable nil (reparse-symbol function_parameters) [46481 46484]))                          )
                        (reparse-symbol indented_block_body) [46465 46545])
                    ("set_ls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46561 46565])
                            ("val" variable nil (reparse-symbol function_parameters) [46567 46570]))                          
                        :documentation "alias for set_linestyle")
                        (reparse-symbol indented_block_body) [46550 46643])
                    ("set_lw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46659 46663])
                            ("val" variable nil (reparse-symbol function_parameters) [46665 46668]))                          
                        :documentation "alias for set_linewidth")
                        (reparse-symbol indented_block_body) [46648 46741])
                    ("set_mec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46758 46762])
                            ("val" variable nil (reparse-symbol function_parameters) [46764 46767]))                          
                        :documentation "alias for set_markeredgecolor")
                        (reparse-symbol indented_block_body) [46746 46852])
                    ("set_mew" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46869 46873])
                            ("val" variable nil (reparse-symbol function_parameters) [46875 46878]))                          
                        :documentation "alias for set_markeredgewidth")
                        (reparse-symbol indented_block_body) [46857 46963])
                    ("set_mfc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46980 46984])
                            ("val" variable nil (reparse-symbol function_parameters) [46986 46989]))                          
                        :documentation "alias for set_markerfacecolor")
                        (reparse-symbol indented_block_body) [46968 47074])
                    ("set_mfcalt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47094 47098])
                            ("val" variable nil (reparse-symbol function_parameters) [47100 47103]))                          
                        :documentation "alias for set_markerfacecoloralt")
                        (reparse-symbol indented_block_body) [47079 47194])
                    ("set_ms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47210 47214])
                            ("val" variable nil (reparse-symbol function_parameters) [47216 47219]))                          
                        :documentation "alias for set_markersize")
                        (reparse-symbol indented_block_body) [47199 47294])
                    ("get_aa" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47310 47314]))                          
                        :documentation "alias for get_antialiased")
                        (reparse-symbol indented_block_body) [47299 47395])
                    ("get_c" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47410 47414]))                          
                        :documentation "alias for get_color")
                        (reparse-symbol indented_block_body) [47400 47483])
                    ("get_ls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47499 47503]))                          
                        :documentation "alias for get_linestyle")
                        (reparse-symbol indented_block_body) [47488 47580])
                    ("get_lw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47596 47600]))                          
                        :documentation "alias for get_linewidth")
                        (reparse-symbol indented_block_body) [47585 47677])
                    ("get_mec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47694 47698]))                          
                        :documentation "alias for get_markeredgecolor")
                        (reparse-symbol indented_block_body) [47682 47787])
                    ("get_mew" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47804 47808]))                          
                        :documentation "alias for get_markeredgewidth")
                        (reparse-symbol indented_block_body) [47792 47897])
                    ("get_mfc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47914 47918]))                          
                        :documentation "alias for get_markerfacecolor")
                        (reparse-symbol indented_block_body) [47902 48007])
                    ("get_mfcalt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48027 48031])
                            ("alt" variable nil (reparse-symbol function_parameters) [48033 48036]))                          
                        :documentation "alias for get_markerfacecoloralt")
                        (reparse-symbol indented_block_body) [48012 48137])
                    ("get_ms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48153 48157]))                          
                        :documentation "alias for get_markersize")
                        (reparse-symbol indented_block_body) [48142 48236])
                    ("set_dash_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48264 48268])
                            ("s" variable nil (reparse-symbol function_parameters) [48270 48271]))                          
                        :documentation "
        Set the join style for dashed linestyles
        ACCEPTS: ['miter' | 'round' | 'bevel']
        ")
                        (reparse-symbol indented_block_body) [48241 48701])
                    ("set_solid_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48730 48734])
                            ("s" variable nil (reparse-symbol function_parameters) [48736 48737]))                          
                        :documentation "
        Set the join style for solid linestyles
        ACCEPTS: ['miter' | 'round' | 'bevel']
        ")
                        (reparse-symbol indented_block_body) [48706 49170])
                    ("get_dash_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49198 49202]))                          
                        :documentation "
        Get the join style for dashed linestyles
        ")
                        (reparse-symbol indented_block_body) [49175 49313])
                    ("get_solid_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49342 49346]))                          
                        :documentation "
        Get the join style for solid linestyles
        ")
                        (reparse-symbol indented_block_body) [49318 49457])
                    ("set_dash_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49484 49488])
                            ("s" variable nil (reparse-symbol function_parameters) [49490 49491]))                          
                        :documentation "
        Set the cap style for dashed linestyles

        ACCEPTS: ['butt' | 'round' | 'projecting']
        ")
                        (reparse-symbol indented_block_body) [49462 49919])
                    ("set_solid_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49947 49951])
                            ("s" variable nil (reparse-symbol function_parameters) [49953 49954]))                          
                        :documentation "
        Set the cap style for solid linestyles

        ACCEPTS: ['butt' | 'round' |  'projecting']
        ")
                        (reparse-symbol indented_block_body) [49924 50385])
                    ("get_dash_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50412 50416]))                          
                        :documentation "
        Get the cap style for dashed linestyles
        ")
                        (reparse-symbol indented_block_body) [50390 50525])
                    ("get_solid_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50553 50557]))                          
                        :documentation "
        Get the cap style for solid linestyles
        ")
                        (reparse-symbol indented_block_body) [50530 50666])
                    ("is_dashed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50685 50689]))                          )
                        (reparse-symbol indented_block_body) [50671 50787]))                  
                :type "class")
                nil [8518 50787])
            ("VertexSelector" type
               (:documentation "
    Manage the callbacks to maintain a list of selected vertices for
    :class:`matplotlib.lines.Line2D`. Derived classes should override
    :meth:`~matplotlib.lines.VertexSelector.process_selected` to do
    something with the picks.

    Here is an example which highlights the selected verts with red
    circles::

        import numpy as np
        import matplotlib.pyplot as plt
        import matplotlib.lines as lines

        class HighlightSelected(lines.VertexSelector):
            def __init__(self, line, fmt='ro', **kwargs):
                lines.VertexSelector.__init__(self, line)
                self.markers, = self.axes.plot([], [], fmt, **kwargs)

            def process_selected(self, ind, xs, ys):
                self.markers.set_data(xs, ys)
                self.canvas.draw()

        fig = plt.figure()
        ax = fig.add_subplot(111)
        x, y = np.random.rand(2, 30)
        line, = ax.plot(x, y, 'bs-', picker=5)

        selector = HighlightSelected(line)
        plt.show()

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the class with a :class:`matplotlib.lines.Line2D`
        instance.  The line should already be added to some
        :class:`matplotlib.axes.Axes` instance and should have the
        picker property set.
        \"\"\"" code nil (reparse-symbol indented_block_body) [51889 52129])
                            ("if" code nil (reparse-symbol indented_block_body) [52138 52234])
                            ("if" code nil (reparse-symbol indented_block_body) [52243 52392])
                            ("self" variable nil (reparse-symbol indented_block_body) [52401 52422])
                            ("self" variable nil (reparse-symbol indented_block_body) [52431 52447])
                            ("self" variable nil (reparse-symbol indented_block_body) [52456 52493])
                            ("self" variable nil (reparse-symbol indented_block_body) [52502 52563])
                            ("self" variable nil (reparse-symbol indented_block_body) [52573 52589]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51868 51872])
                            ("line" variable nil (reparse-symbol function_parameters) [51874 51878]))                          
                        :documentation "
        Initialize the class with a :class:`matplotlib.lines.Line2D`
        instance.  The line should already be added to some
        :class:`matplotlib.axes.Axes` instance and should have the
        picker property set.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [51855 52590])
                    ("process_selected" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52616 52620])
                            ("ind" variable nil (reparse-symbol function_parameters) [52622 52625])
                            ("xs" variable nil (reparse-symbol function_parameters) [52627 52629])
                            ("ys" variable nil (reparse-symbol function_parameters) [52631 52633]))                          
                        :documentation "
        Default \"do nothing\" implementation of the
        :meth:`process_selected` method.

        *ind* are the indices of the selected vertices.  *xs* and *ys*
        are the coordinates of the selected vertices.
        ")
                        (reparse-symbol indented_block_body) [52595 52891])
                    ("onpick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52907 52911])
                            ("event" variable nil (reparse-symbol function_parameters) [52913 52918]))                          
                        :documentation "When the line is picked, update the set of selected indicies.")
                        (reparse-symbol indented_block_body) [52896 53354]))                  
                :type "class")
                nil [50789 53354])
            ("lineStyles" variable nil nil [53356 53387])
            ("lineMarkers" variable nil nil [53388 53421])
            ("drawStyles" variable nil nil [53422 53452])
            ("fillStyles" variable nil nil [53453 53488])
            ("docstring" code nil nil [53490 53543])
            ("docstring" code nil nil [53653 53694]))          
      :file "lines.py"
      :pointmax 53695
      :fsize 53694
      :lastmodtime '(22681 7108 727473 0)
      :unmatched-syntax '((FROM 711 . 715) (PERIOD 716 . 717) (FROM 613 . 617) (PERIOD 618 . 619) (FROM 590 . 594) (PERIOD 595 . 596) (FROM 405 . 409) (PERIOD 410 . 411) (FROM 378 . 382) (PERIOD 383 . 384) (FROM 338 . 342) (PERIOD 343 . 344)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Classes for including text in a figure.
\"\"\"" code nil nil [1 48])
            ("" code nil nil [72 157])
            ("six" include nil nil [159 169])
            ("six.moves" include nil nil [170 195])
            ("math" include nil nil [197 208])
            ("warnings" include nil nil [209 224])
            ("contextlib" include nil nil [226 243])
            ("numpy" include nil nil [245 263])
            ("matplotlib" include nil nil [265 293])
            ("matplotlib" include nil nil [294 325])
            ("matplotlib.artist" include nil nil [326 360])
            ("matplotlib.artist" include nil nil [361 397])
            ("matplotlib.cbook" include nil nil [398 450])
            ("matplotlib" include nil nil [451 483])
            ("matplotlib.font_manager" include nil nil [484 534])
            ("matplotlib.patches" include nil nil [535 580])
            ("matplotlib.patches" include nil nil [581 638])
            ("matplotlib.transforms" include nil nil [639 682])
            ("matplotlib.transforms" include nil nil [683 742])
            ("matplotlib.transforms" include nil nil [743 802])
            ("matplotlib.lines" include nil nil [803 838])
            ("matplotlib.path" include nil nil [839 871])
            ("matplotlib.artist" include nil nil [872 921])
            ("matplotlib.backend_bases" include nil nil [923 972])
            ("matplotlib.textpath" include nil nil [973 1013])
            ("_process_text_args" function (:arguments 
              ( ("override" variable nil (reparse-symbol function_parameters) [1039 1047])
                ("fontdict" variable nil (reparse-symbol function_parameters) [1049 1057])
                ("kwargs" variable nil (reparse-symbol function_parameters) [1064 1072]))              ) nil [1016 1264])
            ("_wrap_text" function
               (:documentation "
    Temporarily inserts newlines to the text if the wrap option is enabled.
    "
                :arguments 
                  ( ("textobj" variable nil (reparse-symbol function_parameters) [1308 1315]))                  
                :decorators 
                  ( ("contextlib.contextmanager" function (:type "decorator") nil nil))                  )
                nil [1266 1660])
            ("get_rotation" function
               (:documentation "
    Return the text angle as float. The returned
    angle is between 0 and 360 deg.

    *rotation* may be 'horizontal', 'vertical', or a numeric value in degrees.
    "
                :arguments 
                  ( ("rotation" variable nil (reparse-symbol function_parameters) [1733 1741]))                  )
                nil [1716 2462])
            ("docstring" code nil nil [2649 5294])
            ("_get_textbox" function
               (:documentation "
    Calculate the bounding box of the text. Unlike
    :meth:`matplotlib.text.Text.get_extents` method, The bbox size of
    the text before the rotation is calculated.
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [5652 5656])
                    ("renderer" variable nil (reparse-symbol function_parameters) [5658 5666]))                  )
                nil [5635 6543])
            ("Text" type
               (:documentation "
    Handle storing and drawing of text in window or data coordinates.
    "
                :superclasses ("Artist")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [6655 6665])
                    ("_cached" variable nil (reparse-symbol indented_block_body) [6671 6692])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6710 6714]))                          )
                        (reparse-symbol indented_block_body) [6698 6788])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a :class:`~matplotlib.text.Text` instance at *x*, *y*
        with string *text*.

        Valid kwargs are
        %(Text)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [7375 7530])
                            ("Artist" code nil (reparse-symbol indented_block_body) [7540 7561])
                            ("self, self" code nil (reparse-symbol indented_block_body) [7570 7593])
                            ("if" code nil (reparse-symbol indented_block_body) [7603 7664])
                            ("if" code nil (reparse-symbol indented_block_body) [7672 7850])
                            ("self" code nil (reparse-symbol indented_block_body) [7859 7878])
                            ("self" code nil (reparse-symbol indented_block_body) [7887 7908])
                            ("self" code nil (reparse-symbol indented_block_body) [7917 7940])
                            ("self" code nil (reparse-symbol indented_block_body) [7949 7968])
                            ("self" variable nil (reparse-symbol indented_block_body) [7977 8020])
                            ("self" variable nil (reparse-symbol indented_block_body) [8029 8076])
                            ("self" variable nil (reparse-symbol indented_block_body) [8085 8122])
                            ("self" variable nil (reparse-symbol indented_block_body) [8131 8156])
                            ("self" variable nil (reparse-symbol indented_block_body) [8165 8202])
                            ("self" variable nil (reparse-symbol indented_block_body) [8211 8234])
                            ("self" variable nil (reparse-symbol indented_block_body) [8272 8293])
                            ("if" code nil (reparse-symbol indented_block_body) [8302 8385])
                            ("self" variable nil (reparse-symbol indented_block_body) [8393 8424])
                            ("self" code nil (reparse-symbol indented_block_body) [8433 8470])
                            ("self" code nil (reparse-symbol indented_block_body) [8479 8498]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6806 6810])
                            ("x" variable nil (reparse-symbol function_parameters) [6829 6830])
                            ("y" variable nil (reparse-symbol function_parameters) [6834 6835])
                            ("text" variable nil (reparse-symbol function_parameters) [6839 6843])
                            ("color" variable nil (reparse-symbol function_parameters) [6865 6870])
                            ("verticalalignment" variable nil (reparse-symbol function_parameters) [6928 6945])
                            ("horizontalalignment" variable nil (reparse-symbol function_parameters) [6975 6994])
                            ("multialignment" variable nil (reparse-symbol function_parameters) [7020 7034])
                            ("fontproperties" variable nil (reparse-symbol function_parameters) [7058 7072])
                            ("rotation" variable nil (reparse-symbol function_parameters) [7128 7136])
                            ("linespacing" variable nil (reparse-symbol function_parameters) [7160 7171])
                            ("rotation_mode" variable nil (reparse-symbol function_parameters) [7195 7208])
                            ("usetex" variable nil (reparse-symbol function_parameters) [7232 7238])
                            ("wrap" variable nil (reparse-symbol function_parameters) [7309 7313])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7338 7346]))                          
                        :documentation "
        Create a :class:`~matplotlib.text.Text` instance at *x*, *y*
        with string *text*.

        Valid kwargs are
        %(Text)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6793 8499])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8515 8519])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8521 8527]))                          
                        :documentation "
        Update properties from a dictionary.
        ")
                        (reparse-symbol indented_block_body) [8504 8759])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8781 8785]))                          )
                        (reparse-symbol indented_block_body) [8764 8933])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8951 8955])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [8957 8967]))                          
                        :documentation "Test whether the mouse event occurred in the patch.

        In the case of text, a hit is true anywhere in the
        axis-aligned bounding-box containing the text.

        Returns True or False.
        ")
                        (reparse-symbol indented_block_body) [8938 9936])
                    ("_get_xy_display" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9961 9965]))                          )
                        (reparse-symbol indented_block_body) [9941 10151])
                    ("_get_multialignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10180 10184]))                          )
                        (reparse-symbol indented_block_body) [10156 10331])
                    ("get_rotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10353 10357]))                          )
                        (reparse-symbol indented_block_body) [10336 10486])
                    ("set_rotation_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10513 10517])
                            ("m" variable nil (reparse-symbol function_parameters) [10519 10520]))                          
                        :documentation "
        set text rotation mode. If \"anchor\", the un-rotated text
        will first aligned according to their *ha* and
        *va*, and then will be rotated with the alignement
        reference point as a origin. If None (default), the text will be
        rotated first then will be aligned.
        ")
                        (reparse-symbol indented_block_body) [10491 11040])
                    ("get_rotation_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11067 11071]))                          )
                        (reparse-symbol indented_block_body) [11045 11142])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11163 11167])
                            ("other" variable nil (reparse-symbol function_parameters) [11169 11174]))                          )
                        (reparse-symbol indented_block_body) [11147 11683])
                    ("_get_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11704 11708])
                            ("renderer" variable nil (reparse-symbol function_parameters) [11710 11718]))                          
                        :documentation "
        return the extent (bbox) of the text together with
        multiple-alignment information. Note that it returns an extent
        of a rotated text when necessary.
        ")
                        (reparse-symbol indented_block_body) [11688 17097])
                    ("set_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17115 17119])
                            ("rectprops" variable nil (reparse-symbol function_parameters) [17121 17130]))                          
                        :documentation "
        Draw a bounding box around self.  rectprops are any settable
        properties for a FancyBboxPatch, e.g., facecolor='red', alpha=0.5.

          t.set_bbox(dict(facecolor='red', alpha=0.5))

        The default boxstyle is 'square'. The mutation
        scale of the FancyBboxPatch is set to the fontsize.

        ACCEPTS: FancyBboxPatch prop dict
        ")
                        (reparse-symbol indented_block_body) [17102 18678])
                    ("get_bbox_patch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18702 18706]))                          
                        :documentation "
        Return the bbox Patch object. Returns None if the
        FancyBboxPatch is not made.
        ")
                        (reparse-symbol indented_block_body) [18683 18859])
                    ("update_bbox_position_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18894 18898])
                            ("renderer" variable nil (reparse-symbol function_parameters) [18900 18908]))                          
                        :documentation "
        Update the location and the size of the bbox. This method
        should be used when the position and size of the bbox needs to
        be updated before actually drawing the bbox.
        ")
                        (reparse-symbol indented_block_body) [18864 20001])
                    ("_draw_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20021 20025])
                            ("renderer" variable nil (reparse-symbol function_parameters) [20027 20035])
                            ("posx" variable nil (reparse-symbol function_parameters) [20037 20041])
                            ("posy" variable nil (reparse-symbol function_parameters) [20043 20047]))                          
                        :documentation " Update the location and the size of the bbox
        (FancyBboxPatch), and draw
        ")
                        (reparse-symbol indented_block_body) [20006 20649])
                    ("_update_clip_properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20682 20686]))                          )
                        (reparse-symbol indented_block_body) [20654 20919])
                    ("set_clip_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20941 20945])
                            ("clipbox" variable nil (reparse-symbol function_parameters) [20947 20954]))                          
                        :documentation "
        Set the artist's clip :class:`~matplotlib.transforms.Bbox`.

        ACCEPTS: a :class:`matplotlib.transforms.Bbox` instance
        ")
                        (reparse-symbol indented_block_body) [20924 21201])
                    ("set_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21224 21228])
                            ("path" variable nil (reparse-symbol function_parameters) [21230 21234])
                            ("transform" variable nil (reparse-symbol function_parameters) [21236 21245]))                          
                        :documentation "
        Set the artist's clip path, which may be:

          * a :class:`~matplotlib.patches.Patch` (or subclass) instance

          * a :class:`~matplotlib.path.Path` instance, in which case
             an optional :class:`~matplotlib.transforms.Transform`
             instance may be provided, which will be applied to the
             path before using it for clipping.

          * *None*, to remove the clipping path

        For efficiency, if the path happens to be an axis-aligned
        rectangle, this method will set the clipping box to the
        corresponding rectangle and set the clipping path to *None*.

        ACCEPTS: [ (:class:`~matplotlib.path.Path`,
        :class:`~matplotlib.transforms.Transform`) |
        :class:`~matplotlib.patches.Patch` | None ]
        ")
                        (reparse-symbol indented_block_body) [21206 22156])
                    ("set_clip_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22177 22181])
                            ("b" variable nil (reparse-symbol function_parameters) [22183 22184]))                          
                        :documentation "
        Set whether artist uses clipping.

        When False artists will be visible out side of the axes which
        can lead to unexpected results.

        ACCEPTS: [True | False]
        ")
                        (reparse-symbol indented_block_body) [22161 22477])
                    ("get_wrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22495 22499]))                          
                        :documentation "
        Returns the wrapping state for the text.
        ")
                        (reparse-symbol indented_block_body) [22482 22601])
                    ("set_wrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22619 22623])
                            ("wrap" variable nil (reparse-symbol function_parameters) [22625 22629]))                          
                        :documentation "
        Sets the wrapping state for the text.
        ")
                        (reparse-symbol indented_block_body) [22606 22728])
                    ("_get_wrap_line_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22758 22762]))                          
                        :documentation "
        Returns the maximum line width for wrapping text based on the
        current orientation.
        ")
                        (reparse-symbol indented_block_body) [22733 23623])
                    ("_get_dist_to_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23649 23653])
                            ("rotation" variable nil (reparse-symbol function_parameters) [23655 23663])
                            ("x0" variable nil (reparse-symbol function_parameters) [23665 23667])
                            ("y0" variable nil (reparse-symbol function_parameters) [23669 23671])
                            ("figure_box" variable nil (reparse-symbol function_parameters) [23673 23683]))                          
                        :documentation "
        Returns the distance from the given points, to the boundaries
        of a rotated box in pixels.
        ")
                        (reparse-symbol indented_block_body) [23628 24551])
                    ("_get_rendered_text_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24585 24589])
                            ("text" variable nil (reparse-symbol function_parameters) [24591 24595]))                          
                        :documentation "
        Returns the width of a given text string, in pixels.
        ")
                        (reparse-symbol indented_block_body) [24556 24851])
                    ("_get_wrapped_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24878 24882]))                          
                        :documentation "
        Return a copy of the text with new lines added, so that
        the text is wrapped relative to the parent figure.
        ")
                        (reparse-symbol indented_block_body) [24856 26158])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26197 26201])
                            ("renderer" variable nil (reparse-symbol function_parameters) [26203 26211]))                          
                        :documentation "
        Draws the :class:`Text` object to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [26163 28850])
                    ("get_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28869 28873]))                          )
                        (reparse-symbol indented_block_body) [28855 28942])
                    ("get_fontproperties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28970 28974]))                          )
                        (reparse-symbol indented_block_body) [28947 29079])
                    ("get_font_properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29108 29112]))                          )
                        (reparse-symbol indented_block_body) [29084 29195])
                    ("get_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29215 29219]))                          )
                        (reparse-symbol indented_block_body) [29200 29335])
                    ("get_fontfamily" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29359 29363]))                          )
                        (reparse-symbol indented_block_body) [29340 29430])
                    ("get_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29448 29452]))                          )
                        (reparse-symbol indented_block_body) [29435 29543])
                    ("get_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29562 29566]))                          )
                        (reparse-symbol indented_block_body) [29548 29659])
                    ("get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29677 29681]))                          )
                        (reparse-symbol indented_block_body) [29664 29783])
                    ("get_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29804 29808]))                          )
                        (reparse-symbol indented_block_body) [29788 29907])
                    ("get_fontvariant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29932 29936]))                          )
                        (reparse-symbol indented_block_body) [29912 30005])
                    ("get_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30025 30029]))                          )
                        (reparse-symbol indented_block_body) [30010 30131])
                    ("get_fontname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30153 30157]))                          )
                        (reparse-symbol indented_block_body) [30136 30220])
                    ("get_fontstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30243 30247]))                          )
                        (reparse-symbol indented_block_body) [30225 30312])
                    ("get_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30334 30338]))                          )
                        (reparse-symbol indented_block_body) [30317 30401])
                    ("get_fontweight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30425 30429]))                          )
                        (reparse-symbol indented_block_body) [30406 30496])
                    ("get_stretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30517 30521]))                          )
                        (reparse-symbol indented_block_body) [30501 30627])
                    ("get_fontstretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30652 30656]))                          )
                        (reparse-symbol indented_block_body) [30632 30725])
                    ("get_ha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30741 30745]))                          )
                        (reparse-symbol indented_block_body) [30730 30838])
                    ("get_horizontalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30871 30875]))                          
                        :documentation "
        Return the horizontal alignment as string.  Will be one of
        'left', 'center' or 'right'.
        ")
                        (reparse-symbol indented_block_body) [30843 31047])
                    ("get_unitless_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31078 31082]))                          )
                        (reparse-symbol indented_block_body) [31052 31431])
                    ("get_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31453 31457]))                          )
                        (reparse-symbol indented_block_body) [31436 31672])
                    ("get_prop_tup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31694 31698])
                            ("renderer" variable nil (reparse-symbol function_parameters) [31700 31708]))                          
                        :documentation "
        Return a hashable tuple of properties.

        Not intended to be human readable, but useful for backends who
        want to cache derived information about text (e.g., layouts) and
        need to know if the text has changed.
        ")
                        (reparse-symbol indented_block_body) [31677 32322])
                    ("get_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32340 32344]))                          )
                        (reparse-symbol indented_block_body) [32327 32406])
                    ("get_va" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32422 32426]))                          )
                        (reparse-symbol indented_block_body) [32411 32522])
                    ("get_verticalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32553 32557]))                          
                        :documentation "
        Return the vertical alignment as string.  Will be one of
        'top', 'center', 'bottom' or 'baseline'.
        ")
                        (reparse-symbol indented_block_body) [32527 32737])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32764 32768])
                            ("renderer" variable nil (reparse-symbol function_parameters) [32770 32778])
                            ("dpi" variable nil (reparse-symbol function_parameters) [32785 32788]))                          )
                        (reparse-symbol indented_block_body) [32742 34490])
                    ("set_backgroundcolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34519 34523])
                            ("color" variable nil (reparse-symbol function_parameters) [34525 34530]))                          
                        :documentation "
        Set the background color of the text by updating the bbox.

        .. seealso::

            :meth:`set_bbox`
               To change the position of the bounding box.

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [34495 35016])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35035 35039])
                            ("color" variable nil (reparse-symbol function_parameters) [35041 35046]))                          
                        :documentation "
        Set the foreground color of the text

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [35021 35370])
                    ("set_ha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35386 35390])
                            ("align" variable nil (reparse-symbol function_parameters) [35392 35397]))                          )
                        (reparse-symbol indented_block_body) [35375 35488])
                    ("set_horizontalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35521 35525])
                            ("align" variable nil (reparse-symbol function_parameters) [35527 35532]))                          
                        :documentation "
        Set the horizontal alignment to one of

        ACCEPTS: [ 'center' | 'right' | 'left' ]
        ")
                        (reparse-symbol indented_block_body) [35493 35912])
                    ("set_ma" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35928 35932])
                            ("align" variable nil (reparse-symbol function_parameters) [35934 35939]))                          )
                        (reparse-symbol indented_block_body) [35917 36023])
                    ("set_multialignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36051 36055])
                            ("align" variable nil (reparse-symbol function_parameters) [36057 36062]))                          
                        :documentation "
        Set the alignment for multiple lines layout.  The layout of the
        bounding box of all the lines is determined bu the horizontalalignment
        and verticalalignment properties, but the multiline text within that
        box can be

        ACCEPTS: ['left' | 'right' | 'center' ]
        ")
                        (reparse-symbol indented_block_body) [36028 36636])
                    ("set_linespacing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36661 36665])
                            ("spacing" variable nil (reparse-symbol function_parameters) [36667 36674]))                          
                        :documentation "
        Set the line spacing as a multiple of the font size.
        Default is 1.2.

        ACCEPTS: float (multiple of font size)
        ")
                        (reparse-symbol indented_block_body) [36641 36896])
                    ("set_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36916 36920])
                            ("fontname" variable nil (reparse-symbol function_parameters) [36922 36930]))                          
                        :documentation "
        Set the font family.  May be either a single string, or a list
        of strings in decreasing priority.  Each string may be either
        a real font name or a generic font class name.  If the latter,
        the specific font names will be looked up in the
        :file:`matplotlibrc` file.

        ACCEPTS: [FONTNAME | 'serif' | 'sans-serif' | 'cursive' | 'fantasy' |
                  'monospace' ]
        ")
                        (reparse-symbol indented_block_body) [36901 37448])
                    ("set_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37469 37473])
                            ("variant" variable nil (reparse-symbol function_parameters) [37475 37482]))                          
                        :documentation "
        Set the font variant, either 'normal' or 'small-caps'.

        ACCEPTS: [ 'normal' | 'small-caps' ]
        ")
                        (reparse-symbol indented_block_body) [37453 37694])
                    ("set_fontvariant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37719 37723])
                            ("variant" variable nil (reparse-symbol function_parameters) [37725 37732]))                          )
                        (reparse-symbol indented_block_body) [37699 37808])
                    ("set_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37826 37830])
                            ("fontname" variable nil (reparse-symbol function_parameters) [37832 37840]))                          
                        :documentation "alias for set_family")
                        (reparse-symbol indented_block_body) [37813 37919])
                    ("set_fontname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37941 37945])
                            ("fontname" variable nil (reparse-symbol function_parameters) [37947 37955]))                          
                        :documentation "alias for set_family")
                        (reparse-symbol indented_block_body) [37924 38027])
                    ("set_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38046 38050])
                            ("fontstyle" variable nil (reparse-symbol function_parameters) [38052 38061]))                          
                        :documentation "
        Set the font style.

        ACCEPTS: [ 'normal' | 'italic' | 'oblique']
        ")
                        (reparse-symbol indented_block_body) [38032 38245])
                    ("set_fontstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38268 38272])
                            ("fontstyle" variable nil (reparse-symbol function_parameters) [38274 38283]))                          )
                        (reparse-symbol indented_block_body) [38250 38357])
                    ("set_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38375 38379])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [38381 38389]))                          
                        :documentation "
        Set the font size.  May be either a size string, relative to
        the default font size, or an absolute font size in points.

        ACCEPTS: [size in points | 'xx-small' | 'x-small' | 'small' |
                  'medium' | 'large' | 'x-large' | 'xx-large' ]
        ")
                        (reparse-symbol indented_block_body) [38362 38761])
                    ("set_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38783 38787])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [38789 38797]))                          )
                        (reparse-symbol indented_block_body) [38766 38868])
                    ("set_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38888 38892])
                            ("weight" variable nil (reparse-symbol function_parameters) [38894 38900]))                          
                        :documentation "
        Set the font weight.

        ACCEPTS: [a numeric value in range 0-1000 | 'ultralight' | 'light' |
                  'normal' | 'regular' | 'book' | 'medium' | 'roman' |
                  'semibold' | 'demibold' | 'demi' | 'bold' | 'heavy' |
                  'extra bold' | 'black' ]
        ")
                        (reparse-symbol indented_block_body) [38873 39294])
                    ("set_fontweight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39318 39322])
                            ("weight" variable nil (reparse-symbol function_parameters) [39324 39330]))                          )
                        (reparse-symbol indented_block_body) [39299 39403])
                    ("set_stretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39424 39428])
                            ("stretch" variable nil (reparse-symbol function_parameters) [39430 39437]))                          
                        :documentation "
        Set the font stretch (horizontal condensation or expansion).

        ACCEPTS: [a numeric value in range 0-1000 | 'ultra-condensed' |
                  'extra-condensed' | 'condensed' | 'semi-condensed' |
                  'normal' | 'semi-expanded' | 'expanded' | 'extra-expanded' |
                  'ultra-expanded' ]
        ")
                        (reparse-symbol indented_block_body) [39408 39869])
                    ("set_fontstretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39894 39898])
                            ("stretch" variable nil (reparse-symbol function_parameters) [39900 39907]))                          )
                        (reparse-symbol indented_block_body) [39874 39983])
                    ("set_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40005 40009])
                            ("xy" variable nil (reparse-symbol function_parameters) [40011 40013]))                          
                        :documentation "
        Set the (*x*, *y*) position of the text

        ACCEPTS: (x,y)
        ")
                        (reparse-symbol indented_block_body) [39988 40164])
                    ("set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40179 40183])
                            ("x" variable nil (reparse-symbol function_parameters) [40185 40186]))                          
                        :documentation "
        Set the *x* position of the text

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [40169 40324])
                    ("set_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40339 40343])
                            ("y" variable nil (reparse-symbol function_parameters) [40345 40346]))                          
                        :documentation "
        Set the *y* position of the text

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [40329 40484])
                    ("set_rotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40506 40510])
                            ("s" variable nil (reparse-symbol function_parameters) [40512 40513]))                          
                        :documentation "
        Set the rotation of the text

        ACCEPTS: [ angle in degrees | 'vertical' | 'horizontal' ]
        ")
                        (reparse-symbol indented_block_body) [40489 40697])
                    ("set_va" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40713 40717])
                            ("align" variable nil (reparse-symbol function_parameters) [40719 40724]))                          )
                        (reparse-symbol indented_block_body) [40702 40811])
                    ("set_verticalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40842 40846])
                            ("align" variable nil (reparse-symbol function_parameters) [40848 40853]))                          
                        :documentation "
        Set the vertical alignment

        ACCEPTS: [ 'center' | 'top' | 'bottom' | 'baseline' ]
        ")
                        (reparse-symbol indented_block_body) [40816 41243])
                    ("set_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41261 41265])
                            ("s" variable nil (reparse-symbol function_parameters) [41267 41268]))                          
                        :documentation "
        Set the text string *s*

        It may contain newlines (``\\\\n``) or math in LaTeX syntax.

        ACCEPTS: string or anything printable with '%s' conversion.
        ")
                        (reparse-symbol indented_block_body) [41248 41523])
                    ("is_math_text" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("s" variable nil (reparse-symbol function_parameters) [41563 41564])
                            ("usetex" variable nil (reparse-symbol function_parameters) [41566 41572]))                          
                        :documentation "
        Returns a cleaned string and a boolean flag.
        The flag indicates if the given string *s* contains any mathtext,
        determined by counting unescaped dollar signs. If no mathtext
        is present, the cleaned string has its dollar signs unescaped.
        If usetex is on, the flag always has the value \"TeX\".
        ")
                        (reparse-symbol indented_block_body) [41528 42334])
                    ("set_fontproperties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42362 42366])
                            ("fp" variable nil (reparse-symbol function_parameters) [42368 42370]))                          
                        :documentation "
        Set the font properties that control the text.  *fp* must be a
        :class:`matplotlib.font_manager.FontProperties` object.

        ACCEPTS: a :class:`matplotlib.font_manager.FontProperties` instance
        ")
                        (reparse-symbol indented_block_body) [42339 42743])
                    ("set_font_properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42772 42776])
                            ("fp" variable nil (reparse-symbol function_parameters) [42778 42780]))                          )
                        (reparse-symbol indented_block_body) [42748 42858])
                    ("set_usetex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42878 42882])
                            ("usetex" variable nil (reparse-symbol function_parameters) [42884 42890]))                          
                        :documentation "
        Set this `Text` object to render using TeX (or not).

        If `None` is given, the option will be reset to use the value of
        `rcParams['text.usetex']`
        ")
                        (reparse-symbol indented_block_body) [42863 43244])
                    ("get_usetex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43264 43268]))                          
                        :documentation "
        Return whether this `Text` object will render using TeX.

        If the user has not manually set this value, it will default to
        the value of `rcParams['text.usetex']`
        ")
                        (reparse-symbol indented_block_body) [43249 43602]))                  
                :type "class")
                nil [6545 43602])
            ("docstring" code nil nil [43603 43652])
            ("docstring" code nil nil [43653 43692])
            ("TextWithDash" type
               (:superclasses ("Text")
                :type "class")
                nil [43695 56752])
            ("docstring" code nil nil [56753 56818])
            ("OffsetFrom" type
               (:superclasses ("object")
                :members 
                  ( ("'Callable helper class for working with `Annotation`'" code nil (reparse-symbol indented_block_body) [56851 56904])
                    ("__init__" function
                       (:suite 
                          ( ("'''
        Parameters
        ----------
        artist : `Artist`, `BboxBase`, or `Transform`
            The object to compute the offset from.

        ref_coord : length 2 sequence
            If `artist` is an `Artist` or `BboxBase`, this values is
            the location to of the offset origin in fractions of the
            `artist` bounding box.

            If `artist` is a transform, the offset origin is the
            transform applied to this value.

        unit : {'points, 'pixels'}
            The screen units to use (pixels or points) for the offset
            input.

        '''" code nil (reparse-symbol indented_block_body) [56971 57578])
                            ("self" variable nil (reparse-symbol indented_block_body) [57587 57608])
                            ("self" variable nil (reparse-symbol indented_block_body) [57617 57644])
                            ("self" code nil (reparse-symbol indented_block_body) [57653 57672]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56922 56926])
                            ("artist" variable nil (reparse-symbol function_parameters) [56928 56934])
                            ("ref_coord" variable nil (reparse-symbol function_parameters) [56936 56945])
                            ("unit" variable nil (reparse-symbol function_parameters) [56947 56951]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [56909 57673])
                    ("set_unit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57691 57695])
                            ("unit" variable nil (reparse-symbol function_parameters) [57697 57701]))                          )
                        (reparse-symbol indented_block_body) [57678 58017])
                    ("get_unit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58035 58039]))                          )
                        (reparse-symbol indented_block_body) [58022 58135])
                    ("_get_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58155 58159])
                            ("renderer" variable nil (reparse-symbol function_parameters) [58161 58169]))                          )
                        (reparse-symbol indented_block_body) [58140 58317])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58335 58339])
                            ("renderer" variable nil (reparse-symbol function_parameters) [58341 58349]))                          )
                        (reparse-symbol indented_block_body) [58322 59394]))                  
                :type "class")
                nil [56821 59394])
            ("_AnnotationBase" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [59554 59566])
                            ("self" variable nil (reparse-symbol indented_block_body) [59575 59599])
                            ("self" code nil (reparse-symbol indented_block_body) [59608 59649])
                            ("self" variable nil (reparse-symbol indented_block_body) [59659 59681]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59444 59448])
                            ("xy" variable nil (reparse-symbol function_parameters) [59467 59469])
                            ("xycoords" variable nil (reparse-symbol function_parameters) [59488 59496])
                            ("annotation_clip" variable nil (reparse-symbol function_parameters) [59522 59537]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [59431 59682])
                    ("_get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59699 59703])
                            ("renderer" variable nil (reparse-symbol function_parameters) [59705 59713])
                            ("x" variable nil (reparse-symbol function_parameters) [59715 59716])
                            ("y" variable nil (reparse-symbol function_parameters) [59718 59719])
                            ("s" variable nil (reparse-symbol function_parameters) [59721 59722]))                          )
                        (reparse-symbol indented_block_body) [59687 60080])
                    ("_get_xy_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60107 60111])
                            ("renderer" variable nil (reparse-symbol function_parameters) [60113 60121])
                            ("s" variable nil (reparse-symbol function_parameters) [60123 60124]))                          )
                        (reparse-symbol indented_block_body) [60085 63081])
                    ("_get_ref_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63102 63106])
                            ("renderer" variable nil (reparse-symbol function_parameters) [63108 63116]))                          
                        :documentation "
        return x, y (in display coordinate) that is to be used for a reference
        of any offset coordinate
        ")
                        (reparse-symbol indented_block_body) [63086 63999])
                    ("set_annotation_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64453 64457])
                            ("b" variable nil (reparse-symbol function_parameters) [64459 64460]))                          )
                        (reparse-symbol indented_block_body) [64429 64843])
                    ("get_annotation_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64872 64876]))                          
                        :documentation "
        Return *annotation_clip* attribute.
        See :meth:`set_annotation_clip` for the meaning of return values.
        ")
                        (reparse-symbol indented_block_body) [64848 65058])
                    ("_get_position_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65084 65088])
                            ("renderer" variable nil (reparse-symbol function_parameters) [65090 65098]))                          )
                        (reparse-symbol indented_block_body) [65063 65243])
                    ("_check_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65262 65266])
                            ("renderer" variable nil (reparse-symbol function_parameters) [65268 65276])
                            ("xy_pixel" variable nil (reparse-symbol function_parameters) [65278 65286]))                          
                        :documentation "
        given the xy pixel coordinate, check if the annotation need to
        be drawn.
        ")
                        (reparse-symbol indented_block_body) [65248 65656])
                    ("draggable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65675 65679])
                            ("state" variable nil (reparse-symbol function_parameters) [65681 65686])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [65693 65701]))                          
                        :documentation "
        Set the draggable state -- if state is

          * None : toggle the current state

          * True : turn draggable on

          * False : turn draggable off

        If draggable is on, you can drag the annotation on the canvas with
        the mouse.  The DraggableAnnotation helper instance is returned if
        draggable is on.
        ")
                        (reparse-symbol indented_block_body) [65661 66595]))                  
                :type "class")
                nil [59396 66595])
            ("Annotation" type
               (:superclasses ("Text" "_AnnotationBase")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66654 66658]))                          )
                        (reparse-symbol indented_block_body) [66642 66826])
                    ("__init__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66874 66878])
                            ("s" variable nil (reparse-symbol function_parameters) [66880 66881])
                            ("xy" variable nil (reparse-symbol function_parameters) [66883 66885])
                            ("xytext" variable nil (reparse-symbol function_parameters) [66904 66910])
                            ("xycoords" variable nil (reparse-symbol function_parameters) [66934 66942])
                            ("textcoords" variable nil (reparse-symbol function_parameters) [66968 66978])
                            ("arrowprops" variable nil (reparse-symbol function_parameters) [67002 67012])
                            ("annotation_clip" variable nil (reparse-symbol function_parameters) [67036 67051])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [67075 67083]))                          
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [66831 82853]))                  
                :type "class")
                nil [66597 82853]))          
      :file "text.py"
      :pointmax 82853
      :fsize 82852
      :lastmodtime '(22681 7108 727473 0)
      :unmatched-syntax '((NAME 27659 . 27664) (IF 27675 . 27677) (ELSE 27693 . 27697)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("" code nil nil [49 134])
            ("six" include nil nil [136 146])
            ("six.moves" include nil nil [147 177])
            ("math" include nil nil [179 190])
            ("matplotlib" include nil nil [192 216])
            ("numpy" include nil nil [217 235])
            ("matplotlib.cbook" include nil nil [236 268])
            ("matplotlib.artist" include nil nil [269 303])
            ("matplotlib.artist" include nil nil [304 353])
            ("matplotlib.colors" include nil nil [354 388])
            ("matplotlib" include nil nil [389 421])
            ("matplotlib.transforms" include nil nil [422 464])
            ("matplotlib.path" include nil nil [465 497])
            ("matplotlib.lines" include nil nil [498 531])
            ("matplotlib.bezier" include nil nil [533 604])
            ("matplotlib.bezier" include nil nil [605 681])
            ("matplotlib.bezier" include nil nil [682 731])
            ("matplotlib.bezier" include nil nil [732 791])
            ("matplotlib.bezier" include nil nil [792 858])
            ("docstring" code nil nil [1054 2276])
            ("_patch_alias_map" variable nil nil [2278 2450])
            ("Patch" type
               (:documentation "
    A patch is a 2D artist with a face color and an edge color.

    If any of *edgecolor*, *facecolor*, *linewidth*, or *antialiased*
    are *None*, they default to their rc params setting.
    "
                :superclasses ("artist.Artist")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [2693 2703])
                    ("validCap" variable nil (reparse-symbol indented_block_body) [2708 2750])
                    ("validJoin" variable nil (reparse-symbol indented_block_body) [2755 2794])
                    ("_edge_default" variable nil (reparse-symbol indented_block_body) [2886 2907])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2925 2929]))                          )
                        (reparse-symbol indented_block_body) [2913 2982])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The following kwarg properties are supported

        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [3360 3447])
                            ("artist" code nil (reparse-symbol indented_block_body) [3456 3484])
                            ("if" code nil (reparse-symbol indented_block_body) [3494 3572])
                            ("if" code nil (reparse-symbol indented_block_body) [3580 3634])
                            ("if" code nil (reparse-symbol indented_block_body) [3642 3693])
                            ("if" code nil (reparse-symbol indented_block_body) [3701 3755])
                            ("if" code nil (reparse-symbol indented_block_body) [3763 3847])
                            ("self" variable nil (reparse-symbol indented_block_body) [3856 3873])
                            ("if" code nil (reparse-symbol indented_block_body) [3915 4314])
                            ("self" variable nil (reparse-symbol indented_block_body) [4386 4408])
                            ("self" variable nil (reparse-symbol indented_block_body) [4417 4436])
                            ("self" code nil (reparse-symbol indented_block_body) [4446 4465])
                            ("self" code nil (reparse-symbol indented_block_body) [4474 4503])
                            ("self" code nil (reparse-symbol indented_block_body) [4512 4541])
                            ("self" code nil (reparse-symbol indented_block_body) [4550 4583])
                            ("self" code nil (reparse-symbol indented_block_body) [4592 4613])
                            ("self" code nil (reparse-symbol indented_block_body) [4622 4649])
                            ("self" code nil (reparse-symbol indented_block_body) [4658 4687])
                            ("self" variable nil (reparse-symbol indented_block_body) [4696 4753])
                            ("if" code nil (reparse-symbol indented_block_body) [4763 4811]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3000 3004])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [3023 3032])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [3056 3065])
                            ("color" variable nil (reparse-symbol function_parameters) [3089 3094])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [3118 3127])
                            ("linestyle" variable nil (reparse-symbol function_parameters) [3151 3160])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [3184 3195])
                            ("hatch" variable nil (reparse-symbol function_parameters) [3219 3224])
                            ("fill" variable nil (reparse-symbol function_parameters) [3248 3252])
                            ("capstyle" variable nil (reparse-symbol function_parameters) [3276 3284])
                            ("joinstyle" variable nil (reparse-symbol function_parameters) [3308 3317])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3341 3349]))                          
                        :documentation "
        The following kwarg properties are supported

        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2987 4811])
                    ("get_verts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4830 4834]))                          
                        :documentation "
        Return a copy of the vertices used in this patch

        If the patch contains Bezier curves, the curves will be
        interpolated by line segments.  To access the curves as
        curves, use :meth:`get_path`.
        ")
                        (reparse-symbol indented_block_body) [4816 5271])
                    ("_process_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5296 5300])
                            ("radius" variable nil (reparse-symbol function_parameters) [5302 5308]))                          )
                        (reparse-symbol indented_block_body) [5276 5621])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5639 5643])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [5645 5655])
                            ("radius" variable nil (reparse-symbol function_parameters) [5657 5663]))                          
                        :documentation "Test whether the mouse event occurred in the patch.

        Returns T/F, {}
        ")
                        (reparse-symbol indented_block_body) [5626 6057])
                    ("contains_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6081 6085])
                            ("point" variable nil (reparse-symbol function_parameters) [6087 6092])
                            ("radius" variable nil (reparse-symbol function_parameters) [6094 6100]))                          
                        :documentation "
        Returns *True* if the given point is inside the path
        (transformed with its transform attribute).
        ")
                        (reparse-symbol indented_block_body) [6062 6466])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6487 6491])
                            ("other" variable nil (reparse-symbol function_parameters) [6493 6498]))                          
                        :documentation "
        Updates this :class:`Patch` from the properties of *other*.
        ")
                        (reparse-symbol indented_block_body) [6471 7141])
                    ("get_extents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7162 7166]))                          
                        :documentation "
        Return a :class:`~matplotlib.transforms.Bbox` object defining
        the axis-aligned extents of the :class:`Patch`.
        ")
                        (reparse-symbol indented_block_body) [7146 7384])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7407 7411]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` applied
        to the :class:`Patch`.
        ")
                        (reparse-symbol indented_block_body) [7389 7616])
                    ("get_data_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7644 7648]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` instance which
        maps data coordinates to physical coordinates.
        ")
                        (reparse-symbol indented_block_body) [7621 7855])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7884 7888]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` instance which
        takes patch coordinates to data coordinates.

        For example, one may define a patch of a circle which represents a
        radius of 5 by providing coordinates for a unit circle, and a
        transform which scales the coordinates (the patch coordinate) by 5.
        ")
                        (reparse-symbol indented_block_body) [7860 8312])
                    ("get_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8337 8341]))                          
                        :documentation "
        Returns True if the :class:`Patch` is to be drawn with antialiasing.
        ")
                        (reparse-symbol indented_block_body) [8317 8478])
                    ("get_aa" variable nil (reparse-symbol indented_block_body) [8482 8506])
                    ("get_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8530 8534]))                          
                        :documentation "
        Return the edge color of the :class:`Patch`.
        ")
                        (reparse-symbol indented_block_body) [8512 8645])
                    ("get_ec" variable nil (reparse-symbol indented_block_body) [8649 8671])
                    ("get_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8695 8699]))                          
                        :documentation "
        Return the face color of the :class:`Patch`.
        ")
                        (reparse-symbol indented_block_body) [8677 8810])
                    ("get_fc" variable nil (reparse-symbol indented_block_body) [8814 8836])
                    ("get_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8860 8864]))                          
                        :documentation "
        Return the line width in points.
        ")
                        (reparse-symbol indented_block_body) [8842 8963])
                    ("get_lw" variable nil (reparse-symbol indented_block_body) [8967 8989])
                    ("get_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9013 9017]))                          
                        :documentation "
        Return the linestyle.  Will be one of ['solid' | 'dashed' |
        'dashdot' | 'dotted']
        ")
                        (reparse-symbol indented_block_body) [8995 9173])
                    ("get_ls" variable nil (reparse-symbol indented_block_body) [9177 9199])
                    ("set_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9225 9229])
                            ("aa" variable nil (reparse-symbol function_parameters) [9231 9233]))                          
                        :documentation "
        Set whether to use antialiased rendering

        ACCEPTS: [True | False]  or None for default
        ")
                        (reparse-symbol indented_block_body) [9205 9494])
                    ("set_aa" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9510 9514])
                            ("aa" variable nil (reparse-symbol function_parameters) [9516 9518]))                          
                        :documentation "alias for set_antialiased")
                        (reparse-symbol indented_block_body) [9499 9601])
                    ("_set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9625 9629])
                            ("color" variable nil (reparse-symbol function_parameters) [9631 9636]))                          )
                        (reparse-symbol indented_block_body) [9606 9973])
                    ("set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9996 10000])
                            ("color" variable nil (reparse-symbol function_parameters) [10002 10007]))                          
                        :documentation "
        Set the patch edge color

        ACCEPTS: mpl color spec, None, 'none', or 'auto'
        ")
                        (reparse-symbol indented_block_body) [9978 10201])
                    ("set_ec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10217 10221])
                            ("color" variable nil (reparse-symbol function_parameters) [10223 10228]))                          
                        :documentation "alias for set_edgecolor")
                        (reparse-symbol indented_block_body) [10206 10310])
                    ("_set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10334 10338])
                            ("color" variable nil (reparse-symbol function_parameters) [10340 10345]))                          )
                        (reparse-symbol indented_block_body) [10315 10556])
                    ("set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10579 10583])
                            ("color" variable nil (reparse-symbol function_parameters) [10585 10590]))                          
                        :documentation "
        Set the patch face color

        ACCEPTS: mpl color spec, or None for default, or 'none' for no color
        ")
                        (reparse-symbol indented_block_body) [10561 10804])
                    ("set_fc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10820 10824])
                            ("color" variable nil (reparse-symbol function_parameters) [10826 10831]))                          
                        :documentation "alias for set_facecolor")
                        (reparse-symbol indented_block_body) [10809 10913])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10932 10936])
                            ("c" variable nil (reparse-symbol function_parameters) [10938 10939]))                          
                        :documentation "
        Set both the edgecolor and the facecolor.

        ACCEPTS: matplotlib color spec

        .. seealso::

            :meth:`set_facecolor`, :meth:`set_edgecolor`
               For setting the edge or face color individually.
        ")
                        (reparse-symbol indented_block_body) [10918 11260])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11279 11283])
                            ("alpha" variable nil (reparse-symbol function_parameters) [11285 11290]))                          
                        :documentation "
        Set the alpha tranparency of the patch.

        ACCEPTS: float or None
        ")
                        (reparse-symbol indented_block_body) [11265 11721])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11776 11780])
                            ("w" variable nil (reparse-symbol function_parameters) [11782 11783]))                          
                        :documentation "
        Set the patch linewidth in points

        ACCEPTS: float or None for default
        ")
                        (reparse-symbol indented_block_body) [11758 12296])
                    ("set_lw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12312 12316])
                            ("lw" variable nil (reparse-symbol function_parameters) [12318 12320]))                          
                        :documentation "alias for set_linewidth")
                        (reparse-symbol indented_block_body) [12301 12399])
                    ("set_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12422 12426])
                            ("ls" variable nil (reparse-symbol function_parameters) [12428 12430]))                          
                        :documentation "
        Set the patch linestyle

        ===========================   =================
        linestyle                     description
        ===========================   =================
        ``'-'`` or ``'solid'``        solid line
        ``'--'`` or  ``'dashed'``     dashed line
        ``'-.'`` or  ``'dashdot'``    dash-dotted line
        ``':'`` or ``'dotted'``       dotted line
        ===========================   =================

        Alternatively a dash tuple of the following form can be provided::

            (offset, onoffseq),

        where ``onoffseq`` is an even length tuple of on and off ink
        in points.

        ACCEPTS: ['solid' | 'dashed', 'dashdot', 'dotted' |
                   (offset, on-off-dash-seq) |
                   ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` |
                   ``' '`` | ``''``]

        Parameters
        ----------
        ls : { '-',  '--', '-.', ':'} and more see description
            The line style.
        ")
                        (reparse-symbol indented_block_body) [12404 13825])
                    ("set_ls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13841 13845])
                            ("ls" variable nil (reparse-symbol function_parameters) [13847 13849]))                          
                        :documentation "alias for set_linestyle")
                        (reparse-symbol indented_block_body) [13830 13928])
                    ("set_fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13946 13950])
                            ("b" variable nil (reparse-symbol function_parameters) [13952 13953]))                          
                        :documentation "
        Set whether to fill the patch

        ACCEPTS: [True | False]
        ")
                        (reparse-symbol indented_block_body) [13933 14214])
                    ("get_fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14232 14236]))                          )
                        (reparse-symbol indented_block_body) [14219 14302])
                    ("fill" variable nil (reparse-symbol indented_block_body) [14449 14484])
                    ("set_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14507 14511])
                            ("s" variable nil (reparse-symbol function_parameters) [14513 14514]))                          
                        :documentation "
        Set the patch capstyle

        ACCEPTS: ['butt' | 'round' | 'projecting']
        ")
                        (reparse-symbol indented_block_body) [14490 14876])
                    ("get_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14898 14902]))                          )
                        (reparse-symbol indented_block_body) [14881 14973])
                    ("set_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14996 15000])
                            ("s" variable nil (reparse-symbol function_parameters) [15002 15003]))                          
                        :documentation "
        Set the patch joinstyle

        ACCEPTS: ['miter' | 'round' | 'bevel']
        ")
                        (reparse-symbol indented_block_body) [14978 15367])
                    ("get_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15390 15394]))                          )
                        (reparse-symbol indented_block_body) [15372 15467])
                    ("set_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15486 15490])
                            ("hatch" variable nil (reparse-symbol function_parameters) [15492 15497]))                          
                        :documentation "
        Set the hatching pattern

        *hatch* can be one of::

          /   - diagonal hatching
          \\   - back diagonal
          |   - vertical
          -   - horizontal
          +   - crossed
          x   - crossed diagonal
          o   - small circle
          O   - large circle
          .   - dots
          *   - stars

        Letters can be combined, in which case all the specified
        hatchings are done.  If same letter repeats, it increases the
        density of hatching of that pattern.

        Hatching is supported in the PostScript, PDF, SVG and Agg
        backends only.

        ACCEPTS: ['/' | '\\\\\\\\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*']
        ")
                        (reparse-symbol indented_block_body) [15472 16271])
                    ("get_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16290 16294]))                          )
                        (reparse-symbol indented_block_body) [16276 16370])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16409 16413])
                            ("renderer" variable nil (reparse-symbol function_parameters) [16415 16423]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16375 17903])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17921 17925]))                          
                        :documentation "
        Return the path of this patch
        ")
                        (reparse-symbol indented_block_body) [17908 18049])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18076 18080])
                            ("renderer" variable nil (reparse-symbol function_parameters) [18082 18090]))                          )
                        (reparse-symbol indented_block_body) [18054 18163]))                  
                :type "class")
                nil [2453 18163])
            ("patchdoc" variable nil nil [18165 18195])
            ("for" code nil nil [18196 18428])
            ("docstring" code nil nil [18505 18545])
            ("Shadow" type
               (:superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18585 18589]))                          )
                        (reparse-symbol indented_block_body) [18573 18640])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a shadow of the given *patch* offset by *ox*, *oy*.
        *props*, if not *None*, is a patch property update dictionary.
        If *None*, the shadow will have have the same color as the face,
        but darkened.

        kwargs are
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [18740 19026])
                            ("Patch" code nil (reparse-symbol indented_block_body) [19035 19055])
                            ("self" variable nil (reparse-symbol indented_block_body) [19064 19082])
                            ("self" variable nil (reparse-symbol indented_block_body) [19091 19109])
                            ("self, self" code nil (reparse-symbol indented_block_body) [19118 19145])
                            ("self" variable nil (reparse-symbol indented_block_body) [19154 19200])
                            ("self" code nil (reparse-symbol indented_block_body) [19209 19223]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18688 18692])
                            ("patch" variable nil (reparse-symbol function_parameters) [18694 18699])
                            ("ox" variable nil (reparse-symbol function_parameters) [18701 18703])
                            ("oy" variable nil (reparse-symbol function_parameters) [18705 18707])
                            ("props" variable nil (reparse-symbol function_parameters) [18709 18714])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18721 18729]))                          
                        :documentation "
        Create a shadow of the given *patch* offset by *ox*, *oy*.
        *props*, if not *None*, is a patch property update dictionary.
        If *None*, the shadow will have have the same color as the face,
        but darkened.

        kwargs are
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18645 19224])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19241 19245]))                          )
                        (reparse-symbol indented_block_body) [19229 19659])
                    ("_update_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19686 19690])
                            ("renderer" variable nil (reparse-symbol function_parameters) [19692 19700]))                          )
                        (reparse-symbol indented_block_body) [19664 19858])
                    ("_get_ox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19875 19879]))                          )
                        (reparse-symbol indented_block_body) [19863 19906])
                    ("_set_ox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19923 19927])
                            ("ox" variable nil (reparse-symbol function_parameters) [19929 19931]))                          )
                        (reparse-symbol indented_block_body) [19911 19956])
                    ("_get_oy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19973 19977]))                          )
                        (reparse-symbol indented_block_body) [19961 20004])
                    ("_set_oy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20021 20025])
                            ("oy" variable nil (reparse-symbol function_parameters) [20027 20029]))                          )
                        (reparse-symbol indented_block_body) [20009 20054])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20072 20076]))                          )
                        (reparse-symbol indented_block_body) [20059 20116])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20145 20149]))                          )
                        (reparse-symbol indented_block_body) [20121 20225])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20239 20243])
                            ("renderer" variable nil (reparse-symbol function_parameters) [20245 20253]))                          )
                        (reparse-symbol indented_block_body) [20230 20332]))                  
                :type "class")
                nil [18548 20332])
            ("Rectangle" type
               (:documentation "
    Draw a rectangle with lower left at *xy* = (*x*, *y*) with
    specified *width* and *height*.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20490 20494]))                          )
                        (reparse-symbol indented_block_body) [20478 20616])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"

        *angle*
          rotation in degrees (anti-clockwise)

        *fill* is a boolean indicating whether to fill the rectangle

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [20719 20913])
                            ("Patch" code nil (reparse-symbol indented_block_body) [20923 20953])
                            ("self" variable nil (reparse-symbol indented_block_body) [20963 20985])
                            ("self" variable nil (reparse-symbol indented_block_body) [20994 21016])
                            ("self" variable nil (reparse-symbol indented_block_body) [21025 21051])
                            ("self" variable nil (reparse-symbol indented_block_body) [21060 21088])
                            ("self" variable nil (reparse-symbol indented_block_body) [21097 21123])
                            ("self" variable nil (reparse-symbol indented_block_body) [21205 21258]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20664 20668])
                            ("xy" variable nil (reparse-symbol function_parameters) [20670 20672])
                            ("width" variable nil (reparse-symbol function_parameters) [20674 20679])
                            ("height" variable nil (reparse-symbol function_parameters) [20681 20687])
                            ("angle" variable nil (reparse-symbol function_parameters) [20689 20694])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20700 20708]))                          
                        :documentation "

        *angle*
          rotation in degrees (anti-clockwise)

        *fill* is a boolean indicating whether to fill the rectangle

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20621 21259])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21277 21281]))                          
                        :documentation "
        Return the vertices of the rectangle
        ")
                        (reparse-symbol indented_block_body) [21264 21390])
                    ("_update_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21423 21427]))                          
                        :documentation "NOTE: This cannot be called until after this has been added
                 to an Axes, otherwise unit conversion will fail. This
                 maxes it very important to call the accessor method and
                 not directly access the transformation member variable.
        ")
                        (reparse-symbol indented_block_body) [21395 22179])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22208 22212]))                          )
                        (reparse-symbol indented_block_body) [22184 22290])
                    ("get_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22305 22309]))                          )
                        (reparse-symbol indented_block_body) [22295 22384])
                    ("get_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22399 22403]))                          )
                        (reparse-symbol indented_block_body) [22389 22480])
                    ("get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22496 22500]))                          )
                        (reparse-symbol indented_block_body) [22485 22596])
                    ("get_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22615 22619]))                          )
                        (reparse-symbol indented_block_body) [22601 22694])
                    ("get_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22714 22718]))                          )
                        (reparse-symbol indented_block_body) [22699 22794])
                    ("set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22809 22813])
                            ("x" variable nil (reparse-symbol function_parameters) [22815 22816]))                          
                        :documentation "
        Set the left coord of the rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [22799 22957])
                    ("set_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22972 22976])
                            ("y" variable nil (reparse-symbol function_parameters) [22978 22979]))                          
                        :documentation "
        Set the bottom coord of the rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [22962 23122])
                    ("set_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23138 23142])
                            ("xy" variable nil (reparse-symbol function_parameters) [23144 23146]))                          
                        :documentation "
        Set the left and bottom coords of the rectangle

        ACCEPTS: 2-item sequence
        ")
                        (reparse-symbol indented_block_body) [23127 23319])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23338 23342])
                            ("w" variable nil (reparse-symbol function_parameters) [23344 23345]))                          
                        :documentation "
        Set the width rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [23324 23478])
                    ("set_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23498 23502])
                            ("h" variable nil (reparse-symbol function_parameters) [23504 23505]))                          
                        :documentation "
        Set the width rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [23483 23639])
                    ("set_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23659 23663])
                            ("args" variable nil (reparse-symbol function_parameters) [23665 23670]))                          
                        :documentation "
        Set the bounds of the rectangle: l,b,w,h

        ACCEPTS: (left, bottom, width, height)
        ")
                        (reparse-symbol indented_block_body) [23644 24013])
                    ("get_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24031 24035]))                          )
                        (reparse-symbol indented_block_body) [24018 24169])
                    ("xy" variable nil (reparse-symbol indented_block_body) [24174 24203]))                  
                :type "class")
                nil [20334 24204])
            ("RegularPolygon" type
               (:documentation "
    A regular polygon patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24296 24300]))                          )
                        (reparse-symbol indented_block_body) [24284 24382])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Constructor arguments:

        *xy*
          A length 2 tuple (*x*, *y*) of the center.

        *numVertices*
          the number of vertices.

        *radius*
          The distance from the center to each of the vertices.

        *orientation*
          rotates the polygon (in radians).

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [24514 24878])
                            ("self" variable nil (reparse-symbol indented_block_body) [24887 24900])
                            ("self" variable nil (reparse-symbol indented_block_body) [24909 24940])
                            ("self" variable nil (reparse-symbol indented_block_body) [24949 24980])
                            ("self" variable nil (reparse-symbol indented_block_body) [24989 25010])
                            ("self" variable nil (reparse-symbol indented_block_body) [25019 25070])
                            ("self" variable nil (reparse-symbol indented_block_body) [25079 25123])
                            ("self" code nil (reparse-symbol indented_block_body) [25132 25156])
                            ("Patch" code nil (reparse-symbol indented_block_body) [25166 25196]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24430 24434])
                            ("xy" variable nil (reparse-symbol function_parameters) [24436 24438])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [24440 24451])
                            ("radius" variable nil (reparse-symbol function_parameters) [24453 24459])
                            ("orientation" variable nil (reparse-symbol function_parameters) [24463 24474])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [24495 24503]))                          
                        :documentation "
        Constructor arguments:

        *xy*
          A length 2 tuple (*x*, *y*) of the center.

        *numVertices*
          the number of vertices.

        *radius*
          The distance from the center to each of the vertices.

        *orientation*
          rotates the polygon (in radians).

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24387 25197])
                    ("_update_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25224 25228]))                          )
                        (reparse-symbol indented_block_body) [25202 25377])
                    ("_get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25394 25398]))                          )
                        (reparse-symbol indented_block_body) [25382 25425])
                    ("_set_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25442 25446])
                            ("xy" variable nil (reparse-symbol function_parameters) [25448 25450]))                          )
                        (reparse-symbol indented_block_body) [25430 25508])
                    ("xy" variable nil (reparse-symbol indented_block_body) [25512 25543])
                    ("_get_orientation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25570 25574]))                          )
                        (reparse-symbol indented_block_body) [25549 25610])
                    ("_set_orientation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25636 25640])
                            ("orientation" variable nil (reparse-symbol function_parameters) [25642 25653]))                          )
                        (reparse-symbol indented_block_body) [25615 25729])
                    ("orientation" variable nil (reparse-symbol indented_block_body) [25733 25791])
                    ("_get_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25813 25817]))                          )
                        (reparse-symbol indented_block_body) [25797 25848])
                    ("_set_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25869 25873])
                            ("radius" variable nil (reparse-symbol function_parameters) [25875 25881]))                          )
                        (reparse-symbol indented_block_body) [25853 25947])
                    ("radius" variable nil (reparse-symbol indented_block_body) [25951 25994])
                    ("_get_numvertices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26021 26025]))                          )
                        (reparse-symbol indented_block_body) [26000 26061])
                    ("_set_numvertices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26087 26091])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [26093 26104]))                          )
                        (reparse-symbol indented_block_body) [26066 26147])
                    ("numvertices" variable nil (reparse-symbol indented_block_body) [26152 26210])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26229 26233]))                          )
                        (reparse-symbol indented_block_body) [26216 26262])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26291 26295]))                          )
                        (reparse-symbol indented_block_body) [26267 26367]))                  
                :type "class")
                nil [24206 26367])
            ("PathPatch" type
               (:documentation "
    A general polycurve path patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [26449 26469])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26487 26491]))                          )
                        (reparse-symbol indented_block_body) [26475 26562])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *path* is a :class:`matplotlib.path.Path` object.

        Valid kwargs are:
        %(Patch)s

        .. seealso::

            :class:`Patch`
                For additional kwargs

        \"\"\"" code nil (reparse-symbol indented_block_body) [26641 26848])
                            ("Patch" code nil (reparse-symbol indented_block_body) [26857 26887])
                            ("self" variable nil (reparse-symbol indented_block_body) [26896 26913]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26610 26614])
                            ("path" variable nil (reparse-symbol function_parameters) [26616 26620])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [26622 26630]))                          
                        :documentation "
        *path* is a :class:`matplotlib.path.Path` object.

        Valid kwargs are:
        %(Patch)s

        .. seealso::

            :class:`Patch`
                For additional kwargs

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26567 26914])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26932 26936]))                          )
                        (reparse-symbol indented_block_body) [26919 26965]))                  
                :type "class")
                nil [26369 26965])
            ("Polygon" type
               (:documentation "
    A general polygon patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27050 27054]))                          )
                        (reparse-symbol indented_block_body) [27038 27125])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *xy* is a numpy array with shape Nx2.

        If *closed* is *True*, the polygon will be closed so the
        starting and ending points are the same.

        Valid kwargs are:
        %(Patch)s

        .. seealso::

            :class:`Patch`
                For additional kwargs

        \"\"\"" code nil (reparse-symbol indented_block_body) [27215 27525])
                            ("Patch" code nil (reparse-symbol indented_block_body) [27534 27564])
                            ("self" variable nil (reparse-symbol indented_block_body) [27573 27594])
                            ("self" code nil (reparse-symbol indented_block_body) [27603 27618]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27173 27177])
                            ("xy" variable nil (reparse-symbol function_parameters) [27179 27181])
                            ("closed" variable nil (reparse-symbol function_parameters) [27183 27189])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27196 27204]))                          
                        :documentation "
        *xy* is a numpy array with shape Nx2.

        If *closed* is *True*, the polygon will be closed so the
        starting and ending points are the same.

        Valid kwargs are:
        %(Patch)s

        .. seealso::

            :class:`Patch`
                For additional kwargs

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27130 27619])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27637 27641]))                          
                        :documentation "
        Get the path of the polygon

        Returns
        -------
        path : Path
           The :class:`~matplotlib.path.Path` object for
           the polygon
        ")
                        (reparse-symbol indented_block_body) [27624 27863])
                    ("get_closed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27883 27887]))                          
                        :documentation "
        Returns if the polygon is closed

        Returns
        -------
        closed : bool
            If the path is closed
        ")
                        (reparse-symbol indented_block_body) [27868 28072])
                    ("set_closed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28092 28096])
                            ("closed" variable nil (reparse-symbol function_parameters) [28098 28104]))                          
                        :documentation "
        Set if the polygon is closed

        Parameters
        ----------
        closed : bool
           True if the polygon is closed
        ")
                        (reparse-symbol indented_block_body) [28077 28427])
                    ("get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28443 28447]))                          
                        :documentation "
        Get the vertices of the path

        Returns
        -------
        vertices : numpy array
            The coordinates of the vertices as a Nx2
            ndarray.
        ")
                        (reparse-symbol indented_block_body) [28432 28684])
                    ("set_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28700 28704])
                            ("xy" variable nil (reparse-symbol function_parameters) [28706 28708]))                          
                        :documentation "
        Set the vertices of the polygon

        Parameters
        ----------
        xy : numpy array or iterable of pairs
            The coordinates of the vertices as a Nx2
            ndarray or iterable of pairs.
        ")
                        (reparse-symbol indented_block_body) [28689 29287])
                    ("_get_xy" variable nil (reparse-symbol indented_block_body) [29292 29308])
                    ("_set_xy" variable nil (reparse-symbol indented_block_body) [29313 29329])
                    ("xy" variable nil (reparse-symbol indented_block_body) [29334 29677]))                  
                :type "class")
                nil [26967 29678])
            ("Wedge" type
               (:documentation "
    Wedge shaped patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29756 29760]))                          )
                        (reparse-symbol indented_block_body) [29744 29822])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Draw a wedge centered at *x*, *y* center with radius *r* that
        sweeps *theta1* to *theta2* (in degrees).  If *width* is given,
        then a partial wedge is drawn from inner radius *r* - *width*
        to outer radius *r*.

        Valid kwargs are:

        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [29934 30236])
                            ("Patch" code nil (reparse-symbol indented_block_body) [30245 30275])
                            ("self" variable nil (reparse-symbol indented_block_body) [30284 30304])
                            ("self, self" code nil (reparse-symbol indented_block_body) [30313 30342])
                            ("self, self" code nil (reparse-symbol indented_block_body) [30351 30392])
                            ("self" variable nil (reparse-symbol indented_block_body) [30401 30455])
                            ("self" code nil (reparse-symbol indented_block_body) [30464 30486]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29870 29874])
                            ("center" variable nil (reparse-symbol function_parameters) [29876 29882])
                            ("r" variable nil (reparse-symbol function_parameters) [29884 29885])
                            ("theta1" variable nil (reparse-symbol function_parameters) [29887 29893])
                            ("theta2" variable nil (reparse-symbol function_parameters) [29895 29901])
                            ("width" variable nil (reparse-symbol function_parameters) [29903 29908])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [29915 29923]))                          
                        :documentation "
        Draw a wedge centered at *x*, *y* center with radius *r* that
        sweeps *theta1* to *theta2* (in degrees).  If *width* is given,
        then a partial wedge is drawn from inner radius *r* - *width*
        to outer radius *r*.

        Valid kwargs are:

        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29827 30487])
                    ("_recompute_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30512 30516]))                          )
                        (reparse-symbol indented_block_body) [30492 31702])
                    ("set_center" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31722 31726])
                            ("center" variable nil (reparse-symbol function_parameters) [31728 31734]))                          )
                        (reparse-symbol indented_block_body) [31707 31818])
                    ("set_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31838 31842])
                            ("radius" variable nil (reparse-symbol function_parameters) [31844 31850]))                          )
                        (reparse-symbol indented_block_body) [31823 31929])
                    ("set_theta1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31949 31953])
                            ("theta1" variable nil (reparse-symbol function_parameters) [31955 31961]))                          )
                        (reparse-symbol indented_block_body) [31934 32045])
                    ("set_theta2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32065 32069])
                            ("theta2" variable nil (reparse-symbol function_parameters) [32071 32077]))                          )
                        (reparse-symbol indented_block_body) [32050 32161])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32180 32184])
                            ("width" variable nil (reparse-symbol function_parameters) [32186 32191]))                          )
                        (reparse-symbol indented_block_body) [32166 32273])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32291 32295]))                          )
                        (reparse-symbol indented_block_body) [32278 32390]))                  
                :type "class")
                nil [29680 32390])
            ("Arrow" type
               (:documentation "
    An arrow patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32518 32522]))                          )
                        (reparse-symbol indented_block_body) [32506 32550])
                    ("_path" variable nil (reparse-symbol indented_block_body) [32555 32753])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Draws an arrow, starting at (*x*, *y*), direction and length
        given by (*dx*, *dy*) the width of the arrow is scaled by *width*.

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [32852 33056])
                            ("Patch" code nil (reparse-symbol indented_block_body) [33065 33095])
                            ("L" variable nil (reparse-symbol indented_block_body) [33104 33124])
                            ("if" code nil (reparse-symbol indented_block_body) [33134 33290])
                            ("trans1" variable nil (reparse-symbol indented_block_body) [33299 33345])
                            ("trans2" variable nil (reparse-symbol indented_block_body) [33354 33421])
                            ("trans3" variable nil (reparse-symbol indented_block_body) [33430 33476])
                            ("trans" code nil (reparse-symbol indented_block_body) [33485 33517])
                            ("self" variable nil (reparse-symbol indented_block_body) [33526 33564]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32802 32806])
                            ("x" variable nil (reparse-symbol function_parameters) [32808 32809])
                            ("y" variable nil (reparse-symbol function_parameters) [32811 32812])
                            ("dx" variable nil (reparse-symbol function_parameters) [32814 32816])
                            ("dy" variable nil (reparse-symbol function_parameters) [32818 32820])
                            ("width" variable nil (reparse-symbol function_parameters) [32822 32827])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [32833 32841]))                          
                        :documentation "
        Draws an arrow, starting at (*x*, *y*), direction and length
        given by (*dx*, *dy*) the width of the arrow is scaled by *width*.

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32759 33565])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33583 33587]))                          )
                        (reparse-symbol indented_block_body) [33570 33616])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33645 33649]))                          )
                        (reparse-symbol indented_block_body) [33621 33689]))                  
                :type "class")
                nil [32446 33689])
            ("FancyArrow" type
               (:documentation "
    Like Arrow, but lets you set head width and head height independently.
    "
                :superclasses ("Polygon")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [33814 33834])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33852 33856]))                          )
                        (reparse-symbol indented_block_body) [33840 33889])
                    ("__init__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33937 33941])
                            ("x" variable nil (reparse-symbol function_parameters) [33943 33944])
                            ("y" variable nil (reparse-symbol function_parameters) [33946 33947])
                            ("dx" variable nil (reparse-symbol function_parameters) [33949 33951])
                            ("dy" variable nil (reparse-symbol function_parameters) [33953 33955])
                            ("width" variable nil (reparse-symbol function_parameters) [33957 33962])
                            ("length_includes_head" variable nil (reparse-symbol function_parameters) [33970 33990])
                            ("head_width" variable nil (reparse-symbol function_parameters) [34015 34025])
                            ("head_length" variable nil (reparse-symbol function_parameters) [34032 34043])
                            ("shape" variable nil (reparse-symbol function_parameters) [34050 34055])
                            ("overhang" variable nil (reparse-symbol function_parameters) [34064 34072])
                            ("head_starts_at_zero" variable nil (reparse-symbol function_parameters) [34093 34112])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [34120 34128]))                          
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33894 37493]))                  
                :type "class")
                nil [33691 37493])
            ("docstring" code nil nil [37495 37564])
            ("docstring" code nil nil [37566 37635])
            ("YAArrow" type
               (:documentation "
    Yet another arrow class.

    This is an arrow that is defined in display space and has a tip at
    *x1*, *y1* and a base at *x2*, *y2*.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37834 37838]))                          )
                        (reparse-symbol indented_block_body) [37822 37868])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Constructor arguments:

        *xytip*
          (*x*, *y*) location of arrow tip

        *xybase*
          (*x*, *y*) location the arrow base mid point

        *figure*
          The :class:`~matplotlib.figure.Figure` instance
          (fig.dpi)

        *width*
          The width of the arrow in points

        *frac*
          The fraction of the arrow length occupied by the head

        *headwidth*
          The width of the base of the arrow head in points

        Valid kwargs are:
        %(Patch)s

        \"\"\"" code nil (reparse-symbol indented_block_body) [38014 38556])
                            ("self" variable nil (reparse-symbol indented_block_body) [38565 38583])
                            ("self" variable nil (reparse-symbol indented_block_body) [38592 38612])
                            ("self" variable nil (reparse-symbol indented_block_body) [38621 38639])
                            ("self" variable nil (reparse-symbol indented_block_body) [38648 38664])
                            ("self" variable nil (reparse-symbol indented_block_body) [38673 38699])
                            ("Patch" code nil (reparse-symbol indented_block_body) [38708 38738])
                            ("self" variable nil (reparse-symbol indented_block_body) [38839 38859]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37916 37920])
                            ("figure" variable nil (reparse-symbol function_parameters) [37922 37928])
                            ("xytip" variable nil (reparse-symbol function_parameters) [37930 37935])
                            ("xybase" variable nil (reparse-symbol function_parameters) [37937 37943])
                            ("width" variable nil (reparse-symbol function_parameters) [37962 37967])
                            ("frac" variable nil (reparse-symbol function_parameters) [37971 37975])
                            ("headwidth" variable nil (reparse-symbol function_parameters) [37981 37990])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [37995 38003]))                          
                        :documentation "
        Constructor arguments:

        *xytip*
          (*x*, *y*) location of arrow tip

        *xybase*
          (*x*, *y*) location the arrow base mid point

        *figure*
          The :class:`~matplotlib.figure.Figure` instance
          (fig.dpi)

        *width*
          The width of the arrow in points

        *frac*
          The fraction of the arrow length occupied by the head

        *headwidth*
          The width of the base of the arrow head in points

        Valid kwargs are:
        %(Patch)s

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37873 38860])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38878 38882]))                          )
                        (reparse-symbol indented_block_body) [38865 39847])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39876 39880]))                          )
                        (reparse-symbol indented_block_body) [39852 39929])
                    ("getpoints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39948 39952])
                            ("x1" variable nil (reparse-symbol function_parameters) [39954 39956])
                            ("y1" variable nil (reparse-symbol function_parameters) [39958 39960])
                            ("x2" variable nil (reparse-symbol function_parameters) [39962 39964])
                            ("y2" variable nil (reparse-symbol function_parameters) [39966 39968])
                            ("k" variable nil (reparse-symbol function_parameters) [39970 39971]))                          
                        :documentation "
        For line segment defined by (*x1*, *y1*) and (*x2*, *y2*)
        return the points on the line that is perpendicular to the
        line and intersects (*x2*, *y2*) and the distance from (*x2*,
        *y2*) of the returned points is *k*.
        ")
                        (reparse-symbol indented_block_body) [39934 40831]))                  
                :type "class")
                nil [37638 40831])
            ("CirclePolygon" type
               (:documentation "
    A polygon-approximation of a circle patch.
    "
                :superclasses ("RegularPolygon")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40949 40953]))                          )
                        (reparse-symbol indented_block_body) [40937 41008])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a circle at *xy* = (*x*, *y*) with given *radius*.
        This circle is approximated by a regular polygon with
        *resolution* sides.  For a smoother circle drawn with splines,
        see :class:`~matplotlib.patches.Circle`.

        Valid kwargs are:
        %(Patch)s

        \"\"\"" code nil (reparse-symbol indented_block_body) [41171 41480])
                            ("RegularPolygon" code nil (reparse-symbol indented_block_body) [41489 41695]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41056 41060])
                            ("xy" variable nil (reparse-symbol function_parameters) [41062 41064])
                            ("radius" variable nil (reparse-symbol function_parameters) [41066 41072])
                            ("resolution" variable nil (reparse-symbol function_parameters) [41093 41103])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [41151 41160]))                          
                        :documentation "
        Create a circle at *xy* = (*x*, *y*) with given *radius*.
        This circle is approximated by a regular polygon with
        *resolution* sides.  For a smoother circle drawn with splines,
        see :class:`~matplotlib.patches.Circle`.

        Valid kwargs are:
        %(Patch)s

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41013 41696]))                  
                :type "class")
                nil [40833 41696])
            ("Ellipse" type
               (:documentation "
    A scale-free ellipse.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41778 41782]))                          )
                        (reparse-symbol indented_block_body) [41766 41924])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *xy*
          center of ellipse

        *width*
          total length (diameter) of horizontal axis

        *height*
          total length (diameter) of vertical axis

        *angle*
          rotation in degrees (anti-clockwise)

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [42027 42331])
                            ("Patch" code nil (reparse-symbol indented_block_body) [42340 42370])
                            ("self" variable nil (reparse-symbol indented_block_body) [42380 42396])
                            ("self, self" code nil (reparse-symbol indented_block_body) [42405 42444])
                            ("self" variable nil (reparse-symbol indented_block_body) [42453 42471])
                            ("self" variable nil (reparse-symbol indented_block_body) [42480 42511])
                            ("self" variable nil (reparse-symbol indented_block_body) [42593 42647]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41972 41976])
                            ("xy" variable nil (reparse-symbol function_parameters) [41978 41980])
                            ("width" variable nil (reparse-symbol function_parameters) [41982 41987])
                            ("height" variable nil (reparse-symbol function_parameters) [41989 41995])
                            ("angle" variable nil (reparse-symbol function_parameters) [41997 42002])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42008 42016]))                          
                        :documentation "
        *xy*
          center of ellipse

        *width*
          total length (diameter) of horizontal axis

        *height*
          total length (diameter) of vertical axis

        *angle*
          rotation in degrees (anti-clockwise)

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41929 42648])
                    ("_recompute_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42678 42682]))                          
                        :documentation "NOTE: This cannot be called until after this has been added
                 to an Axes, otherwise unit conversion will fail. This
                 maxes it very important to call the accessor method and
                 not directly access the transformation member variable.
        ")
                        (reparse-symbol indented_block_body) [42653 43367])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43385 43389]))                          
                        :documentation "
        Return the vertices of the rectangle
        ")
                        (reparse-symbol indented_block_body) [43372 43487])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43516 43520]))                          )
                        (reparse-symbol indented_block_body) [43492 43596]))                  
                :type "class")
                nil [41698 43596])
            ("Circle" type
               (:documentation "
    A circle patch.
    "
                :superclasses ("Ellipse")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43673 43677]))                          )
                        (reparse-symbol indented_block_body) [43661 43848])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create true circle at center *xy* = (*x*, *y*) with given
        *radius*.  Unlike :class:`~matplotlib.patches.CirclePolygon`
        which is a polygonal approximation, this uses Bézier splines
        and is much closer to a scale-free circle.

        Valid kwargs are:
        %(Patch)s

        \"\"\"" code nil (reparse-symbol indented_block_body) [43935 44251])
                            ("Ellipse" code nil (reparse-symbol indented_block_body) [44260 44320])
                            ("self" variable nil (reparse-symbol indented_block_body) [44329 44349]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43896 43900])
                            ("xy" variable nil (reparse-symbol function_parameters) [43902 43904])
                            ("radius" variable nil (reparse-symbol function_parameters) [43906 43912])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [43916 43924]))                          
                        :documentation "
        Create true circle at center *xy* = (*x*, *y*) with given
        *radius*.  Unlike :class:`~matplotlib.patches.CirclePolygon`
        which is a polygonal approximation, this uses Bézier splines
        and is much closer to a scale-free circle.

        Valid kwargs are:
        %(Patch)s

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43853 44350])
                    ("set_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44370 44374])
                            ("radius" variable nil (reparse-symbol function_parameters) [44376 44382]))                          
                        :documentation "
        Set the radius of the circle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [44355 44542])
                    ("get_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44562 44566]))                          )
                        (reparse-symbol indented_block_body) [44547 44642])
                    ("radius" variable nil (reparse-symbol indented_block_body) [44647 44688]))                  
                :type "class")
                nil [43598 44689])
            ("Arc" type
               (:documentation "
    An elliptical arc.  Because it performs various optimizations, it
    can not be filled.

    The arc must be used in an :class:`~matplotlib.axes.Axes`
    instance---it can not be added directly to a
    :class:`~matplotlib.figure.Figure`---because it is optimized to
    only render the segments that are inside the axes bounding box
    with high resolution.
    "
                :superclasses ("Ellipse")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45109 45113]))                          )
                        (reparse-symbol indented_block_body) [45097 45247])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The following args are supported:

        *xy*
          center of ellipse

        *width*
          length of horizontal axis

        *height*
          length of vertical axis

        *angle*
          rotation in degrees (anti-clockwise)

        *theta1*
          starting angle of the arc in degrees

        *theta2*
          ending angle of the arc in degrees

        If *theta1* and *theta2* are not provided, the arc will form a
        complete ellipse.

        Valid kwargs are:

        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [45393 45933])
                            ("fill" variable nil (reparse-symbol indented_block_body) [45942 45981])
                            ("if" code nil (reparse-symbol indented_block_body) [45990 46061])
                            ("Ellipse" code nil (reparse-symbol indented_block_body) [46070 46128])
                            ("self" variable nil (reparse-symbol indented_block_body) [46138 46158])
                            ("self" variable nil (reparse-symbol indented_block_body) [46167 46187])
                            ("self" variable nil (reparse-symbol indented_block_body) [46197 46244]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45295 45299])
                            ("xy" variable nil (reparse-symbol function_parameters) [45301 45303])
                            ("width" variable nil (reparse-symbol function_parameters) [45305 45310])
                            ("height" variable nil (reparse-symbol function_parameters) [45312 45318])
                            ("angle" variable nil (reparse-symbol function_parameters) [45320 45325])
                            ("theta1" variable nil (reparse-symbol function_parameters) [45348 45354])
                            ("theta2" variable nil (reparse-symbol function_parameters) [45360 45366])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [45374 45382]))                          
                        :documentation "
        The following args are supported:

        *xy*
          center of ellipse

        *width*
          length of horizontal axis

        *height*
          length of vertical axis

        *angle*
          rotation in degrees (anti-clockwise)

        *theta1*
          starting angle of the arc in degrees

        *theta2*
          ending angle of the arc in degrees

        If *theta1* and *theta2* are not provided, the arc will form a
        complete ellipse.

        Valid kwargs are:

        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [45252 46245])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46284 46288])
                            ("renderer" variable nil (reparse-symbol function_parameters) [46290 46298]))                          
                        :documentation "
        Ellipses are normally drawn using an approximation that uses
        eight cubic bezier splines.  The error of this approximation
        is 1.89818e-6, according to this unverified source:

          Lancaster, Don.  Approximating a Circle or an Ellipse Using
          Four Bezier Cubic Splines.

          http://www.tinaja.com/glib/ellipse4.pdf

        There is a use case where very large ellipses must be drawn
        with very high accuracy, and it is too expensive to render the
        entire ellipse with enough segments (either splines or line
        segments).  Therefore, in the case where either radius of the
        ellipse is large enough that the error of the spline
        approximation will be visible (greater than one pixel offset
        from the ideal), a different technique is used.

        In that case, only the visible parts of the ellipse are drawn,
        with each visible arc using a fixed number of spline segments
        (8).  The algorithm proceeds as follows:

          1. The points where the ellipse intersects the axes bounding
             box are located.  (This is done be performing an inverse
             transformation on the axes bbox such that it is relative
             to the unit circle -- this makes the intersection
             calculation much easier than doing rotated ellipse
             intersection directly).

             This uses the \"line intersecting a circle\" algorithm
             from:

               Vince, John.  Geometry for Computer Graphics: Formulae,
               Examples & Proofs.  London: Springer-Verlag, 2005.

          2. The angles of each of the intersection points are
             calculated.

          3. Proceeding counterclockwise starting in the positive
             x-direction, each of the visible arc-segments between the
             pairs of vertices are drawn using the bezier arc
             approximation technique implemented in
             :meth:`matplotlib.path.Path.arc`.
        ")
                        (reparse-symbol indented_block_body) [46250 52230]))                  
                :type "class")
                nil [44691 52230])
            ("bbox_artist" function
               (:documentation "
    This is a debug function to draw a rectangle around the bounding
    box returned by
    :meth:`~matplotlib.artist.Artist.get_window_extent` of an artist,
    to test whether the artist is returning the correct bbox.

    *props* is a dict of rectangle props with the additional property
    'pad' that sets the padding around the bbox in points.
    "
                :arguments 
                  ( ("artist" variable nil (reparse-symbol function_parameters) [52248 52254])
                    ("renderer" variable nil (reparse-symbol function_parameters) [52256 52264])
                    ("props" variable nil (reparse-symbol function_parameters) [52266 52271])
                    ("fill" variable nil (reparse-symbol function_parameters) [52278 52282]))                  )
                nil [52232 53224])
            ("draw_bbox" function
               (:documentation "
    This is a debug function to draw a rectangle around the bounding
    box returned by
    :meth:`~matplotlib.artist.Artist.get_window_extent` of an artist,
    to test whether the artist is returning the correct bbox.
    "
                :arguments 
                  ( ("bbox" variable nil (reparse-symbol function_parameters) [53240 53244])
                    ("renderer" variable nil (reparse-symbol function_parameters) [53246 53254])
                    ("color" variable nil (reparse-symbol function_parameters) [53256 53261])
                    ("trans" variable nil (reparse-symbol function_parameters) [53267 53272]))                  )
                nil [53226 53819])
            ("_pprint_table" function
               (:documentation "
    Given the list of list of strings, return a string of REST table format.
    "
                :arguments 
                  ( ("_table" variable nil (reparse-symbol function_parameters) [53839 53845])
                    ("leadingspace" variable nil (reparse-symbol function_parameters) [53847 53859]))                  )
                nil [53821 54888])
            ("_pprint_styles" function
               (:documentation "
    A helper function for the _Style class.  Given the dictionary of
    (stylename : styleclass), return a formatted string listing all the
    styles. Used to update the documentation.
    "
                :arguments 
                  ( ("_styles" variable nil (reparse-symbol function_parameters) [54909 54916]))                  )
                nil [54890 56063])
            ("_simpleprint_styles" function
               (:documentation "
    A helper function for the _Style class.  Given the dictionary of
    (stylename : styleclass), return a string rep of the list of keys.
    Used to update the documentation.
    "
                :arguments 
                  ( ("_styles" variable nil (reparse-symbol function_parameters) [56089 56096]))                  )
                nil [56065 56421])
            ("_Style" type
               (:documentation "
    A base class for the Styles. It is meant to be a container class,
    where actual styles are declared as subclass of it, and it
    provides some helper functions.
    "
                :superclasses ("object")
                :members 
                  ( ("__new__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56646 56650])
                            ("stylename" variable nil (reparse-symbol function_parameters) [56652 56661])
                            ("kw" variable nil (reparse-symbol function_parameters) [56663 56667]))                          
                        :documentation "
        return the instance of the subclass with the given style name.
        ")
                        (reparse-symbol indented_block_body) [56634 57418])
                    ("get_styles" function
                       (:documentation "
        A class method which returns a dictionary of available styles.
        "
                        :arguments 
                          ( ("klass" variable nil (reparse-symbol function_parameters) [57455 57460]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [57423 57591])
                    ("pprint_styles" function
                       (:documentation "
        A class method which returns a string of the available styles.
        "
                        :arguments 
                          ( ("klass" variable nil (reparse-symbol function_parameters) [57631 57636]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [57596 57783])
                    ("register" function
                       (:documentation "
        Register a new style.
        "
                        :arguments 
                          ( ("klass" variable nil (reparse-symbol function_parameters) [57818 57823])
                            ("name" variable nil (reparse-symbol function_parameters) [57825 57829])
                            ("style" variable nil (reparse-symbol function_parameters) [57831 57836]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [57788 58126]))                  
                :type "class")
                nil [56423 58126])
            ("BoxStyle" type
               (:documentation "
    :class:`BoxStyle` is a container class which defines several
    boxstyle classes, which are used for :class:`FancyBboxPatch`.

    A style object can be created as::

           BoxStyle.Round(pad=0.2)

    or::

           BoxStyle(\"Round\", pad=0.2)

    or::

           BoxStyle(\"Round, pad=0.2\")

    Following boxstyle classes are defined.

    %(AvailableBoxstyles)s

    An instance of any boxstyle class is an callable object,
    whose call signature is::

       __call__(self, x0, y0, width, height, mutation_size, aspect_ratio=1.)

    and returns a :class:`Path` instance. *x0*, *y0*, *width* and
    *height* specify the location and size of the box to be
    drawn. *mutation_scale* determines the overall size of the
    mutation (by which I mean the transformation of the rectangle to
    the fancy box).  *mutation_aspect* determines the aspect-ratio of
    the mutation.

    .. plot:: mpl_examples/pylab_examples/fancybox_demo2.py
    "
                :superclasses ("_Style")
                :members 
                  ( ("_style_list" variable nil (reparse-symbol indented_block_body) [59129 59145])
                    ("_Base" type
                       (:documentation "
        :class:`BBoxTransmuterBase` and its derivatives are used to make a
        fancy box around a given rectangle. The :meth:`__call__` method
        returns the :class:`~matplotlib.path.Path` of the fancy box. This
        class is not an artist and actual drawing of the fancy box is done
        by the :class:`FancyBboxPatch` class.
        "
                        :superclasses ("object")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            initializtion.
            \"\"\"" code nil (reparse-symbol indented_block_body) [59754 59800])
                                    ("super" code nil (reparse-symbol indented_block_body) [59813 59851]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [59735 59739]))                                  
                                :documentation "
            initializtion.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [59722 59852])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [59875 59879])
                                    ("x0" variable nil (reparse-symbol function_parameters) [59881 59883])
                                    ("y0" variable nil (reparse-symbol function_parameters) [59885 59887])
                                    ("width" variable nil (reparse-symbol function_parameters) [59889 59894])
                                    ("height" variable nil (reparse-symbol function_parameters) [59896 59902])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [59904 59917]))                                  
                                :documentation "
            The transmute method is a very core of the
            :class:`BboxTransmuter` class and must be overriden in the
            subclasses. It receives the location and size of the
            rectangle, and the mutation_size, with which the amount of
            padding and etc. will be scaled. It returns a
            :class:`~matplotlib.path.Path` instance.
            ")
                                (reparse-symbol indented_block_body) [59861 60388])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [60410 60414])
                                    ("x0" variable nil (reparse-symbol function_parameters) [60416 60418])
                                    ("y0" variable nil (reparse-symbol function_parameters) [60420 60422])
                                    ("width" variable nil (reparse-symbol function_parameters) [60424 60429])
                                    ("height" variable nil (reparse-symbol function_parameters) [60431 60437])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [60439 60452])
                                    ("aspect_ratio" variable nil (reparse-symbol function_parameters) [60475 60487]))                                  
                                :documentation "
            Given the location and size of the box, return the path of
            the box around it.

              - *x0*, *y0*, *width*, *height* : location and size of the box
              - *mutation_size* : a reference scale for the mutation.
              - *aspect_ratio* : aspect-ration for the mutation.
            ")
                                (reparse-symbol indented_block_body) [60397 61575])
                            ("__reduce__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [61599 61603]))                                  )
                                (reparse-symbol indented_block_body) [61584 61951]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [59151 61951])
                    ("Square" type
                       (:documentation "
        A simple square box.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
             *pad*
                amount of padding
            \"\"\"" code nil (reparse-symbol indented_block_body) [62080 62152])
                                    ("self" variable nil (reparse-symbol indented_block_body) [62166 62180])
                                    ("super" code nil (reparse-symbol indented_block_body) [62193 62232]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [62052 62056])
                                    ("pad" variable nil (reparse-symbol function_parameters) [62058 62061]))                                  
                                :documentation "
             *pad*
                amount of padding
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [62039 62233])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [62256 62260])
                                    ("x0" variable nil (reparse-symbol function_parameters) [62262 62264])
                                    ("y0" variable nil (reparse-symbol function_parameters) [62266 62268])
                                    ("width" variable nil (reparse-symbol function_parameters) [62270 62275])
                                    ("height" variable nil (reparse-symbol function_parameters) [62277 62283])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [62285 62298]))                                  )
                                (reparse-symbol indented_block_body) [62242 62771]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [61956 62771])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [62776 62806])
                    ("Circle" type
                       (:documentation "A simple circle box."
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            pad : float
                The amount of padding around the original box.
            \"\"\"" code nil (reparse-symbol indented_block_body) [62917 63069])
                                    ("self" variable nil (reparse-symbol indented_block_body) [63082 63096])
                                    ("super" code nil (reparse-symbol indented_block_body) [63109 63148]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [62889 62893])
                                    ("pad" variable nil (reparse-symbol function_parameters) [62895 62898]))                                  
                                :documentation "
            Parameters
            ----------
            pad : float
                The amount of padding around the original box.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [62876 63149])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [63172 63176])
                                    ("x0" variable nil (reparse-symbol function_parameters) [63178 63180])
                                    ("y0" variable nil (reparse-symbol function_parameters) [63182 63184])
                                    ("width" variable nil (reparse-symbol function_parameters) [63186 63191])
                                    ("height" variable nil (reparse-symbol function_parameters) [63193 63199])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [63201 63214]))                                  )
                                (reparse-symbol indented_block_body) [63158 63529]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [62812 63529])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [63534 63564])
                    ("LArrow" type
                       (:documentation "
        (left) Arrow Box
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [63689 63703])
                                    ("super" code nil (reparse-symbol indented_block_body) [63716 63755]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [63661 63665])
                                    ("pad" variable nil (reparse-symbol function_parameters) [63667 63670]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [63648 63756])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [63779 63783])
                                    ("x0" variable nil (reparse-symbol function_parameters) [63785 63787])
                                    ("y0" variable nil (reparse-symbol function_parameters) [63789 63791])
                                    ("width" variable nil (reparse-symbol function_parameters) [63793 63798])
                                    ("height" variable nil (reparse-symbol function_parameters) [63800 63806])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [63808 63821]))                                  )
                                (reparse-symbol indented_block_body) [63765 64732]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [63570 64732])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [64736 64766])
                    ("RArrow" type
                       (:documentation "
        (right) Arrow Box
        "
                        :superclasses ("LArrow")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("super" code nil (reparse-symbol indented_block_body) [64894 64936]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [64866 64870])
                                    ("pad" variable nil (reparse-symbol function_parameters) [64872 64875]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [64853 64937])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [64960 64964])
                                    ("x0" variable nil (reparse-symbol function_parameters) [64966 64968])
                                    ("y0" variable nil (reparse-symbol function_parameters) [64970 64972])
                                    ("width" variable nil (reparse-symbol function_parameters) [64974 64979])
                                    ("height" variable nil (reparse-symbol function_parameters) [64981 64987])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [64989 65002]))                                  )
                                (reparse-symbol indented_block_body) [64946 65222]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [64772 65222])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [65227 65257])
                    ("DArrow" type
                       (:documentation "
        (Double) Arrow Box
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [65483 65497])
                                    ("super" code nil (reparse-symbol indented_block_body) [65510 65549]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [65455 65459])
                                    ("pad" variable nil (reparse-symbol function_parameters) [65461 65464]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [65442 65550])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [65573 65577])
                                    ("x0" variable nil (reparse-symbol function_parameters) [65579 65581])
                                    ("y0" variable nil (reparse-symbol function_parameters) [65583 65585])
                                    ("width" variable nil (reparse-symbol function_parameters) [65587 65592])
                                    ("height" variable nil (reparse-symbol function_parameters) [65594 65600])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [65602 65615]))                                  )
                                (reparse-symbol indented_block_body) [65559 66867]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [65263 66867])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [66872 66902])
                    ("Round" type
                       (:documentation "
        A box with round corners.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *pad*
              amount of padding

            *rounding_size*
              rounding radius of corners. *pad* if None
            \"\"\"" code nil (reparse-symbol indented_block_body) [67056 67210])
                                    ("self" variable nil (reparse-symbol indented_block_body) [67223 67237])
                                    ("self" variable nil (reparse-symbol indented_block_body) [67250 67284])
                                    ("super" code nil (reparse-symbol indented_block_body) [67297 67335]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [67008 67012])
                                    ("pad" variable nil (reparse-symbol function_parameters) [67014 67017])
                                    ("rounding_size" variable nil (reparse-symbol function_parameters) [67023 67036]))                                  
                                :documentation "
            *pad*
              amount of padding

            *rounding_size*
              rounding radius of corners. *pad* if None
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [66995 67336])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [67359 67363])
                                    ("x0" variable nil (reparse-symbol function_parameters) [67365 67367])
                                    ("y0" variable nil (reparse-symbol function_parameters) [67369 67371])
                                    ("width" variable nil (reparse-symbol function_parameters) [67373 67378])
                                    ("height" variable nil (reparse-symbol function_parameters) [67380 67386])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [67388 67401]))                                  )
                                (reparse-symbol indented_block_body) [67345 68750]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [66908 68750])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [68755 68783])
                    ("Round4" type
                       (:documentation "
        Another box with round edges.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *pad*
              amount of padding

            *rounding_size*
              rounding size of edges. *pad* if None
            \"\"\"" code nil (reparse-symbol indented_block_body) [68942 69092])
                                    ("self" variable nil (reparse-symbol indented_block_body) [69106 69120])
                                    ("self" variable nil (reparse-symbol indented_block_body) [69133 69167])
                                    ("super" code nil (reparse-symbol indented_block_body) [69180 69219]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [68894 68898])
                                    ("pad" variable nil (reparse-symbol function_parameters) [68900 68903])
                                    ("rounding_size" variable nil (reparse-symbol function_parameters) [68909 68922]))                                  
                                :documentation "
            *pad*
              amount of padding

            *rounding_size*
              rounding size of edges. *pad* if None
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [68881 69220])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [69243 69247])
                                    ("x0" variable nil (reparse-symbol function_parameters) [69249 69251])
                                    ("y0" variable nil (reparse-symbol function_parameters) [69253 69255])
                                    ("width" variable nil (reparse-symbol function_parameters) [69257 69262])
                                    ("height" variable nil (reparse-symbol function_parameters) [69264 69270])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [69272 69285]))                                  )
                                (reparse-symbol indented_block_body) [69229 70456]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [68789 70456])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [70461 70491])
                    ("Sawtooth" type
                       (:documentation "
        A sawtooth box.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *pad*
              amount of padding

            *tooth_size*
              size of the sawtooth. pad* if None
            \"\"\"" code nil (reparse-symbol indented_block_body) [70635 70779])
                                    ("self" variable nil (reparse-symbol indented_block_body) [70792 70806])
                                    ("self" variable nil (reparse-symbol indented_block_body) [70819 70847])
                                    ("super" code nil (reparse-symbol indented_block_body) [70860 70901]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [70590 70594])
                                    ("pad" variable nil (reparse-symbol function_parameters) [70596 70599])
                                    ("tooth_size" variable nil (reparse-symbol function_parameters) [70605 70615]))                                  
                                :documentation "
            *pad*
              amount of padding

            *tooth_size*
              size of the sawtooth. pad* if None
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [70577 70902])
                            ("_get_sawtooth_vertices" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [70938 70942])
                                    ("x0" variable nil (reparse-symbol function_parameters) [70944 70946])
                                    ("y0" variable nil (reparse-symbol function_parameters) [70948 70950])
                                    ("width" variable nil (reparse-symbol function_parameters) [70952 70957])
                                    ("height" variable nil (reparse-symbol function_parameters) [70959 70965])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [70967 70980]))                                  )
                                (reparse-symbol indented_block_body) [70911 74082])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [74105 74109])
                                    ("x0" variable nil (reparse-symbol function_parameters) [74111 74113])
                                    ("y0" variable nil (reparse-symbol function_parameters) [74115 74117])
                                    ("width" variable nil (reparse-symbol function_parameters) [74119 74124])
                                    ("height" variable nil (reparse-symbol function_parameters) [74126 74132])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [74134 74147]))                                  )
                                (reparse-symbol indented_block_body) [74091 74374]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [70497 74374])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [74379 74413])
                    ("Roundtooth" type
                       (:documentation "A rounded tooth box."
                        :superclasses ("Sawtooth")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *pad*
              amount of padding

            *tooth_size*
              size of the sawtooth. pad* if None
            \"\"\"" code nil (reparse-symbol indented_block_body) [74548 74692])
                                    ("super" code nil (reparse-symbol indented_block_body) [74705 74763]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [74503 74507])
                                    ("pad" variable nil (reparse-symbol function_parameters) [74509 74512])
                                    ("tooth_size" variable nil (reparse-symbol function_parameters) [74518 74528]))                                  
                                :documentation "
            *pad*
              amount of padding

            *tooth_size*
              size of the sawtooth. pad* if None
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [74490 74764])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [74787 74791])
                                    ("x0" variable nil (reparse-symbol function_parameters) [74793 74795])
                                    ("y0" variable nil (reparse-symbol function_parameters) [74797 74799])
                                    ("width" variable nil (reparse-symbol function_parameters) [74801 74806])
                                    ("height" variable nil (reparse-symbol function_parameters) [74808 74814])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [74816 74829]))                                  )
                                (reparse-symbol indented_block_body) [74773 75452]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [74419 75452])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [75457 75495])
                    ("if" code nil (reparse-symbol indented_block_body) [75501 75680]))                  
                :type "class")
                nil [58128 75680])
            ("docstring" code nil nil [75681 75828])
            ("FancyBboxPatch" type
               (:documentation "
    Draw a fancy box around a rectangle with lower left at *xy*=(*x*,
    *y*) with specified width and height.

    :class:`FancyBboxPatch` class is similar to :class:`Rectangle`
    class, but it draws a fancy box around the rectangle. The
    transformation of the rectangle box to the fancy box is delegated
    to the :class:`BoxTransmuterBase` and its derived classes.

    "
                :superclasses ("Patch")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [76257 76277])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76295 76299]))                          )
                        (reparse-symbol indented_block_body) [76283 76484])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *xy* = lower left corner

        *width*, *height*

        *boxstyle* determines what kind of fancy box will be drawn. It
        can be a string of the style name with a comma separated
        attribute, or an instance of :class:`BoxStyle`. Following box
        styles are available.

        %(AvailableBoxstyles)s

        *mutation_scale* : a value with which attributes of boxstyle
        (e.g., pad) will be scaled. default=1.

        *mutation_aspect* : The height of the rectangle will be
        squeezed by this value before the mutation and the mutated
        box will be stretched by the inverse of it. default=None.

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [76742 77446])
                            ("Patch" code nil (reparse-symbol indented_block_body) [77456 77486])
                            ("self" variable nil (reparse-symbol indented_block_body) [77496 77511])
                            ("self" variable nil (reparse-symbol indented_block_body) [77520 77535])
                            ("self" variable nil (reparse-symbol indented_block_body) [77544 77563])
                            ("self" variable nil (reparse-symbol indented_block_body) [77572 77593])
                            ("if" code nil (reparse-symbol indented_block_body) [77603 77902])
                            ("self" variable nil (reparse-symbol indented_block_body) [77911 77948])
                            ("self" variable nil (reparse-symbol indented_block_body) [77957 77996])
                            ("self" variable nil (reparse-symbol indented_block_body) [78006 78023]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76532 76536])
                            ("xy" variable nil (reparse-symbol function_parameters) [76538 76540])
                            ("width" variable nil (reparse-symbol function_parameters) [76542 76547])
                            ("height" variable nil (reparse-symbol function_parameters) [76549 76555])
                            ("boxstyle" variable nil (reparse-symbol function_parameters) [76574 76582])
                            ("bbox_transmuter" variable nil (reparse-symbol function_parameters) [76609 76624])
                            ("mutation_scale" variable nil (reparse-symbol function_parameters) [76648 76662])
                            ("mutation_aspect" variable nil (reparse-symbol function_parameters) [76684 76699])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [76723 76731]))                          
                        :documentation "
        *xy* = lower left corner

        *width*, *height*

        *boxstyle* determines what kind of fancy box will be drawn. It
        can be a string of the style name with a comma separated
        attribute, or an instance of :class:`BoxStyle`. Following box
        styles are available.

        %(AvailableBoxstyles)s

        *mutation_scale* : a value with which attributes of boxstyle
        (e.g., pad) will be scaled. default=1.

        *mutation_aspect* : The height of the rectangle will be
        squeezed by this value before the mutation and the mutated
        box will be stretched by the inverse of it. default=None.

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [76489 78024])
                    ("set_boxstyle" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78076 78080])
                            ("boxstyle" variable nil (reparse-symbol function_parameters) [78082 78090])
                            ("kw" variable nil (reparse-symbol function_parameters) [78097 78101]))                          
                        :documentation "
        Set the box style.

        *boxstyle* can be a string with boxstyle name with optional
        comma-separated attributes. Alternatively, the attrs can
        be provided as keywords::

            set_boxstyle(\"round,pad=0.2\")
            set_boxstyle(\"round\", pad=0.2)

        Old attrs simply are forgotten.

        Without argument (or with *boxstyle* = None), it returns
        available box styles.

        The following boxstyles are available:
        %(AvailableBoxstyles)s

        ACCEPTS: %(ListBoxstyles)s

        ")
                        (reparse-symbol indented_block_body) [78029 79013])
                    ("set_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79041 79045])
                            ("scale" variable nil (reparse-symbol function_parameters) [79047 79052]))                          
                        :documentation "
        Set the mutation scale.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [79018 79198])
                    ("get_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79226 79230]))                          
                        :documentation "
        Return the mutation scale.
        ")
                        (reparse-symbol indented_block_body) [79203 79328])
                    ("set_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79357 79361])
                            ("aspect" variable nil (reparse-symbol function_parameters) [79363 79369]))                          
                        :documentation "
        Set the aspect ratio of the bbox mutation.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [79333 79536])
                    ("get_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79565 79569]))                          
                        :documentation "
        Return the aspect ratio of the bbox mutation.
        ")
                        (reparse-symbol indented_block_body) [79541 79687])
                    ("get_boxstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79709 79713]))                          )
                        (reparse-symbol indented_block_body) [79692 79790])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79808 79812]))                          
                        :documentation "
        Return the mutated path of the rectangle
        ")
                        (reparse-symbol indented_block_body) [79795 80154])
                    ("get_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80233 80237]))                          )
                        (reparse-symbol indented_block_body) [80223 80312])
                    ("get_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80327 80331]))                          )
                        (reparse-symbol indented_block_body) [80317 80408])
                    ("get_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80427 80431]))                          )
                        (reparse-symbol indented_block_body) [80413 80506])
                    ("get_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80526 80530]))                          )
                        (reparse-symbol indented_block_body) [80511 80606])
                    ("set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80621 80625])
                            ("x" variable nil (reparse-symbol function_parameters) [80627 80628]))                          
                        :documentation "
        Set the left coord of the rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [80611 80769])
                    ("set_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80784 80788])
                            ("y" variable nil (reparse-symbol function_parameters) [80790 80791]))                          
                        :documentation "
        Set the bottom coord of the rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [80774 80934])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80953 80957])
                            ("w" variable nil (reparse-symbol function_parameters) [80959 80960]))                          
                        :documentation "
        Set the width rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [80939 81093])
                    ("set_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81113 81117])
                            ("h" variable nil (reparse-symbol function_parameters) [81119 81120]))                          
                        :documentation "
        Set the width rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [81098 81254])
                    ("set_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81274 81278])
                            ("args" variable nil (reparse-symbol function_parameters) [81280 81285]))                          
                        :documentation "
        Set the bounds of the rectangle: l,b,w,h

        ACCEPTS: (left, bottom, width, height)
        ")
                        (reparse-symbol indented_block_body) [81259 81628])
                    ("get_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81646 81650]))                          )
                        (reparse-symbol indented_block_body) [81633 81784]))                  
                :type "class")
                nil [75831 81784])
            ("ConnectionStyle" type
               (:documentation "
    :class:`ConnectionStyle` is a container class which defines
    several connectionstyle classes, which is used to create a path
    between two points. These are mainly used with
    :class:`FancyArrowPatch`.

    A connectionstyle object can be either created as::

           ConnectionStyle.Arc3(rad=0.2)

    or::

           ConnectionStyle(\"Arc3\", rad=0.2)

    or::

           ConnectionStyle(\"Arc3, rad=0.2\")

    The following classes are defined

    %(AvailableConnectorstyles)s


    An instance of any connection style class is an callable object,
    whose call signature is::

        __call__(self, posA, posB,
                 patchA=None, patchB=None,
                 shrinkA=2., shrinkB=2.)

    and it returns a :class:`Path` instance. *posA* and *posB* are
    tuples of x,y coordinates of the two points to be
    connected. *patchA* (or *patchB*) is given, the returned path is
    clipped so that it start (or end) from the boundary of the
    patch. The path is further shrunk by *shrinkA* (or *shrinkB*)
    which is given in points.

    "
                :superclasses ("_Style")
                :members 
                  ( ("_style_list" variable nil (reparse-symbol indented_block_body) [82905 82921])
                    ("_Base" type
                       (:documentation "
        A base class for connectionstyle classes. The subclass needs
        to implement a *connect* method whose call signature is::

          connect(posA, posB)

        where posA and posB are tuples of x, y coordinates to be
        connected.  The method needs to return a path connecting two
        points. This base class defines a __call__ method, and a few
        helper methods.
        "
                        :superclasses ("object")
                        :members 
                          ( ("SimpleEvent" type
                               (:members 
                                  ( ("__init__" function
                                       (:suite 
                                          ( ("self, self" code nil (reparse-symbol indented_block_body) [83446 83465]))                                          
                                        :parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [83419 83423])
                                            ("xy" variable nil (reparse-symbol function_parameters) [83425 83427]))                                          
                                        :constructor-flag t)
                                        (reparse-symbol indented_block_body) [83406 83466]))                                  
                                :type "class")
                                (reparse-symbol indented_block_body) [83375 83466])
                            ("_clip" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [83485 83489])
                                    ("path" variable nil (reparse-symbol function_parameters) [83491 83495])
                                    ("patchA" variable nil (reparse-symbol function_parameters) [83497 83503])
                                    ("patchB" variable nil (reparse-symbol function_parameters) [83505 83511]))                                  
                                :documentation "
            Clip the path to the boundary of the patchA and patchB.
            The starting point of the path needed to be inside of the
            patchA and the end point inside the patch B. The *contains*
            methods of each patch object is utilized to test if the point
            is inside the path.
            ")
                                (reparse-symbol indented_block_body) [83475 84653])
                            ("_shrink" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [84674 84678])
                                    ("path" variable nil (reparse-symbol function_parameters) [84680 84684])
                                    ("shrinkA" variable nil (reparse-symbol function_parameters) [84686 84693])
                                    ("shrinkB" variable nil (reparse-symbol function_parameters) [84695 84702]))                                  
                                :documentation "
            Shrink the path by fixed size (in points) with shrinkA and shrinkB
            ")
                                (reparse-symbol indented_block_body) [84662 85442])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [85464 85468])
                                    ("posA" variable nil (reparse-symbol function_parameters) [85470 85474])
                                    ("posB" variable nil (reparse-symbol function_parameters) [85476 85480])
                                    ("shrinkA" variable nil (reparse-symbol function_parameters) [85503 85510])
                                    ("shrinkB" variable nil (reparse-symbol function_parameters) [85515 85522])
                                    ("patchA" variable nil (reparse-symbol function_parameters) [85527 85533])
                                    ("patchB" variable nil (reparse-symbol function_parameters) [85540 85546]))                                  
                                :documentation "
            Calls the *connect* method to create a path between *posA*
             and *posB*. The path is clipped and shrunken.
            ")
                                (reparse-symbol indented_block_body) [85451 85925])
                            ("__reduce__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [85949 85953]))                                  )
                                (reparse-symbol indented_block_body) [85934 86309]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [82927 86309])
                    ("Arc3" type
                       (:documentation "
        Creates a simple quadratic bezier curve between two
        points. The curve is created so that the middle contol points
        (C1) is located at the same distance from the start (C0) and
        end points(C2) and the distance of the C1 to the line
        connecting C0-C2 is *rad* times the distance of C0-C2.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *rad*
              curvature of the curve.
            \"\"\"" code nil (reparse-symbol indented_block_body) [86730 86805])
                                    ("self" variable nil (reparse-symbol indented_block_body) [86818 86832]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [86703 86707])
                                    ("rad" variable nil (reparse-symbol function_parameters) [86709 86712]))                                  
                                :documentation "
            *rad*
              curvature of the curve.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [86690 86833])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [86854 86858])
                                    ("posA" variable nil (reparse-symbol function_parameters) [86860 86864])
                                    ("posB" variable nil (reparse-symbol function_parameters) [86866 86870]))                                  )
                                (reparse-symbol indented_block_body) [86842 87339]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [86314 87339])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [87344 87370])
                    ("Angle3" type
                       (:documentation "
        Creates a simple quadratic bezier curve between two
        points. The middle control points is placed at the
        intersecting point of two lines which crosses the start (or
        end) point and has a angle of angleA (or angleB).
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path
            \"\"\"" code nil (reparse-symbol indented_block_body) [87728 87870])
                                    ("self" variable nil (reparse-symbol indented_block_body) [87884 87904])
                                    ("self" variable nil (reparse-symbol indented_block_body) [87917 87937]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [87688 87692])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [87694 87700])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [87705 87711]))                                  
                                :documentation "
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [87675 87938])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [87959 87963])
                                    ("posA" variable nil (reparse-symbol function_parameters) [87965 87969])
                                    ("posB" variable nil (reparse-symbol function_parameters) [87971 87975]))                                  )
                                (reparse-symbol indented_block_body) [87947 88569]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [87376 88569])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [88574 88604])
                    ("Angle" type
                       (:documentation "
        Creates a picewise continuous quadratic bezier path between
        two points. The path has a one passing-through point placed at
        the intersecting point of two lines which crosses the start
        (or end) point and has a angle of angleA (or angleB).  The
        connecting edges are rounded with *rad*.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path

            *rad*
              rounding radius of the edge
            \"\"\"" code nil (reparse-symbol indented_block_body) [89047 89250])
                                    ("self" variable nil (reparse-symbol indented_block_body) [89264 89284])
                                    ("self" variable nil (reparse-symbol indented_block_body) [89297 89317])
                                    ("self" variable nil (reparse-symbol indented_block_body) [89331 89345]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [88999 89003])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [89005 89011])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [89016 89022])
                                    ("rad" variable nil (reparse-symbol function_parameters) [89026 89029]))                                  
                                :documentation "
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path

            *rad*
              rounding radius of the edge
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [88986 89346])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [89367 89371])
                                    ("posA" variable nil (reparse-symbol function_parameters) [89373 89377])
                                    ("posB" variable nil (reparse-symbol function_parameters) [89379 89383]))                                  )
                                (reparse-symbol indented_block_body) [89355 90642]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [88610 90642])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [90647 90675])
                    ("Arc" type
                       (:documentation "
        Creates a picewise continuous quadratic bezier path between
        two points. The path can have two passing-through points, a
        point placed at the distance of armA and angle of angleA from
        point A, another point with respect to point B. The edges are
        rounded with *rad*.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *angleA* :
              starting angle of the path

            *angleB* :
              ending angle of the path

            *armA* :
              length of the starting arm

            *armB* :
              length of the ending arm

            *rad* :
              rounding radius of the edges
            \"\"\"" code nil (reparse-symbol indented_block_body) [91118 91452])
                                    ("self" variable nil (reparse-symbol indented_block_body) [91466 91486])
                                    ("self" variable nil (reparse-symbol indented_block_body) [91499 91519])
                                    ("self" variable nil (reparse-symbol indented_block_body) [91532 91548])
                                    ("self" variable nil (reparse-symbol indented_block_body) [91561 91577])
                                    ("self" variable nil (reparse-symbol indented_block_body) [91591 91605]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [91049 91053])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [91055 91061])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [91065 91071])
                                    ("armA" variable nil (reparse-symbol function_parameters) [91075 91079])
                                    ("armB" variable nil (reparse-symbol function_parameters) [91086 91090])
                                    ("rad" variable nil (reparse-symbol function_parameters) [91097 91100]))                                  
                                :documentation "
            *angleA* :
              starting angle of the path

            *angleB* :
              ending angle of the path

            *armA* :
              length of the starting arm

            *armB* :
              length of the ending arm

            *rad* :
              rounding radius of the edges
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [91036 91606])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [91627 91631])
                                    ("posA" variable nil (reparse-symbol function_parameters) [91633 91637])
                                    ("posB" variable nil (reparse-symbol function_parameters) [91639 91643]))                                  )
                                (reparse-symbol indented_block_body) [91615 93759]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [90681 93759])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [93764 93788])
                    ("Bar" type
                       (:documentation "
        A line with *angle* between A and B with *armA* and
        *armB*. One of the arms is extended so that they are connected in
        a right angle. The length of armA is determined by (*armA*
        + *fraction* x AB distance). Same for armB.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            armA : float
                minimum length of armA

            armB : float
                minimum length of armB

            fraction : float
                a fraction of the distance between two points that
                will be added to armA and armB.

            angle : float or None
                angle of the connecting line (if None, parallel
                to A and B)
            \"\"\"" code nil (reparse-symbol indented_block_body) [94174 94640])
                                    ("self" variable nil (reparse-symbol indented_block_body) [94653 94669])
                                    ("self" variable nil (reparse-symbol indented_block_body) [94682 94698])
                                    ("self" variable nil (reparse-symbol indented_block_body) [94711 94735])
                                    ("self" variable nil (reparse-symbol indented_block_body) [94748 94766]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [94111 94115])
                                    ("armA" variable nil (reparse-symbol function_parameters) [94117 94121])
                                    ("armB" variable nil (reparse-symbol function_parameters) [94126 94130])
                                    ("fraction" variable nil (reparse-symbol function_parameters) [94135 94143])
                                    ("angle" variable nil (reparse-symbol function_parameters) [94149 94154]))                                  
                                :documentation "
            Parameters
            ----------
            armA : float
                minimum length of armA

            armB : float
                minimum length of armB

            fraction : float
                a fraction of the distance between two points that
                will be added to armA and armB.

            angle : float or None
                angle of the connecting line (if None, parallel
                to A and B)
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [94098 94767])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [94788 94792])
                                    ("posA" variable nil (reparse-symbol function_parameters) [94794 94798])
                                    ("posB" variable nil (reparse-symbol function_parameters) [94800 94804]))                                  )
                                (reparse-symbol indented_block_body) [94776 96639]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [93794 96639])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [96644 96668])
                    ("if" code nil (reparse-symbol indented_block_body) [96674 96803]))                  
                :type "class")
                nil [81786 96803])
            ("_point_along_a_line" function
               (:documentation "
    find a point along a line connecting (x0, y0) -- (x1, y1) whose
    distance from (x0, y0) is d.
    "
                :arguments 
                  ( ("x0" variable nil (reparse-symbol function_parameters) [96829 96831])
                    ("y0" variable nil (reparse-symbol function_parameters) [96833 96835])
                    ("x1" variable nil (reparse-symbol function_parameters) [96837 96839])
                    ("y1" variable nil (reparse-symbol function_parameters) [96841 96843])
                    ("d" variable nil (reparse-symbol function_parameters) [96845 96846]))                  )
                nil [96805 97094])
            ("ArrowStyle" type
               (:superclasses ("_Style")
                :type "class")
                nil [97096 127387])
            ("docstring" code nil nil [127389 127555])
            ("FancyArrowPatch" type
               (:documentation "
    A fancy arrow patch. It draws an arrow using the :class:ArrowStyle.
    "
                :superclasses ("Patch")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [127680 127700])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [127718 127722]))                          )
                        (reparse-symbol indented_block_body) [127706 128034])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        If *posA* and *posB* is given, a path connecting two point are
        created according to the connectionstyle. The path will be
        clipped with *patchA* and *patchB* and further shrunken by
        *shrinkA* and *shrinkB*. An arrow is drawn along this
        resulting path using the *arrowstyle* parameter. If *path*
        provided, an arrow is drawn along this path and *patchA*,
        *patchB*, *shrinkA*, and *shrinkB* are ignored.

        The *connectionstyle* describes how *posA* and *posB* are
        connected. It can be an instance of the ConnectionStyle class
        (matplotlib.patches.ConnectionStlye) or a string of the
        connectionstyle name, with optional comma-separated
        attributes.  The following connection styles are available.

        %(AvailableConnectorstyles)s


        The *arrowstyle* describes how the fancy arrow will be
        drawn. It can be string of the available arrowstyle names,
        with optional comma-separated attributes, or one of the
        ArrowStyle instance. The optional attributes are meant to be
        scaled with the *mutation_scale*. The following arrow styles are
        available.

        %(AvailableArrowstyles)s

        *mutation_scale* : a value with which attributes of arrowstyle
            (e.g., head_length) will be scaled. default=1.

        *mutation_aspect* : The height of the rectangle will be
            squeezed by this value before the mutation and the mutated
            box will be stretched by the inverse of it. default=None.

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [128548 130159])
                            ("Patch" code nil (reparse-symbol indented_block_body) [130168 130198])
                            ("if" code nil (reparse-symbol indented_block_body) [130208 130675])
                            ("self" variable nil (reparse-symbol indented_block_body) [130684 130704])
                            ("self" variable nil (reparse-symbol indented_block_body) [130713 130733])
                            ("self" variable nil (reparse-symbol indented_block_body) [130742 130764])
                            ("self" variable nil (reparse-symbol indented_block_body) [130773 130795])
                            ("self" variable nil (reparse-symbol indented_block_body) [130805 130831])
                            ("self" code nil (reparse-symbol indented_block_body) [130841 130872])
                            ("self" variable nil (reparse-symbol indented_block_body) [130882 130919])
                            ("self" variable nil (reparse-symbol indented_block_body) [130928 130967])
                            ("self" code nil (reparse-symbol indented_block_body) [130977 131002]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [128082 128086])
                            ("posA" variable nil (reparse-symbol function_parameters) [128088 128092])
                            ("posB" variable nil (reparse-symbol function_parameters) [128099 128103])
                            ("path" variable nil (reparse-symbol function_parameters) [128127 128131])
                            ("arrowstyle" variable nil (reparse-symbol function_parameters) [128155 128165])
                            ("arrow_transmuter" variable nil (reparse-symbol function_parameters) [128193 128209])
                            ("connectionstyle" variable nil (reparse-symbol function_parameters) [128233 128248])
                            ("connector" variable nil (reparse-symbol function_parameters) [128274 128283])
                            ("patchA" variable nil (reparse-symbol function_parameters) [128307 128313])
                            ("patchB" variable nil (reparse-symbol function_parameters) [128337 128343])
                            ("shrinkA" variable nil (reparse-symbol function_parameters) [128367 128374])
                            ("shrinkB" variable nil (reparse-symbol function_parameters) [128396 128403])
                            ("mutation_scale" variable nil (reparse-symbol function_parameters) [128425 128439])
                            ("mutation_aspect" variable nil (reparse-symbol function_parameters) [128461 128476])
                            ("dpi_cor" variable nil (reparse-symbol function_parameters) [128500 128507])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [128529 128537]))                          
                        :documentation "
        If *posA* and *posB* is given, a path connecting two point are
        created according to the connectionstyle. The path will be
        clipped with *patchA* and *patchB* and further shrunken by
        *shrinkA* and *shrinkB*. An arrow is drawn along this
        resulting path using the *arrowstyle* parameter. If *path*
        provided, an arrow is drawn along this path and *patchA*,
        *patchB*, *shrinkA*, and *shrinkB* are ignored.

        The *connectionstyle* describes how *posA* and *posB* are
        connected. It can be an instance of the ConnectionStyle class
        (matplotlib.patches.ConnectionStlye) or a string of the
        connectionstyle name, with optional comma-separated
        attributes.  The following connection styles are available.

        %(AvailableConnectorstyles)s


        The *arrowstyle* describes how the fancy arrow will be
        drawn. It can be string of the available arrowstyle names,
        with optional comma-separated attributes, or one of the
        ArrowStyle instance. The optional attributes are meant to be
        scaled with the *mutation_scale*. The following arrow styles are
        available.

        %(AvailableArrowstyles)s

        *mutation_scale* : a value with which attributes of arrowstyle
            (e.g., head_length) will be scaled. default=1.

        *mutation_aspect* : The height of the rectangle will be
            squeezed by this value before the mutation and the mutated
            box will be stretched by the inverse of it. default=None.

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [128039 131003])
                    ("set_dpi_cor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131073 131077])
                            ("dpi_cor" variable nil (reparse-symbol function_parameters) [131079 131086]))                          
                        :documentation "
        dpi_cor is currently used for linewidth-related things and
        shrink factor. Mutation scale is affected by this.
        ")
                        (reparse-symbol indented_block_body) [131057 131298])
                    ("get_dpi_cor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131319 131323]))                          
                        :documentation "
        dpi_cor is currently used for linewidth-related things and
        shrink factor. Mutation scale is affected by this.
        ")
                        (reparse-symbol indented_block_body) [131303 131506])
                    ("set_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131529 131533])
                            ("posA" variable nil (reparse-symbol function_parameters) [131535 131539])
                            ("posB" variable nil (reparse-symbol function_parameters) [131541 131545]))                          
                        :documentation " set the begin and end positions of the connecting
        path. Use current value if None.
        ")
                        (reparse-symbol indented_block_body) [131511 131823])
                    ("set_patchA" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131843 131847])
                            ("patchA" variable nil (reparse-symbol function_parameters) [131849 131855]))                          
                        :documentation " set the begin patch.
        ")
                        (reparse-symbol indented_block_body) [131828 131958])
                    ("set_patchB" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131978 131982])
                            ("patchB" variable nil (reparse-symbol function_parameters) [131984 131990]))                          
                        :documentation " set the begin patch
        ")
                        (reparse-symbol indented_block_body) [131963 132092])
                    ("set_connectionstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [132121 132125])
                            ("connectionstyle" variable nil (reparse-symbol function_parameters) [132127 132142])
                            ("kw" variable nil (reparse-symbol function_parameters) [132144 132148]))                          
                        :documentation "
        Set the connection style.

        *connectionstyle* can be a string with connectionstyle name with
         optional comma-separated attributes. Alternatively, the attrs can be
         provided as keywords.

         set_connectionstyle(\"arc,angleA=0,armA=30,rad=10\")
         set_connectionstyle(\"arc\", angleA=0,armA=30,rad=10)

        Old attrs simply are forgotten.

        Without argument (or with connectionstyle=None), return
        available styles as a list of strings.
        ")
                        (reparse-symbol indented_block_body) [132097 133141])
                    ("get_connectionstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133170 133174]))                          
                        :documentation "
        Return the ConnectionStyle instance
        ")
                        (reparse-symbol indented_block_body) [133146 133276])
                    ("set_arrowstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133300 133304])
                            ("arrowstyle" variable nil (reparse-symbol function_parameters) [133306 133316])
                            ("kw" variable nil (reparse-symbol function_parameters) [133323 133327]))                          
                        :documentation "
        Set the arrow style.

        *arrowstyle* can be a string with arrowstyle name with optional
         comma-separated attributes. Alternatively, the attrs can
         be provided as keywords.

         set_arrowstyle(\"Fancy,head_length=0.2\")
         set_arrowstyle(\"fancy\", head_length=0.2)

        Old attrs simply are forgotten.

        Without argument (or with arrowstyle=None), return
        available box styles as a list of strings.
        ")
                        (reparse-symbol indented_block_body) [133281 134094])
                    ("get_arrowstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134118 134122]))                          
                        :documentation "
        Return the arrowstyle object
        ")
                        (reparse-symbol indented_block_body) [134099 134224])
                    ("set_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134252 134256])
                            ("scale" variable nil (reparse-symbol function_parameters) [134258 134263]))                          
                        :documentation "
        Set the mutation scale.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [134229 134409])
                    ("get_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134437 134441]))                          
                        :documentation "
        Return the mutation scale.
        ")
                        (reparse-symbol indented_block_body) [134414 134539])
                    ("set_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134568 134572])
                            ("aspect" variable nil (reparse-symbol function_parameters) [134574 134580]))                          
                        :documentation "
        Set the aspect ratio of the bbox mutation.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [134544 134747])
                    ("get_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134776 134780]))                          
                        :documentation "
        Return the aspect ratio of the bbox mutation.
        ")
                        (reparse-symbol indented_block_body) [134752 134898])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134916 134920]))                          
                        :documentation "
        return the path of the arrow in the data coordinate. Use
        get_path_in_displaycoord() method to retrieve the arrow path
        in the display coord.
        ")
                        (reparse-symbol indented_block_body) [134903 135322])
                    ("get_path_in_displaycoord" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135356 135360]))                          
                        :documentation "
        Return the mutated path of the arrow in the display coord
        ")
                        (reparse-symbol indented_block_body) [135327 136620])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [136634 136638])
                            ("renderer" variable nil (reparse-symbol function_parameters) [136640 136648]))                          )
                        (reparse-symbol indented_block_body) [136625 138411]))                  
                :type "class")
                nil [127558 138411])
            ("ConnectionPatch" type
               (:documentation "
    A :class:`~matplotlib.patches.ConnectionPatch` class is to make
    connecting lines between two points (possibly in different axes).
    "
                :superclasses ("FancyArrowPatch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138623 138627]))                          )
                        (reparse-symbol indented_block_body) [138611 138752])
                    ("__init__" function
                       (:suite 
                          ( ("style" code nil (reparse-symbol indented_block_body) [139652 139657])
                            ("style" code nil (reparse-symbol indented_block_body) [139698 139703])
                            ("text" code nil (reparse-symbol indented_block_body) [139807 139811])
                            ("points" code nil (reparse-symbol indented_block_body) [139891 139897])
                            ("points" code nil (reparse-symbol indented_block_body) [139936 139942])
                            ("size" code nil (reparse-symbol indented_block_body) [139984 140000])
                            ("" code nil (reparse-symbol indented_block_body) [140084 140114])
                            ("the" code nil (reparse-symbol indented_block_body) [140255 140258])
                            ("Description" code nil (reparse-symbol indented_block_body) [140408 140419])
                            ("figure" code nil (reparse-symbol indented_block_body) [140569 140575])
                            ("figure" code nil (reparse-symbol indented_block_body) [140645 140651])
                            ("nil, nil, right" code nil (reparse-symbol indented_block_body) [140701 140731])
                            ("axes" code nil (reparse-symbol indented_block_body) [140793 140797])
                            ("axes" code nil (reparse-symbol indented_block_body) [140859 140863])
                            ("right" code nil (reparse-symbol indented_block_body) [140935 140940])
                            ("being" code nil (reparse-symbol indented_block_body) [141009 141014])
                            ("annotation" code nil (reparse-symbol indented_block_body) [141207 141218])
                            ("\"\"\"
        if coordsB is None:
            coordsB = coordsA
        # we'll draw ourself after the artist we annotate by default
        self.xy1 = xyA
        self.xy2 = xyB
        self.coords1 = coordsA
        self.coords2 = coordsB

        self.axesA = axesA
        self.axesB = axesB

        FancyArrowPatch.__init__(self,
                                 posA=(0, 0), posB=(1, 1),
                                 arrowstyle=arrowstyle,
                                 arrow_transmuter=arrow_transmuter,
                                 connectionstyle=connectionstyle,
                                 connector=connector,
                                 patchA=patchA,
                                 patchB=patchB,
                                 shrinkA=shrinkA,
                                 shrinkB=shrinkB,
                                 mutation_scale=mutation_scale,
                                 mutation_aspect=mutation_aspect,
                                 clip_on=clip_on,
                                 dpi_cor=dpi_cor,
                                 **kwargs)

        # if True, draw annotation only if self.xy is inside the axes
        self._annotation_clip = None

    def _get_xy(self, x, y, s, axes=None):
        \"\"\"" code nil (reparse-symbol indented_block_body) [141625 142894])
                            ("point" code nil (reparse-symbol indented_block_body) [142940 142945])
                            ("\"\"\"

        if axes is None:
            axes = self.axes

        if s == 'data':
            trans = axes.transData
            x = float(self.convert_xunits(x))
            y = float(self.convert_yunits(y))
            return trans.transform_point((x, y))
        elif s == 'offset points':
            # convert the data point
            dx, dy = self.xy

            # prevent recursion
            if self.xycoords == 'offset points':
                return self._get_xy(dx, dy, 'data')

            dx, dy = self._get_xy(dx, dy, self.xycoords)

            # convert the offset
            dpi = self.figure.get_dpi()
            x *= dpi / 72.
            y *= dpi / 72.

            # add the offset to the data point
            x += dx
            y += dy

            return x, y
        elif s == 'polar':
            theta, r = x, y
            x = r * np.cos(theta)
            y = r * np.sin(theta)
            trans = axes.transData
            return trans.transform_point((x, y))
        elif s == 'figure points':
            # points from the lower left corner of the figure
            dpi = self.figure.dpi
            l, b, w, h = self.figure.bbox.bounds
            r = l + w
            t = b + h

            x *= dpi / 72.
            y *= dpi / 72.
            if x < 0:
                x = r + x
            if y < 0:
                y = t + y
            return x, y
        elif s == 'figure pixels':
            # pixels from the lower left corner of the figure
            l, b, w, h = self.figure.bbox.bounds
            r = l + w
            t = b + h
            if x < 0:
                x = r + x
            if y < 0:
                y = t + y
            return x, y
        elif s == 'figure fraction':
            # (0,0) is lower left, (1,1) is upper right of figure
            trans = self.figure.transFigure
            return trans.transform_point((x, y))
        elif s == 'axes points':
            # points from the lower left corner of the axes
            dpi = self.figure.dpi
            l, b, w, h = axes.bbox.bounds
            r = l + w
            t = b + h
            if x < 0:
                x = r + x * dpi / 72.
            else:
                x = l + x * dpi / 72.
            if y < 0:
                y = t + y * dpi / 72.
            else:
                y = b + y * dpi / 72.
            return x, y
        elif s == 'axes pixels':
            #pixels from the lower left corner of the axes

            l, b, w, h = axes.bbox.bounds
            r = l + w
            t = b + h
            if x < 0:
                x = r + x
            else:
                x = l + x
            if y < 0:
                y = t + y
            else:
                y = b + y
            return x, y
        elif s == 'axes fraction':
            #(0,0) is lower left, (1,1) is upper right of axes
            trans = axes.transAxes
            return trans.transform_point((x, y))

    def set_annotation_clip(self, b):
        \"\"\"" code nil (reparse-symbol indented_block_body) [142954 145948])
                            ("\"\"\"
        self._annotation_clip = b
        self.stale = True

    def get_annotation_clip(self):
        \"\"\"" code nil (reparse-symbol indented_block_body) [146281 146392])
                            ("\"\"\"
        return self._annotation_clip

    def get_path_in_displaycoord(self):
        \"\"\"" code nil (reparse-symbol indented_block_body) [146519 146612])
                            ("coord" code nil (reparse-symbol indented_block_body) [146673 146678])
                            ("\"\"\"

        dpi_cor = self.get_dpi_cor()

        x, y = self.xy1
        posA = self._get_xy(x, y, self.coords1, self.axesA)

        x, y = self.xy2
        posB = self._get_xy(x, y, self.coords2, self.axesB)

        _path = self.get_connectionstyle()(posA, posB,
                                           patchA=self.patchA,
                                           patchB=self.patchB,
                                           shrinkA=self.shrinkA * dpi_cor,
                                           shrinkB=self.shrinkB * dpi_cor
                                           )

        _path, fillable = self.get_arrowstyle()(
                                        _path,
                                        self.get_mutation_scale() * dpi_cor,
                                        self.get_linewidth() * dpi_cor,
                                        self.get_mutation_aspect()
                                        )

        return _path, fillable

    def _check_xy(self, renderer):
        \"\"\"" code nil (reparse-symbol indented_block_body) [146687 147709])
                            ("to" code nil (reparse-symbol indented_block_body) [147747 147749])
                            ("\"\"\"

        b = self.get_annotation_clip()

        if b or (b is None and self.coords1 == \"data\"):
            x, y = self.xy1
            xy_pixel = self._get_xy(x, y, self.coords1, self.axesA)
            if not self.axes.contains_point(xy_pixel):
                return False

        if b or (b is None and self.coords2 == \"data\"):
            x, y = self.xy2
            xy_pixel = self._get_xy(x, y, self.coords2, self.axesB)
            if self.axesB is None:
                axes = self.axes
            else:
                axes = self.axesB
            if not axes.contains_point(xy_pixel):
                return False

        return True

    def draw(self, renderer):
        \"\"\"" code nil (reparse-symbol indented_block_body) [147776 148472]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138800 138804])
                            ("xyA" variable nil (reparse-symbol function_parameters) [138806 138809])
                            ("xyB" variable nil (reparse-symbol function_parameters) [138811 138814])
                            ("coordsA" variable nil (reparse-symbol function_parameters) [138816 138823])
                            ("coordsB" variable nil (reparse-symbol function_parameters) [138825 138832])
                            ("axesA" variable nil (reparse-symbol function_parameters) [138856 138861])
                            ("axesB" variable nil (reparse-symbol function_parameters) [138868 138873])
                            ("arrowstyle" variable nil (reparse-symbol function_parameters) [138897 138907])
                            ("arrow_transmuter" variable nil (reparse-symbol function_parameters) [138930 138946])
                            ("connectionstyle" variable nil (reparse-symbol function_parameters) [138970 138985])
                            ("connector" variable nil (reparse-symbol function_parameters) [139011 139020])
                            ("patchA" variable nil (reparse-symbol function_parameters) [139044 139050])
                            ("patchB" variable nil (reparse-symbol function_parameters) [139074 139080])
                            ("shrinkA" variable nil (reparse-symbol function_parameters) [139104 139111])
                            ("shrinkB" variable nil (reparse-symbol function_parameters) [139133 139140])
                            ("mutation_scale" variable nil (reparse-symbol function_parameters) [139162 139176])
                            ("mutation_aspect" variable nil (reparse-symbol function_parameters) [139199 139214])
                            ("clip_on" variable nil (reparse-symbol function_parameters) [139238 139245])
                            ("dpi_cor" variable nil (reparse-symbol function_parameters) [139270 139277])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [139299 139307]))                          
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [138757 148732]))                  
                :type "class")
                nil [138413 148732]))          
      :file "patches.py"
      :pointmax 148732
      :fsize 148732
      :lastmodtime '(22681 7108 755473 0)
      :unmatched-syntax '((NAME 148481 . 148485) (NEWLINE 148486 . 148487) (NAME 147758 . 147760) (NAME 147761 . 147766) (NEWLINE 147767 . 147768) (FOR 146477 . 146480) (NAME 146485 . 146492) (NAME 146493 . 146495) (RETURN 146496 . 146502) (NEWLINE 146510 . 146511) (COLON 146454 . 146455) (COLON 146449 . 146450) (NAME 146401 . 146407) (NEWLINE 146436 . 146437) (INDENT_BLOCK 145991 . 146273) (NAME 145957 . 145960) (NEWLINE 145989 . 145990) (NEWLINE 141615 . 141616) (ASSIGN 141614 . 141615) (EQ 141612 . 141614) (EQ 141610 . 141612) (EQ 141608 . 141610) (EQ 141606 . 141608) (EQ 141604 . 141606) (EQ 141602 . 141604) (EQ 141600 . 141602) (EQ 141598 . 141600) (EQ 141596 . 141598) (EQ 141594 . 141596) (EQ 141592 . 141594) (EQ 141590 . 141592) (EQ 141588 . 141590) (EQ 141586 . 141588) (EQ 141584 . 141586) (EQ 141582 . 141584) (EQ 141580 . 141582) (EQ 141578 . 141580) (EQ 141576 . 141578) (EQ 141574 . 141576) (EQ 141572 . 141574) (EQ 141570 . 141572) (EQ 141568 . 141570) (EQ 141566 . 141568) (EQ 141564 . 141566) (ASSIGN 141560 . 141561) (EQ 141558 . 141560) (EQ 141556 . 141558) (EQ 141554 . 141556) (EQ 141552 . 141554) (EQ 141550 . 141552) (EQ 141548 . 141550) (EQ 141546 . 141548) (EQ 141544 . 141546) (INDENT_BLOCK 141219 . 141536) (MULT 141195 . 141196) (STRING_LITERAL 141150 . 141157) (NAME 141170 . 141173) (NAME 141174 . 141177) (NAME 141178 . 141185) (COMMA 141193 . 141194) (NAME 141091 . 141098) (NAME 141099 . 141101) (NAME 141102 . 141108) (FROM 141121 . 141125) (MULT 141130 . 141131) (INDENT_BLOCK 141015 . 141063) (NEWLINE 140499 . 140500) (ASSIGN 140498 . 140499) (EQ 140496 . 140498) (EQ 140494 . 140496) (EQ 140492 . 140494) (EQ 140490 . 140492) (EQ 140488 . 140490) (EQ 140486 . 140488) (EQ 140484 . 140486) (EQ 140482 . 140484) (EQ 140480 . 140482) (EQ 140478 . 140480) (EQ 140476 . 140478) (EQ 140474 . 140476) (EQ 140472 . 140474) (EQ 140470 . 140472) (EQ 140468 . 140470) (EQ 140466 . 140468) (EQ 140464 . 140466) (EQ 140462 . 140464) (EQ 140460 . 140462) (EQ 140458 . 140460) (EQ 140456 . 140458) (EQ 140454 . 140456) (EQ 140452 . 140454) (EQ 140450 . 140452) (EQ 140448 . 140450) (ASSIGN 140444 . 140445) (EQ 140442 . 140444) (EQ 140440 . 140442) (EQ 140438 . 140440) (EQ 140436 . 140438) (EQ 140434 . 140436) (EQ 140432 . 140434) (EQ 140430 . 140432) (EQ 140428 . 140430) (NEWLINE 140379 . 140380) (ASSIGN 140378 . 140379) (EQ 140376 . 140378) (EQ 140374 . 140376) (EQ 140372 . 140374) (EQ 140370 . 140372) (EQ 140368 . 140370) (EQ 140366 . 140368) (EQ 140364 . 140366) (EQ 140362 . 140364) (EQ 140360 . 140362) (EQ 140358 . 140360) (EQ 140356 . 140358) (EQ 140354 . 140356) (EQ 140352 . 140354) (EQ 140350 . 140352) (EQ 140348 . 140350) (EQ 140346 . 140348) (EQ 140344 . 140346) (EQ 140342 . 140344) (EQ 140340 . 140342) (EQ 140338 . 140340) (EQ 140336 . 140338) (EQ 140334 . 140336) (EQ 140332 . 140334) (EQ 140330 . 140332) (EQ 140328 . 140330) (ASSIGN 140324 . 140325) (EQ 140322 . 140324) (EQ 140320 . 140322) (EQ 140318 . 140320) (EQ 140316 . 140318) (EQ 140314 . 140316) (EQ 140312 . 140314) (EQ 140310 . 140312) (EQ 140308 . 140310) (NEWLINE 140298 . 140299) (PERIOD 140297 . 140298) (MULT 140292 . 140293) (NAME 140267 . 140278) (NAME 140279 . 140281) (AND 140288 . 140291) (MULT 140219 . 140220) (AND 140215 . 140218) (MULT 140205 . 140206) (NEWLINE 140194 . 140195) (EQ 140192 . 140194) (EQ 140190 . 140192) (EQ 140188 . 140190) (EQ 140186 . 140188) (EQ 140184 . 140186) (EQ 140182 . 140184) (EQ 140180 . 140182) (EQ 140178 . 140180) (EQ 140176 . 140178) (EQ 140174 . 140176) (EQ 140172 . 140174) (EQ 140170 . 140172) (EQ 140168 . 140170) (EQ 140166 . 140168) (EQ 140164 . 140166) (EQ 140162 . 140164) (EQ 140160 . 140162) (EQ 140158 . 140160) (EQ 140156 . 140158) (EQ 140154 . 140156) (EQ 140152 . 140154) (EQ 140150 . 140152) (EQ 140148 . 140150) (EQ 140146 . 140148) (EQ 140144 . 140146) (EQ 140142 . 140144) (EQ 140140 . 140142) (ASSIGN 140137 . 140138) (EQ 140135 . 140137) (EQ 140133 . 140135) (EQ 140131 . 140133) (EQ 140129 . 140131) (EQ 140127 . 140129) (EQ 140125 . 140127) (EQ 140123 . 140125) (COLON 140083 . 140084) (NAME 140069 . 140072) (FOR 140073 . 140076) (COLON 140077 . 140078) (punctuation 140048 . 140049) (NEWLINE 139616 . 139617) (EQ 139614 . 139616) (EQ 139612 . 139614) (EQ 139610 . 139612) (EQ 139608 . 139610) (EQ 139606 . 139608) (EQ 139604 . 139606) (EQ 139602 . 139604) (EQ 139600 . 139602) (EQ 139598 . 139600) (EQ 139596 . 139598) (EQ 139594 . 139596) (EQ 139592 . 139594) (EQ 139590 . 139592) (EQ 139588 . 139590) (EQ 139586 . 139588) (EQ 139584 . 139586) (EQ 139582 . 139584) (EQ 139580 . 139582) (EQ 139578 . 139580) (EQ 139576 . 139578) (EQ 139574 . 139576) (EQ 139572 . 139574) (EQ 139570 . 139572) (EQ 139568 . 139570) (EQ 139566 . 139568) (EQ 139564 . 139566) (EQ 139562 . 139564) (ASSIGN 139559 . 139560) (EQ 139557 . 139559) (EQ 139555 . 139557) (EQ 139553 . 139555) (EQ 139551 . 139553) (EQ 139549 . 139551) (STRING_LITERAL 139318 . 139545) (EQ 139547 . 139549) (NAME 10434 . 10439) (IF 10454 . 10456) (ELSE 10468 . 10472)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
GUI neutral widgets
===================

Widgets that are designed to work for any of the GUI backends.
All of these widgets require you to predefine a :class:`matplotlib.axes.Axes`
instance and pass that as the first arg.  matplotlib doesn't try to
be too smart with respect to layout -- you will have to figure out how
wide and tall you want your Axes to be to accommodate your widget.
\"\"\"" code nil nil [1 396])
            ("" code nil nil [421 506])
            ("copy" include nil nil [508 519])
            ("six" include nil nil [520 530])
            ("six.moves" include nil nil [531 556])
            ("numpy" include nil nil [558 576])
            ("dist" include nil nil [589 600])
            ("Ellipse" include nil nil [615 648])
            ("Rectangle" include nil nil [615 648])
            ("Circle" include nil nil [615 648])
            ("Line2D" include nil nil [661 674])
            ("blended_transform_factory" include nil nil [692 724])
            ("LockDraw" type
               (:documentation "
    Some widgets, like the cursor, draw onto the canvas, and this is not
    desirable under all circumstances, like when the toolbar is in
    zoom-to-rect mode and drawing a rectangle.  The module level \"lock\"
    allows someone to grab the lock and prevent other widgets from
    drawing.  Use ``matplotlib.widgets.lock(someobj)`` to prevent
    other widgets from drawing while you're interacting with the canvas.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1218 1236]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1203 1207]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1190 1237])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1255 1259])
                            ("o" variable nil (reparse-symbol function_parameters) [1261 1262]))                          
                        :documentation "reserve the lock for *o*")
                        (reparse-symbol indented_block_body) [1242 1409])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1426 1430])
                            ("o" variable nil (reparse-symbol function_parameters) [1432 1433]))                          
                        :documentation "release the lock")
                        (reparse-symbol indented_block_body) [1414 1585])
                    ("available" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1604 1608])
                            ("o" variable nil (reparse-symbol function_parameters) [1610 1611]))                          
                        :documentation "drawing is available to *o*")
                        (reparse-symbol indented_block_body) [1590 1708])
                    ("isowner" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1725 1729])
                            ("o" variable nil (reparse-symbol function_parameters) [1731 1732]))                          
                        :documentation "Return True if *o* owns this lock")
                        (reparse-symbol indented_block_body) [1713 1815])
                    ("locked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1831 1835]))                          
                        :documentation "Return True if the lock is currently held by an owner")
                        (reparse-symbol indented_block_body) [1820 1945]))                  
                :type "class")
                nil [727 1945])
            ("Widget" type
               (:documentation "
    Abstract base class for GUI neutral widgets
    "
                :superclasses ("object")
                :members 
                  ( ("drawon" variable nil (reparse-symbol indented_block_body) [2037 2050])
                    ("eventson" variable nil (reparse-symbol indented_block_body) [2055 2070])
                    ("_active" variable nil (reparse-symbol indented_block_body) [2075 2089])
                    ("set_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2110 2114])
                            ("active" variable nil (reparse-symbol function_parameters) [2116 2122]))                          
                        :documentation "Set whether the widget is active.
        ")
                        (reparse-symbol indented_block_body) [2095 2212])
                    ("get_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2232 2236]))                          
                        :documentation "Get whether the widget is active.
        ")
                        (reparse-symbol indented_block_body) [2217 2324])
                    ("active" variable nil (reparse-symbol indented_block_body) [2379 2505])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2522 2526])
                            ("event" variable nil (reparse-symbol function_parameters) [2528 2533]))                          
                        :documentation "Return True if event should be ignored.

        This method (or a version of it) should be called at the beginning
        of any event callback.
        ")
                        (reparse-symbol indented_block_body) [2511 2737]))                  
                :type "class")
                nil [1947 2737])
            ("AxesWidget" type
               (:documentation "Widget that is connected to a single
    :class:`~matplotlib.axes.Axes`.

    To guarantee that the widget remains responsive and not garbage-collected,
    a reference to the object should be maintained by the user.

    This is necessary because the callback registry
    maintains only weak-refs to the functions, which are member
    functions of the widget.  If there are no references to the widget
    object it may be garbage collected which will disconnect the
    callbacks.

    Attributes:

    *ax* : :class:`~matplotlib.axes.Axes`
        The parent axes for the widget
    *canvas* : :class:`~matplotlib.backend_bases.FigureCanvasBase` subclass
        The parent figure canvas for the widget.
    *active* : bool
        If False, the widget does not respond to events.
    "
                :superclasses ("Widget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3602 3614])
                            ("self" variable nil (reparse-symbol indented_block_body) [3623 3653])
                            ("self" variable nil (reparse-symbol indented_block_body) [3662 3676]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3583 3587])
                            ("ax" variable nil (reparse-symbol function_parameters) [3589 3591]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3570 3677])
                    ("connect_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3700 3704])
                            ("event" variable nil (reparse-symbol function_parameters) [3706 3711])
                            ("callback" variable nil (reparse-symbol function_parameters) [3713 3721]))                          
                        :documentation "Connect callback with an event.

        This should be used in lieu of `figure.canvas.mpl_connect` since this
        function stores callback ids for later clean up.
        ")
                        (reparse-symbol indented_block_body) [3682 4000])
                    ("disconnect_events" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4027 4031]))                          
                        :documentation "Disconnect all events created by this widget.")
                        (reparse-symbol indented_block_body) [4005 4164]))                  
                :type "class")
                nil [2739 4164])
            ("Button" type
               (:documentation "
    A GUI neutral button.

    For the button to remain responsive you must keep a reference to it.

    The following attributes are accessible

      *ax*
        The :class:`matplotlib.axes.Axes` the button renders into.

      *label*
        A :class:`matplotlib.text.Text` instance.

      *color*
        The color of the button when not hovering.

      *hovercolor*
        The color of the button when hovering.

    Call :meth:`on_clicked` to connect to the button
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        ax : matplotlib.axes.Axes
            The :class:`matplotlib.axes.Axes` instance the button
            will be placed into.

        label : str
            The button text. Accepts string.

        image : array, mpl image, Pillow Image
            The image to place in the button, if not *None*.
            Can be any legal arg to imshow (numpy array,
            matplotlib Image instance, or Pillow Image).

        color : color
            The color of the button when not activated

        hovercolor : color
            The color of the button when the mouse is over it
        \"\"\"" code nil (reparse-symbol indented_block_body) [4790 5433])
                            ("AxesWidget" code nil (reparse-symbol indented_block_body) [5442 5471])
                            ("if" code nil (reparse-symbol indented_block_body) [5481 5532])
                            ("self" variable nil (reparse-symbol indented_block_body) [5540 5746])
                            ("self" variable nil (reparse-symbol indented_block_body) [5756 5768])
                            ("self" variable nil (reparse-symbol indented_block_body) [5777 5796])
                            ("self" code nil (reparse-symbol indented_block_body) [5806 5859])
                            ("self" code nil (reparse-symbol indented_block_body) [5868 5925])
                            ("self" code nil (reparse-symbol indented_block_body) [5934 5989])
                            ("ax" code nil (reparse-symbol indented_block_body) [5998 6020])
                            ("ax" code nil (reparse-symbol indented_block_body) [6029 6052])
                            ("ax" code nil (reparse-symbol indented_block_body) [6061 6078])
                            ("ax" code nil (reparse-symbol indented_block_body) [6087 6104])
                            ("self" variable nil (reparse-symbol indented_block_body) [6113 6131])
                            ("self" variable nil (reparse-symbol indented_block_body) [6140 6168])
                            ("self" variable nil (reparse-symbol indented_block_body) [6178 6201]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4702 4706])
                            ("ax" variable nil (reparse-symbol function_parameters) [4708 4710])
                            ("label" variable nil (reparse-symbol function_parameters) [4712 4717])
                            ("image" variable nil (reparse-symbol function_parameters) [4719 4724])
                            ("color" variable nil (reparse-symbol function_parameters) [4748 4753])
                            ("hovercolor" variable nil (reparse-symbol function_parameters) [4762 4772]))                          
                        :documentation "
        Parameters
        ----------
        ax : matplotlib.axes.Axes
            The :class:`matplotlib.axes.Axes` instance the button
            will be placed into.

        label : str
            The button text. Accepts string.

        image : array, mpl image, Pillow Image
            The image to place in the button, if not *None*.
            Can be any legal arg to imshow (numpy array,
            matplotlib Image instance, or Pillow Image).

        color : color
            The color of the button when not activated

        hovercolor : color
            The color of the button when the mouse is over it
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4689 6202])
                    ("_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6218 6222])
                            ("event" variable nil (reparse-symbol function_parameters) [6224 6229]))                          )
                        (reparse-symbol indented_block_body) [6207 6481])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6499 6503])
                            ("event" variable nil (reparse-symbol function_parameters) [6505 6510]))                          )
                        (reparse-symbol indented_block_body) [6486 6860])
                    ("_motion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6877 6881])
                            ("event" variable nil (reparse-symbol function_parameters) [6883 6888]))                          )
                        (reparse-symbol indented_block_body) [6865 7225])
                    ("on_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7245 7249])
                            ("func" variable nil (reparse-symbol function_parameters) [7251 7255]))                          
                        :documentation "
        When the button is clicked, call this *func* with event.

        A connection id is returned. It can be used to disconnect
        the button from its callback.
        ")
                        (reparse-symbol indented_block_body) [7230 7551])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7571 7575])
                            ("cid" variable nil (reparse-symbol function_parameters) [7577 7580]))                          
                        :documentation "remove the observer with connection id *cid*")
                        (reparse-symbol indented_block_body) [7556 7733]))                  
                :type "class")
                nil [4166 7733])
            ("Slider" type
               (:documentation "
    A slider representing a floating point range.

    For the slider to remain responsive you must maintain a
    reference to it.

    The following attributes are defined
      *ax*        : the slider :class:`matplotlib.axes.Axes` instance

      *val*       : the current slider value

      *vline*     : a :class:`matplotlib.lines.Line2D` instance
                     representing the initial value of the slider

      *poly*      : A :class:`matplotlib.patches.Polygon` instance
                     which is the slider knob

      *valfmt*    : the format string for formatting the slider text

      *label*     : a :class:`matplotlib.text.Text` instance
                     for the slider label

      *closedmin* : whether the slider is closed on the minimum

      *closedmax* : whether the slider is closed on the maximum

      *slidermin* : another slider - if not *None*, this slider must be
                     greater than *slidermin*

      *slidermax* : another slider - if not *None*, this slider must be
                     less than *slidermax*

      *dragging*  : allow for mouse dragging on slider

    Call :meth:`on_changed` to connect to the slider event
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a slider from *valmin* to *valmax* in axes *ax*.

        Additional kwargs are passed on to ``self.poly`` which is the
        :class:`matplotlib.patches.Rectangle` that draws the slider
        knob.  See the :class:`matplotlib.patches.Rectangle` documentation for
        valid property names (e.g., *facecolor*, *edgecolor*, *alpha*, ...).

        Parameters
        ----------
        ax : Axes
            The Axes to put the slider in

        label : str
            Slider label

        valmin : float
            The minimum value of the slider

        valmax : float
            The maximum value of the slider

        valinit : float
            The slider initial position

        label : str
            The slider label

        valfmt : str
            Used to format the slider value, fprint format string

        closedmin : bool
            Indicate whether the slider interval is closed on the bottom

        closedmax : bool
            Indicate whether the slider interval is closed on the top

        slidermin : Slider or None
            Do not allow the current slider to have a value less than
            `slidermin`

        slidermax : Slider or None
            Do not allow the current slider to have a value greater than
            `slidermax`


        dragging : bool
            if the slider can be dragged by the mouse

        \"\"\"" code nil (reparse-symbol indented_block_body) [9178 10575])
                            ("AxesWidget" code nil (reparse-symbol indented_block_body) [10584 10613])
                            ("self" variable nil (reparse-symbol indented_block_body) [10623 10643])
                            ("self" variable nil (reparse-symbol indented_block_body) [10652 10672])
                            ("self" variable nil (reparse-symbol indented_block_body) [10681 10699])
                            ("self" variable nil (reparse-symbol indented_block_body) [10708 10730])
                            ("self" variable nil (reparse-symbol indented_block_body) [10739 10794])
                            ("self" variable nil (reparse-symbol indented_block_body) [10804 10859])
                            ("self" variable nil (reparse-symbol indented_block_body) [10869 10889])
                            ("ax" code nil (reparse-symbol indented_block_body) [10898 10915])
                            ("ax" code nil (reparse-symbol indented_block_body) [10924 10953])
                            ("ax" code nil (reparse-symbol indented_block_body) [10962 10979])
                            ("ax" code nil (reparse-symbol indented_block_body) [10988 11010])
                            ("self" code nil (reparse-symbol indented_block_body) [11020 11074])
                            ("self" code nil (reparse-symbol indented_block_body) [11083 11139])
                            ("if" code nil (reparse-symbol indented_block_body) [11148 11229])
                            ("self" variable nil (reparse-symbol indented_block_body) [11237 11415])
                            ("self" variable nil (reparse-symbol indented_block_body) [11425 11649])
                            ("self" variable nil (reparse-symbol indented_block_body) [11659 11671])
                            ("self" variable nil (reparse-symbol indented_block_body) [11680 11699])
                            ("self" variable nil (reparse-symbol indented_block_body) [11709 11735])
                            ("self" variable nil (reparse-symbol indented_block_body) [11744 11770])
                            ("self" variable nil (reparse-symbol indented_block_body) [11779 11805])
                            ("self" variable nil (reparse-symbol indented_block_body) [11814 11840])
                            ("self" variable nil (reparse-symbol indented_block_body) [11849 11873]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8984 8988])
                            ("ax" variable nil (reparse-symbol function_parameters) [8990 8992])
                            ("label" variable nil (reparse-symbol function_parameters) [8994 8999])
                            ("valmin" variable nil (reparse-symbol function_parameters) [9001 9007])
                            ("valmax" variable nil (reparse-symbol function_parameters) [9009 9015])
                            ("valinit" variable nil (reparse-symbol function_parameters) [9017 9024])
                            ("valfmt" variable nil (reparse-symbol function_parameters) [9030 9036])
                            ("closedmin" variable nil (reparse-symbol function_parameters) [9063 9072])
                            ("closedmax" variable nil (reparse-symbol function_parameters) [9079 9088])
                            ("slidermin" variable nil (reparse-symbol function_parameters) [9095 9104])
                            ("slidermax" variable nil (reparse-symbol function_parameters) [9128 9137])
                            ("dragging" variable nil (reparse-symbol function_parameters) [9144 9152])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9159 9167]))                          
                        :documentation "
        Create a slider from *valmin* to *valmax* in axes *ax*.

        Additional kwargs are passed on to ``self.poly`` which is the
        :class:`matplotlib.patches.Rectangle` that draws the slider
        knob.  See the :class:`matplotlib.patches.Rectangle` documentation for
        valid property names (e.g., *facecolor*, *edgecolor*, *alpha*, ...).

        Parameters
        ----------
        ax : Axes
            The Axes to put the slider in

        label : str
            Slider label

        valmin : float
            The minimum value of the slider

        valmax : float
            The maximum value of the slider

        valinit : float
            The slider initial position

        label : str
            The slider label

        valfmt : str
            Used to format the slider value, fprint format string

        closedmin : bool
            Indicate whether the slider interval is closed on the bottom

        closedmax : bool
            Indicate whether the slider interval is closed on the top

        slidermin : Slider or None
            Do not allow the current slider to have a value less than
            `slidermin`

        slidermax : Slider or None
            Do not allow the current slider to have a value greater than
            `slidermax`


        dragging : bool
            if the slider can be dragged by the mouse

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8971 11874])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11891 11895])
                            ("event" variable nil (reparse-symbol function_parameters) [11897 11902]))                          
                        :documentation "update the slider position")
                        (reparse-symbol indented_block_body) [11879 13137])
                    ("set_val" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13154 13158])
                            ("val" variable nil (reparse-symbol function_parameters) [13160 13163]))                          )
                        (reparse-symbol indented_block_body) [13142 13533])
                    ("on_changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13553 13557])
                            ("func" variable nil (reparse-symbol function_parameters) [13559 13563]))                          
                        :documentation "
        When the slider value is changed, call *func* with the new
        slider position

        A connection id is returned which can be used to disconnect
        ")
                        (reparse-symbol indented_block_body) [13538 13849])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13869 13873])
                            ("cid" variable nil (reparse-symbol function_parameters) [13875 13878]))                          
                        :documentation "remove the observer with connection id *cid*")
                        (reparse-symbol indented_block_body) [13854 14031])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14046 14050]))                          
                        :documentation "reset the slider to the initial value if needed")
                        (reparse-symbol indented_block_body) [14036 14193]))                  
                :type "class")
                nil [7735 14193])
            ("CheckButtons" type
               (:documentation "
    A GUI neutral radio button.

    For the check buttons to remain responsive you must keep a
    reference to this object.

    The following attributes are exposed

     *ax*
        The :class:`matplotlib.axes.Axes` instance the buttons are
        located in

     *labels*
        List of :class:`matplotlib.text.Text` instances

     *lines*
        List of (line1, line2) tuples for the x's in the check boxes.
        These lines exist for each box, but have ``set_visible(False)``
        when its box is not checked.

     *rectangles*
        List of :class:`matplotlib.patches.Rectangle` instances

    Connect to the CheckButtons with the :meth:`on_clicked` method
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Add check buttons to :class:`matplotlib.axes.Axes` instance *ax*

        *labels*
            A len(buttons) list of labels as strings

        *actives*
            A len(buttons) list of booleans indicating whether
             the button is active
        \"\"\"" code nil (reparse-symbol indented_block_body) [14976 15251])
                            ("AxesWidget" code nil (reparse-symbol indented_block_body) [15260 15289])
                            ("ax" code nil (reparse-symbol indented_block_body) [15299 15316])
                            ("ax" code nil (reparse-symbol indented_block_body) [15325 15342])
                            ("ax" code nil (reparse-symbol indented_block_body) [15351 15373])
                            ("if" code nil (reparse-symbol indented_block_body) [15383 15556])
                            ("cnt" variable nil (reparse-symbol indented_block_body) [15565 15572])
                            ("axcolor" variable nil (reparse-symbol indented_block_body) [15581 15609])
                            ("self" variable nil (reparse-symbol indented_block_body) [15619 15635])
                            ("self" variable nil (reparse-symbol indented_block_body) [15644 15659])
                            ("self" variable nil (reparse-symbol indented_block_body) [15668 15688])
                            ("lineparams" variable nil (reparse-symbol indented_block_body) [15698 15819])
                            ("for" code nil (reparse-symbol indented_block_body) [15828 16679])
                            ("self" code nil (reparse-symbol indented_block_body) [16688 16743])
                            ("self" variable nil (reparse-symbol indented_block_body) [16753 16765])
                            ("self" variable nil (reparse-symbol indented_block_body) [16774 16793]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14940 14944])
                            ("ax" variable nil (reparse-symbol function_parameters) [14946 14948])
                            ("labels" variable nil (reparse-symbol function_parameters) [14950 14956])
                            ("actives" variable nil (reparse-symbol function_parameters) [14958 14965]))                          
                        :documentation "
        Add check buttons to :class:`matplotlib.axes.Axes` instance *ax*

        *labels*
            A len(buttons) list of labels as strings

        *actives*
            A len(buttons) list of booleans indicating whether
             the button is active
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14927 16794])
                    ("_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16812 16816])
                            ("event" variable nil (reparse-symbol function_parameters) [16818 16823]))                          )
                        (reparse-symbol indented_block_body) [16799 17281])
                    ("set_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17301 17305])
                            ("index" variable nil (reparse-symbol function_parameters) [17307 17312]))                          
                        :documentation "
        Directly (de)activate a check button by index.

        *index* is an index into the original label list
            that this object was constructed with.
            Raises ValueError if *index* is invalid.

        Callbacks will be triggered if :attr:`eventson` is True.

        ")
                        (reparse-symbol indented_block_body) [17286 18081])
                    ("on_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18101 18105])
                            ("func" variable nil (reparse-symbol function_parameters) [18107 18111]))                          
                        :documentation "
        When the button is clicked, call *func* with button label

        A connection id is returned which can be used to disconnect
        ")
                        (reparse-symbol indented_block_body) [18086 18372])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18392 18396])
                            ("cid" variable nil (reparse-symbol function_parameters) [18398 18401]))                          
                        :documentation "remove the observer with connection id *cid*")
                        (reparse-symbol indented_block_body) [18377 18554]))                  
                :type "class")
                nil [14195 18554])
            ("RadioButtons" type
               (:documentation "
    A GUI neutral radio button.

    For the buttons to remain responsive
    you must keep a reference to this object.

    The following attributes are exposed:

     *ax*
        The :class:`matplotlib.axes.Axes` instance the buttons are in

     *activecolor*
        The color of the button when clicked

     *labels*
        A list of :class:`matplotlib.text.Text` instances

     *circles*
        A list of :class:`matplotlib.patches.Circle` instances

     *value_selected*
        A string listing the current value selected

    Connect to the RadioButtons with the :meth:`on_clicked` method
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Add radio buttons to :class:`matplotlib.axes.Axes` instance *ax*

        *labels*
            A len(buttons) list of labels as strings

        *active*
            The index into labels for the button that is active

        *activecolor*
            The color of the button when clicked
        \"\"\"" code nil (reparse-symbol indented_block_body) [19282 19595])
                            ("AxesWidget" code nil (reparse-symbol indented_block_body) [19604 19633])
                            ("self" variable nil (reparse-symbol indented_block_body) [19642 19672])
                            ("self" variable nil (reparse-symbol indented_block_body) [19681 19707])
                            ("ax" code nil (reparse-symbol indented_block_body) [19717 19734])
                            ("ax" code nil (reparse-symbol indented_block_body) [19743 19760])
                            ("ax" code nil (reparse-symbol indented_block_body) [19769 19791])
                            ("dy" code nil (reparse-symbol indented_block_body) [19800 19827])
                            ("ys" variable nil (reparse-symbol indented_block_body) [19836 19877])
                            ("cnt" variable nil (reparse-symbol indented_block_body) [19886 19893])
                            ("axcolor" variable nil (reparse-symbol indented_block_body) [19902 19930])
                            ("self" variable nil (reparse-symbol indented_block_body) [19940 19956])
                            ("self" variable nil (reparse-symbol indented_block_body) [19965 19982])
                            ("for" code nil (reparse-symbol indented_block_body) [19991 20599])
                            ("self" code nil (reparse-symbol indented_block_body) [20608 20663])
                            ("self" variable nil (reparse-symbol indented_block_body) [20673 20685])
                            ("self" variable nil (reparse-symbol indented_block_body) [20694 20713]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19225 19229])
                            ("ax" variable nil (reparse-symbol function_parameters) [19231 19233])
                            ("labels" variable nil (reparse-symbol function_parameters) [19235 19241])
                            ("active" variable nil (reparse-symbol function_parameters) [19243 19249])
                            ("activecolor" variable nil (reparse-symbol function_parameters) [19253 19264]))                          
                        :documentation "
        Add radio buttons to :class:`matplotlib.axes.Axes` instance *ax*

        *labels*
            A len(buttons) list of labels as strings

        *active*
            The index into labels for the button that is active

        *activecolor*
            The color of the button when clicked
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19212 20714])
                    ("_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20732 20736])
                            ("event" variable nil (reparse-symbol function_parameters) [20738 20743]))                          )
                        (reparse-symbol indented_block_body) [20719 21392])
                    ("set_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21412 21416])
                            ("index" variable nil (reparse-symbol function_parameters) [21418 21423]))                          
                        :documentation "
        Trigger which radio button to make active.

        *index* is an index into the original label list
            that this object was constructed with.
            Raise ValueError if the index is invalid.

        Callbacks will be triggered if :attr:`eventson` is True.

        ")
                        (reparse-symbol indented_block_body) [21397 22339])
                    ("on_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22359 22363])
                            ("func" variable nil (reparse-symbol function_parameters) [22365 22369]))                          
                        :documentation "
        When the button is clicked, call *func* with button label

        A connection id is returned which can be used to disconnect
        ")
                        (reparse-symbol indented_block_body) [22344 22630])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22650 22654])
                            ("cid" variable nil (reparse-symbol function_parameters) [22656 22659]))                          
                        :documentation "remove the observer with connection id *cid*")
                        (reparse-symbol indented_block_body) [22635 22812]))                  
                :type "class")
                nil [18556 22812])
            ("SubplotTool" type
               (:documentation "
    A tool to adjust the subplot params of a :class:`matplotlib.figure.Figure`.
    "
                :superclasses ("Widget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *targetfig*
            The figure instance to adjust.

        *toolfig*
            The figure instance to embed the subplot tool into. If
            *None*, a default figure will be created. If you are using
            this from the GUI
        \"\"\"" code nil (reparse-symbol indented_block_body) [22989 23254])
                            ("self" variable nil (reparse-symbol indented_block_body) [23333 23359])
                            ("toolfig" code nil (reparse-symbol indented_block_body) [23368 23412])
                            ("toolbarfmt" type
                               (:members 
                                  ( ("__init__" function
                                       (:suite 
                                          ( ("self" variable nil (reparse-symbol indented_block_body) [23496 23516]))                                          
                                        :parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [23465 23469])
                                            ("slider" variable nil (reparse-symbol function_parameters) [23471 23477]))                                          
                                        :constructor-flag t)
                                        (reparse-symbol indented_block_body) [23452 23517])
                                    ("__call__" function
                                       (:parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [23543 23547])
                                            ("x" variable nil (reparse-symbol function_parameters) [23549 23550])
                                            ("y" variable nil (reparse-symbol function_parameters) [23552 23553]))                                          )
                                        (reparse-symbol indented_block_body) [23530 23703]))                                  
                                :type "class")
                                (reparse-symbol indented_block_body) [23422 23703])
                            ("self" variable nil (reparse-symbol indented_block_body) [23712 23750])
                            ("self" code nil (reparse-symbol indented_block_body) [23759 23823])
                            ("self" code nil (reparse-symbol indented_block_body) [23832 23863])
                            ("self" variable nil (reparse-symbol indented_block_body) [23873 24035])
                            ("self" code nil (reparse-symbol indented_block_body) [24044 24085])
                            ("self" variable nil (reparse-symbol indented_block_body) [24095 24135])
                            ("self" code nil (reparse-symbol indented_block_body) [24144 24177])
                            ("self" variable nil (reparse-symbol indented_block_body) [24186 24395])
                            ("self" code nil (reparse-symbol indented_block_body) [24404 24449])
                            ("self" variable nil (reparse-symbol indented_block_body) [24459 24498])
                            ("self" code nil (reparse-symbol indented_block_body) [24507 24539])
                            ("self" variable nil (reparse-symbol indented_block_body) [24548 24716])
                            ("self" code nil (reparse-symbol indented_block_body) [24725 24768])
                            ("self" variable nil (reparse-symbol indented_block_body) [24778 24815])
                            ("self" code nil (reparse-symbol indented_block_body) [24824 24854])
                            ("self" variable nil (reparse-symbol indented_block_body) [24863 25019])
                            ("self" code nil (reparse-symbol indented_block_body) [25028 25067])
                            ("self" variable nil (reparse-symbol indented_block_body) [25077 25117])
                            ("self" code nil (reparse-symbol indented_block_body) [25126 25159])
                            ("self" variable nil (reparse-symbol indented_block_body) [25168 25342])
                            ("self" code nil (reparse-symbol indented_block_body) [25351 25396])
                            ("self" variable nil (reparse-symbol indented_block_body) [25406 25446])
                            ("self" code nil (reparse-symbol indented_block_body) [25455 25488])
                            ("self" variable nil (reparse-symbol indented_block_body) [25497 25671])
                            ("self" code nil (reparse-symbol indented_block_body) [25680 25725])
                            ("self" variable nil (reparse-symbol indented_block_body) [25757 25801])
                            ("self" variable nil (reparse-symbol indented_block_body) [25810 25854])
                            ("self" variable nil (reparse-symbol indented_block_body) [25863 25907])
                            ("self" variable nil (reparse-symbol indented_block_body) [25916 25960])
                            ("bax" variable nil (reparse-symbol indented_block_body) [25970 26018])
                            ("self" variable nil (reparse-symbol indented_block_body) [26027 26066])
                            ("sliders" variable nil (reparse-symbol indented_block_body) [26076 26214])
                            ("func" function (:arguments 
                              ( ("event" variable nil (reparse-symbol function_parameters) [26233 26238]))                              ) (reparse-symbol indented_block_body) [26224 26908])
                            ("validate" variable nil (reparse-symbol indented_block_body) [27079 27118])
                            ("toolfig" variable nil (reparse-symbol indented_block_body) [27127 27163])
                            ("self" code nil (reparse-symbol indented_block_body) [27172 27205])
                            ("toolfig" variable nil (reparse-symbol indented_block_body) [27214 27253]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22954 22958])
                            ("targetfig" variable nil (reparse-symbol function_parameters) [22960 22969])
                            ("toolfig" variable nil (reparse-symbol function_parameters) [22971 22978]))                          
                        :documentation "
        *targetfig*
            The figure instance to adjust.

        *toolfig*
            The figure instance to embed the subplot tool into. If
            *None*, a default figure will be created. If you are using
            this from the GUI
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22941 27254])
                    ("funcleft" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27272 27276])
                            ("val" variable nil (reparse-symbol function_parameters) [27278 27281]))                          )
                        (reparse-symbol indented_block_body) [27259 27398])
                    ("funcright" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27417 27421])
                            ("val" variable nil (reparse-symbol function_parameters) [27423 27426]))                          )
                        (reparse-symbol indented_block_body) [27403 27544])
                    ("funcbottom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27564 27568])
                            ("val" variable nil (reparse-symbol function_parameters) [27570 27573]))                          )
                        (reparse-symbol indented_block_body) [27549 27692])
                    ("functop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27709 27713])
                            ("val" variable nil (reparse-symbol function_parameters) [27715 27718]))                          )
                        (reparse-symbol indented_block_body) [27697 27834])
                    ("funcwspace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27854 27858])
                            ("val" variable nil (reparse-symbol function_parameters) [27860 27863]))                          )
                        (reparse-symbol indented_block_body) [27839 27982])
                    ("funchspace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28002 28006])
                            ("val" variable nil (reparse-symbol function_parameters) [28008 28011]))                          )
                        (reparse-symbol indented_block_body) [27987 28130]))                  
                :type "class")
                nil [22814 28130])
            ("Cursor" type
               (:documentation "
    A horizontal and vertical line that spans the axes and moves with
    the pointer.  You can turn off the hline or vline respectively with
    the following attributes:

      *horizOn*
        Controls the visibility of the horizontal line

      *vertOn*
        Controls the visibility of the horizontal line

    and the visibility of the cursor itself with the *visible* attribute.

    For the cursor to remain responsive you must keep a reference to
    it.
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Add a cursor to *ax*.  If ``useblit=True``, use the backend-
        dependent blitting features for faster updates (GTKAgg
        only for now).  *lineprops* is a dictionary of line properties.

        .. plot :: mpl_examples/widgets/cursor.py
        \"\"\"" code nil (reparse-symbol indented_block_body) [28750 29020])
                            ("AxesWidget" code nil (reparse-symbol indented_block_body) [29082 29111])
                            ("self" code nil (reparse-symbol indented_block_body) [29121 29175])
                            ("self" code nil (reparse-symbol indented_block_body) [29184 29228])
                            ("self" variable nil (reparse-symbol indented_block_body) [29238 29257])
                            ("self" variable nil (reparse-symbol indented_block_body) [29266 29288])
                            ("self" variable nil (reparse-symbol indented_block_body) [29297 29317])
                            ("self" code nil (reparse-symbol indented_block_body) [29326 29378])
                            ("if" code nil (reparse-symbol indented_block_body) [29388 29446])
                            ("self" variable nil (reparse-symbol indented_block_body) [29454 29525])
                            ("self" variable nil (reparse-symbol indented_block_body) [29534 29605])
                            ("self" variable nil (reparse-symbol indented_block_body) [29615 29637])
                            ("self" variable nil (reparse-symbol indented_block_body) [29646 29668]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28659 28663])
                            ("ax" variable nil (reparse-symbol function_parameters) [28665 28667])
                            ("horizOn" variable nil (reparse-symbol function_parameters) [28669 28676])
                            ("vertOn" variable nil (reparse-symbol function_parameters) [28683 28689])
                            ("useblit" variable nil (reparse-symbol function_parameters) [28696 28703])
                            ("lineprops" variable nil (reparse-symbol function_parameters) [28728 28739]))                          
                        :documentation "
        Add a cursor to *ax*.  If ``useblit=True``, use the backend-
        dependent blitting features for faster updates (GTKAgg
        only for now).  *lineprops* is a dictionary of line properties.

        .. plot :: mpl_examples/widgets/cursor.py
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [28646 29669])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29684 29688])
                            ("event" variable nil (reparse-symbol function_parameters) [29690 29695]))                          
                        :documentation "clear the cursor")
                        (reparse-symbol indented_block_body) [29674 29951])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29967 29971])
                            ("event" variable nil (reparse-symbol function_parameters) [29973 29978]))                          
                        :documentation "on mouse motion draw the cursor if visible")
                        (reparse-symbol indented_block_body) [29956 30747])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30764 30768]))                          )
                        (reparse-symbol indented_block_body) [30752 31105]))                  
                :type "class")
                nil [28132 31105])
            ("MultiCursor" type
               (:documentation "
    Provide a vertical (default) and/or horizontal line cursor shared between
    multiple axes.

    For the cursor to remain responsive you must keep a reference to
    it.

    Example usage::

        from matplotlib.widgets import MultiCursor
        from pylab import figure, show, np

        t = np.arange(0.0, 2.0, 0.01)
        s1 = np.sin(2*np.pi*t)
        s2 = np.sin(4*np.pi*t)
        fig = figure()
        ax1 = fig.add_subplot(211)
        ax1.plot(t, s1)


        ax2 = fig.add_subplot(212, sharex=ax1)
        ax2.plot(t, s2)

        multi = MultiCursor(fig.canvas, (ax1, ax2), color='r', lw=1,
                            horizOn=False, vertOn=True)
        show()

    "
                :superclasses ("Widget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [31958 31978])
                            ("self" variable nil (reparse-symbol indented_block_body) [31987 32003])
                            ("self" variable nil (reparse-symbol indented_block_body) [32012 32034])
                            ("self" variable nil (reparse-symbol indented_block_body) [32043 32063])
                            ("xmin, xmax" code nil (reparse-symbol indented_block_body) [32073 32105])
                            ("ymin, ymax" code nil (reparse-symbol indented_block_body) [32114 32146])
                            ("xmid" code nil (reparse-symbol indented_block_body) [32155 32181])
                            ("ymid" code nil (reparse-symbol indented_block_body) [32190 32216])
                            ("self" variable nil (reparse-symbol indented_block_body) [32226 32245])
                            ("self" code nil (reparse-symbol indented_block_body) [32254 32306])
                            ("self" variable nil (reparse-symbol indented_block_body) [32315 32337])
                            ("self" variable nil (reparse-symbol indented_block_body) [32346 32368])
                            ("if" code nil (reparse-symbol indented_block_body) [32378 32436])
                            ("if" code nil (reparse-symbol indented_block_body) [32445 32614])
                            ("if" code nil (reparse-symbol indented_block_body) [32623 32793])
                            ("self" code nil (reparse-symbol indented_block_body) [32802 32816]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31856 31860])
                            ("canvas" variable nil (reparse-symbol function_parameters) [31862 31868])
                            ("axes" variable nil (reparse-symbol function_parameters) [31870 31874])
                            ("useblit" variable nil (reparse-symbol function_parameters) [31876 31883])
                            ("horizOn" variable nil (reparse-symbol function_parameters) [31890 31897])
                            ("vertOn" variable nil (reparse-symbol function_parameters) [31905 31911])
                            ("lineprops" variable nil (reparse-symbol function_parameters) [31935 31946]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31843 32817])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32834 32838]))                          
                        :documentation "connect events")
                        (reparse-symbol indented_block_body) [32822 33080])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33100 33104]))                          
                        :documentation "disconnect events")
                        (reparse-symbol indented_block_body) [33085 33241])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33256 33260])
                            ("event" variable nil (reparse-symbol function_parameters) [33262 33267]))                          
                        :documentation "clear the cursor")
                        (reparse-symbol indented_block_body) [33246 33560])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33576 33580])
                            ("event" variable nil (reparse-symbol function_parameters) [33582 33587]))                          )
                        (reparse-symbol indented_block_body) [33565 34202])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34219 34223]))                          )
                        (reparse-symbol indented_block_body) [34207 34720]))                  
                :type "class")
                nil [31107 34720])
            ("_SelectorWidget" type
               (:superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("AxesWidget" code nil (reparse-symbol indented_block_body) [34875 34904])
                            ("self" variable nil (reparse-symbol indented_block_body) [34914 34933])
                            ("self" variable nil (reparse-symbol indented_block_body) [34942 34966])
                            ("self" code nil (reparse-symbol indented_block_body) [34975 35027])
                            ("self" code nil (reparse-symbol indented_block_body) [35036 35065])
                            ("self" variable nil (reparse-symbol indented_block_body) [35075 35206])
                            ("self" code nil (reparse-symbol indented_block_body) [35215 35273])
                            ("self" variable nil (reparse-symbol indented_block_body) [35283 35305])
                            ("self" variable nil (reparse-symbol indented_block_body) [35314 35331])
                            ("if" code nil (reparse-symbol indented_block_body) [35341 35463])
                            ("self" variable nil (reparse-symbol indented_block_body) [35526 35548])
                            ("self" variable nil (reparse-symbol indented_block_body) [35609 35633])
                            ("self" variable nil (reparse-symbol indented_block_body) [35642 35665])
                            ("self" variable nil (reparse-symbol indented_block_body) [35674 35692]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34775 34779])
                            ("ax" variable nil (reparse-symbol function_parameters) [34781 34783])
                            ("onselect" variable nil (reparse-symbol function_parameters) [34785 34793])
                            ("useblit" variable nil (reparse-symbol function_parameters) [34795 34802])
                            ("button" variable nil (reparse-symbol function_parameters) [34810 34816])
                            ("state_modifier_keys" variable nil (reparse-symbol function_parameters) [34840 34859]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34762 35693])
                    ("set_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35713 35717])
                            ("active" variable nil (reparse-symbol function_parameters) [35719 35725]))                          )
                        (reparse-symbol indented_block_body) [35698 35832])
                    ("update_background" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35859 35863])
                            ("event" variable nil (reparse-symbol function_parameters) [35865 35870]))                          
                        :documentation "force an update of the background")
                        (reparse-symbol indented_block_body) [35837 36165])
                    ("connect_default_events" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36197 36201]))                          
                        :documentation "Connect the major canvas events to methods.")
                        (reparse-symbol indented_block_body) [36170 36709])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36725 36729])
                            ("event" variable nil (reparse-symbol function_parameters) [36731 36736]))                          
                        :documentation "return *True* if *event* should be ignored")
                        (reparse-symbol indented_block_body) [36714 37801])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37817 37821]))                          
                        :documentation "draw using newfangled blit or oldfangled draw depending on
        useblit

        ")
                        (reparse-symbol indented_block_body) [37806 38316])
                    ("_get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38335 38339])
                            ("event" variable nil (reparse-symbol function_parameters) [38341 38346]))                          
                        :documentation "Get the xdata and ydata for event, with limits")
                        (reparse-symbol indented_block_body) [38321 38712])
                    ("_clean_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38734 38738])
                            ("event" variable nil (reparse-symbol function_parameters) [38740 38745]))                          
                        :documentation "Clean up an event

        Use prev event if there is no xdata
        Limit the xdata and ydata to the axes limits
        Set the prev event
        ")
                        (reparse-symbol indented_block_body) [38717 39146])
                    ("press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39161 39165])
                            ("event" variable nil (reparse-symbol function_parameters) [39167 39172]))                          
                        :documentation "Button press handler and validator")
                        (reparse-symbol indented_block_body) [39151 39687])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39703 39707])
                            ("event" variable nil (reparse-symbol function_parameters) [39709 39714]))                          
                        :documentation "Button press handler")
                        (reparse-symbol indented_block_body) [39692 39765])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39782 39786])
                            ("event" variable nil (reparse-symbol function_parameters) [39788 39793]))                          
                        :documentation "Button release event handler and validator")
                        (reparse-symbol indented_block_body) [39770 40180])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40198 40202])
                            ("event" variable nil (reparse-symbol function_parameters) [40204 40209]))                          
                        :documentation "Button release event handler")
                        (reparse-symbol indented_block_body) [40185 40268])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40284 40288])
                            ("event" variable nil (reparse-symbol function_parameters) [40290 40295]))                          
                        :documentation "Cursor move event handler and validator")
                        (reparse-symbol indented_block_body) [40273 40529])
                    ("_onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40546 40550])
                            ("event" variable nil (reparse-symbol function_parameters) [40552 40557]))                          
                        :documentation "Cursor move event handler")
                        (reparse-symbol indented_block_body) [40534 40613])
                    ("on_scroll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40632 40636])
                            ("event" variable nil (reparse-symbol function_parameters) [40638 40643]))                          
                        :documentation "Mouse scroll event handler and validator")
                        (reparse-symbol indented_block_body) [40618 40771])
                    ("_on_scroll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40791 40795])
                            ("event" variable nil (reparse-symbol function_parameters) [40797 40802]))                          
                        :documentation "Mouse scroll event handler")
                        (reparse-symbol indented_block_body) [40776 40859])
                    ("on_key_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40881 40885])
                            ("event" variable nil (reparse-symbol function_parameters) [40887 40892]))                          
                        :documentation "Key press event handler and validator for all selection widgets")
                        (reparse-symbol indented_block_body) [40864 41467])
                    ("_on_key_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41490 41494])
                            ("event" variable nil (reparse-symbol function_parameters) [41496 41501]))                          
                        :documentation "Key press event handler - use for widget-specific key press actions.
        ")
                        (reparse-symbol indented_block_body) [41472 41609])
                    ("on_key_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41633 41637])
                            ("event" variable nil (reparse-symbol function_parameters) [41639 41644]))                          
                        :documentation "Key release event handler and validator")
                        (reparse-symbol indented_block_body) [41614 41952])
                    ("_on_key_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41977 41981])
                            ("event" variable nil (reparse-symbol function_parameters) [41983 41988]))                          
                        :documentation "Key release event handler")
                        (reparse-symbol indented_block_body) [41957 42044])
                    ("set_visible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42065 42069])
                            ("visible" variable nil (reparse-symbol function_parameters) [42071 42078]))                          
                        :documentation " Set the visibility of our artists ")
                        (reparse-symbol indented_block_body) [42049 42238]))                  
                :type "class")
                nil [34722 42238])
            ("SpanSelector" type
               (:superclasses ("_SelectorWidget")
                :type "class")
                nil [42240 49206])
            ("ToolHandles" type
               (:documentation "Control handles for canvas tools.

    Parameters
    ----------
    ax : :class:`matplotlib.axes.Axes`
        Matplotlib axes where tool handles are displayed.
    x, y : 1D arrays
        Coordinates of control handles.
    marker : str
        Shape of marker used to display handle. See `matplotlib.pyplot.plot`.
    marker_props : dict
        Additional marker properties. See :class:`matplotlib.lines.Line2D`.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [49756 49768])
                            ("props" variable nil (reparse-symbol indented_block_body) [49778 49906])
                            ("props" code nil (reparse-symbol indented_block_body) [49915 49977])
                            ("self" variable nil (reparse-symbol indented_block_body) [49986 50041])
                            ("self" code nil (reparse-symbol indented_block_body) [50050 50081])
                            ("self" variable nil (reparse-symbol indented_block_body) [50090 50117]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49686 49690])
                            ("ax" variable nil (reparse-symbol function_parameters) [49692 49694])
                            ("x" variable nil (reparse-symbol function_parameters) [49696 49697])
                            ("y" variable nil (reparse-symbol function_parameters) [49699 49700])
                            ("marker" variable nil (reparse-symbol function_parameters) [49702 49708])
                            ("marker_props" variable nil (reparse-symbol function_parameters) [49714 49726])
                            ("useblit" variable nil (reparse-symbol function_parameters) [49733 49740]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [49673 50118])
                    ("x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50143 50147]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [50123 50191])
                    ("y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50216 50220]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [50196 50264])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50282 50286])
                            ("pts" variable nil (reparse-symbol function_parameters) [50288 50291])
                            ("y" variable nil (reparse-symbol function_parameters) [50293 50294]))                          
                        :documentation "Set x and y positions of handles")
                        (reparse-symbol indented_block_body) [50269 50466])
                    ("set_visible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50487 50491])
                            ("val" variable nil (reparse-symbol function_parameters) [50493 50496]))                          )
                        (reparse-symbol indented_block_body) [50471 50538])
                    ("set_animated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50560 50564])
                            ("val" variable nil (reparse-symbol function_parameters) [50566 50569]))                          )
                        (reparse-symbol indented_block_body) [50543 50612])
                    ("closest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50629 50633])
                            ("x" variable nil (reparse-symbol function_parameters) [50635 50636])
                            ("y" variable nil (reparse-symbol function_parameters) [50638 50639]))                          
                        :documentation "Return index and pixel distance to closest index.")
                        (reparse-symbol indented_block_body) [50617 51080]))                  
                :type "class")
                nil [49208 51080])
            ("RectangleSelector" type
               (:documentation "
    Select a rectangular region of an axes.

    For the cursor to remain responsive you must keep a reference to
    it.

    Example usage::

        from matplotlib.widgets import  RectangleSelector
        from pylab import *

        def onselect(eclick, erelease):
          'eclick and erelease are matplotlib events at press and release'
          print(' startposition : (%f, %f)' % (eclick.xdata, eclick.ydata))
          print(' endposition   : (%f, %f)' % (erelease.xdata, erelease.ydata))
          print(' used button   : ', eclick.button)

        def toggle_selector(event):
            print(' Key pressed.')
            if event.key in ['Q', 'q'] and toggle_selector.RS.active:
                print(' RectangleSelector deactivated.')
                toggle_selector.RS.set_active(False)
            if event.key in ['A', 'a'] and not toggle_selector.RS.active:
                print(' RectangleSelector activated.')
                toggle_selector.RS.set_active(True)

        x = arange(100)/(99.0)
        y = sin(x)
        fig = figure
        ax = subplot(111)
        ax.plot(x,y)

        toggle_selector.RS = RectangleSelector(ax, onselect, drawtype='line')
        connect('key_press_event', toggle_selector)
        show()
    "
                :superclasses ("_SelectorWidget")
                :members 
                  ( ("_shape_klass" variable nil (reparse-symbol indented_block_body) [52397 52421])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a selector in *ax*.  When a selection is made, clear
        the span and call onselect with::

          onselect(pos_1, pos_2)

        and clear the drawn box/line. The ``pos_1`` and ``pos_2`` are
        arrays of length 2 containing the x- and y-coordinate.

        If *minspanx* is not *None* then events smaller than *minspanx*
        in x direction are ignored (it's the same for y).

        The rectangle is drawn with *rectprops*; default::

          rectprops = dict(facecolor='red', edgecolor = 'black',
                           alpha=0.2, fill=True)

        The line is drawn with *lineprops*; default::

          lineprops = dict(color='black', linestyle='-',
                           linewidth = 2, alpha=0.5)

        Use *drawtype* if you want the mouse to draw a line,
        a box or nothing between click and actual position by setting

        ``drawtype = 'line'``, ``drawtype='box'`` or ``drawtype = 'none'``.

        *spancoords* is one of 'data' or 'pixels'.  If 'data', *minspanx*
        and *minspanx* will be interpreted in the same coordinates as
        the x and y axis. If 'pixels', they are in pixels.

        *button* is a list of integers indicating which mouse buttons should
        be used for rectangle selection.  You can also specify a single
        integer if only a single button is desired.  Default is *None*,
        which does not limit which button can be used.

        Note, typically:
         1 = left mouse button
         2 = center mouse button (scroll wheel)
         3 = right mouse button

        *interactive* will draw a set of handles and allow you interact
        with the widget after it is drawn.

        *state_modifier_keys* are keyboard modifiers that affect the behavior
        of the widget.

        The defaults are:
        dict(move=' ', clear='escape', square='shift', center='ctrl')

        Keyboard modifiers, which:
        'move': Move the existing shape.
        'clear': Clear the current shape.
        'square': Makes the shape square.
        'center': Make the initial point the center of the shape.
        'square' and 'center' can be combined.
        \"\"\"" code nil (reparse-symbol indented_block_body) [52739 54920])
                            ("_SelectorWidget" code nil (reparse-symbol indented_block_body) [54929 55112])
                            ("self" variable nil (reparse-symbol indented_block_body) [55122 55141])
                            ("self" variable nil (reparse-symbol indented_block_body) [55150 55169])
                            ("self" variable nil (reparse-symbol indented_block_body) [55178 55208])
                            ("if" code nil (reparse-symbol indented_block_body) [55218 55385])
                            ("if" code nil (reparse-symbol indented_block_body) [55394 55835])
                            ("if" code nil (reparse-symbol indented_block_body) [55843 56268])
                            ("self" variable nil (reparse-symbol indented_block_body) [56277 56301])
                            ("self" variable nil (reparse-symbol indented_block_body) [56310 56334])
                            ("if" code nil (reparse-symbol indented_block_body) [56344 56489])
                            ("self" variable nil (reparse-symbol indented_block_body) [56498 56526])
                            ("self" variable nil (reparse-symbol indented_block_body) [56535 56559])
                            ("self" variable nil (reparse-symbol indented_block_body) [56569 56591])
                            ("if" code nil (reparse-symbol indented_block_body) [56601 56733])
                            ("self" variable nil (reparse-symbol indented_block_body) [56741 56786])
                            ("xc, yc" code nil (reparse-symbol indented_block_body) [56795 56816])
                            ("self" variable nil (reparse-symbol indented_block_body) [56825 56961])
                            ("self" variable nil (reparse-symbol indented_block_body) [56971 57010])
                            ("xe, ye" code nil (reparse-symbol indented_block_body) [57019 57045])
                            ("self" variable nil (reparse-symbol indented_block_body) [57054 57239])
                            ("xc, yc" code nil (reparse-symbol indented_block_body) [57249 57269])
                            ("self" variable nil (reparse-symbol indented_block_body) [57278 57470])
                            ("self" variable nil (reparse-symbol indented_block_body) [57480 57505])
                            ("self" variable nil (reparse-symbol indented_block_body) [57515 57676])
                            ("if" code nil (reparse-symbol indented_block_body) [57686 57753])
                            ("self" variable nil (reparse-symbol indented_block_body) [57762 57791]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52440 52444])
                            ("ax" variable nil (reparse-symbol function_parameters) [52446 52448])
                            ("onselect" variable nil (reparse-symbol function_parameters) [52450 52458])
                            ("drawtype" variable nil (reparse-symbol function_parameters) [52460 52468])
                            ("minspanx" variable nil (reparse-symbol function_parameters) [52493 52501])
                            ("minspany" variable nil (reparse-symbol function_parameters) [52508 52516])
                            ("useblit" variable nil (reparse-symbol function_parameters) [52523 52530])
                            ("lineprops" variable nil (reparse-symbol function_parameters) [52555 52564])
                            ("rectprops" variable nil (reparse-symbol function_parameters) [52571 52580])
                            ("spancoords" variable nil (reparse-symbol function_parameters) [52587 52597])
                            ("button" variable nil (reparse-symbol function_parameters) [52623 52629])
                            ("maxdist" variable nil (reparse-symbol function_parameters) [52636 52643])
                            ("marker_props" variable nil (reparse-symbol function_parameters) [52648 52660])
                            ("interactive" variable nil (reparse-symbol function_parameters) [52684 52695])
                            ("state_modifier_keys" variable nil (reparse-symbol function_parameters) [52703 52722]))                          
                        :documentation "
        Create a selector in *ax*.  When a selection is made, clear
        the span and call onselect with::

          onselect(pos_1, pos_2)

        and clear the drawn box/line. The ``pos_1`` and ``pos_2`` are
        arrays of length 2 containing the x- and y-coordinate.

        If *minspanx* is not *None* then events smaller than *minspanx*
        in x direction are ignored (it's the same for y).

        The rectangle is drawn with *rectprops*; default::

          rectprops = dict(facecolor='red', edgecolor = 'black',
                           alpha=0.2, fill=True)

        The line is drawn with *lineprops*; default::

          lineprops = dict(color='black', linestyle='-',
                           linewidth = 2, alpha=0.5)

        Use *drawtype* if you want the mouse to draw a line,
        a box or nothing between click and actual position by setting

        ``drawtype = 'line'``, ``drawtype='box'`` or ``drawtype = 'none'``.

        *spancoords* is one of 'data' or 'pixels'.  If 'data', *minspanx*
        and *minspanx* will be interpreted in the same coordinates as
        the x and y axis. If 'pixels', they are in pixels.

        *button* is a list of integers indicating which mouse buttons should
        be used for rectangle selection.  You can also specify a single
        integer if only a single button is desired.  Default is *None*,
        which does not limit which button can be used.

        Note, typically:
         1 = left mouse button
         2 = center mouse button (scroll wheel)
         3 = right mouse button

        *interactive* will draw a set of handles and allow you interact
        with the widget after it is drawn.

        *state_modifier_keys* are keyboard modifiers that affect the behavior
        of the widget.

        The defaults are:
        dict(move=' ', clear='escape', square='shift', center='ctrl')

        Keyboard modifiers, which:
        'move': Move the existing shape.
        'clear': Clear the current shape.
        'square': Makes the shape square.
        'center': Make the initial point the center of the shape.
        'square' and 'center' can be combined.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52427 57792])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57808 57812])
                            ("event" variable nil (reparse-symbol function_parameters) [57814 57819]))                          
                        :documentation "on button press event")
                        (reparse-symbol indented_block_body) [57797 58304])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58322 58326])
                            ("event" variable nil (reparse-symbol function_parameters) [58328 58333]))                          
                        :documentation "on button release event")
                        (reparse-symbol indented_block_body) [58309 60217])
                    ("_onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60234 60238])
                            ("event" variable nil (reparse-symbol function_parameters) [60240 60245]))                          
                        :documentation "on motion notify event if box/line is wanted")
                        (reparse-symbol indented_block_body) [60222 62181])
                    ("_rect_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62215 62219]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [62186 62639])
                    ("corners" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62670 62674]))                          
                        :documentation "Corners of rectangle from lower left, moving clockwise.")
                        (reparse-symbol indented_block_body) [62644 62907])
                    ("edge_centers" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62943 62947]))                          
                        :documentation "Midpoint of rectangle edges from left, moving clockwise.")
                        (reparse-symbol indented_block_body) [62912 63227])
                    ("center" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63257 63261]))                          
                        :documentation "Center of rectangle")
                        (reparse-symbol indented_block_body) [63232 63395])
                    ("extents" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63426 63430]))                          
                        :documentation "Return (xmin, xmax, ymin, ymax).")
                        (reparse-symbol indented_block_body) [63400 63659])
                    ("extents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63696 63700])
                            ("extents" variable nil (reparse-symbol function_parameters) [63702 63709]))                          
                        :decorators 
                          ( ("extents.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [63664 64034])
                    ("draw_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64054 64058])
                            ("extents" variable nil (reparse-symbol function_parameters) [64060 64067]))                          )
                        (reparse-symbol indented_block_body) [64039 64708])
                    ("_set_active_handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64736 64740])
                            ("event" variable nil (reparse-symbol function_parameters) [64742 64747]))                          
                        :documentation "Set active handle based on the location of the mouse event")
                        (reparse-symbol indented_block_body) [64713 66077])
                    ("geometry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66109 66113]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [66082 66374]))                  
                :type "class")
                nil [51082 66374])
            ("EllipseSelector" type
               (:documentation "
    Select an elliptical region of an axes.

    For the cursor to remain responsive you must keep a reference to
    it.

    Example usage::

        from matplotlib.widgets import  EllipseSelector
        from pylab import *

        def onselect(eclick, erelease):
          'eclick and erelease are matplotlib events at press and release'
          print(' startposition : (%f, %f)' % (eclick.xdata, eclick.ydata))
          print(' endposition   : (%f, %f)' % (erelease.xdata, erelease.ydata))
          print(' used button   : ', eclick.button)

        def toggle_selector(event):
            print(' Key pressed.')
            if event.key in ['Q', 'q'] and toggle_selector.ES.active:
                print(' EllipseSelector deactivated.')
                toggle_selector.RS.set_active(False)
            if event.key in ['A', 'a'] and not toggle_selector.ES.active:
                print(' EllipseSelector activated.')
                toggle_selector.ES.set_active(True)

        x = arange(100)/(99.0)
        y = sin(x)
        fig = figure
        ax = subplot(111)
        ax.plot(x,y)

        toggle_selector.ES = EllipseSelector(ax, onselect, drawtype='line')
        connect('key_press_event', toggle_selector)
        show()
    "
                :superclasses ("RectangleSelector")
                :members 
                  ( ("_shape_klass" variable nil (reparse-symbol indented_block_body) [67682 67704])
                    ("draw_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67725 67729])
                            ("extents" variable nil (reparse-symbol function_parameters) [67731 67738]))                          )
                        (reparse-symbol indented_block_body) [67710 68321])
                    ("_rect_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68355 68359]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [68326 68755]))                  
                :type "class")
                nil [66376 68755])
            ("LassoSelector" type
               (:documentation "Selection curve of an arbitrary shape.

    For the selector to remain responsive you must keep a reference to
    it.

    The selected path can be used in conjunction with
    :func:`~matplotlib.path.Path.contains_point` to select
    data points from an image.

    In contrast to :class:`Lasso`, `LassoSelector` is written with an interface
    similar to :class:`RectangleSelector` and :class:`SpanSelector` and will
    continue to interact with the axes until disconnected.

    Parameters:

    *ax* : :class:`~matplotlib.axes.Axes`
        The parent axes for the widget.
    *onselect* : function
        Whenever the lasso is released, the `onselect` function is called and
        passed the vertices of the selected path.

    Example usage::

        ax = subplot(111)
        ax.plot(x,y)

        def onselect(verts):
            print(verts)
        lasso = LassoSelector(ax, onselect)

     *button* is a list of integers indicating which mouse buttons should
        be used for rectangle selection.  You can also specify a single
        integer if only a single button is desired.  Default is *None*,
        which does not limit which button can be used.

        Note, typically:
         1 = left mouse button
         2 = center mouse button (scroll wheel)
         3 = right mouse button

    "
                :superclasses ("_SelectorWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_SelectorWidget" code nil (reparse-symbol indented_block_body) [70232 70320])
                            ("self" variable nil (reparse-symbol indented_block_body) [70330 70347])
                            ("if" code nil (reparse-symbol indented_block_body) [70357 70410])
                            ("if" code nil (reparse-symbol indented_block_body) [70418 70471])
                            ("self" variable nil (reparse-symbol indented_block_body) [70479 70518])
                            ("self" code nil (reparse-symbol indented_block_body) [70527 70555])
                            ("self" code nil (reparse-symbol indented_block_body) [70564 70591])
                            ("self" variable nil (reparse-symbol indented_block_body) [70600 70626]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70143 70147])
                            ("ax" variable nil (reparse-symbol function_parameters) [70149 70151])
                            ("onselect" variable nil (reparse-symbol function_parameters) [70153 70161])
                            ("useblit" variable nil (reparse-symbol function_parameters) [70168 70175])
                            ("lineprops" variable nil (reparse-symbol function_parameters) [70182 70191])
                            ("button" variable nil (reparse-symbol function_parameters) [70210 70216]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [70130 70627])
                    ("onpress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70644 70648])
                            ("event" variable nil (reparse-symbol function_parameters) [70650 70655]))                          )
                        (reparse-symbol indented_block_body) [70632 70684])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70700 70704])
                            ("event" variable nil (reparse-symbol function_parameters) [70706 70711]))                          )
                        (reparse-symbol indented_block_body) [70689 70795])
                    ("onrelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70814 70818])
                            ("event" variable nil (reparse-symbol function_parameters) [70820 70825]))                          )
                        (reparse-symbol indented_block_body) [70800 70856])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70874 70878])
                            ("event" variable nil (reparse-symbol function_parameters) [70880 70885]))                          )
                        (reparse-symbol indented_block_body) [70861 71114])
                    ("_onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71131 71135])
                            ("event" variable nil (reparse-symbol function_parameters) [71137 71142]))                          )
                        (reparse-symbol indented_block_body) [71119 71319]))                  
                :type "class")
                nil [68757 71319])
            ("Lasso" type
               (:documentation "Selection curve of an arbitrary shape.

    The selected path can be used in conjunction with
    :func:`~matplotlib.path.Path.contains_point` to select data points
    from an image.

    Unlike :class:`LassoSelector`, this must be initialized with a starting
    point `xy`, and the `Lasso` events are destroyed upon release.

    Parameters:

    *ax* : :class:`~matplotlib.axes.Axes`
        The parent axes for the widget.
    *xy* : array
        Coordinates of the start of the lasso.
    *callback* : function
        Whenever the lasso is released, the `callback` function is called and
        passed the vertices of the selected path.

    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("AxesWidget" code nil (reparse-symbol indented_block_body) [72078 72107])
                            ("self" code nil (reparse-symbol indented_block_body) [72117 72169])
                            ("if" code nil (reparse-symbol indented_block_body) [72178 72266])
                            ("x, y" code nil (reparse-symbol indented_block_body) [72275 72284])
                            ("self" variable nil (reparse-symbol indented_block_body) [72293 72314])
                            ("self" variable nil (reparse-symbol indented_block_body) [72323 72387])
                            ("self" code nil (reparse-symbol indented_block_body) [72396 72423])
                            ("self" variable nil (reparse-symbol indented_block_body) [72432 72456])
                            ("self" code nil (reparse-symbol indented_block_body) [72465 72523])
                            ("self" code nil (reparse-symbol indented_block_body) [72532 72586]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72026 72030])
                            ("ax" variable nil (reparse-symbol function_parameters) [72032 72034])
                            ("xy" variable nil (reparse-symbol function_parameters) [72036 72038])
                            ("callback" variable nil (reparse-symbol function_parameters) [72040 72048])
                            ("useblit" variable nil (reparse-symbol function_parameters) [72055 72062]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [72013 72587])
                    ("onrelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72606 72610])
                            ("event" variable nil (reparse-symbol function_parameters) [72612 72617]))                          )
                        (reparse-symbol indented_block_body) [72592 72944])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72960 72964])
                            ("event" variable nil (reparse-symbol function_parameters) [72966 72971]))                          )
                        (reparse-symbol indented_block_body) [72949 73502]))                  
                :type "class")
                nil [71321 73502]))          
      :file "widgets.py"
      :pointmax 73502
      :fsize 73501
      :lastmodtime '(22681 7108 707473 0)
      :unmatched-syntax '((FROM 675 . 679) (PERIOD 680 . 681) (FROM 649 . 653) (PERIOD 654 . 655) (FROM 601 . 605) (PERIOD 606 . 607) (FROM 578 . 582) (PERIOD 583 . 584)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Classes for the efficient drawing of large collections of objects that
share most properties, e.g., a large number of line segments or
polygons.

The classes are not meant to be as flexible as their single element
counterparts (e.g., you may not be able to select all line styles) but
they are meant to be fast for common use cases (e.g., a large set of solid
line segemnts)
\"\"\"" code nil nil [1 383])
            ("" code nil nil [407 492])
            ("six" include nil nil [494 504])
            ("six.moves" include nil nil [505 530])
            ("try" code nil nil [531 632])
            ("warnings" include nil nil [632 647])
            ("numpy" include nil nil [649 667])
            ("numpy.ma" include nil nil [668 689])
            ("matplotlib" include nil nil [691 715])
            ("matplotlib.cbook" include nil nil [716 748])
            ("matplotlib.colors" include nil nil [749 784])
            ("matplotlib.cm" include nil nil [785 811])
            ("matplotlib" include nil nil [812 844])
            ("matplotlib.transforms" include nil nil [845 887])
            ("matplotlib.artist" include nil nil [888 922])
            ("matplotlib.artist" include nil nil [923 972])
            ("matplotlib.path" include nil nil [973 1004])
            ("matplotlib" include nil nil [1005 1033])
            ("matplotlib.mlab" include nil nil [1034 1064])
            ("matplotlib.lines" include nil nil [1065 1098])
            ("CIRCLE_AREA_FACTOR" code nil nil [1100 1141])
            ("_color_aliases" variable nil nil [1144 1237])
            ("Collection" type
               (:documentation "
    Base class for Collections.  Must be subclassed to be usable.

    All properties in a collection must be sequences or scalars;
    if scalars, they will be converted to sequences.  The
    property of the ith element of the collection is::

      prop[i % len(props)]

    Keyword arguments and default values:

        * *edgecolors*: None
        * *facecolors*: None
        * *linewidths*: None
        * *antialiaseds*: None
        * *offsets*: None
        * *transOffset*: transforms.IdentityTransform()
        * *offset_position*: 'screen' (default) or 'data'
        * *norm*: None (optional for
          :class:`matplotlib.cm.ScalarMappable`)
        * *cmap*: None (optional for
          :class:`matplotlib.cm.ScalarMappable`)
        * *hatch*: None
        * *zorder*: 1


    *offsets* and *transOffset* are used to translate the patch after
    rendering (default no offsets).  If offset_position is 'screen'
    (default) the offset is applied after the master transform has
    been applied, that is, the offsets are in screen coordinates.  If
    offset_position is 'data', the offset is applied before the master
    transform, i.e., the offsets are in data coordinates.

    If any of *edgecolors*, *facecolors*, *linewidths*, *antialiaseds*
    are None, they default to their :data:`matplotlib.rcParams` patch
    setting, in sequence form.

    The use of :class:`~matplotlib.cm.ScalarMappable` is optional.  If
    the :class:`~matplotlib.cm.ScalarMappable` matrix _A is not None
    (i.e., a call to set_array has been made), at draw time a call to
    scalar mappable will be made to set the face colors.
    "
                :superclasses ("artist.Artist" "cm.ScalarMappable")
                :members 
                  ( ("_offsets" variable nil (reparse-symbol indented_block_body) [2952 2986])
                    ("_offsets" variable nil (reparse-symbol indented_block_body) [3027 3050])
                    ("_transOffset" variable nil (reparse-symbol indented_block_body) [3055 3100])
                    ("_transforms" variable nil (reparse-symbol indented_block_body) [3473 3506])
                    ("_edge_default" variable nil (reparse-symbol indented_block_body) [3598 3619])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a Collection

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [4195 4262])
                            ("artist" code nil (reparse-symbol indented_block_body) [4271 4299])
                            ("cm" code nil (reparse-symbol indented_block_body) [4308 4352])
                            ("self" variable nil (reparse-symbol indented_block_body) [4466 4502])
                            ("self" variable nil (reparse-symbol indented_block_body) [4543 4576])
                            ("self" variable nil (reparse-symbol indented_block_body) [4633 4650])
                            ("self" variable nil (reparse-symbol indented_block_body) [4659 4681])
                            ("self" variable nil (reparse-symbol indented_block_body) [4690 4712])
                            ("self" code nil (reparse-symbol indented_block_body) [4761 4791])
                            ("self" code nil (reparse-symbol indented_block_body) [4800 4830])
                            ("self" code nil (reparse-symbol indented_block_body) [4839 4869])
                            ("self" code nil (reparse-symbol indented_block_body) [4878 4908])
                            ("self" code nil (reparse-symbol indented_block_body) [4917 4951])
                            ("self" code nil (reparse-symbol indented_block_body) [4960 4991])
                            ("self" code nil (reparse-symbol indented_block_body) [5000 5019])
                            ("self" code nil (reparse-symbol indented_block_body) [5028 5049])
                            ("self" code nil (reparse-symbol indented_block_body) [5058 5099])
                            ("self" code nil (reparse-symbol indented_block_body) [5108 5131])
                            ("self" variable nil (reparse-symbol indented_block_body) [5141 5169])
                            ("self" variable nil (reparse-symbol indented_block_body) [5178 5223])
                            ("if" code nil (reparse-symbol indented_block_body) [5232 5557])
                            ("self" variable nil (reparse-symbol indented_block_body) [5566 5591])
                            ("self" code nil (reparse-symbol indented_block_body) [5600 5619])
                            ("self" variable nil (reparse-symbol indented_block_body) [5628 5646]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3638 3642])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [3661 3671])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [3695 3705])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [3729 3739])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [3763 3773])
                            ("antialiaseds" variable nil (reparse-symbol function_parameters) [3800 3812])
                            ("offsets" variable nil (reparse-symbol function_parameters) [3836 3843])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [3867 3878])
                            ("norm" variable nil (reparse-symbol function_parameters) [3902 3906])
                            ("cmap" variable nil (reparse-symbol function_parameters) [3961 3965])
                            ("pickradius" variable nil (reparse-symbol function_parameters) [3998 4008])
                            ("hatch" variable nil (reparse-symbol function_parameters) [4031 4036])
                            ("urls" variable nil (reparse-symbol function_parameters) [4060 4064])
                            ("offset_position" variable nil (reparse-symbol function_parameters) [4088 4103])
                            ("zorder" variable nil (reparse-symbol function_parameters) [4131 4137])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4158 4166]))                          
                        :documentation "
        Create a Collection

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3625 5647])
                    ("_get_value" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("val" variable nil (reparse-symbol function_parameters) [5685 5688]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5652 6110])
                    ("_get_bool" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("val" variable nil (reparse-symbol function_parameters) [6147 6150]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6115 6412])
                    ("get_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6431 6435]))                          )
                        (reparse-symbol indented_block_body) [6417 6465])
                    ("set_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6484 6488]))                          )
                        (reparse-symbol indented_block_body) [6470 6525])
                    ("get_transforms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6549 6553]))                          )
                        (reparse-symbol indented_block_body) [6530 6588])
                    ("get_offset_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6618 6622]))                          )
                        (reparse-symbol indented_block_body) [6593 6825])
                    ("get_datalim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6846 6850])
                            ("transData" variable nil (reparse-symbol function_parameters) [6852 6861]))                          )
                        (reparse-symbol indented_block_body) [6830 7963])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7990 7994])
                            ("renderer" variable nil (reparse-symbol function_parameters) [7996 8004]))                          )
                        (reparse-symbol indented_block_body) [7968 8177])
                    ("_prepare_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8202 8206]))                          
                        :documentation "Point prep for drawing and hit testing")
                        (reparse-symbol indented_block_body) [8182 9748])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9787 9791])
                            ("renderer" variable nil (reparse-symbol function_parameters) [9793 9801]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9753 12664])
                    ("set_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12688 12692])
                            ("pr" variable nil (reparse-symbol function_parameters) [12694 12696]))                          )
                        (reparse-symbol indented_block_body) [12669 12729])
                    ("get_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12753 12757]))                          )
                        (reparse-symbol indented_block_body) [12734 12792])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12810 12814])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [12816 12826]))                          
                        :documentation "
        Test whether the mouse event occurred in the collection.

        Returns True | False, ``dict(ind=itemlist)``, where every
        item in itemlist contains the event.
        ")
                        (reparse-symbol indented_block_body) [12797 14180])
                    ("set_urls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14198 14202])
                            ("urls" variable nil (reparse-symbol function_parameters) [14204 14208]))                          )
                        (reparse-symbol indented_block_body) [14185 14340])
                    ("get_urls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14358 14362]))                          )
                        (reparse-symbol indented_block_body) [14345 14391])
                    ("set_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14410 14414])
                            ("hatch" variable nil (reparse-symbol function_parameters) [14416 14421]))                          )
                        (reparse-symbol indented_block_body) [14396 15370])
                    ("get_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15389 15393]))                          )
                        (reparse-symbol indented_block_body) [15375 15469])
                    ("set_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15490 15494])
                            ("offsets" variable nil (reparse-symbol function_parameters) [15496 15503]))                          
                        :documentation "
        Set the offsets for the collection.  *offsets* can be a scalar
        or a sequence.

        ACCEPTS: float or sequence of floats
        ")
                        (reparse-symbol indented_block_body) [15474 16008])
                    ("get_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16029 16033]))                          
                        :documentation "
        Return the offsets for the collection.
        ")
                        (reparse-symbol indented_block_body) [16013 16317])
                    ("set_offset_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16346 16350])
                            ("offset_position" variable nil (reparse-symbol function_parameters) [16352 16367]))                          
                        :documentation "
        Set how offsets are applied.  If *offset_position* is 'screen'
        (default) the offset is applied after the master transform has
        been applied, that is, the offsets are in screen coordinates.
        If offset_position is 'data', the offset is applied before the
        master transform, i.e., the offsets are in data coordinates.
        ")
                        (reparse-symbol indented_block_body) [16322 16949])
                    ("get_offset_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16978 16982]))                          
                        :documentation "
        Returns how offsets are applied for the collection.  If
        *offset_position* is 'screen', the offset is applied after the
        master transform has been applied, that is, the offsets are in
        screen coordinates.  If offset_position is 'data', the offset
        is applied before the master transform, i.e., the offsets are
        in data coordinates.
        ")
                        (reparse-symbol indented_block_body) [16954 17421])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17444 17448])
                            ("lw" variable nil (reparse-symbol function_parameters) [17450 17452]))                          
                        :documentation "
        Set the linewidth(s) for the collection.  *lw* can be a scalar
        or a sequence; if it is a sequence the patches will cycle
        through the sequence

        ACCEPTS: float or sequence of floats
        ")
                        (reparse-symbol indented_block_body) [17426 18104])
                    ("set_linewidths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18128 18132])
                            ("lw" variable nil (reparse-symbol function_parameters) [18134 18136]))                          
                        :documentation "alias for set_linewidth")
                        (reparse-symbol indented_block_body) [18109 18215])
                    ("set_lw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18231 18235])
                            ("lw" variable nil (reparse-symbol function_parameters) [18237 18239]))                          
                        :documentation "alias for set_linewidth")
                        (reparse-symbol indented_block_body) [18220 18318])
                    ("set_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18341 18345])
                            ("ls" variable nil (reparse-symbol function_parameters) [18347 18349]))                          
                        :documentation "
        Set the linestyle(s) for the collection.

        ===========================   =================
        linestyle                     description
        ===========================   =================
        ``'-'`` or ``'solid'``        solid line
        ``'--'`` or  ``'dashed'``     dashed line
        ``'-.'`` or  ``'dashdot'``    dash-dotted line
        ``':'`` or ``'dotted'``       dotted line
        ===========================   =================

        Alternatively a dash tuple of the following form can be provided::

            (offset, onoffseq),

        where ``onoffseq`` is an even length tuple of on and off ink
        in points.

        ACCEPTS: ['solid' | 'dashed', 'dashdot', 'dotted' |
                   (offset, on-off-dash-seq) |
                   ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` |
                   ``' '`` | ``''``]

        Parameters
        ----------
        ls : { '-',  '--', '-.', ':'} and more see description
            The line style.
        ")
                        (reparse-symbol indented_block_body) [18323 20173])
                    ("_bcast_lwls" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("linewidths" variable nil (reparse-symbol function_parameters) [20212 20222])
                            ("dashes" variable nil (reparse-symbol function_parameters) [20224 20230]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [20178 21552])
                    ("set_linestyles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21576 21580])
                            ("ls" variable nil (reparse-symbol function_parameters) [21582 21584]))                          
                        :documentation "alias for set_linestyle")
                        (reparse-symbol indented_block_body) [21557 21663])
                    ("set_dashes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21683 21687])
                            ("ls" variable nil (reparse-symbol function_parameters) [21689 21691]))                          
                        :documentation "alias for set_linestyle")
                        (reparse-symbol indented_block_body) [21668 21770])
                    ("set_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21795 21799])
                            ("aa" variable nil (reparse-symbol function_parameters) [21801 21803]))                          
                        :documentation "
        Set the antialiasing state for rendering.

        ACCEPTS: Boolean or sequence of booleans
        ")
                        (reparse-symbol indented_block_body) [21775 22078])
                    ("set_antialiaseds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22104 22108])
                            ("aa" variable nil (reparse-symbol function_parameters) [22110 22112]))                          
                        :documentation "alias for set_antialiased")
                        (reparse-symbol indented_block_body) [22083 22195])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22214 22218])
                            ("c" variable nil (reparse-symbol function_parameters) [22220 22221]))                          
                        :documentation "
        Set both the edgecolor and the facecolor.

        ACCEPTS: matplotlib color arg or sequence of rgba tuples

        .. seealso::

            :meth:`set_facecolor`, :meth:`set_edgecolor`
               For setting the edge or face color individually.
        ")
                        (reparse-symbol indented_block_body) [22200 22568])
                    ("_set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22592 22596])
                            ("c" variable nil (reparse-symbol function_parameters) [22598 22599]))                          )
                        (reparse-symbol indented_block_body) [22573 22932])
                    ("set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22955 22959])
                            ("c" variable nil (reparse-symbol function_parameters) [22961 22962]))                          
                        :documentation "
        Set the facecolor(s) of the collection.  *c* can be a
        matplotlib color spec (all patches have same color), or a
        sequence of specs; if it is a sequence the patches will
        cycle through the sequence.

        If *c* is 'none', the patch will not be filled.

        ACCEPTS: matplotlib color spec or sequence of specs
        ")
                        (reparse-symbol indented_block_body) [22937 23403])
                    ("set_facecolors" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23427 23431])
                            ("c" variable nil (reparse-symbol function_parameters) [23433 23434]))                          
                        :documentation "alias for set_facecolor")
                        (reparse-symbol indented_block_body) [23408 23512])
                    ("get_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23535 23539]))                          )
                        (reparse-symbol indented_block_body) [23517 23574])
                    ("get_facecolors" variable nil (reparse-symbol indented_block_body) [23578 23608])
                    ("get_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23632 23636]))                          )
                        (reparse-symbol indented_block_body) [23614 23846])
                    ("get_edgecolors" variable nil (reparse-symbol indented_block_body) [23850 23880])
                    ("_set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23905 23909])
                            ("c" variable nil (reparse-symbol function_parameters) [23911 23912]))                          )
                        (reparse-symbol indented_block_body) [23886 24621])
                    ("set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24644 24648])
                            ("c" variable nil (reparse-symbol function_parameters) [24650 24651]))                          
                        :documentation "
        Set the edgecolor(s) of the collection. *c* can be a
        matplotlib color spec (all patches have same color), or a
        sequence of specs; if it is a sequence the patches will
        cycle through the sequence.

        If *c* is 'face', the edge color will always be the same as
        the face color.  If it is 'none', the patch boundary will not
        be drawn.

        ACCEPTS: matplotlib color spec or sequence of specs
        ")
                        (reparse-symbol indented_block_body) [24626 25191])
                    ("set_edgecolors" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25215 25219])
                            ("c" variable nil (reparse-symbol function_parameters) [25221 25222]))                          
                        :documentation "alias for set_edgecolor")
                        (reparse-symbol indented_block_body) [25196 25300])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25319 25323])
                            ("alpha" variable nil (reparse-symbol function_parameters) [25325 25330]))                          
                        :documentation "
        Set the alpha tranparencies of the collection.  *alpha* must be
        a float or *None*.

        ACCEPTS: float or None
        ")
                        (reparse-symbol indented_block_body) [25305 25812])
                    ("get_linewidths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25836 25840]))                          )
                        (reparse-symbol indented_block_body) [25817 25875])
                    ("get_linewidth" variable nil (reparse-symbol indented_block_body) [25879 25909])
                    ("get_linestyles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25934 25938]))                          )
                        (reparse-symbol indented_block_body) [25915 25973])
                    ("get_dashes" variable nil (reparse-symbol indented_block_body) [25977 26020])
                    ("update_scalarmappable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26052 26056]))                          
                        :documentation "
        If the scalar mappable array is not none, update colors
        from scalar data
        ")
                        (reparse-symbol indented_block_body) [26026 26598])
                    ("get_fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26616 26620]))                          )
                        (reparse-symbol indented_block_body) [26603 26691])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26712 26716])
                            ("other" variable nil (reparse-symbol function_parameters) [26718 26723]))                          )
                        (reparse-symbol indented_block_body) [26696 27537]))                  
                :type "class")
                nil [1240 27537])
            ("docstring" code nil nil [27725 28462])
            ("_CollectionWithSizes" type
               (:documentation "
    Base class for collections that have an array of sizes.
    "
                :superclasses ("Collection")
                :members 
                  ( ("_factor" variable nil (reparse-symbol indented_block_body) [28585 28598])
                    ("get_sizes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28618 28622]))                          
                        :documentation "
        Returns the sizes of the elements in the collection.  The
        value represents the 'area' of the element.

        Returns
        -------
        sizes : array
            The 'area' of each element.
        ")
                        (reparse-symbol indented_block_body) [28604 28889])
                    ("set_sizes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28908 28912])
                            ("sizes" variable nil (reparse-symbol function_parameters) [28914 28919])
                            ("dpi" variable nil (reparse-symbol function_parameters) [28921 28924]))                          
                        :documentation "
        Set the sizes of each member of the collection.

        Parameters
        ----------
        sizes : ndarray or None
            The size to set for each element of the collection.  The
            value is the 'area' of the element.

        dpi : float
            The dpi of the canvas. Defaults to 72.0.
        ")
                        (reparse-symbol indented_block_body) [28894 29745])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29784 29788])
                            ("renderer" variable nil (reparse-symbol function_parameters) [29790 29798]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [29750 29894]))                  
                :type "class")
                nil [28465 29894])
            ("PathCollection" type
               (:documentation "
    This is the most basic :class:`Collection` subclass.
    "
                :superclasses ("_CollectionWithSizes")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *paths* is a sequence of :class:`matplotlib.path.Path`
        instances.

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [30104 30225])
                            ("Collection" code nil (reparse-symbol indented_block_body) [30235 30270])
                            ("self" code nil (reparse-symbol indented_block_body) [30279 30300])
                            ("self" code nil (reparse-symbol indented_block_body) [30309 30330])
                            ("self" variable nil (reparse-symbol indented_block_body) [30339 30356]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30060 30064])
                            ("paths" variable nil (reparse-symbol function_parameters) [30066 30071])
                            ("sizes" variable nil (reparse-symbol function_parameters) [30073 30078])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [30085 30093]))                          
                        :documentation "
        *paths* is a sequence of :class:`matplotlib.path.Path`
        instances.

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30017 30357])
                    ("set_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30376 30380])
                            ("paths" variable nil (reparse-symbol function_parameters) [30382 30387]))                          )
                        (reparse-symbol indented_block_body) [30362 30444])
                    ("get_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30463 30467]))                          )
                        (reparse-symbol indented_block_body) [30449 30497]))                  
                :type "class")
                nil [29896 30497])
            ("PolyCollection" type
               (:superclasses ("_CollectionWithSizes")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *verts* is a sequence of ( *verts0*, *verts1*, ...) where
        *verts_i* is a sequence of *xy* tuples of vertices, or an
        equivalent :mod:`numpy` array of shape (*nv*, 2).

        *sizes* is *None* (default) or a sequence of floats that
        scale the corresponding *verts_i*.  The scaling is applied
        before the Artist master transform; if the latter is an identity
        transform, then the overall scaling is such that if
        *verts_i* specify a unit square, then *sizes_i* is the area
        of that square in points^2.
        If len(*sizes*) < *nv*, the additional values will be
        taken cyclically from the array.

        *closed*, when *True*, will explicitly close the polygon.

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [30647 31416])
                            ("Collection" code nil (reparse-symbol indented_block_body) [31425 31460])
                            ("self" code nil (reparse-symbol indented_block_body) [31469 31490])
                            ("self" code nil (reparse-symbol indented_block_body) [31499 31528])
                            ("self" variable nil (reparse-symbol indented_block_body) [31537 31554]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30590 30594])
                            ("verts" variable nil (reparse-symbol function_parameters) [30596 30601])
                            ("sizes" variable nil (reparse-symbol function_parameters) [30603 30608])
                            ("closed" variable nil (reparse-symbol function_parameters) [30615 30621])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [30628 30636]))                          
                        :documentation "
        *verts* is a sequence of ( *verts0*, *verts1*, ...) where
        *verts_i* is a sequence of *xy* tuples of vertices, or an
        equivalent :mod:`numpy` array of shape (*nv*, 2).

        *sizes* is *None* (default) or a sequence of floats that
        scale the corresponding *verts_i*.  The scaling is applied
        before the Artist master transform; if the latter is an identity
        transform, then the overall scaling is such that if
        *verts_i* specify a unit square, then *sizes_i* is the area
        of that square in points^2.
        If len(*sizes*) < *nv*, the additional values will be
        taken cyclically from the array.

        *closed*, when *True*, will explicitly close the polygon.

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30547 31555])
                    ("set_verts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31574 31578])
                            ("verts" variable nil (reparse-symbol function_parameters) [31580 31585])
                            ("closed" variable nil (reparse-symbol function_parameters) [31587 31593]))                          )
                        (reparse-symbol indented_block_body) [31560 32653])
                    ("set_paths" variable nil (reparse-symbol indented_block_body) [32658 32679])
                    ("set_verts_and_codes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32709 32713])
                            ("verts" variable nil (reparse-symbol function_parameters) [32715 32720])
                            ("codes" variable nil (reparse-symbol function_parameters) [32722 32727]))                          )
                        (reparse-symbol indented_block_body) [32685 33212]))                  
                :type "class")
                nil [30499 33212])
            ("BrokenBarHCollection" type
               (:documentation "
    A collection of horizontal bars spanning *yrange* with a sequence of
    *xranges*.
    "
                :superclasses ("PolyCollection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *xranges*
            sequence of (*xmin*, *xwidth*)

        *yrange*
            *ymin*, *ywidth*

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [33451 33598])
                            ("ymin, ywidth" code nil (reparse-symbol indented_block_body) [33607 33628])
                            ("ymax" code nil (reparse-symbol indented_block_body) [33637 33657])
                            ("verts" variable nil (reparse-symbol indented_block_body) [33666 33864])
                            ("PolyCollection" code nil (reparse-symbol indented_block_body) [33873 33919]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33409 33413])
                            ("xranges" variable nil (reparse-symbol function_parameters) [33415 33422])
                            ("yrange" variable nil (reparse-symbol function_parameters) [33424 33430])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [33432 33440]))                          
                        :documentation "
        *xranges*
            sequence of (*xmin*, *xwidth*)

        *yrange*
            *ymin*, *ywidth*

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33366 33920])
                    ("span_where" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("x" variable nil (reparse-symbol function_parameters) [33958 33959])
                            ("ymin" variable nil (reparse-symbol function_parameters) [33961 33965])
                            ("ymax" variable nil (reparse-symbol function_parameters) [33967 33971])
                            ("where" variable nil (reparse-symbol function_parameters) [33973 33978])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [33980 33988]))                          
                        :documentation "
        Create a BrokenBarHCollection to plot horizontal bars from
        over the regions in *x* where *where* is True.  The bars range
        on the y-axis from *ymin* to *ymax*

        A :class:`BrokenBarHCollection` is returned.  *kwargs* are
        passed on to the collection.
        ")
                        (reparse-symbol indented_block_body) [33925 34658]))                  
                :type "class")
                nil [33214 34658])
            ("RegularPolyCollection" type
               (:documentation "Draw a collection of regular polygons with *numsides*."
                :superclasses ("_CollectionWithSizes")
                :members 
                  ( ("_path_generator" variable nil (reparse-symbol indented_block_body) [34780 34829])
                    ("_factor" variable nil (reparse-symbol indented_block_body) [34835 34863])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *numsides*
            the number of sides of the polygon

        *rotation*
            the rotation of the polygon in radians

        *sizes*
            gives the area of the circle circumscribing the
            regular polygon in points^2

        %(Collection)s

        Example: see :file:`examples/dynamic_collection.py` for
        complete example::

            offsets = np.random.rand(20,2)
            facecolors = [cm.jet(x) for x in np.random.rand(20)]
            black = (0,0,0,1)

            collection = RegularPolyCollection(
                numsides=5, # a pentagon
                rotation=0, sizes=(50,),
                facecolors = facecolors,
                edgecolors = (black,),
                linewidths = (1,),
                offsets = offsets,
                transOffset = ax.transData,
                )
        \"\"\"" code nil (reparse-symbol indented_block_body) [35039 35906])
                            ("Collection" code nil (reparse-symbol indented_block_body) [35915 35950])
                            ("self" code nil (reparse-symbol indented_block_body) [35959 35980])
                            ("self" variable nil (reparse-symbol indented_block_body) [35989 36014])
                            ("self" variable nil (reparse-symbol indented_block_body) [36023 36069])
                            ("self" variable nil (reparse-symbol indented_block_body) [36078 36103])
                            ("self" code nil (reparse-symbol indented_block_body) [36112 36162]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34912 34916])
                            ("numsides" variable nil (reparse-symbol function_parameters) [34935 34943])
                            ("rotation" variable nil (reparse-symbol function_parameters) [34962 34970])
                            ("sizes" variable nil (reparse-symbol function_parameters) [34991 34996])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35020 35028]))                          
                        :documentation "
        *numsides*
            the number of sides of the polygon

        *rotation*
            the rotation of the polygon in radians

        *sizes*
            gives the area of the circle circumscribing the
            regular polygon in points^2

        %(Collection)s

        Example: see :file:`examples/dynamic_collection.py` for
        complete example::

            offsets = np.random.rand(20,2)
            facecolors = [cm.jet(x) for x in np.random.rand(20)]
            black = (0,0,0,1)

            collection = RegularPolyCollection(
                numsides=5, # a pentagon
                rotation=0, sizes=(50,),
                facecolors = facecolors,
                edgecolors = (black,),
                linewidths = (1,),
                offsets = offsets,
                transOffset = ax.transData,
                )
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34869 36163])
                    ("get_numsides" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36185 36189]))                          )
                        (reparse-symbol indented_block_body) [36168 36222])
                    ("get_rotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36244 36248]))                          )
                        (reparse-symbol indented_block_body) [36227 36281])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36320 36324])
                            ("renderer" variable nil (reparse-symbol function_parameters) [36326 36334]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [36286 36579]))                  
                :type "class")
                nil [34660 36579])
            ("StarPolygonCollection" type
               (:documentation "
    Draw a collection of regular stars with *numsides* points."
                :superclasses ("RegularPolyCollection")
                :members 
                  ( ("_path_generator" variable nil (reparse-symbol indented_block_body) [36712 36758]))                  
                :type "class")
                nil [36581 36759])
            ("AsteriskPolygonCollection" type
               (:documentation "
    Draw a collection of regular asterisks with *numsides* points."
                :superclasses ("RegularPolyCollection")
                :members 
                  ( ("_path_generator" variable nil (reparse-symbol indented_block_body) [36900 36950]))                  
                :type "class")
                nil [36761 36951])
            ("LineCollection" type
               (:documentation "
    All parameters must be sequences or scalars; if scalars, they will
    be converted to sequences.  The property of the ith line
    segment is::

       prop[i % len(props)]

    i.e., the properties cycle if the ``len`` of props is less than the
    number of segments.
    "
                :superclasses ("Collection")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [37283 37303])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *segments*
            a sequence of (*line0*, *line1*, *line2*), where::

                linen = (x0, y0), (x1, y1), ... (xm, ym)

            or the equivalent numpy array with two columns. Each line
            can be a different length.

        *colors*
            must be a sequence of RGBA tuples (e.g., arbitrary color
            strings, etc, not allowed).

        *antialiaseds*
            must be a sequence of ones or zeros

        *linestyles* [ 'solid' | 'dashed' | 'dashdot' | 'dotted' ]
            a string or dash tuple. The dash tuple is::

                (offset, onoffseq),

            where *onoffseq* is an even length tuple of on and off ink
            in points.

        If *linewidths*, *colors*, or *antialiaseds* is None, they
        default to their rcParams setting, in sequence form.

        If *offsets* and *transOffset* are not None, then
        *offsets* are transformed by *transOffset* and applied after
        the segments have been transformed to display coordinates.

        If *offsets* is not None but *transOffset* is None, then the
        *offsets* are added to the segments before any transformation.
        In this case, a single offset can be specified as::

            offsets=(xo,yo)

        and this value will be added cumulatively to each successive
        segment, so as to produce a set of successively offset curves.

        *norm*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)
        *cmap*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)

        *pickradius* is the tolerance for mouse clicks picking a line.
        The default is 5 pt.

        *zorder*
           The zorder of the LineCollection.  Default is 2

        *facecolors*
           The facecolors of the LineCollection. Default is 'none'
           Setting to a value other than 'none' will lead to a filled
           polygon being drawn between points on each line.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` array
        :attr:`~matplotlib.cm.ScalarMappable._A` is not None (i.e., a call to
        :meth:`~matplotlib.cm.ScalarMappable.set_array` has been made), at
        draw time a call to scalar mappable will be made to set the colors.
        \"\"\"" code nil (reparse-symbol indented_block_body) [37764 40108])
                            ("if" code nil (reparse-symbol indented_block_body) [40117 40185])
                            ("if" code nil (reparse-symbol indented_block_body) [40193 40276])
                            ("if" code nil (reparse-symbol indented_block_body) [40284 40373])
                            ("colors" variable nil (reparse-symbol indented_block_body) [40382 40420])
                            ("Collection" code nil (reparse-symbol indented_block_body) [40430 40839])
                            ("self" code nil (reparse-symbol indented_block_body) [40849 40876]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37322 37326])
                            ("segments" variable nil (reparse-symbol function_parameters) [37328 37336])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [37374 37384])
                            ("colors" variable nil (reparse-symbol function_parameters) [37408 37414])
                            ("antialiaseds" variable nil (reparse-symbol function_parameters) [37438 37450])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [37474 37484])
                            ("offsets" variable nil (reparse-symbol function_parameters) [37511 37518])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [37542 37553])
                            ("norm" variable nil (reparse-symbol function_parameters) [37577 37581])
                            ("cmap" variable nil (reparse-symbol function_parameters) [37605 37609])
                            ("pickradius" variable nil (reparse-symbol function_parameters) [37633 37643])
                            ("zorder" variable nil (reparse-symbol function_parameters) [37664 37670])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [37691 37701])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [37727 37735]))                          
                        :documentation "
        *segments*
            a sequence of (*line0*, *line1*, *line2*), where::

                linen = (x0, y0), (x1, y1), ... (xm, ym)

            or the equivalent numpy array with two columns. Each line
            can be a different length.

        *colors*
            must be a sequence of RGBA tuples (e.g., arbitrary color
            strings, etc, not allowed).

        *antialiaseds*
            must be a sequence of ones or zeros

        *linestyles* [ 'solid' | 'dashed' | 'dashdot' | 'dotted' ]
            a string or dash tuple. The dash tuple is::

                (offset, onoffseq),

            where *onoffseq* is an even length tuple of on and off ink
            in points.

        If *linewidths*, *colors*, or *antialiaseds* is None, they
        default to their rcParams setting, in sequence form.

        If *offsets* and *transOffset* are not None, then
        *offsets* are transformed by *transOffset* and applied after
        the segments have been transformed to display coordinates.

        If *offsets* is not None but *transOffset* is None, then the
        *offsets* are added to the segments before any transformation.
        In this case, a single offset can be specified as::

            offsets=(xo,yo)

        and this value will be added cumulatively to each successive
        segment, so as to produce a set of successively offset curves.

        *norm*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)
        *cmap*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)

        *pickradius* is the tolerance for mouse clicks picking a line.
        The default is 5 pt.

        *zorder*
           The zorder of the LineCollection.  Default is 2

        *facecolors*
           The facecolors of the LineCollection. Default is 'none'
           Setting to a value other than 'none' will lead to a filled
           polygon being drawn between points on each line.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` array
        :attr:`~matplotlib.cm.ScalarMappable._A` is not None (i.e., a call to
        :meth:`~matplotlib.cm.ScalarMappable.set_array` has been made), at
        draw time a call to scalar mappable will be made to set the colors.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37309 40877])
                    ("set_segments" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40899 40903])
                            ("segments" variable nil (reparse-symbol function_parameters) [40905 40913]))                          )
                        (reparse-symbol indented_block_body) [40882 41335])
                    ("set_verts" variable nil (reparse-symbol indented_block_body) [41340 41364])
                    ("set_paths" variable nil (reparse-symbol indented_block_body) [41410 41434])
                    ("get_segments" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41457 41461]))                          )
                        (reparse-symbol indented_block_body) [41440 41697])
                    ("_add_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41719 41723])
                            ("segs" variable nil (reparse-symbol function_parameters) [41725 41729]))                          )
                        (reparse-symbol indented_block_body) [41702 42092])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42111 42115])
                            ("c" variable nil (reparse-symbol function_parameters) [42117 42118]))                          
                        :documentation "
        Set the color(s) of the line collection.  *c* can be a
        matplotlib color arg (all patches have same color), or a
        sequence or rgba tuples; if it is a sequence the patches will
        cycle through the sequence.

        ACCEPTS: matplotlib color arg or sequence of rgba tuples
        ")
                        (reparse-symbol indented_block_body) [42097 42501])
                    ("get_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42520 42524]))                          )
                        (reparse-symbol indented_block_body) [42506 42559])
                    ("get_colors" variable nil (reparse-symbol indented_block_body) [42564 42586]))                  
                :type "class")
                nil [36953 42626])
            ("EventCollection" type
               (:superclasses ("LineCollection")
                :members 
                  ( ("'''
    A collection of discrete events.

    An event is a 1-dimensional value, usually the position of something along
    an axis, such as time or length.  Events do not have an amplitude.  They
    are displayed as v
    '''" code nil (reparse-symbol indented_block_body) [42671 42899])
                    ("_edge_default" variable nil (reparse-symbol indented_block_body) [42905 42925])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *positions*
            a sequence of numerical values or a 1D numpy array.  Can be None

        *orientation* [ 'horizontal' | 'vertical' | None ]
            defaults to 'horizontal' if not specified or None

        *lineoffset*
            a single numerical value, corresponding to the offset of the center
            of the markers from the origin

        *linelength*
            a single numerical value, corresponding to the total height of the
            marker (i.e. the marker stretches from lineoffset+linelength/2 to
            lineoffset-linelength/2).  Defaults to 1

        *linewidth*
            a single numerical value

        *color*
            must be a sequence of RGBA tuples (e.g., arbitrary color
            strings, etc, not allowed).

        *linestyle* [ 'solid' | 'dashed' | 'dashdot' | 'dotted' ]

        *antialiased*
            1 or 2

        If *linewidth*, *color*, or *antialiased* is None, they
        default to their rcParams setting, in sequence form.

        *norm*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)
        *cmap*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)

        *pickradius* is the tolerance for mouse clicks picking a line.
        The default is 5 pt.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` array
        :attr:`~matplotlib.cm.ScalarMappable._A` is not None (i.e., a call to
        :meth:`~matplotlib.cm.ScalarMappable.set_array` has been made), at
        draw time a call to scalar mappable will be made to set the colors.

        **Example:**

        .. plot:: mpl_examples/pylab_examples/eventcollection_demo.py
        \"\"\"" code nil (reparse-symbol indented_block_body) [43281 45037])
                            ("segment" variable nil (reparse-symbol indented_block_body) [45047 45136])
                            ("if" code nil (reparse-symbol indented_block_body) [45145 46021])
                            ("LineCollection" code nil (reparse-symbol indented_block_body) [46030 46355])
                            ("self" variable nil (reparse-symbol indented_block_body) [46365 46394])
                            ("self" variable nil (reparse-symbol indented_block_body) [46403 46432]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42944 42948])
                            ("positions" variable nil (reparse-symbol function_parameters) [42967 42976])
                            ("orientation" variable nil (reparse-symbol function_parameters) [43014 43025])
                            ("lineoffset" variable nil (reparse-symbol function_parameters) [43049 43059])
                            ("linelength" variable nil (reparse-symbol function_parameters) [43080 43090])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [43111 43120])
                            ("color" variable nil (reparse-symbol function_parameters) [43144 43149])
                            ("linestyle" variable nil (reparse-symbol function_parameters) [43173 43182])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [43209 43220])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [43244 43252]))                          
                        :documentation "
        *positions*
            a sequence of numerical values or a 1D numpy array.  Can be None

        *orientation* [ 'horizontal' | 'vertical' | None ]
            defaults to 'horizontal' if not specified or None

        *lineoffset*
            a single numerical value, corresponding to the offset of the center
            of the markers from the origin

        *linelength*
            a single numerical value, corresponding to the total height of the
            marker (i.e. the marker stretches from lineoffset+linelength/2 to
            lineoffset-linelength/2).  Defaults to 1

        *linewidth*
            a single numerical value

        *color*
            must be a sequence of RGBA tuples (e.g., arbitrary color
            strings, etc, not allowed).

        *linestyle* [ 'solid' | 'dashed' | 'dashdot' | 'dotted' ]

        *antialiased*
            1 or 2

        If *linewidth*, *color*, or *antialiased* is None, they
        default to their rcParams setting, in sequence form.

        *norm*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)
        *cmap*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)

        *pickradius* is the tolerance for mouse clicks picking a line.
        The default is 5 pt.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` array
        :attr:`~matplotlib.cm.ScalarMappable._A` is not None (i.e., a call to
        :meth:`~matplotlib.cm.ScalarMappable.set_array` has been made), at
        draw time a call to scalar mappable will be made to set the colors.

        **Example:**

        .. plot:: mpl_examples/pylab_examples/eventcollection_demo.py
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42931 46433])
                    ("get_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46456 46460]))                          )
                        (reparse-symbol indented_block_body) [46438 46778])
                    ("set_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46801 46805])
                            ("positions" variable nil (reparse-symbol function_parameters) [46807 46816]))                          )
                        (reparse-symbol indented_block_body) [46783 47643])
                    ("add_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47666 47670])
                            ("position" variable nil (reparse-symbol function_parameters) [47672 47680]))                          )
                        (reparse-symbol indented_block_body) [47648 48045])
                    ("extend_positions" variable nil (reparse-symbol indented_block_body) [48049 48100])
                    ("is_horizontal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48124 48128]))                          )
                        (reparse-symbol indented_block_body) [48106 48259])
                    ("get_orientation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48284 48288]))                          )
                        (reparse-symbol indented_block_body) [48264 48476])
                    ("switch_orientation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48504 48508]))                          )
                        (reparse-symbol indented_block_body) [48481 48891])
                    ("set_orientation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48916 48920])
                            ("orientation" variable nil (reparse-symbol function_parameters) [48922 48933]))                          )
                        (reparse-symbol indented_block_body) [48896 49548])
                    ("get_linelength" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49572 49576]))                          )
                        (reparse-symbol indented_block_body) [49553 49695])
                    ("set_linelength" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49719 49723])
                            ("linelength" variable nil (reparse-symbol function_parameters) [49725 49735]))                          )
                        (reparse-symbol indented_block_body) [49700 50243])
                    ("get_lineoffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50267 50271]))                          )
                        (reparse-symbol indented_block_body) [50248 50390])
                    ("set_lineoffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50414 50418])
                            ("lineoffset" variable nil (reparse-symbol function_parameters) [50420 50430]))                          )
                        (reparse-symbol indented_block_body) [50395 50938])
                    ("get_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50961 50965]))                          )
                        (reparse-symbol indented_block_body) [50943 51091])
                    ("get_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51114 51118]))                          )
                        (reparse-symbol indented_block_body) [51096 51295])
                    ("get_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51314 51318]))                          )
                        (reparse-symbol indented_block_body) [51300 51440]))                  
                :type "class")
                nil [42628 51440])
            ("CircleCollection" type
               (:documentation "
    A collection of circles, drawn using splines.
    "
                :superclasses ("_CollectionWithSizes")
                :members 
                  ( ("_factor" variable nil (reparse-symbol indented_block_body) [51558 51586])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *sizes*
            Gives the area of the circle in points^2

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [51667 51775])
                            ("Collection" code nil (reparse-symbol indented_block_body) [51784 51819])
                            ("self" code nil (reparse-symbol indented_block_body) [51828 51849])
                            ("self" code nil (reparse-symbol indented_block_body) [51858 51908])
                            ("self" variable nil (reparse-symbol indented_block_body) [51917 51957]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51635 51639])
                            ("sizes" variable nil (reparse-symbol function_parameters) [51641 51646])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [51648 51656]))                          
                        :documentation "
        *sizes*
            Gives the area of the circle in points^2

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [51592 51958]))                  
                :type "class")
                nil [51442 51958])
            ("EllipseCollection" type
               (:documentation "
    A collection of ellipses, drawn using splines.
    "
                :superclasses ("Collection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *widths*: sequence
            lengths of first axes (e.g., major axis lengths)

        *heights*: sequence
            lengths of second axes

        *angles*: sequence
            angles of first axes, degrees CCW from the X-axis

        *units*: ['points' | 'inches' | 'dots' | 'width' | 'height'
        | 'x' | 'y' | 'xy']

            units in which majors and minors are given; 'width' and
            'height' refer to the dimensions of the axes, while 'x'
            and 'y' refer to the *offsets* data units. 'xy' differs
            from all others in that the angle as plotted varies with
            the aspect ratio, and equals the specified angle only when
            the aspect ratio is unity.  Hence it behaves the same as
            the :class:`~matplotlib.patches.Ellipse` with
            axes.transData as its transform.

        Additional kwargs inherited from the base :class:`Collection`:

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [52177 53144])
                            ("Collection" code nil (reparse-symbol indented_block_body) [53153 53188])
                            ("self" code nil (reparse-symbol indented_block_body) [53197 53244])
                            ("self" code nil (reparse-symbol indented_block_body) [53253 53302])
                            ("self" code nil (reparse-symbol indented_block_body) [53311 53370])
                            ("self" variable nil (reparse-symbol indented_block_body) [53379 53398])
                            ("self" code nil (reparse-symbol indented_block_body) [53407 53457])
                            ("self" variable nil (reparse-symbol indented_block_body) [53466 53504])
                            ("self" variable nil (reparse-symbol indented_block_body) [53513 53553])
                            ("\"\"\"
        Calculate transforms immediately before drawing.
        \"\"\"" code nil (reparse-symbol indented_block_body) [53594 53666])
                            ("ax" variable nil (reparse-symbol indented_block_body) [53675 53689])
                            ("fig" variable nil (reparse-symbol indented_block_body) [53698 53715])
                            ("if" code nil (reparse-symbol indented_block_body) [53725 54347])
                            ("self" variable nil (reparse-symbol indented_block_body) [54356 54410])
                            ("widths" code nil (reparse-symbol indented_block_body) [54419 54445])
                            ("heights" code nil (reparse-symbol indented_block_body) [54454 54482])
                            ("sin_angle" variable nil (reparse-symbol indented_block_body) [54491 54523])
                            ("cos_angle" variable nil (reparse-symbol indented_block_body) [54532 54564])
                            ("self" code nil (reparse-symbol indented_block_body) [54573 54619])
                            ("self" code nil (reparse-symbol indented_block_body) [54628 54676])
                            ("self" code nil (reparse-symbol indented_block_body) [54685 54731])
                            ("self" code nil (reparse-symbol indented_block_body) [54740 54787])
                            ("self" variable nil (reparse-symbol indented_block_body) [54796 54827])
                            ("_affine" variable nil (reparse-symbol indented_block_body) [54837 54866])
                            ("if" code nil (reparse-symbol indented_block_body) [54875 55030])
                            ("draw" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [55069 55073])
                                    ("renderer" variable nil (reparse-symbol function_parameters) [55075 55083]))                                  )
                                (reparse-symbol indented_block_body) [55060 55157]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52111 52115])
                            ("widths" variable nil (reparse-symbol function_parameters) [52117 52123])
                            ("heights" variable nil (reparse-symbol function_parameters) [52125 52132])
                            ("angles" variable nil (reparse-symbol function_parameters) [52134 52140])
                            ("units" variable nil (reparse-symbol function_parameters) [52142 52147])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [52158 52166]))                          
                        :documentation "
        *widths*: sequence
            lengths of first axes (e.g., major axis lengths)

        *heights*: sequence
            lengths of second axes

        *angles*: sequence
            angles of first axes, degrees CCW from the X-axis

        *units*: ['points' | 'inches' | 'dots' | 'width' | 'height'
        | 'x' | 'y' | 'xy']

            units in which majors and minors are given; 'width' and
            'height' refer to the dimensions of the axes, while 'x'
            and 'y' refer to the *offsets* data units. 'xy' differs
            from all others in that the angle as plotted varies with
            the aspect ratio, and equals the specified angle only when
            the aspect ratio is unity.  Hence it behaves the same as
            the :class:`~matplotlib.patches.Ellipse` with
            axes.transData as its transform.

        Additional kwargs inherited from the base :class:`Collection`:

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52068 55157]))                  
                :type "class")
                nil [51960 55157])
            ("PatchCollection" type
               (:documentation "
    A generic collection of patches.

    This makes it easier to assign a color map to a heterogeneous
    collection of patches.

    This also may improve plotting speed, since PatchCollection will
    draw faster than a large number of patches.
    "
                :superclasses ("Collection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *patches*
            a sequence of Patch objects.  This list may include
            a heterogeneous assortment of different patch types.

        *match_original*
            If True, use the colors and linewidths of the original
            patches.  If False, new colors may be assigned by
            providing the standard collection arguments, facecolor,
            edgecolor, linewidths, norm or cmap.

        If any of *edgecolors*, *facecolors*, *linewidths*,
        *antialiaseds* are None, they default to their
        :data:`matplotlib.rcParams` patch setting, in sequence form.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` matrix _A is not
        None (i.e., a call to set_array has been made), at draw time a
        call to scalar mappable will be made to set the face colors.
        \"\"\"" code nil (reparse-symbol indented_block_body) [55533 56435])
                            ("if" code nil (reparse-symbol indented_block_body) [56445 57000])
                            ("Collection" code nil (reparse-symbol indented_block_body) [57009 57044])
                            ("self" code nil (reparse-symbol indented_block_body) [57054 57077])
                            ("paths" variable nil (reparse-symbol indented_block_body) [57121 57211])
                            ("self" variable nil (reparse-symbol indented_block_body) [57220 57239]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55477 55481])
                            ("patches" variable nil (reparse-symbol function_parameters) [55483 55490])
                            ("match_original" variable nil (reparse-symbol function_parameters) [55492 55506])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [55514 55522]))                          
                        :documentation "
        *patches*
            a sequence of Patch objects.  This list may include
            a heterogeneous assortment of different patch types.

        *match_original*
            If True, use the colors and linewidths of the original
            patches.  If False, new colors may be assigned by
            providing the standard collection arguments, facecolor,
            edgecolor, linewidths, norm or cmap.

        If any of *edgecolors*, *facecolors*, *linewidths*,
        *antialiaseds* are None, they default to their
        :data:`matplotlib.rcParams` patch setting, in sequence form.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` matrix _A is not
        None (i.e., a call to set_array has been made), at draw time a
        call to scalar mappable will be made to set the face colors.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [55464 57240]))                  
                :type "class")
                nil [55159 57240])
            ("TriMesh" type
               (:documentation "
    Class for the efficient drawing of a triangular mesh using
    Gouraud shading.

    A triangular mesh is a :class:`~matplotlib.tri.Triangulation`
    object.
    "
                :superclasses ("Collection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Collection" code nil (reparse-symbol indented_block_body) [57505 57540])
                            ("self" variable nil (reparse-symbol indented_block_body) [57549 57584])
                            ("self" variable nil (reparse-symbol indented_block_body) [57593 57618])
                            ("self" variable nil (reparse-symbol indented_block_body) [57627 57649])
                            ("self" variable nil (reparse-symbol indented_block_body) [57659 57694])
                            ("xy" variable nil (reparse-symbol indented_block_body) [57796 57900])
                            ("self" code nil (reparse-symbol indented_block_body) [57909 57943]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57465 57469])
                            ("triangulation" variable nil (reparse-symbol function_parameters) [57471 57484])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [57486 57494]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [57452 57944])
                    ("get_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57963 57967]))                          )
                        (reparse-symbol indented_block_body) [57949 58058])
                    ("set_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58077 58081]))                          )
                        (reparse-symbol indented_block_body) [58063 58154])
                    ("convert_mesh_to_paths" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("tri" variable nil (reparse-symbol function_parameters) [58203 58206]))                          
                        :documentation "
        Converts a given mesh into a sequence of
        :class:`matplotlib.path.Path` objects for easier rendering by
        backends that do not directly support meshes.

        This function is primarily of use to backend implementers.
        ")
                        (reparse-symbol indented_block_body) [58159 58730])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58769 58773])
                            ("renderer" variable nil (reparse-symbol function_parameters) [58775 58783]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [58735 59573]))                  
                :type "class")
                nil [57242 59573])
            ("QuadMesh" type
               (:documentation "
    Class for the efficient drawing of a quadrilateral mesh.

    A quadrilateral mesh consists of a grid of vertices. The
    dimensions of this array are (*meshWidth* + 1, *meshHeight* +
    1). Each vertex in the mesh has a different set of \"mesh
    coordinates\" representing its position in the topology of the
    mesh. For any values (*m*, *n*) such that 0 <= *m* <= *meshWidth*
    and 0 <= *n* <= *meshHeight*, the vertices at mesh coordinates
    (*m*, *n*), (*m*, *n* + 1), (*m* + 1, *n* + 1), and (*m* + 1, *n*)
    form one of the quadrilaterals in the mesh. There are thus
    (*meshWidth* * *meshHeight*) quadrilaterals in the mesh.  The mesh
    need not be regular and the polygons need not be convex.

    A quadrilateral mesh is represented by a (2 x ((*meshWidth* + 1) *
    (*meshHeight* + 1))) numpy array *coordinates*, where each row is
    the *x* and *y* coordinates of one of the vertices.  To define the
    function that maps from a data point to its corresponding color,
    use the :meth:`set_cmap` method.  Each of these arrays is indexed in
    row-major order by the mesh coordinates of the vertex (or the mesh
    coordinates of the lower left vertex, in the case of the
    colors).

    For example, the first entry in *coordinates* is the
    coordinates of the vertex at mesh coordinates (0, 0), then the one
    at (0, 1), then at (0, 2) .. (0, meshWidth), (1, 0), (1, 1), and
    so on.

    *shading* may be 'flat', or 'gouraud'
    "
                :superclasses ("Collection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Collection" code nil (reparse-symbol indented_block_body) [61219 61254])
                            ("self" variable nil (reparse-symbol indented_block_body) [61263 61290])
                            ("self" variable nil (reparse-symbol indented_block_body) [61299 61328])
                            ("self" variable nil (reparse-symbol indented_block_body) [61337 61368])
                            ("self" variable nil (reparse-symbol indented_block_body) [61377 61408])
                            ("self" variable nil (reparse-symbol indented_block_body) [61417 61440])
                            ("self" variable nil (reparse-symbol indented_block_body) [61450 61485])
                            ("self" code nil (reparse-symbol indented_block_body) [61494 61599])
                            ("self" variable nil (reparse-symbol indented_block_body) [61681 61775])
                            ("self" variable nil (reparse-symbol indented_block_body) [61784 61842]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61107 61111])
                            ("meshWidth" variable nil (reparse-symbol function_parameters) [61113 61122])
                            ("meshHeight" variable nil (reparse-symbol function_parameters) [61124 61134])
                            ("coordinates" variable nil (reparse-symbol function_parameters) [61136 61147])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [61166 61177])
                            ("shading" variable nil (reparse-symbol function_parameters) [61184 61191])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [61200 61208]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [61094 61843])
                    ("get_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61862 61866]))                          )
                        (reparse-symbol indented_block_body) [61848 61957])
                    ("set_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61976 61980]))                          )
                        (reparse-symbol indented_block_body) [61962 62125])
                    ("get_datalim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62146 62150])
                            ("transData" variable nil (reparse-symbol function_parameters) [62152 62161]))                          )
                        (reparse-symbol indented_block_body) [62130 62241])
                    ("convert_mesh_to_paths" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("meshWidth" variable nil (reparse-symbol function_parameters) [62290 62299])
                            ("meshHeight" variable nil (reparse-symbol function_parameters) [62301 62311])
                            ("coordinates" variable nil (reparse-symbol function_parameters) [62313 62324]))                          
                        :documentation "
        Converts a given mesh into a sequence of
        :class:`matplotlib.path.Path` objects for easier rendering by
        backends that do not directly support quadmeshes.

        This function is primarily of use to backend implementers.
        ")
                        (reparse-symbol indented_block_body) [62246 63073])
                    ("convert_mesh_to_triangles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63108 63112])
                            ("meshWidth" variable nil (reparse-symbol function_parameters) [63114 63123])
                            ("meshHeight" variable nil (reparse-symbol function_parameters) [63125 63135])
                            ("coordinates" variable nil (reparse-symbol function_parameters) [63137 63148]))                          
                        :documentation "
        Converts a given mesh into a sequence of triangles, each point
        with its own color.  This is useful for experiments using
        `draw_qouraud_triangle`.
        ")
                        (reparse-symbol indented_block_body) [63078 64462])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64501 64505])
                            ("renderer" variable nil (reparse-symbol function_parameters) [64507 64515]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [64467 66490]))                  
                :type "class")
                nil [59575 66490])
            ("patchstr" variable nil nil [66492 66527])
            ("for" code nil nil [66528 66800])
            ("docstring" code nil nil [66800 66869]))          
      :file "collections.py"
      :pointmax 66870
      :fsize 66869
      :lastmodtime '(22681 7108 763473 0)
      :unmatched-syntax '((NEWLINE 57112 . 57113) (COLON 57111 . 57112) (RPAREN 57110 . 57111) (DEDENT 57079 . 57083) (DEF 57083 . 57086) (LPAREN 57096 . 57097) (NEWLINE 53585 . 53586) (COLON 53584 . 53585) (RPAREN 53583 . 53584) (DEDENT 53555 . 53559) (DEF 53559 . 53562) (LPAREN 53578 . 53579) (NAME 50674 . 50677) (IF 50682 . 50684) (ELSE 50706 . 50710) (NAME 49979 . 49982) (IF 49987 . 49989) (ELSE 50011 . 50015) (RETURN 48416 . 48422) (IF 48436 . 48438) (ELSE 48460 . 48464) (NAME 46612 . 46615) (IF 46620 . 46622) (ELSE 46644 . 46648)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
These are  classes to support contour plotting and
labelling for the axes class
\"\"\"" code nil nil [1 88])
            ("" code nil nil [112 197])
            ("six" include nil nil [199 209])
            ("six.moves" include nil nil [210 238])
            ("warnings" include nil nil [240 255])
            ("matplotlib" include nil nil [256 280])
            ("numpy" include nil nil [281 299])
            ("numpy" include nil nil [300 320])
            ("matplotlib._cntr" include nil nil [321 353])
            ("matplotlib._contour" include nil nil [354 392])
            ("matplotlib.path" include nil nil [393 424])
            ("matplotlib.ticker" include nil nil [425 459])
            ("matplotlib.cm" include nil nil [460 486])
            ("matplotlib.colors" include nil nil [487 521])
            ("matplotlib.collections" include nil nil [522 560])
            ("matplotlib.font_manager" include nil nil [561 607])
            ("matplotlib.text" include nil nil [608 638])
            ("matplotlib.cbook" include nil nil [639 671])
            ("matplotlib.mlab" include nil nil [672 702])
            ("matplotlib.mathtext" include nil nil [703 741])
            ("matplotlib.patches" include nil nil [742 779])
            ("matplotlib.texmanager" include nil nil [780 822])
            ("matplotlib.transforms" include nil nil [823 861])
            ("matplotlib.blocking_input" include nil nil [928 988])
            ("ClabelText" type
               (:documentation "
    Unlike the ordinary text, the get_rotation returns an updated
    angle in the pixel coordinate assuming that the input rotation is
    an angle in data coordinate (or whatever transform set).
    "
                :superclasses ("text.Text")
                :members 
                  ( ("get_rotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1632 1636]))                          )
                        (reparse-symbol indented_block_body) [1615 1912]))                  
                :type "class")
                nil [1369 1912])
            ("ContourLabeler" type
               (:documentation "Mixin to provide labelling capability to ContourSet"
                :superclasses ("object")
                :members 
                  ( ("clabel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2022 2026])
                            ("args" variable nil (reparse-symbol function_parameters) [2028 2033])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2035 2043]))                          
                        :documentation "
        Label a contour plot.

        Call signature::

          clabel(cs, **kwargs)

        Adds labels to line contours in *cs*, where *cs* is a
        :class:`~matplotlib.contour.ContourSet` object returned by
        contour.

        ::

          clabel(cs, v, **kwargs)

        only labels contours listed in *v*.

        Optional keyword arguments:

          *fontsize*:
            size in points or relative size e.g., 'smaller', 'x-large'

          *colors*:
            - if *None*, the color of each label matches the color of
              the corresponding contour

            - if one string color, e.g., *colors* = 'r' or *colors* =
              'red', all labels will be plotted in this color

            - if a tuple of matplotlib color args (string, float, rgb, etc),
              different labels will be plotted in different colors in the order
              specified

          *inline*:
            controls whether the underlying contour is removed or
            not. Default is *True*.

          *inline_spacing*:
            space in pixels to leave on each side of label when
            placing inline.  Defaults to 5.  This spacing will be
            exact for labels at locations where the contour is
            straight, less so for labels on curved contours.

          *fmt*:
            a format string for the label. Default is '%1.3f'
            Alternatively, this can be a dictionary matching contour
            levels with arbitrary strings to use for each contour level
            (i.e., fmt[level]=string), or it can be any callable, such
            as a :class:`~matplotlib.ticker.Formatter` instance, that
            returns a string when called with a numeric contour level.

          *manual*:
            if *True*, contour labels will be placed manually using
            mouse clicks.  Click the first button near a contour to
            add a label, click the second button (or potentially both
            mouse buttons at once) to finish adding labels.  The third
            button can be used to remove the last label added, but
            only if labels are not inline.  Alternatively, the keyboard
            can be used to select label locations (enter to end label
            placement, delete or backspace act like the third mouse button,
            and any other key will select a label location).

            *manual* can be an iterable object of x,y tuples. Contour labels
            will be created as if mouse is clicked at each x,y positions.

          *rightside_up*:
            if *True* (default), label rotations will always be plus
            or minus 90 degrees from level.

          *use_clabeltext*:
            if *True* (default is False), ClabelText class (instead of
            matplotlib.Text) is used to create labels. ClabelText
            recalculates rotation angles of texts during the drawing time,
            therefore this can be used if aspect of the axes changes.

        .. plot:: mpl_examples/pylab_examples/contour_demo.py
        ")
                        (reparse-symbol indented_block_body) [2011 8726])
                    ("print_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8747 8751])
                            ("linecontour" variable nil (reparse-symbol function_parameters) [8753 8764])
                            ("labelwidth" variable nil (reparse-symbol function_parameters) [8766 8776]))                          )
                        (reparse-symbol indented_block_body) [8731 9260])
                    ("too_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9279 9283])
                            ("x" variable nil (reparse-symbol function_parameters) [9285 9286])
                            ("y" variable nil (reparse-symbol function_parameters) [9288 9289])
                            ("lw" variable nil (reparse-symbol function_parameters) [9291 9293]))                          )
                        (reparse-symbol indented_block_body) [9265 9537])
                    ("get_label_coords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9563 9567])
                            ("distances" variable nil (reparse-symbol function_parameters) [9569 9578])
                            ("XX" variable nil (reparse-symbol function_parameters) [9580 9582])
                            ("YY" variable nil (reparse-symbol function_parameters) [9584 9586])
                            ("ysize" variable nil (reparse-symbol function_parameters) [9588 9593])
                            ("lw" variable nil (reparse-symbol function_parameters) [9595 9597]))                          
                        :documentation "
        Return x, y, and the index of a label location.

        Labels are plotted at a location with the smallest
        deviation of the contour from a straight line
        unless there is another label nearby, in which case
        the next best place on the contour is picked up.
        If all such candidates are rejected, the beginning
        of the contour is chosen.
        ")
                        (reparse-symbol indented_block_body) [9542 10345])
                    ("get_label_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10370 10374])
                            ("lev" variable nil (reparse-symbol function_parameters) [10376 10379])
                            ("fmt" variable nil (reparse-symbol function_parameters) [10381 10384])
                            ("fsize" variable nil (reparse-symbol function_parameters) [10386 10391]))                          
                        :documentation "
        Return the width of the label in points.
        ")
                        (reparse-symbol indented_block_body) [10350 11384])
                    ("get_real_label_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11414 11418])
                            ("lev" variable nil (reparse-symbol function_parameters) [11420 11423])
                            ("fmt" variable nil (reparse-symbol function_parameters) [11425 11428])
                            ("fsize" variable nil (reparse-symbol function_parameters) [11430 11435]))                          
                        :documentation "
        This computes actual onscreen label width.
        This uses some black magic to determine onscreen extent of non-drawn
        label.  This magic may not be very robust.

        This method is not being used, and may be modified or removed.
        ")
                        (reparse-symbol indented_block_body) [11389 12410])
                    ("set_label_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12435 12439])
                            ("label" variable nil (reparse-symbol function_parameters) [12441 12446])
                            ("text" variable nil (reparse-symbol function_parameters) [12448 12452])
                            ("color" variable nil (reparse-symbol function_parameters) [12454 12459]))                          )
                        (reparse-symbol indented_block_body) [12415 12676])
                    ("get_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12694 12698])
                            ("lev" variable nil (reparse-symbol function_parameters) [12700 12703])
                            ("fmt" variable nil (reparse-symbol function_parameters) [12705 12708]))                          )
                        (reparse-symbol indented_block_body) [12681 13011])
                    ("locate_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13033 13037])
                            ("linecontour" variable nil (reparse-symbol function_parameters) [13039 13050])
                            ("labelwidth" variable nil (reparse-symbol function_parameters) [13052 13062]))                          
                        :documentation "
        Find a good place to plot a label (relatively flat
        part of the contour).
        ")
                        (reparse-symbol indented_block_body) [13016 14230])
                    ("calc_label_rot_and_inline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14265 14269])
                            ("slc" variable nil (reparse-symbol function_parameters) [14271 14274])
                            ("ind" variable nil (reparse-symbol function_parameters) [14276 14279])
                            ("lw" variable nil (reparse-symbol function_parameters) [14281 14283])
                            ("lc" variable nil (reparse-symbol function_parameters) [14285 14287])
                            ("spacing" variable nil (reparse-symbol function_parameters) [14294 14301]))                          
                        :documentation "
        This function calculates the appropriate label rotation given
        the linecontour coordinates in screen units, the index of the
        label location and the label width.

        It will also break contour and calculate inlining if *lc* is
        not empty (lc defaults to the empty list if None).  *spacing*
        is the space around the label in pixels to leave empty.

        Do both of these tasks at once to avoid calling mlab.path_length
        multiple times, which is relatively costly.

        The method used here involves calculating the path length
        along the contour in pixel coordinates and then looking
        approximately label width / 2 away from central point to
        determine rotation and then to break contour if desired.
        ")
                        (reparse-symbol indented_block_body) [14235 18321])
                    ("_get_label_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18346 18350])
                            ("x" variable nil (reparse-symbol function_parameters) [18352 18353])
                            ("y" variable nil (reparse-symbol function_parameters) [18355 18356])
                            ("rotation" variable nil (reparse-symbol function_parameters) [18358 18366]))                          )
                        (reparse-symbol indented_block_body) [18326 18607])
                    ("_get_label_clabeltext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18638 18642])
                            ("x" variable nil (reparse-symbol function_parameters) [18644 18645])
                            ("y" variable nil (reparse-symbol function_parameters) [18647 18648])
                            ("rotation" variable nil (reparse-symbol function_parameters) [18650 18658]))                          )
                        (reparse-symbol indented_block_body) [18612 19319])
                    ("_add_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19339 19343])
                            ("t" variable nil (reparse-symbol function_parameters) [19345 19346])
                            ("x" variable nil (reparse-symbol function_parameters) [19348 19349])
                            ("y" variable nil (reparse-symbol function_parameters) [19351 19352])
                            ("lev" variable nil (reparse-symbol function_parameters) [19354 19357])
                            ("cvalue" variable nil (reparse-symbol function_parameters) [19359 19365]))                          )
                        (reparse-symbol indented_block_body) [19324 19751])
                    ("add_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19770 19774])
                            ("x" variable nil (reparse-symbol function_parameters) [19776 19777])
                            ("y" variable nil (reparse-symbol function_parameters) [19779 19780])
                            ("rotation" variable nil (reparse-symbol function_parameters) [19782 19790])
                            ("lev" variable nil (reparse-symbol function_parameters) [19792 19795])
                            ("cvalue" variable nil (reparse-symbol function_parameters) [19797 19803]))                          
                        :documentation "
        Add contour label using :class:`~matplotlib.text.Text` class.
        ")
                        (reparse-symbol indented_block_body) [19756 19996])
                    ("add_label_clabeltext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20026 20030])
                            ("x" variable nil (reparse-symbol function_parameters) [20032 20033])
                            ("y" variable nil (reparse-symbol function_parameters) [20035 20036])
                            ("rotation" variable nil (reparse-symbol function_parameters) [20038 20046])
                            ("lev" variable nil (reparse-symbol function_parameters) [20048 20051])
                            ("cvalue" variable nil (reparse-symbol function_parameters) [20053 20059]))                          
                        :documentation "
        Add contour label using :class:`ClabelText` class.
        ")
                        (reparse-symbol indented_block_body) [20001 20481])
                    ("add_label_near" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20505 20509])
                            ("x" variable nil (reparse-symbol function_parameters) [20511 20512])
                            ("y" variable nil (reparse-symbol function_parameters) [20514 20515])
                            ("inline" variable nil (reparse-symbol function_parameters) [20517 20523])
                            ("inline_spacing" variable nil (reparse-symbol function_parameters) [20530 20544])
                            ("transform" variable nil (reparse-symbol function_parameters) [20571 20580]))                          
                        :documentation "
        Add a label near the point (x, y). If transform is None
        (default), (x, y) is in data coordinates; if transform is
        False, (x, y) is in display coordinates; otherwise, the
        specified transform will be used to translate (x, y) into
        display coordinates.

        *inline*:
          controls whether the underlying contour is removed or
          not. Default is *True*.

        *inline_spacing*:
          space in pixels to leave on each side of label when
          placing inline.  Defaults to 5.  This spacing will be
          exact for labels at locations where the contour is
          straight, less so for labels on curved contours.
        ")
                        (reparse-symbol indented_block_body) [20486 23618])
                    ("pop_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23637 23641])
                            ("index" variable nil (reparse-symbol function_parameters) [23643 23648]))                          
                        :documentation "Defaults to removing last label, but any index can be supplied")
                        (reparse-symbol indented_block_body) [23623 23826])
                    ("labels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23842 23846])
                            ("inline" variable nil (reparse-symbol function_parameters) [23848 23854])
                            ("inline_spacing" variable nil (reparse-symbol function_parameters) [23856 23870]))                          )
                        (reparse-symbol indented_block_body) [23831 26224]))                  
                :type "class")
                nil [1914 26224])
            ("_find_closest_point_on_leg" function
               (:documentation "find closest point to p0 on line segment connecting p1 and p2"
                :arguments 
                  ( ("p1" variable nil (reparse-symbol function_parameters) [26257 26259])
                    ("p2" variable nil (reparse-symbol function_parameters) [26261 26263])
                    ("p0" variable nil (reparse-symbol function_parameters) [26265 26267]))                  )
                nil [26226 26758])
            ("_find_closest_point_on_path" function
               (:documentation "
    lc: coordinates of vertices
    point: coordinates of test point
    "
                :arguments 
                  ( ("lc" variable nil (reparse-symbol function_parameters) [26792 26794])
                    ("point" variable nil (reparse-symbol function_parameters) [26796 26801]))                  )
                nil [26760 27564])
            ("ContourSet" type
               (:documentation "
    Store a set of contour lines or filled regions.

    User-callable method: clabel

    Useful attributes:
      ax:
        The axes object in which the contours are drawn

      collections:
        a silent_list of LineCollections or PolyCollections

      levels:
        contour levels

      layers:
        same as levels for line contours; half-way between
        levels for filled contours.  See :meth:`_process_colors`.
    "
                :superclasses ("cm.ScalarMappable" "ContourLabeler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Draw contour lines or filled regions, depending on
        whether keyword arg 'filled' is *False* (default) or *True*.

        The first three arguments must be:

          *ax*: axes object.

          *levels*: [level0, level1, ..., leveln]
            A list of floating point numbers indicating the contour
            levels.

          *allsegs*: [level0segs, level1segs, ...]
            List of all the polygon segments for all the *levels*.
            For contour lines ``len(allsegs) == len(levels)``, and for
            filled contour regions ``len(allsegs) = len(levels)-1``.

            level0segs = [polygon0, polygon1, ...]

            polygon0 = array_like [[x0,y0], [x1,y1], ...]

          *allkinds*: *None* or [level0kinds, level1kinds, ...]
            Optional list of all the polygon vertex kinds (code types), as
            described and used in Path.   This is used to allow multiply-
            connected paths such as holes within filled polygons.
            If not *None*, len(allkinds) == len(allsegs).

            level0kinds = [polygon0kinds, ...]

            polygon0kinds = [vertexcode0, vertexcode1, ...]

            If *allkinds* is not *None*, usually all polygons for a particular
            contour level are grouped together so that

            level0segs = [polygon0] and level0kinds = [polygon0kinds].

        Keyword arguments are as described in
        :attr:`matplotlib.contour.QuadContourSet.contour_doc`.

        **Examples:**

        .. plot:: mpl_examples/misc/contour_manual.py
        \"\"\"" code nil (reparse-symbol indented_block_body) [28123 29691])
                            ("self" variable nil (reparse-symbol indented_block_body) [29700 29712])
                            ("self" variable nil (reparse-symbol indented_block_body) [29721 29761])
                            ("self" variable nil (reparse-symbol indented_block_body) [29770 29811])
                            ("self" variable nil (reparse-symbol indented_block_body) [29820 29868])
                            ("self" variable nil (reparse-symbol indented_block_body) [29877 29925])
                            ("self" variable nil (reparse-symbol indented_block_body) [29935 29979])
                            ("self" variable nil (reparse-symbol indented_block_body) [29989 30027])
                            ("self" variable nil (reparse-symbol indented_block_body) [30036 30076])
                            ("self" variable nil (reparse-symbol indented_block_body) [30085 30125])
                            ("cmap" variable nil (reparse-symbol indented_block_body) [30134 30165])
                            ("self" variable nil (reparse-symbol indented_block_body) [30174 30214])
                            ("norm" variable nil (reparse-symbol indented_block_body) [30223 30254])
                            ("vmin" variable nil (reparse-symbol indented_block_body) [30263 30294])
                            ("vmax" variable nil (reparse-symbol indented_block_body) [30303 30334])
                            ("self" variable nil (reparse-symbol indented_block_body) [30343 30388])
                            ("self" variable nil (reparse-symbol indented_block_body) [30397 30447])
                            ("if" code nil (reparse-symbol indented_block_body) [30456 30573])
                            ("self" variable nil (reparse-symbol indented_block_body) [30811 30848])
                            ("self" variable nil (reparse-symbol indented_block_body) [30857 30899])
                            ("if" code nil (reparse-symbol indented_block_body) [30908 31324])
                            ("if" code nil (reparse-symbol indented_block_body) [31333 31519])
                            ("if" code nil (reparse-symbol indented_block_body) [31527 31701])
                            ("if" code nil (reparse-symbol indented_block_body) [31709 31825])
                            ("if" code nil (reparse-symbol indented_block_body) [31833 31915])
                            ("self" variable nil (reparse-symbol indented_block_body) [31924 31971])
                            ("self" code nil (reparse-symbol indented_block_body) [31981 32016])
                            ("self" code nil (reparse-symbol indented_block_body) [32025 32047])
                            ("if" code nil (reparse-symbol indented_block_body) [32057 33299])
                            ("if" code nil (reparse-symbol indented_block_body) [33308 33484])
                            ("self" variable nil (reparse-symbol indented_block_body) [33539 33559])
                            ("self" variable nil (reparse-symbol indented_block_body) [33568 33590])
                            ("kw" variable nil (reparse-symbol indented_block_body) [33600 33619])
                            ("if" code nil (reparse-symbol indented_block_body) [33628 33679])
                            ("cm" code nil (reparse-symbol indented_block_body) [33729 33767])
                            ("if" code nil (reparse-symbol indented_block_body) [33776 33831])
                            ("if" code nil (reparse-symbol indented_block_body) [33839 33894])
                            ("self" code nil (reparse-symbol indented_block_body) [33902 33924])
                            ("self, self" code nil (reparse-symbol indented_block_body) [33934 33996])
                            ("if" code nil (reparse-symbol indented_block_body) [34006 36025])
                            ("for" code nil (reparse-symbol indented_block_body) [36034 36197])
                            ("self" code nil (reparse-symbol indented_block_body) [36205 36253])
                            ("self" code nil (reparse-symbol indented_block_body) [36262 36296])
                            ("self" code nil (reparse-symbol indented_block_body) [36306 36320]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28087 28091])
                            ("ax" variable nil (reparse-symbol function_parameters) [28093 28095])
                            ("args" variable nil (reparse-symbol function_parameters) [28097 28102])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [28104 28112]))                          
                        :documentation "
        Draw contour lines or filled regions, depending on
        whether keyword arg 'filled' is *False* (default) or *True*.

        The first three arguments must be:

          *ax*: axes object.

          *levels*: [level0, level1, ..., leveln]
            A list of floating point numbers indicating the contour
            levels.

          *allsegs*: [level0segs, level1segs, ...]
            List of all the polygon segments for all the *levels*.
            For contour lines ``len(allsegs) == len(levels)``, and for
            filled contour regions ``len(allsegs) = len(levels)-1``.

            level0segs = [polygon0, polygon1, ...]

            polygon0 = array_like [[x0,y0], [x1,y1], ...]

          *allkinds*: *None* or [level0kinds, level1kinds, ...]
            Optional list of all the polygon vertex kinds (code types), as
            described and used in Path.   This is used to allow multiply-
            connected paths such as holes within filled polygons.
            If not *None*, len(allkinds) == len(allsegs).

            level0kinds = [polygon0kinds, ...]

            polygon0kinds = [vertexcode0, vertexcode1, ...]

            If *allkinds* is not *None*, usually all polygons for a particular
            contour level are grouped together so that

            level0segs = [polygon0] and level0kinds = [polygon0kinds].

        Keyword arguments are as described in
        :attr:`matplotlib.contour.QuadContourSet.contour_doc`.

        **Examples:**

        .. plot:: mpl_examples/misc/contour_manual.py
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [28074 36339])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36362 36366]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform`
        instance used by this ContourSet.
        ")
                        (reparse-symbol indented_block_body) [36344 36814])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36836 36840]))                          )
                        (reparse-symbol indented_block_body) [36819 37123])
                    ("legend_elements" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37148 37152])
                            ("variable_name" variable nil (reparse-symbol function_parameters) [37154 37167])
                            ("str_format" variable nil (reparse-symbol function_parameters) [37173 37183]))                          
                        :documentation "
        Return a list of artist and labels suitable for passing through
        to :func:`plt.legend` which represent this ContourSet.

        Args:

            *variable_name*: the string used inside the inequality used
              on the labels

            *str_format*: function used to format the numbers in the labels
        ")
                        (reparse-symbol indented_block_body) [37128 39243])
                    ("_process_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39266 39270])
                            ("args" variable nil (reparse-symbol function_parameters) [39272 39277])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [39279 39287]))                          
                        :documentation "
        Process *args* and *kwargs*; override in derived classes.

        Must set self.levels, self.zmin and self.zmax, and update axes
        limits.
        ")
                        (reparse-symbol indented_block_body) [39248 40557])
                    ("_get_allsegs_and_allkinds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40592 40596]))                          
                        :documentation "
        Override in derived classes to create and return allsegs and allkinds.
        allkinds can be None.
        ")
                        (reparse-symbol indented_block_body) [40562 40775])
                    ("_get_lowers_and_uppers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40807 40811]))                          
                        :documentation "
        Return (lowers,uppers) for filled contours.
        ")
                        (reparse-symbol indented_block_body) [40780 41276])
                    ("_make_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41297 41301])
                            ("segs" variable nil (reparse-symbol function_parameters) [41303 41307])
                            ("kinds" variable nil (reparse-symbol function_parameters) [41309 41314]))                          )
                        (reparse-symbol indented_block_body) [41281 41517])
                    ("changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41534 41538]))                          )
                        (reparse-symbol indented_block_body) [41522 42331])
                    ("_autolev" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42349 42353])
                            ("N" variable nil (reparse-symbol function_parameters) [42355 42356]))                          
                        :documentation "
        Select contour levels to span the data.

        We need two more levels for filled contours than for
        line contours, because for the latter we need to specify
        the lower and upper boundary of each range. For example,
        a single contour boundary, say at z = 0, requires only
        one contour line, but two filled regions, and therefore
        three levels to provide boundaries for both regions.
        ")
                        (reparse-symbol indented_block_body) [42336 43302])
                    ("_contour_level_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43331 43335])
                            ("z" variable nil (reparse-symbol function_parameters) [43337 43338])
                            ("args" variable nil (reparse-symbol function_parameters) [43340 43344]))                          
                        :documentation "
        Determine the contour levels and store in self.levels.
        ")
                        (reparse-symbol indented_block_body) [43307 44560])
                    ("_process_levels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44585 44589]))                          
                        :documentation "
        Assign values to :attr:`layers` based on :attr:`levels`,
        adding extended layers as needed if contours are filled.

        For line contours, layers simply coincide with levels;
        a line is a thin layer.  No extended levels are needed
        with line contours.
        ")
                        (reparse-symbol indented_block_body) [44565 46060])
                    ("_process_colors" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46085 46089]))                          
                        :documentation "
        Color argument processing for contouring.

        Note that we base the color mapping on the contour levels
        and layers, not on the actual range of the Z values.  This
        means we don't have to worry about bad values in Z, and we
        always have the full dynamic range available for the selected
        levels.

        The color is based on the midpoint of the layer, except for
        extended end layers.  By default, the norm vmin and vmax
        are the extreme values of the non-extended levels.  Hence,
        the layer color extremes are not the extreme values of
        the colormap itself, but approach those values as the number
        of levels increases.  An advantage of this scheme is that
        line contours, when added to filled contours, take on
        colors that are consistent with those of the filled regions;
        for example, a contour line on the boundary between two
        regions will have a color intermediate between those
        of the regions.

        ")
                        (reparse-symbol indented_block_body) [46065 47853])
                    ("_process_linewidths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47938 47942]))                          )
                        (reparse-symbol indented_block_body) [47914 48623])
                    ("_process_linestyles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48652 48656]))                          )
                        (reparse-symbol indented_block_body) [48628 49679])
                    ("get_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49698 49702]))                          
                        :documentation "returns alpha to be applied to all ContourSet artists")
                        (reparse-symbol indented_block_body) [49684 49799])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49818 49822])
                            ("alpha" variable nil (reparse-symbol function_parameters) [49824 49829]))                          
                        :documentation "sets alpha for all ContourSet artists")
                        (reparse-symbol indented_block_body) [49804 49934])
                    ("find_nearest_contour" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49964 49968])
                            ("x" variable nil (reparse-symbol function_parameters) [49970 49971])
                            ("y" variable nil (reparse-symbol function_parameters) [49973 49974])
                            ("indices" variable nil (reparse-symbol function_parameters) [49976 49983])
                            ("pixel" variable nil (reparse-symbol function_parameters) [49990 49995]))                          
                        :documentation "
        Finds contour that is closest to a point.  Defaults to
        measuring distance in pixels (screen space - useful for manual
        contour labeling), but this can be controlled via a keyword
        argument.

        Returns a tuple containing the contour, segment, index of
        segment, x & y of segment point and distance to minimum point.

        Optional keyword arguments:

          *indices*:
            Indexes of contour levels to consider when looking for
            nearest point.  Defaults to using all levels.

          *pixel*:
            If *True*, measure distance in pixel space, if not, measure
            distance in axes space.  Defaults to *True*.

        ")
                        (reparse-symbol indented_block_body) [49939 52139]))                  
                :type "class")
                nil [27566 52139])
            ("QuadContourSet" type
               (:documentation "
    Create and store a set of contour lines or filled regions.

    User-callable method: :meth:`clabel`

    Useful attributes:
      ax:
        The axes object in which the contours are drawn

      collections:
        A silent_list of LineCollections or PolyCollections

      levels:
        Contour levels

      layers:
        Same as levels for line contours; half-way between
        levels for filled contours.  See :meth:`_process_colors` method.
    "
                :superclasses ("ContourSet")
                :members 
                  ( ("_process_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52674 52678])
                            ("args" variable nil (reparse-symbol function_parameters) [52680 52685])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [52687 52695]))                          
                        :documentation "
        Process args and kwargs.
        ")
                        (reparse-symbol indented_block_body) [52656 54919])
                    ("_get_allsegs_and_allkinds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54954 54958]))                          
                        :documentation "
        Create and return allsegs and allkinds by calling underlying C code.
        ")
                        (reparse-symbol indented_block_body) [54924 56290])
                    ("_contour_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56313 56317])
                            ("args" variable nil (reparse-symbol function_parameters) [56319 56323])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [56325 56331]))                          )
                        (reparse-symbol indented_block_body) [56295 57216])
                    ("_check_xyz" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57236 57240])
                            ("args" variable nil (reparse-symbol function_parameters) [57242 57246])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [57248 57254]))                          )
                        (reparse-symbol indented_block_body) [57221 58941])
                    ("_initialize_x_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58966 58970])
                            ("z" variable nil (reparse-symbol function_parameters) [58972 58973]))                          
                        :documentation "
        Return X, Y arrays such that contour(Z) will match imshow(Z)
        if origin is not None.
        The center of pixel Z[i,j] depends on origin:
        if origin is None, x = j, y = i;
        if origin is 'lower', x = j + 0.5, y = i + 0.5;
        if origin is 'upper', x = j + 0.5, y = Nrows - i - 0.5
        If extent is not None, x and y will be scaled to match,
        as in imshow.
        If origin is None and extent is not None, then extent
        will give the minimum and maximum values of x and y.
        ")
                        (reparse-symbol indented_block_body) [58946 60408]))                  
                :type "class")
                nil [52141 68920]))          
      :file "contour.py"
      :pointmax 68920
      :fsize 68919
      :lastmodtime '(22681 7108 707473 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module for dealing with the polylines used throughout matplotlib.

The primary class for polyline handling in matplotlib is :class:`Path`.
Almost all vector drawing makes use of Paths somewhere in the drawing
pipeline.

Whilst a :class:`Path` instance itself cannot be drawn, there exists
:class:`~matplotlib.artist.Artist` subclasses which can be used for
convenient Path visualisation - the two most frequently used of these are
:class:`~matplotlib.patches.PathPatch` and
:class:`~matplotlib.collections.PathCollection`.
\"\"\"" code nil nil [1 533])
            ("" code nil nil [558 643])
            ("six" include nil nil [645 655])
            ("math" include nil nil [657 668])
            ("weakref" include nil nil [669 708])
            ("numpy" include nil nil [710 728])
            ("numpy" include nil nil [729 749])
            ("matplotlib" include nil nil [751 779])
            ("matplotlib.cbook" include nil nil [780 845])
            ("matplotlib" include nil nil [846 877])
            ("Path" type
               (:documentation "
    :class:`Path` represents a series of possibly disconnected,
    possibly closed, line and curve segments.

    The underlying storage is made up of two parallel numpy arrays:
      - *vertices*: an Nx2 float array of vertices
      - *codes*: an N-length uint8 array of vertex types

    These two arrays always have the same length in the first
    dimension.  For example, to represent a cubic curve, you must
    provide three vertices as well as three codes ``CURVE3``.

    The code types are:

       - ``STOP``   :  1 vertex (ignored)
           A marker for the end of the entire path (currently not
           required and ignored)

       - ``MOVETO`` :  1 vertex
            Pick up the pen and move to the given vertex.

       - ``LINETO`` :  1 vertex
            Draw a line from the current position to the given vertex.

       - ``CURVE3`` :  1 control point, 1 endpoint
          Draw a quadratic Bezier curve from the current position,
          with the given control point, to the given end point.

       - ``CURVE4`` :  2 control points, 1 endpoint
          Draw a cubic Bezier curve from the current position, with
          the given control points, to the given end point.

       - ``CLOSEPOLY`` : 1 vertex (ignored)
          Draw a line segment to the start point of the current
          polyline.

    Users of Path objects should not access the vertices and codes
    arrays directly.  Instead, they should use :meth:`iter_segments`
    or :meth:`cleaned` to get the vertex/code pairs.  This is important,
    since many :class:`Path` objects, as an optimization, do not store a
    *codes* at all, but have a default one provided for them by
    :meth:`iter_segments`.

    .. note::

        The vertices and codes arrays should be treated as
        immutable -- there are a number of optimizations and assumptions
        made up front in the constructor that will not change when the
        data changes.

    "
                :superclasses ("object")
                :members 
                  ( ("STOP" variable nil (reparse-symbol indented_block_body) [2887 2895])
                    ("MOVETO" variable nil (reparse-symbol indented_block_body) [2919 2929])
                    ("LINETO" variable nil (reparse-symbol indented_block_body) [2951 2961])
                    ("CURVE3" variable nil (reparse-symbol indented_block_body) [2983 2993])
                    ("CURVE4" variable nil (reparse-symbol indented_block_body) [3017 3027])
                    ("CLOSEPOLY" variable nil (reparse-symbol indented_block_body) [3051 3065])
                    ("NUM_VERTICES_FOR_CODE" variable nil (reparse-symbol indented_block_body) [3179 3415])
                    ("code_type" variable nil (reparse-symbol indented_block_body) [3421 3441])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new path with the given vertices and codes.

        Parameters
        ----------
        vertices : array_like
            The ``(n, 2)`` float array, masked array or sequence of pairs
            representing the vertices of the path.

            If *vertices* contains masked values, they will be converted
            to NaNs which are then handled correctly by the Agg
            PathIterator and other consumers of path data, such as
            :meth:`iter_segments`.
        codes : {None, array_like}, optional
            n-length array integers representing the codes of the path.
            If not None, codes must be the same length as vertices.
            If None, *vertices* will be treated as a series of line segments.
        _interpolation_steps : int, optional
            Used as a hint to certain projections, such as Polar, that this
            path should be linearly interpolated immediately before drawing.
            This attribute is primarily an implementation detail and is not
            intended for public use.
        closed : bool, optional
            If *codes* is None and closed is True, vertices will be treated as
            line segments of a closed polygon.
        readonly : bool, optional
            Makes the path behave in an immutable way and sets the vertices
            and codes as read-only arrays.
        \"\"\"" code nil (reparse-symbol indented_block_body) [3568 4963])
                            ("if" code nil (reparse-symbol indented_block_body) [4972 5137])
                            ("if" code nil (reparse-symbol indented_block_body) [5146 5306])
                            ("if" code nil (reparse-symbol indented_block_body) [5315 6039])
                            ("self" variable nil (reparse-symbol indented_block_body) [6048 6073])
                            ("self" variable nil (reparse-symbol indented_block_body) [6082 6101])
                            ("self" variable nil (reparse-symbol indented_block_body) [6110 6158])
                            ("self" code nil (reparse-symbol indented_block_body) [6167 6188])
                            ("if" code nil (reparse-symbol indented_block_body) [6198 6437]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3460 3464])
                            ("vertices" variable nil (reparse-symbol function_parameters) [3466 3474])
                            ("codes" variable nil (reparse-symbol function_parameters) [3476 3481])
                            ("_interpolation_steps" variable nil (reparse-symbol function_parameters) [3488 3508])
                            ("closed" variable nil (reparse-symbol function_parameters) [3529 3535])
                            ("readonly" variable nil (reparse-symbol function_parameters) [3543 3551]))                          
                        :documentation "
        Create a new path with the given vertices and codes.

        Parameters
        ----------
        vertices : array_like
            The ``(n, 2)`` float array, masked array or sequence of pairs
            representing the vertices of the path.

            If *vertices* contains masked values, they will be converted
            to NaNs which are then handled correctly by the Agg
            PathIterator and other consumers of path data, such as
            :meth:`iter_segments`.
        codes : {None, array_like}, optional
            n-length array integers representing the codes of the path.
            If not None, codes must be the same length as vertices.
            If None, *vertices* will be treated as a series of line segments.
        _interpolation_steps : int, optional
            Used as a hint to certain projections, such as Polar, that this
            path should be linearly interpolated immediately before drawing.
            This attribute is primarily an implementation detail and is not
            intended for public use.
        closed : bool, optional
            If *codes* is None and closed is True, vertices will be treated as
            line segments of a closed polygon.
        readonly : bool, optional
            Makes the path behave in an immutable way and sets the vertices
            and codes as read-only arrays.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3447 6437])
                    ("_fast_from_codes_and_verts" function
                       (:documentation "
        Creates a Path instance without the expense of calling the constructor

        Parameters
        ----------
        verts : numpy array
        codes : numpy array
        internals : dict or None
            The attributes that the resulting path should have.
            Allowed keys are ``readonly``, ``should_simplify``,
            ``simplify_threshold``, ``has_nonfinite`` and
            ``interpolation_steps``.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6490 6493])
                            ("verts" variable nil (reparse-symbol function_parameters) [6495 6500])
                            ("codes" variable nil (reparse-symbol function_parameters) [6502 6507])
                            ("internals" variable nil (reparse-symbol function_parameters) [6509 6518]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6442 7998])
                    ("_update_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8022 8026]))                          )
                        (reparse-symbol indented_block_body) [8003 8372])
                    ("vertices" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8404 8408]))                          
                        :documentation "
        The list of vertices in the `Path` as an Nx2 numpy array.
        ")
                        (reparse-symbol indented_block_body) [8377 8531])
                    ("vertices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8570 8574])
                            ("vertices" variable nil (reparse-symbol function_parameters) [8576 8584]))                          
                        :decorators 
                          ( ("vertices.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8536 8752])
                    ("codes" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8781 8785]))                          
                        :documentation "
        The list of codes in the `Path` as a 1-D numpy array.  Each
        code is one of `STOP`, `MOVETO`, `LINETO`, `CURVE3`, `CURVE4`
        or `CLOSEPOLY`.  For codes that correspond to more than one
        vertex (`CURVE3` and `CURVE4`), that code will be repeated so
        that the length of `self.vertices` and `self.codes` is always
        the same.
        ")
                        (reparse-symbol indented_block_body) [8757 9203])
                    ("codes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9236 9240])
                            ("codes" variable nil (reparse-symbol function_parameters) [9242 9247]))                          
                        :decorators 
                          ( ("codes.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9208 9406])
                    ("simplify_threshold" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9448 9452]))                          
                        :documentation "
        The fraction of a pixel difference below which vertices will
        be simplified out.
        ")
                        (reparse-symbol indented_block_body) [9411 9615])
                    ("simplify_threshold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9674 9678])
                            ("threshold" variable nil (reparse-symbol function_parameters) [9680 9689]))                          
                        :decorators 
                          ( ("simplify_threshold.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9620 9737])
                    ("has_nonfinite" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9774 9778]))                          
                        :documentation "
        `True` if the vertices array has nonfinite values.
        ")
                        (reparse-symbol indented_block_body) [9742 9899])
                    ("should_simplify" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9938 9942]))                          
                        :documentation "
        `True` if the vertices array should be simplified.
        ")
                        (reparse-symbol indented_block_body) [9904 10065])
                    ("should_simplify" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10118 10122])
                            ("should_simplify" variable nil (reparse-symbol function_parameters) [10124 10139]))                          
                        :decorators 
                          ( ("should_simplify.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10070 10190])
                    ("readonly" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10222 10226]))                          
                        :documentation "
        `True` if the `Path` is read-only.
        ")
                        (reparse-symbol indented_block_body) [10195 10326])
                    ("__copy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10344 10348]))                          
                        :documentation "
        Returns a shallow copy of the `Path`, which will share the
        vertices and codes with the source `Path`.
        ")
                        (reparse-symbol indented_block_body) [10331 10544])
                    ("copy" variable nil (reparse-symbol indented_block_body) [10549 10564])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10587 10591])
                            ("memo" variable nil (reparse-symbol function_parameters) [10593 10597]))                          
                        :documentation "
        Returns a deepcopy of the `Path`.  The `Path` will not be
        readonly, even if the source `Path` is.
        ")
                        (reparse-symbol indented_block_body) [10570 10982])
                    ("deepcopy" variable nil (reparse-symbol indented_block_body) [10987 11010])
                    ("make_compound_path_from_polys" function
                       (:documentation "
        Make a compound path object to draw a number
        of polygons with equal numbers of sides XY is a (numpolys x
        numsides x 2) numpy array of vertices.  Return object is a
        :class:`Path`

        .. plot:: mpl_examples/api/histogram_path_demo.py

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [11067 11070])
                            ("XY" variable nil (reparse-symbol function_parameters) [11072 11074]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11016 12069])
                    ("make_compound_path" function
                       (:documentation "Make a compound path from a list of Path objects."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [12114 12117])
                            ("args" variable nil (reparse-symbol function_parameters) [12119 12124]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12074 12895])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12913 12917]))                          )
                        (reparse-symbol indented_block_body) [12900 12980])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12997 13001]))                          )
                        (reparse-symbol indented_block_body) [12985 13038])
                    ("iter_segments" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13061 13065])
                            ("transform" variable nil (reparse-symbol function_parameters) [13067 13076])
                            ("remove_nans" variable nil (reparse-symbol function_parameters) [13083 13094])
                            ("clip" variable nil (reparse-symbol function_parameters) [13101 13105])
                            ("snap" variable nil (reparse-symbol function_parameters) [13134 13138])
                            ("stroke_width" variable nil (reparse-symbol function_parameters) [13146 13158])
                            ("simplify" variable nil (reparse-symbol function_parameters) [13164 13172])
                            ("curves" variable nil (reparse-symbol function_parameters) [13201 13207])
                            ("sketch" variable nil (reparse-symbol function_parameters) [13214 13220]))                          
                        :documentation "
        Iterates over all of the curve segments in the path.  Each
        iteration returns a 2-tuple (*vertices*, *code*), where
        *vertices* is a sequence of 1 - 3 coordinate pairs, and *code* is
        one of the :class:`Path` codes.

        Additionally, this method can provide a number of standard
        cleanups and conversions to the path.

        Parameters
        ----------
        transform : None or :class:`~matplotlib.transforms.Transform` instance
            If not None, the given affine transformation will
            be applied to the path.
        remove_nans : {False, True}, optional
            If True, will remove all NaNs from the path and
            insert MOVETO commands to skip over them.
        clip : None or sequence, optional
            If not None, must be a four-tuple (x1, y1, x2, y2)
            defining a rectangle in which to clip the path.
        snap : None or bool, optional
            If None, auto-snap to pixels, to reduce
            fuzziness of rectilinear lines.  If True, force snapping, and
            if False, don't snap.
        stroke_width : float, optional
            The width of the stroke being drawn.  Needed
             as a hint for the snapping algorithm.
        simplify : None or bool, optional
            If True, perform simplification, to remove
             vertices that do not affect the appearance of the path.  If
             False, perform no simplification.  If None, use the
             should_simplify member variable.
        curves : {True, False}, optional
            If True, curve segments will be returned as curve
            segments.  If False, all curves will be converted to line
            segments.
        sketch : None or sequence, optional
            If not None, must be a 3-tuple of the form
            (scale, length, randomness), representing the sketch
            parameters.
        ")
                        (reparse-symbol indented_block_body) [13043 16113])
                    ("cleaned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16130 16134])
                            ("transform" variable nil (reparse-symbol function_parameters) [16136 16145])
                            ("remove_nans" variable nil (reparse-symbol function_parameters) [16152 16163])
                            ("clip" variable nil (reparse-symbol function_parameters) [16171 16175])
                            ("quantize" variable nil (reparse-symbol function_parameters) [16198 16206])
                            ("simplify" variable nil (reparse-symbol function_parameters) [16214 16222])
                            ("curves" variable nil (reparse-symbol function_parameters) [16230 16236])
                            ("stroke_width" variable nil (reparse-symbol function_parameters) [16260 16272])
                            ("snap" variable nil (reparse-symbol function_parameters) [16278 16282])
                            ("sketch" variable nil (reparse-symbol function_parameters) [16290 16296]))                          
                        :documentation "
        Cleans up the path according to the parameters returning a new
        Path instance.

        .. seealso::

            See :meth:`iter_segments` for details of the keyword arguments.

        Returns
        -------
        Path instance with cleaned up vertices and codes.

        ")
                        (reparse-symbol indented_block_body) [16118 17246])
                    ("transformed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17267 17271])
                            ("transform" variable nil (reparse-symbol function_parameters) [17273 17282]))                          
                        :documentation "
        Return a transformed copy of the path.

        .. seealso::

            :class:`matplotlib.transforms.TransformedPath`
                A specialized path class that will cache the
                transformed result and automatically update when the
                transform changes.
        ")
                        (reparse-symbol indented_block_body) [17251 17718])
                    ("contains_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17742 17746])
                            ("point" variable nil (reparse-symbol function_parameters) [17748 17753])
                            ("transform" variable nil (reparse-symbol function_parameters) [17755 17764])
                            ("radius" variable nil (reparse-symbol function_parameters) [17771 17777]))                          
                        :documentation "
        Returns *True* if the path contains the given point.

        If *transform* is not *None*, the path will be transformed
        before performing the test.

        *radius* allows the path to be made slightly larger or
        smaller.
        ")
                        (reparse-symbol indented_block_body) [17723 18272])
                    ("contains_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18297 18301])
                            ("points" variable nil (reparse-symbol function_parameters) [18303 18309])
                            ("transform" variable nil (reparse-symbol function_parameters) [18311 18320])
                            ("radius" variable nil (reparse-symbol function_parameters) [18327 18333]))                          
                        :documentation "
        Returns a bool array which is *True* if the path contains the
        corresponding point.

        If *transform* is not *None*, the path will be transformed
        before performing the test.

        *radius* allows the path to be made slightly larger or
        smaller.
        ")
                        (reparse-symbol indented_block_body) [18277 18833])
                    ("contains_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18856 18860])
                            ("path" variable nil (reparse-symbol function_parameters) [18862 18866])
                            ("transform" variable nil (reparse-symbol function_parameters) [18868 18877]))                          
                        :documentation "
        Returns *True* if this path completely contains the given path.

        If *transform* is not *None*, the path will be transformed
        before performing the test.
        ")
                        (reparse-symbol indented_block_body) [18838 19225])
                    ("get_extents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19246 19250])
                            ("transform" variable nil (reparse-symbol function_parameters) [19252 19261]))                          
                        :documentation "
        Returns the extents (*xmin*, *ymin*, *xmax*, *ymax*) of the
        path.

        Unlike computing the extents on the *vertices* alone, this
        algorithm will take into account the curves and deal with
        control points appropriately.
        ")
                        (reparse-symbol indented_block_body) [19230 19866])
                    ("intersects_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19891 19895])
                            ("other" variable nil (reparse-symbol function_parameters) [19897 19902])
                            ("filled" variable nil (reparse-symbol function_parameters) [19904 19910]))                          
                        :documentation "
        Returns *True* if this path intersects another given path.

        *filled*, when True, treats the paths as if they were filled.
        That is, if one path completely encloses the other,
        :meth:`intersects_path` will return True.
        ")
                        (reparse-symbol indented_block_body) [19871 20253])
                    ("intersects_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20278 20282])
                            ("bbox" variable nil (reparse-symbol function_parameters) [20284 20288])
                            ("filled" variable nil (reparse-symbol function_parameters) [20290 20296]))                          
                        :documentation "
        Returns *True* if this path intersects a given
        :class:`~matplotlib.transforms.Bbox`.

        *filled*, when True, treats the path as if it was filled.
        That is, if one path completely encloses the other,
        :meth:`intersects_path` will return True.
        ")
                        (reparse-symbol indented_block_body) [20258 20823])
                    ("interpolated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20845 20849])
                            ("steps" variable nil (reparse-symbol function_parameters) [20851 20856]))                          
                        :documentation "
        Returns a new path resampled to length N x steps.  Does not
        currently handle interpolating curves.
        ")
                        (reparse-symbol indented_block_body) [20828 21376])
                    ("to_polygons" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21397 21401])
                            ("transform" variable nil (reparse-symbol function_parameters) [21403 21412])
                            ("width" variable nil (reparse-symbol function_parameters) [21419 21424])
                            ("height" variable nil (reparse-symbol function_parameters) [21428 21434])
                            ("closed_only" variable nil (reparse-symbol function_parameters) [21438 21449]))                          
                        :documentation "
        Convert this path to a list of polygons or polylines.  Each
        polygon/polyline is an Nx2 array of vertices.  In other words,
        each polygon has no ``MOVETO`` instructions or curves.  This
        is useful for displaying in backends that do not support
        compound paths or Bezier curves, such as GDK.

        If *width* and *height* are both non-zero then the lines will
        be simplified so that vertices outside of (0, 0), (width,
        height) will be clipped.

        If *closed_only* is `True` (default), only closed polygons,
        with the last point being the same as the first point, will be
        returned.  Any unclosed polylines in the path will be
        explicitly closed.  If *closed_only* is `False`, any unclosed
        polygons in the path will be returned as unclosed polygons,
        and the closed polygons will be returned explicitly closed by
        setting the last point to the same as the first point.
        ")
                        (reparse-symbol indented_block_body) [21381 23261])
                    ("_unit_rectangle" variable nil (reparse-symbol indented_block_body) [23266 23288])
                    ("unit_rectangle" function
                       (:documentation "
        Return a :class:`Path` instance of the unit rectangle
        from (0, 0) to (1, 1).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [23330 23333]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23294 23808])
                    ("_unit_regular_polygons" variable nil (reparse-symbol indented_block_body) [23813 23859])
                    ("unit_regular_polygon" function
                       (:documentation "
        Return a :class:`Path` instance for a unit regular
        polygon with the given *numVertices* and radius of 1.0,
        centered at (0, 0).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [23907 23910])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [23912 23923]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23865 24906])
                    ("_unit_regular_stars" variable nil (reparse-symbol indented_block_body) [24911 24954])
                    ("unit_regular_star" function
                       (:documentation "
        Return a :class:`Path` for a unit regular star
        with the given numVertices and radius of 1.0, centered at (0,
        0).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [24999 25002])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [25004 25015])
                            ("innerCircle" variable nil (reparse-symbol function_parameters) [25017 25028]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24960 26062])
                    ("unit_regular_asterisk" function
                       (:documentation "
        Return a :class:`Path` for a unit regular
        asterisk with the given numVertices and radius of 1.0,
        centered at (0, 0).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [26110 26113])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [26115 26126]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26067 26349])
                    ("_unit_circle" variable nil (reparse-symbol indented_block_body) [26354 26373])
                    ("unit_circle" function
                       (:documentation "
        Return the readonly :class:`Path` of the unit circle.

        For most cases, :func:`Path.circle` will be what you want.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [26412 26415]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26379 26766])
                    ("circle" function
                       (:documentation "
        Return a Path representing a circle of a given radius and center.

        Parameters
        ----------
        center : pair of floats
            The center of the circle. Default ``(0, 0)``.
        radius : float
            The radius of the circle. Default is 1.
        readonly : bool
            Whether the created path should have the \"readonly\" argument
            set when creating the Path instance.

        Notes
        -----
        The circle is approximated using cubic Bezier curves.  This
        uses 8 splines around the circle using the approach presented
        here:

          Lancaster, Don.  `Approximating a Circle or an Ellipse Using Four
          Bezier Cubic Splines <http://www.tinaja.com/glib/ellipse4.pdf>`_.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [26799 26802])
                            ("center" variable nil (reparse-symbol function_parameters) [26804 26810])
                            ("radius" variable nil (reparse-symbol function_parameters) [26821 26827])
                            ("readonly" variable nil (reparse-symbol function_parameters) [26832 26840]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26771 29320])
                    ("_unit_circle_righthalf" variable nil (reparse-symbol indented_block_body) [29325 29354])
                    ("unit_circle_righthalf" function
                       (:documentation "
        Return a :class:`Path` of the right half
        of a unit circle. The circle is approximated using cubic Bezier
        curves.  This uses 4 splines around the circle using the approach
        presented here:

          Lancaster, Don.  `Approximating a Circle or an Ellipse Using Four
          Bezier Cubic Splines <http://www.tinaja.com/glib/ellipse4.pdf>`_.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [29403 29406]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [29360 30820])
                    ("arc" function
                       (:documentation "
        Return an arc on the unit circle from angle
        *theta1* to angle *theta2* (in degrees).

        If *n* is provided, it is the number of spline segments to make.
        If *n* is not provided, the number of spline segments is
        determined based on the delta between *theta1* and *theta2*.

           Masionobe, L.  2003.  `Drawing an elliptical arc using
           polylines, quadratic or cubic Bezier curves
           <http://www.spaceroots.org/documents/ellipse/index.html>`_.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [30850 30853])
                            ("theta1" variable nil (reparse-symbol function_parameters) [30855 30861])
                            ("theta2" variable nil (reparse-symbol function_parameters) [30863 30869])
                            ("n" variable nil (reparse-symbol function_parameters) [30871 30872])
                            ("is_wedge" variable nil (reparse-symbol function_parameters) [30879 30887]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [30825 33466])
                    ("wedge" function
                       (:documentation "
        Return a wedge of the unit circle from angle
        *theta1* to angle *theta2* (in degrees).

        If *n* is provided, it is the number of spline segments to make.
        If *n* is not provided, the number of spline segments is
        determined based on the delta between *theta1* and *theta2*.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [33498 33501])
                            ("theta1" variable nil (reparse-symbol function_parameters) [33503 33509])
                            ("theta2" variable nil (reparse-symbol function_parameters) [33511 33517])
                            ("n" variable nil (reparse-symbol function_parameters) [33519 33520]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33471 33910])
                    ("_hatch_dict" variable nil (reparse-symbol indented_block_body) [33915 33939])
                    ("hatch" function
                       (:documentation "
        Given a hatch specifier, *hatchpattern*, generates a Path that
        can be used in a repeated hatching pattern.  *density* is the
        number of lines per unit square.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [33972 33975])
                            ("hatchpattern" variable nil (reparse-symbol function_parameters) [33977 33989])
                            ("density" variable nil (reparse-symbol function_parameters) [33991 33998]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33945 34587])
                    ("clip_to_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34609 34613])
                            ("bbox" variable nil (reparse-symbol function_parameters) [34615 34619])
                            ("inside" variable nil (reparse-symbol function_parameters) [34621 34627]))                          
                        :documentation "
        Clip the path to the given bounding box.

        The path must be made up of one or more closed polygons.  This
        algorithm will not behave correctly for unclosed paths.

        If *inside* is `True`, clip to the inside of the box, otherwise
        to the outside of the box.
        ")
                        (reparse-symbol indented_block_body) [34592 35150]))                  
                :type "class")
                nil [880 35150])
            ("get_path_collection_extents" function
               (:documentation "
    Given a sequence of :class:`Path` objects,
    :class:`~matplotlib.transforms.Transform` objects and offsets, as
    found in a :class:`~matplotlib.collections.PathCollection`,
    returns the bounding box that encapsulates all of them.

    *master_transform* is a global transformation to apply to all paths

    *paths* is a sequence of :class:`Path` instances.

    *transforms* is a sequence of
    :class:`~matplotlib.transforms.Affine2D` instances.

    *offsets* is a sequence of (x, y) offsets (or an Nx2 array)

    *offset_transform* is a :class:`~matplotlib.transforms.Affine2D`
    to apply to the offsets before applying the offset to the path.

    The way that *paths*, *transforms* and *offsets* are combined
    follows the same method as for collections.  Each is iterated over
    independently, so if you have 3 paths, 2 transforms and 1 offset,
    their combinations are as follows:

        (A, A, A), (B, B, A), (C, A, A)
    "
                :arguments 
                  ( ("master_transform" variable nil (reparse-symbol function_parameters) [35193 35209])
                    ("paths" variable nil (reparse-symbol function_parameters) [35211 35216])
                    ("transforms" variable nil (reparse-symbol function_parameters) [35218 35228])
                    ("offsets" variable nil (reparse-symbol function_parameters) [35230 35237])
                    ("offset_transform" variable nil (reparse-symbol function_parameters) [35239 35255]))                  )
                nil [35152 36489])
            ("get_paths_extents" function
               (:documentation "
    Given a sequence of :class:`Path` objects and optional
    :class:`~matplotlib.transforms.Transform` objects, returns the
    bounding box that encapsulates all of them.

    *paths* is a sequence of :class:`Path` instances.

    *transforms* is an optional sequence of
    :class:`~matplotlib.transforms.Affine2D` instances to apply to
    each path.
    "
                :arguments 
                  ( ("paths" variable nil (reparse-symbol function_parameters) [36513 36518])
                    ("transforms" variable nil (reparse-symbol function_parameters) [36520 36530]))                  )
                nil [36491 37142])
            ("_define_deprecated_functions" function (:arguments 
              ( ("ns" variable nil (reparse-symbol function_parameters) [37177 37179]))              ) nil [37144 38052])
            ("_define_deprecated_functions" code nil nil [38054 38092]))          
      :file "path.py"
      :pointmax 38093
      :fsize 38092
      :lastmodtime '(22681 7108 739473 0)
      :unmatched-syntax '((FROM 37186 . 37190) (PERIOD 37191 . 37192) (FROM 36912 . 36916) (PERIOD 36917 . 36918) (FROM 36229 . 36233) (PERIOD 36234 . 36235) (FROM 20614 . 20618) (PERIOD 20619 . 20620) (FROM 19555 . 19559) (PERIOD 19560 . 19561)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags nil
      :file "ticker.py"
      :pointmax 79202
      :fsize 79201
      :lastmodtime '(22681 7108 703474 0)
      :unmatched-syntax '(($EOI 79202 . 79202)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
matplotlib includes a framework for arbitrary geometric
transformations that is used determine the final position of all
elements drawn on the canvas.

Transforms are composed into trees of :class:`TransformNode` objects
whose actual value depends on their children.  When the contents of
children change, their parents are automatically invalidated.  The
next time an invalidated transform is accessed, it is recomputed to
reflect those changes.  This invalidation/caching approach prevents
unnecessary recomputations of transforms, and contributes to better
interactive performance.

For example, here is a graph of the transform tree used to plot data
to the graph:

.. image:: ../_static/transforms.png

The framework can be used for both affine and non-affine
transformations.  However, for speed, we want use the backend
renderers to perform affine transformations whenever possible.
Therefore, it is possible to perform just the affine or non-affine
part of a transformation on a set of data.  The affine is always
assumed to occur after the non-affine.  For any transform::

  full transform == non-affine part + affine part

The backends are not expected to handle non-affine transformations
themselves.
\"\"\"" code nil nil [1 1221])
            ("" code nil nil [1246 1331])
            ("six" include nil nil [1333 1343])
            ("numpy" include nil nil [1345 1363])
            ("numpy" include nil nil [1364 1384])
            ("" code nil nil [1414 1488])
            ("numpy.linalg" include nil nil [1489 1517])
            ("weakref" include nil nil [1519 1558])
            ("warnings" include nil nil [1559 1574])
            ("try" code nil nil [1575 1638])
            ("cbook" include nil nil [1646 1658])
            ("Path" include nil nil [1670 1681])
            ("DEBUG" variable nil nil [1683 1696])
            ("MINFLOAT" variable nil nil [1756 1788])
            ("MaskedArray" variable nil nil [1789 1817])
            ("TransformNode" type
               (:documentation "
    :class:`TransformNode` is the base class for anything that
    participates in the transform tree and needs to invalidate its
    parents or be invalidated.  This includes classes that are not
    really transforms, such as bounding boxes, since some transforms
    depend on bounding boxes to compute their values.
    "
                :superclasses ("object")
                :members 
                  ( ("_gid" variable nil (reparse-symbol indented_block_body) [2189 2197])
                    ("INVALID_NON_AFFINE" variable nil (reparse-symbol indented_block_body) [2357 2379])
                    ("INVALID_AFFINE" variable nil (reparse-symbol indented_block_body) [2384 2402])
                    ("INVALID" code nil (reparse-symbol indented_block_body) [2407 2452])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [2562 2579])
                    ("is_bbox" variable nil (reparse-symbol indented_block_body) [2584 2599])
                    ("pass_through" variable nil (reparse-symbol indented_block_body) [2605 2625])
                    ("\"\"\"
    If pass_through is True, all ancestors will always be
    invalidated, even if 'self' is already invalid.
    \"\"\"" code nil (reparse-symbol indented_block_body) [2630 2751])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Creates a new :class:`TransformNode`.

        **shorthand_name** - a string representing the \"name\" of this
                             transform. The name carries no significance
                             other than to improve the readability of
                             ``str(transform)`` when DEBUG=True.
        \"\"\"" code nil (reparse-symbol indented_block_body) [2806 3146])
                            ("self" variable nil (reparse-symbol indented_block_body) [3318 3355])
                            ("self" variable nil (reparse-symbol indented_block_body) [3473 3490])
                            ("self" code nil (reparse-symbol indented_block_body) [3499 3542]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2770 2774])
                            ("shorthand_name" variable nil (reparse-symbol function_parameters) [2776 2790]))                          
                        :documentation "
        Creates a new :class:`TransformNode`.

        **shorthand_name** - a string representing the \"name\" of this
                             transform. The name carries no significance
                             other than to improve the readability of
                             ``str(transform)`` when DEBUG=True.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2757 3543])
                    ("if" code nil (reparse-symbol indented_block_body) [3548 3717])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3739 3743]))                          )
                        (reparse-symbol indented_block_body) [3722 3918])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3940 3944])
                            ("data_dict" variable nil (reparse-symbol function_parameters) [3946 3955]))                          )
                        (reparse-symbol indented_block_body) [3923 4120])
                    ("__copy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4138 4142])
                            ("args" variable nil (reparse-symbol function_parameters) [4144 4149]))                          )
                        (reparse-symbol indented_block_body) [4125 4295])
                    ("__deepcopy__" variable nil (reparse-symbol indented_block_body) [4299 4322])
                    ("invalidate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4343 4347]))                          
                        :documentation "
        Invalidate this :class:`TransformNode` and triggers an
        invalidation of its ancestors.  Should be called any
        time the transform changes.
        ")
                        (reparse-symbol indented_block_body) [4328 4702])
                    ("_invalidate_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4732 4736])
                            ("value" variable nil (reparse-symbol function_parameters) [4738 4743])
                            ("invalidating_node" variable nil (reparse-symbol function_parameters) [4745 4762]))                          
                        :documentation "
        Called by :meth:`invalidate` and subsequently ascends the transform
        stack calling each TransformNode's _invalidate_internal method.
        ")
                        (reparse-symbol indented_block_body) [4707 5876])
                    ("set_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5898 5902])
                            ("children" variable nil (reparse-symbol function_parameters) [5904 5913]))                          
                        :documentation "
        Set the children of the transform, to let the invalidation
        system know which transforms can invalidate this transform.
        Should be called from the constructor of any transforms that
        depend on other transforms.
        ")
                        (reparse-symbol indented_block_body) [5881 6255])
                    ("if" code nil (reparse-symbol indented_block_body) [6260 6484])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6500 6504]))                          
                        :documentation "
        Returns a frozen copy of this transform node.  The frozen copy
        will not update when its children change.  Useful for storing
        a previously known state of a transform where
        ``copy.deepcopy()`` might normally be used.
        ")
                        (reparse-symbol indented_block_body) [6489 6798])
                    ("if" code nil (reparse-symbol indented_block_body) [6803 8856]))                  
                :type "class")
                nil [1820 8856])
            ("BboxBase" type
               (:documentation "
    This is the base class of all bounding boxes, and provides
    read-only access to its data.  A mutable bounding box is provided
    by the :class:`Bbox` class.

    The canonical representation is as two points, with no
    restrictions on their ordering.  Convenience properties are
    provided to get the left, bottom, right and top edges and width
    and height, but these are not stored explicitly.
    "
                :superclasses ("TransformNode")
                :members 
                  ( ("is_bbox" variable nil (reparse-symbol indented_block_body) [9319 9333])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [9338 9354])
                    ("if" code nil (reparse-symbol indented_block_body) [9474 9847])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9863 9867]))                          )
                        (reparse-symbol indented_block_body) [9852 9916])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [9920 9958])
                    ("__array__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9978 9982])
                            ("args" variable nil (reparse-symbol function_parameters) [9984 9989])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9991 9999]))                          )
                        (reparse-symbol indented_block_body) [9964 10035])
                    ("is_unit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10052 10056]))                          
                        :documentation "
        Returns True if the :class:`Bbox` is the unit bounding box
        from (0, 0) to (1, 1).
        ")
                        (reparse-symbol indented_block_body) [10040 10250])
                    ("_get_x0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10267 10271]))                          )
                        (reparse-symbol indented_block_body) [10255 10313])
                    ("x0" variable nil (reparse-symbol indented_block_body) [10317 10580])
                    ("_get_y0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10598 10602]))                          )
                        (reparse-symbol indented_block_body) [10586 10644])
                    ("y0" variable nil (reparse-symbol indented_block_body) [10648 10911])
                    ("_get_x1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10929 10933]))                          )
                        (reparse-symbol indented_block_body) [10917 10975])
                    ("x1" variable nil (reparse-symbol indented_block_body) [10979 11246])
                    ("_get_y1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11264 11268]))                          )
                        (reparse-symbol indented_block_body) [11252 11310])
                    ("y1" variable nil (reparse-symbol indented_block_body) [11314 11581])
                    ("_get_p0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11599 11603]))                          )
                        (reparse-symbol indented_block_body) [11587 11642])
                    ("p0" variable nil (reparse-symbol indented_block_body) [11646 11891])
                    ("_get_p1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11909 11913]))                          )
                        (reparse-symbol indented_block_body) [11897 11952])
                    ("p1" variable nil (reparse-symbol indented_block_body) [11956 12200])
                    ("_get_xmin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12220 12224]))                          )
                        (reparse-symbol indented_block_body) [12206 12271])
                    ("xmin" variable nil (reparse-symbol indented_block_body) [12275 12391])
                    ("_get_ymin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12411 12415]))                          )
                        (reparse-symbol indented_block_body) [12397 12462])
                    ("ymin" variable nil (reparse-symbol indented_block_body) [12466 12584])
                    ("_get_xmax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12604 12608]))                          )
                        (reparse-symbol indented_block_body) [12590 12655])
                    ("xmax" variable nil (reparse-symbol indented_block_body) [12659 12776])
                    ("_get_ymax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12796 12800]))                          )
                        (reparse-symbol indented_block_body) [12782 12847])
                    ("ymax" variable nil (reparse-symbol indented_block_body) [12851 12966])
                    ("_get_min" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12985 12989]))                          )
                        (reparse-symbol indented_block_body) [12972 13084])
                    ("min" variable nil (reparse-symbol indented_block_body) [13088 13218])
                    ("_get_max" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13237 13241]))                          )
                        (reparse-symbol indented_block_body) [13224 13336])
                    ("max" variable nil (reparse-symbol indented_block_body) [13340 13460])
                    ("_get_intervalx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13485 13489]))                          )
                        (reparse-symbol indented_block_body) [13466 13531])
                    ("intervalx" variable nil (reparse-symbol indented_block_body) [13535 13759])
                    ("_get_intervaly" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13784 13788]))                          )
                        (reparse-symbol indented_block_body) [13765 13830])
                    ("intervaly" variable nil (reparse-symbol indented_block_body) [13834 14059])
                    ("_get_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14080 14084]))                          )
                        (reparse-symbol indented_block_body) [14065 14165])
                    ("width" variable nil (reparse-symbol indented_block_body) [14169 14323])
                    ("_get_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14345 14349]))                          )
                        (reparse-symbol indented_block_body) [14329 14430])
                    ("height" variable nil (reparse-symbol indented_block_body) [14434 14591])
                    ("_get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14611 14615]))                          )
                        (reparse-symbol indented_block_body) [14597 14690])
                    ("size" variable nil (reparse-symbol indented_block_body) [14694 14880])
                    ("_get_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14902 14906]))                          )
                        (reparse-symbol indented_block_body) [14886 15004])
                    ("bounds" variable nil (reparse-symbol indented_block_body) [15008 15150])
                    ("_get_extents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15173 15177]))                          )
                        (reparse-symbol indented_block_body) [15156 15230])
                    ("extents" variable nil (reparse-symbol indented_block_body) [15234 15371])
                    ("get_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15392 15396]))                          )
                        (reparse-symbol indented_block_body) [15377 15436])
                    ("containsx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15455 15459])
                            ("x" variable nil (reparse-symbol function_parameters) [15461 15462]))                          
                        :documentation "
        Returns True if *x* is between or equal to :attr:`x0` and
        :attr:`x1`.
        ")
                        (reparse-symbol indented_block_body) [15441 15718])
                    ("containsy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15737 15741])
                            ("y" variable nil (reparse-symbol function_parameters) [15743 15744]))                          
                        :documentation "
        Returns True if *y* is between or equal to :attr:`y0` and
        :attr:`y1`.
        ")
                        (reparse-symbol indented_block_body) [15723 16000])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16018 16022])
                            ("x" variable nil (reparse-symbol function_parameters) [16024 16025])
                            ("y" variable nil (reparse-symbol function_parameters) [16027 16028]))                          
                        :documentation "
        Returns *True* if (*x*, *y*) is a coordinate inside the
        bounding box or on its edge.
        ")
                        (reparse-symbol indented_block_body) [16005 16211])
                    ("overlaps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16229 16233])
                            ("other" variable nil (reparse-symbol function_parameters) [16235 16240]))                          
                        :documentation "
        Returns True if this bounding box overlaps with the given
        bounding box *other*.
        ")
                        (reparse-symbol indented_block_body) [16216 16922])
                    ("fully_containsx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16947 16951])
                            ("x" variable nil (reparse-symbol function_parameters) [16953 16954]))                          
                        :documentation "
        Returns True if *x* is between but not equal to :attr:`x0` and
        :attr:`x1`.
        ")
                        (reparse-symbol indented_block_body) [16927 17211])
                    ("fully_containsy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17236 17240])
                            ("y" variable nil (reparse-symbol function_parameters) [17242 17243]))                          
                        :documentation "
        Returns True if *y* is between but not equal to :attr:`y0` and
        :attr:`y1`.
        ")
                        (reparse-symbol indented_block_body) [17216 17500])
                    ("fully_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17524 17528])
                            ("x" variable nil (reparse-symbol function_parameters) [17530 17531])
                            ("y" variable nil (reparse-symbol function_parameters) [17533 17534]))                          
                        :documentation "
        Returns True if (*x*, *y*) is a coordinate inside the bounding
        box, but not on its edge.
        ")
                        (reparse-symbol indented_block_body) [17505 17747])
                    ("fully_overlaps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17771 17775])
                            ("other" variable nil (reparse-symbol function_parameters) [17777 17782]))                          
                        :documentation "
        Returns True if this bounding box overlaps with the given
        bounding box *other*, but not on its edge alone.
        ")
                        (reparse-symbol indented_block_body) [17752 18391])
                    ("transformed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18412 18416])
                            ("transform" variable nil (reparse-symbol function_parameters) [18418 18427]))                          
                        :documentation "
        Return a new :class:`Bbox` object, statically transformed by
        the given transform.
        ")
                        (reparse-symbol indented_block_body) [18396 18747])
                    ("inverse_transformed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18776 18780])
                            ("transform" variable nil (reparse-symbol function_parameters) [18782 18791]))                          
                        :documentation "
        Return a new :class:`Bbox` object, statically transformed by
        the inverse of the given transform.
        ")
                        (reparse-symbol indented_block_body) [18752 18985])
                    ("coefs" variable nil (reparse-symbol indented_block_body) [18990 19252])
                    ("anchored" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19271 19275])
                            ("c" variable nil (reparse-symbol function_parameters) [19277 19278])
                            ("container" variable nil (reparse-symbol function_parameters) [19280 19289]))                          
                        :documentation "
        Return a copy of the :class:`Bbox`, shifted to position *c*
        within a container.

        *c*: may be either:

          * a sequence (*cx*, *cy*) where *cx* and *cy* range from 0
            to 1, where 0 is left or bottom and 1 is right or top

          * a string:
            - 'C' for centered
            - 'S' for bottom-center
            - 'SE' for bottom-left
            - 'E' for left
            - etc.

        Optional argument *container* is the box within which the
        :class:`Bbox` is positioned; it defaults to the initial
        :class:`Bbox`.
        ")
                        (reparse-symbol indented_block_body) [19258 20279])
                    ("shrunk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20295 20299])
                            ("mx" variable nil (reparse-symbol function_parameters) [20301 20303])
                            ("my" variable nil (reparse-symbol function_parameters) [20305 20307]))                          
                        :documentation "
        Return a copy of the :class:`Bbox`, shrunk by the factor *mx*
        in the *x* direction and the factor *my* in the *y* direction.
        The lower left corner of the box remains unchanged.  Normally
        *mx* and *my* will be less than 1, but this is not enforced.
        ")
                        (reparse-symbol indented_block_body) [20284 20734])
                    ("shrunk_to_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20760 20764])
                            ("box_aspect" variable nil (reparse-symbol function_parameters) [20766 20776])
                            ("container" variable nil (reparse-symbol function_parameters) [20778 20787])
                            ("fig_aspect" variable nil (reparse-symbol function_parameters) [20794 20804]))                          
                        :documentation "
        Return a copy of the :class:`Bbox`, shrunk so that it is as
        large as it can be while having the desired aspect ratio,
        *box_aspect*.  If the box coordinates are relative---that
        is, fractions of a larger box such as a figure---then the
        physical aspect ratio of that figure is specified with
        *fig_aspect*, so that *box_aspect* can also be given as a
        ratio of the absolute dimensions, not the relative dimensions.
        ")
                        (reparse-symbol indented_block_body) [20739 21755])
                    ("splitx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21771 21775])
                            ("args" variable nil (reparse-symbol function_parameters) [21777 21782]))                          
                        :documentation "
        e.g., ``bbox.splitx(f1, f2, ...)``

        Returns a list of new :class:`Bbox` objects formed by
        splitting the original one with vertical lines at fractional
        positions *f1*, *f2*, ...
        ")
                        (reparse-symbol indented_block_body) [21760 22278])
                    ("splity" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22294 22298])
                            ("args" variable nil (reparse-symbol function_parameters) [22300 22305]))                          
                        :documentation "
        e.g., ``bbox.splitx(f1, f2, ...)``

        Returns a list of new :class:`Bbox` objects formed by
        splitting the original one with horizontal lines at fractional
        positions *f1*, *f2*, ...
        ")
                        (reparse-symbol indented_block_body) [22283 22803])
                    ("count_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22827 22831])
                            ("vertices" variable nil (reparse-symbol function_parameters) [22833 22841]))                          
                        :documentation "
        Count the number of vertices contained in the :class:`Bbox`.

        *vertices* is a Nx2 Numpy array.
        ")
                        (reparse-symbol indented_block_body) [22808 23436])
                    ("count_overlaps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23460 23464])
                            ("bboxes" variable nil (reparse-symbol function_parameters) [23466 23472]))                          
                        :documentation "
        Count the number of bounding boxes that overlap this one.

        bboxes is a sequence of :class:`BboxBase` objects
        ")
                        (reparse-symbol indented_block_body) [23441 23734])
                    ("expanded" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23752 23756])
                            ("sw" variable nil (reparse-symbol function_parameters) [23758 23760])
                            ("sh" variable nil (reparse-symbol function_parameters) [23762 23764]))                          
                        :documentation "
        Return a new :class:`Bbox` which is this :class:`Bbox`
        expanded around its center by the given factors *sw* and
        *sh*.
        ")
                        (reparse-symbol indented_block_body) [23739 24178])
                    ("padded" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24194 24198])
                            ("p" variable nil (reparse-symbol function_parameters) [24200 24201]))                          
                        :documentation "
        Return a new :class:`Bbox` that is padded on all four sides by
        the given value.
        ")
                        (reparse-symbol indented_block_body) [24183 24408])
                    ("translated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24428 24432])
                            ("tx" variable nil (reparse-symbol function_parameters) [24434 24436])
                            ("ty" variable nil (reparse-symbol function_parameters) [24438 24440]))                          
                        :documentation "
        Return a copy of the :class:`Bbox`, statically translated by
        *tx* and *ty*.
        ")
                        (reparse-symbol indented_block_body) [24413 24604])
                    ("corners" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24621 24625]))                          
                        :documentation "
        Return an array of points which are the four corners of this
        rectangle.  For example, if this :class:`Bbox` is defined by
        the points (*a*, *b*) and (*c*, *d*), :meth:`corners` returns
        (*a*, *b*), (*a*, *d*), (*c*, *b*) and (*c*, *d*).
        ")
                        (reparse-symbol indented_block_body) [24609 25026])
                    ("rotated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25043 25047])
                            ("radians" variable nil (reparse-symbol function_parameters) [25049 25056]))                          
                        :documentation "
        Return a new bounding box that bounds a rotated version of
        this bounding box by the given radians.  The new bounding box
        is still aligned with the axes, of course.
        ")
                        (reparse-symbol indented_block_body) [25031 25486])
                    ("union" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("bboxes" variable nil (reparse-symbol function_parameters) [25519 25525]))                          
                        :documentation "
        Return a :class:`Bbox` that contains all of the given bboxes.
        ")
                        (reparse-symbol indented_block_body) [25491 26175])
                    ("intersection" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("bbox1" variable nil (reparse-symbol function_parameters) [26215 26220])
                            ("bbox2" variable nil (reparse-symbol function_parameters) [26222 26227]))                          
                        :documentation "
        Return the intersection of the two bboxes or None
        if they do not intersect.

        Implements the algorithm described at:

            http://www.tekpool.com/node/2687

        ")
                        (reparse-symbol indented_block_body) [26180 26937]))                  
                :type "class")
                nil [8858 26937])
            ("Bbox" type
               (:documentation "
    A mutable bounding box.
    "
                :superclasses ("BboxBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *points*: a 2x2 numpy array of the form [[x0, y0], [x1, y1]]

        If you need to create a :class:`Bbox` object from another form
        of data, consider the static methods :meth:`unit`,
        :meth:`from_bounds` and :meth:`from_extents`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [27056 27325])
                            ("BboxBase" code nil (reparse-symbol indented_block_body) [27334 27367])
                            ("points" variable nil (reparse-symbol indented_block_body) [27376 27414])
                            ("if" code nil (reparse-symbol indented_block_body) [27423 27570])
                            ("self" variable nil (reparse-symbol indented_block_body) [27578 27599])
                            ("self" variable nil (reparse-symbol indented_block_body) [27608 27649])
                            ("self" variable nil (reparse-symbol indented_block_body) [27658 27677])
                            ("self" variable nil (reparse-symbol indented_block_body) [27857 27896]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27023 27027])
                            ("points" variable nil (reparse-symbol function_parameters) [27029 27035])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27037 27045]))                          
                        :documentation "
        *points*: a 2x2 numpy array of the form [[x0, y0], [x1, y1]]

        If you need to create a :class:`Bbox` object from another form
        of data, consider the static methods :meth:`unit`,
        :meth:`from_bounds` and :meth:`from_extents`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27010 27897])
                    ("if" code nil (reparse-symbol indented_block_body) [27901 28176])
                    ("unit" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        (staticmethod) Create a new unit :class:`Bbox` from (0, 0) to
        (1, 1).
        ")
                        (reparse-symbol indented_block_body) [28181 28387])
                    ("null" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        (staticmethod) Create a new null :class:`Bbox` from (inf, inf) to
        (-inf, -inf).
        ")
                        (reparse-symbol indented_block_body) [28392 28622])
                    ("from_bounds" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("x0" variable nil (reparse-symbol function_parameters) [28661 28663])
                            ("y0" variable nil (reparse-symbol function_parameters) [28665 28667])
                            ("width" variable nil (reparse-symbol function_parameters) [28669 28674])
                            ("height" variable nil (reparse-symbol function_parameters) [28676 28682]))                          
                        :documentation "
        (staticmethod) Create a new :class:`Bbox` from *x0*, *y0*,
        *width* and *height*.

        *width* and *height* may be negative.
        ")
                        (reparse-symbol indented_block_body) [28627 28919])
                    ("from_extents" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [28959 28964]))                          
                        :documentation "
        (staticmethod) Create a new Bbox from *left*, *bottom*,
        *right* and *top*.

        The *y*-axis increases upwards.
        ")
                        (reparse-symbol indented_block_body) [28924 29214])
                    ("__format__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29234 29238])
                            ("fmt" variable nil (reparse-symbol function_parameters) [29240 29243]))                          )
                        (reparse-symbol indented_block_body) [29219 29374])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29391 29395]))                          )
                        (reparse-symbol indented_block_body) [29379 29430])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29448 29452]))                          )
                        (reparse-symbol indented_block_body) [29435 29528])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29544 29548])
                            ("value" variable nil (reparse-symbol function_parameters) [29550 29555]))                          
                        :documentation "
        Set whether the existing bounds of the box should be ignored
        by subsequent calls to :meth:`update_from_data_xy`.

        *value*:

           - When True, subsequent calls to :meth:`update_from_data_xy`
             will ignore the existing bounds of the :class:`Bbox`.

           - When False, subsequent calls to :meth:`update_from_data_xy`
             will include the existing bounds of the :class:`Bbox`.
        ")
                        (reparse-symbol indented_block_body) [29533 30040])
                    ("" code nil (reparse-symbol indented_block_body) [30062 30104])
                    ("update_from_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30130 30134])
                            ("x" variable nil (reparse-symbol function_parameters) [30136 30137])
                            ("y" variable nil (reparse-symbol function_parameters) [30139 30140])
                            ("ignore" variable nil (reparse-symbol function_parameters) [30142 30148]))                          
                        :documentation "
        Update the bounds of the :class:`Bbox` based on the passed in
        data.  After updating, the bounds will have positive *width*
        and *height*; *x0* and *y0* will be the minimal values.

        *x*: a numpy array of *x*-values

        *y*: a numpy array of *y*-values

        *ignore*:
           - when True, ignore the existing bounds of the :class:`Bbox`.
           - when False, include the existing bounds of the :class:`Bbox`.
           - when None, use the last value passed to :meth:`ignore`.
        ")
                        (reparse-symbol indented_block_body) [30109 30965])
                    ("update_from_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30991 30995])
                            ("path" variable nil (reparse-symbol function_parameters) [30997 31001])
                            ("ignore" variable nil (reparse-symbol function_parameters) [31003 31009])
                            ("updatex" variable nil (reparse-symbol function_parameters) [31016 31023])
                            ("updatey" variable nil (reparse-symbol function_parameters) [31030 31037]))                          
                        :documentation "
        Update the bounds of the :class:`Bbox` based on the passed in
        data.  After updating, the bounds will have positive *width*
        and *height*; *x0* and *y0* will be the minimal values.

        *path*: a :class:`~matplotlib.path.Path` instance

        *ignore*:
           - when True, ignore the existing bounds of the :class:`Bbox`.
           - when False, include the existing bounds of the :class:`Bbox`.
           - when None, use the last value passed to :meth:`ignore`.

        *updatex*: when True, update the x values

        *updatey*: when True, update the y values

        ")
                        (reparse-symbol indented_block_body) [30970 32190])
                    ("update_from_data_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32219 32223])
                            ("xy" variable nil (reparse-symbol function_parameters) [32225 32227])
                            ("ignore" variable nil (reparse-symbol function_parameters) [32229 32235])
                            ("updatex" variable nil (reparse-symbol function_parameters) [32242 32249])
                            ("updatey" variable nil (reparse-symbol function_parameters) [32256 32263]))                          
                        :documentation "
        Update the bounds of the :class:`Bbox` based on the passed in
        data.  After updating, the bounds will have positive *width*
        and *height*; *x0* and *y0* will be the minimal values.

        *xy*: a numpy array of 2D points

        *ignore*:
           - when True, ignore the existing bounds of the :class:`Bbox`.
           - when False, include the existing bounds of the :class:`Bbox`.
           - when None, use the last value passed to :meth:`ignore`.

        *updatex*: when True, update the x values

        *updatey*: when True, update the y values
        ")
                        (reparse-symbol indented_block_body) [32195 33068])
                    ("_set_x0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33085 33089])
                            ("val" variable nil (reparse-symbol function_parameters) [33091 33094]))                          )
                        (reparse-symbol indented_block_body) [33073 33156])
                    ("x0" variable nil (reparse-symbol indented_block_body) [33160 33200])
                    ("_set_y0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33218 33222])
                            ("val" variable nil (reparse-symbol function_parameters) [33224 33227]))                          )
                        (reparse-symbol indented_block_body) [33206 33289])
                    ("y0" variable nil (reparse-symbol indented_block_body) [33293 33333])
                    ("_set_x1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33351 33355])
                            ("val" variable nil (reparse-symbol function_parameters) [33357 33360]))                          )
                        (reparse-symbol indented_block_body) [33339 33422])
                    ("x1" variable nil (reparse-symbol indented_block_body) [33426 33466])
                    ("_set_y1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33484 33488])
                            ("val" variable nil (reparse-symbol function_parameters) [33490 33493]))                          )
                        (reparse-symbol indented_block_body) [33472 33555])
                    ("y1" variable nil (reparse-symbol indented_block_body) [33559 33599])
                    ("_set_p0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33617 33621])
                            ("val" variable nil (reparse-symbol function_parameters) [33623 33626]))                          )
                        (reparse-symbol indented_block_body) [33605 33685])
                    ("p0" variable nil (reparse-symbol indented_block_body) [33689 33729])
                    ("_set_p1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33747 33751])
                            ("val" variable nil (reparse-symbol function_parameters) [33753 33756]))                          )
                        (reparse-symbol indented_block_body) [33735 33815])
                    ("p1" variable nil (reparse-symbol indented_block_body) [33819 33859])
                    ("_set_intervalx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33884 33888])
                            ("interval" variable nil (reparse-symbol function_parameters) [33890 33898]))                          )
                        (reparse-symbol indented_block_body) [33865 33965])
                    ("intervalx" variable nil (reparse-symbol indented_block_body) [33969 34030])
                    ("_set_intervaly" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34055 34059])
                            ("interval" variable nil (reparse-symbol function_parameters) [34061 34069]))                          )
                        (reparse-symbol indented_block_body) [34036 34136])
                    ("intervaly" variable nil (reparse-symbol indented_block_body) [34140 34201])
                    ("_set_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34223 34227])
                            ("bounds" variable nil (reparse-symbol function_parameters) [34229 34235]))                          )
                        (reparse-symbol indented_block_body) [34207 34436])
                    ("bounds" variable nil (reparse-symbol indented_block_body) [34440 34492])
                    ("_get_minpos" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34514 34518]))                          )
                        (reparse-symbol indented_block_body) [34498 34549])
                    ("minpos" variable nil (reparse-symbol indented_block_body) [34553 34583])
                    ("_get_minposx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34606 34610]))                          )
                        (reparse-symbol indented_block_body) [34589 34644])
                    ("minposx" variable nil (reparse-symbol indented_block_body) [34648 34680])
                    ("_get_minposy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34703 34707]))                          )
                        (reparse-symbol indented_block_body) [34686 34741])
                    ("minposy" variable nil (reparse-symbol indented_block_body) [34745 34777])
                    ("get_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34798 34802]))                          
                        :documentation "
        Get the points of the bounding box directly as a numpy array
        of the form: [[x0, y0], [x1, y1]].
        ")
                        (reparse-symbol indented_block_body) [34783 34995])
                    ("set_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35015 35019])
                            ("points" variable nil (reparse-symbol function_parameters) [35021 35027]))                          
                        :documentation "
        Set the points of the bounding box directly from a numpy array
        of the form: [[x0, y0], [x1, y1]].  No error checking is
        performed, as this method is mainly for internal use.
        ")
                        (reparse-symbol indented_block_body) [35000 35359])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35372 35376])
                            ("other" variable nil (reparse-symbol function_parameters) [35378 35383]))                          
                        :documentation "
        Set this bounding box from the \"frozen\" bounds of another
        :class:`Bbox`.
        ")
                        (reparse-symbol indented_block_body) [35364 35630])
                    ("mutated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35647 35651]))                          )
                        (reparse-symbol indented_block_body) [35635 35761])
                    ("mutatedx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35779 35783]))                          )
                        (reparse-symbol indented_block_body) [35766 35976])
                    ("mutatedy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35994 35998]))                          )
                        (reparse-symbol indented_block_body) [35981 36191]))                  
                :type "class")
                nil [26939 36191])
            ("TransformedBbox" type
               (:documentation "
    A :class:`Bbox` that is automatically transformed by a given
    transform.  When either the child bounding box or transform
    changes, the bounds of this bbox will update accordingly.
    "
                :superclasses ("BboxBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *bbox*: a child :class:`Bbox`

        *transform*: a 2D :class:`Transform`
        \"\"\"" code nil (reparse-symbol indented_block_body) [36492 36591])
                            ("if" code nil (reparse-symbol indented_block_body) [36600 36674])
                            ("if" code nil (reparse-symbol indented_block_body) [36682 36869])
                            ("if" code nil (reparse-symbol indented_block_body) [36877 37048])
                            ("BboxBase" code nil (reparse-symbol indented_block_body) [37057 37090])
                            ("self" variable nil (reparse-symbol indented_block_body) [37099 37116])
                            ("self" variable nil (reparse-symbol indented_block_body) [37125 37152])
                            ("self" code nil (reparse-symbol indented_block_body) [37161 37195])
                            ("self" variable nil (reparse-symbol indented_block_body) [37204 37223]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36450 36454])
                            ("bbox" variable nil (reparse-symbol function_parameters) [36456 36460])
                            ("transform" variable nil (reparse-symbol function_parameters) [36462 36471])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [36473 36481]))                          
                        :documentation "
        *bbox*: a child :class:`Bbox`

        *transform*: a 2D :class:`Transform`
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36437 37224])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37242 37246]))                          )
                        (reparse-symbol indented_block_body) [37229 37322])
                    ("get_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37342 37346]))                          )
                        (reparse-symbol indented_block_body) [37327 38234])
                    ("get_points" variable nil (reparse-symbol indented_block_body) [38238 38282])
                    ("if" code nil (reparse-symbol indented_block_body) [38288 38460]))                  
                :type "class")
                nil [36193 38460])
            ("Transform" type
               (:documentation "
    The base class of all :class:`TransformNode` instances that
    actually perform a transformation.

    All non-affine transformations should be subclasses of this class.
    New affine transformations should be subclasses of
    :class:`Affine2D`.

    Subclasses of this class should override the following members (at
    minimum):

      - :attr:`input_dims`
      - :attr:`output_dims`
      - :meth:`transform`
      - :attr:`is_separable`
      - :attr:`has_inverse`
      - :meth:`inverted` (if :attr:`has_inverse` is True)

    If the transform needs to do something non-standard with
    :class:`matplotlib.path.Path` objects, such as adding curves
    where there were once line segments, it should override:

      - :meth:`transform_path`
    "
                :superclasses ("TransformNode")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [39270 39287])
                    ("\"\"\"
    The number of input dimensions of this transform.
    Must be overridden (with integers) in the subclass.
    \"\"\"" code nil (reparse-symbol indented_block_body) [39292 39413])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [39419 39437])
                    ("\"\"\"
    The number of output dimensions of this transform.
    Must be overridden (with integers) in the subclass.
    \"\"\"" code nil (reparse-symbol indented_block_body) [39442 39564])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [39570 39589])
                    ("\"\"\"True if this transform has a corresponding inverse transform.\"\"\"" code nil (reparse-symbol indented_block_body) [39594 39661])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [39667 39687])
                    ("\"\"\"True if this transform is separable in the x- and y- dimensions.\"\"\"" code nil (reparse-symbol indented_block_body) [39692 39762])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39780 39784])
                            ("other" variable nil (reparse-symbol function_parameters) [39786 39791]))                          
                        :documentation "
        Composes two transforms together such that *self* is followed
        by *other*.
        ")
                        (reparse-symbol indented_block_body) [39768 40108])
                    ("__radd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40126 40130])
                            ("other" variable nil (reparse-symbol function_parameters) [40132 40137]))                          
                        :documentation "
        Composes two transforms together such that *self* is followed
        by *other*.
        ")
                        (reparse-symbol indented_block_body) [40113 40454])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40470 40474])
                            ("other" variable nil (reparse-symbol function_parameters) [40476 40481]))                          )
                        (reparse-symbol indented_block_body) [40459 40688])
                    ("_iter_break_from_left_to_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40728 40732]))                          
                        :documentation "
        Returns an iterator breaking down this transform stack from left to
        right recursively. If self == ((A, N), A) then the result will be an
        iterator which yields I : ((A, N), A), followed by A : (N, A),
        followed by (A, N) : (A), but not ((A, N), A) : I.

        This is equivalent to flattening the stack then yielding
        ``flat_stack[:i], flat_stack[i:]`` where i=0..(n-1).

        ")
                        (reparse-symbol indented_block_body) [40693 41210])
                    ("depth" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41239 41243]))                          
                        :documentation "
        Returns the number of transforms which have been chained
        together to form this Transform instance.

        .. note::

            For the special case of a Composite transform, the maximum depth
            of the two is returned.

        ")
                        (reparse-symbol indented_block_body) [41215 41536])
                    ("contains_branch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41561 41565])
                            ("other" variable nil (reparse-symbol function_parameters) [41567 41572]))                          
                        :documentation "
        Return whether the given transform is a sub-tree of this transform.

        This routine uses transform equality to identify sub-trees, therefore
        in many situations it is object id which will be used.

        For the case where the given transform represents the whole
        of this transform, returns True.

        ")
                        (reparse-symbol indented_block_body) [41541 42210])
                    ("contains_branch_seperately" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42246 42250])
                            ("other_transform" variable nil (reparse-symbol function_parameters) [42252 42267]))                          
                        :documentation "
        Returns whether the given branch is a sub-tree of this transform on
        each seperate dimension.

        A common use for this method is to identify if a transform is a blended
        transform containing an axes' data transform. e.g.::

            x_isdata, y_isdata = trans.contains_branch_seperately(ax.transData)

        ")
                        (reparse-symbol indented_block_body) [42215 42984])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43001 43005])
                            ("other" variable nil (reparse-symbol function_parameters) [43007 43012]))                          
                        :documentation "
        Returns a transform stack which goes all the way down self's transform
        stack, and then ascends back up other's stack. If it can, this is
        optimised::

            # normally
            A - B == a + b.inverted()

            # sometimes, when A contains the tree B there is no need to
            # descend all the way down to the base of A (via B), instead we
            # can just stop at B.

            (A + B) - (B)^-1 == A

            # similarly, when B contains tree A, we can avoid decending A at
            # all, basically:
            A - (A + B) == ((B + A) - A).inverted() or B^-1

        For clarity, the result of ``(A + B) - B + B == (A + B)``.

        ")
                        (reparse-symbol indented_block_body) [42989 44747])
                    ("__array__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44766 44770])
                            ("args" variable nil (reparse-symbol function_parameters) [44772 44777])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [44779 44787]))                          
                        :documentation "
        Array interface to get at this Transform's affine matrix.
        ")
                        (reparse-symbol indented_block_body) [44752 44926])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44945 44949])
                            ("values" variable nil (reparse-symbol function_parameters) [44951 44957]))                          
                        :documentation "
        Performs the transformation on the given array of values.

        Accepts a numpy array of shape (N x :attr:`input_dims`) and
        returns a numpy array of shape (N x :attr:`output_dims`).

        Alternatively, accepts a numpy array of length :attr:`input_dims`
        and returns a numpy array of length :attr:`output_dims`.
        ")
                        (reparse-symbol indented_block_body) [44931 46144])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46170 46174])
                            ("values" variable nil (reparse-symbol function_parameters) [46176 46182]))                          
                        :documentation "
        Performs only the affine part of this transformation on the
        given array of values.

        ``transform(values)`` is always equivalent to
        ``transform_affine(transform_non_affine(values))``.

        In non-affine transformations, this is generally a no-op.  In
        affine transformations, this is equivalent to
        ``transform(values)``.

        Accepts a numpy array of shape (N x :attr:`input_dims`) and
        returns a numpy array of shape (N x :attr:`output_dims`).

        Alternatively, accepts a numpy array of length :attr:`input_dims`
        and returns a numpy array of length :attr:`output_dims`.
        ")
                        (reparse-symbol indented_block_body) [46149 46905])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46935 46939])
                            ("values" variable nil (reparse-symbol function_parameters) [46941 46947]))                          
                        :documentation "
        Performs only the non-affine part of the transformation.

        ``transform(values)`` is always equivalent to
        ``transform_affine(transform_non_affine(values))``.

        In non-affine transformations, this is generally equivalent to
        ``transform(values)``.  In affine transformations, this is
        always a no-op.

        Accepts a numpy array of shape (N x :attr:`input_dims`) and
        returns a numpy array of shape (N x :attr:`output_dims`).

        Alternatively, accepts a numpy array of length :attr:`input_dims`
        and returns a numpy array of length :attr:`output_dims`.
        ")
                        (reparse-symbol indented_block_body) [46910 47614])
                    ("transform_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47638 47642])
                            ("bbox" variable nil (reparse-symbol function_parameters) [47644 47648]))                          
                        :documentation "
        Transform the given bounding box.

        Note, for smarter transforms including caching (a common
        requirement for matplotlib figures), see :class:`TransformedBbox`.
        ")
                        (reparse-symbol indented_block_body) [47619 47913])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47933 47937]))                          
                        :documentation "
        Get the affine part of this transform.
        ")
                        (reparse-symbol indented_block_body) [47918 48046])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48066 48070]))                          
                        :documentation "
        Get the Affine transformation array for the affine part
        of this transform.

        ")
                        (reparse-symbol indented_block_body) [48051 48235])
                    ("transform_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48260 48264])
                            ("point" variable nil (reparse-symbol function_parameters) [48266 48271]))                          
                        :documentation "
        A convenience function that returns the transformed copy of a
        single point.

        The point is given as a sequence of length :attr:`input_dims`.
        The transformed point is returned as a sequence of length
        :attr:`output_dims`.
        ")
                        (reparse-symbol indented_block_body) [48240 48755])
                    ("transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48779 48783])
                            ("path" variable nil (reparse-symbol function_parameters) [48785 48789]))                          
                        :documentation "
        Returns a transformed path.

        *path*: a :class:`~matplotlib.path.Path` instance.

        In some cases, this transform may insert curves into the path
        that began as line segments.
        ")
                        (reparse-symbol indented_block_body) [48760 49100])
                    ("transform_path_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49131 49135])
                            ("path" variable nil (reparse-symbol function_parameters) [49137 49141]))                          
                        :documentation "
        Returns a path, transformed only by the affine part of
        this transform.

        *path*: a :class:`~matplotlib.path.Path` instance.

        ``transform_path(path)`` is equivalent to
        ``transform_path_affine(transform_path_non_affine(values))``.
        ")
                        (reparse-symbol indented_block_body) [49105 49497])
                    ("transform_path_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49532 49536])
                            ("path" variable nil (reparse-symbol function_parameters) [49538 49542]))                          
                        :documentation "
        Returns a path, transformed only by the non-affine
        part of this transform.

        *path*: a :class:`~matplotlib.path.Path` instance.

        ``transform_path(path)`` is equivalent to
        ``transform_path_affine(transform_path_non_affine(values))``.
        ")
                        (reparse-symbol indented_block_body) [49502 50082])
                    ("transform_angles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50108 50112])
                            ("angles" variable nil (reparse-symbol function_parameters) [50114 50120])
                            ("pts" variable nil (reparse-symbol function_parameters) [50122 50125])
                            ("radians" variable nil (reparse-symbol function_parameters) [50127 50134])
                            ("pushoff" variable nil (reparse-symbol function_parameters) [50142 50149]))                          
                        :documentation "
        Performs transformation on a set of angles anchored at
        specific locations.

        The *angles* must be a column vector (i.e., numpy array).

        The *pts* must be a two-column numpy array of x,y positions
        (angle transforms currently only work in 2D).  This array must
        have the same number of rows as *angles*.

        *radians* indicates whether or not input angles are given in
         radians (True) or degrees (False; the default).

        *pushoff* is the distance to move away from *pts* for
         determining transformed angles (see discussion of method
         below).

        The transformed angles are returned in an array with the same
        size as *angles*.

        The generic version of this method uses a very generic
        algorithm that transforms *pts*, as well as locations very
        close to *pts*, to find the angle in the transformed system.
        ")
                        (reparse-symbol indented_block_body) [50087 52113])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52131 52135]))                          
                        :documentation "
        Return the corresponding inverse transformation.

        The return value of this method should be treated as
        temporary.  An update to *self* does not cause a corresponding
        update to its inverted copy.

        ``x === self.inverted().transform(self.transform(x))``
        ")
                        (reparse-symbol indented_block_body) [52118 52489]))                  
                :type "class")
                nil [38462 52489])
            ("TransformWrapper" type
               (:documentation "
    A helper class that holds a single child transform and acts
    equivalently to it.

    This is useful if a node of the transform tree must be replaced at
    run time with a transform of a different type.  This class allows
    that replacement to correctly trigger invalidation.

    Note that :class:`TransformWrapper` instances must have the same
    input and output dimensions during their entire lifetime, so the
    child transform may only be replaced with another child transform
    of the same dimensions.
    "
                :superclasses ("Transform")
                :members 
                  ( ("pass_through" variable nil (reparse-symbol indented_block_body) [53069 53088])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *child*: A class:`Transform` instance.  This child may later
        be replaced with :meth:`set`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [53129 53251])
                            ("if" code nil (reparse-symbol indented_block_body) [53260 53439])
                            ("self" code nil (reparse-symbol indented_block_body) [53447 53464])
                            ("self" code nil (reparse-symbol indented_block_body) [53473 53497]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53107 53111])
                            ("child" variable nil (reparse-symbol function_parameters) [53113 53118]))                          
                        :documentation "
        *child*: A class:`Transform` instance.  This child may later
        be replaced with :meth:`set`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [53094 53498])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53513 53517])
                            ("child" variable nil (reparse-symbol function_parameters) [53519 53524]))                          )
                        (reparse-symbol indented_block_body) [53503 53699])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53715 53719])
                            ("other" variable nil (reparse-symbol function_parameters) [53721 53726]))                          )
                        (reparse-symbol indented_block_body) [53704 53770])
                    ("if" code nil (reparse-symbol indented_block_body) [53775 53849])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53965 53969]))                          )
                        (reparse-symbol indented_block_body) [53948 54301])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54323 54327])
                            ("state" variable nil (reparse-symbol function_parameters) [54329 54334]))                          )
                        (reparse-symbol indented_block_body) [54306 54739])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54757 54761]))                          )
                        (reparse-symbol indented_block_body) [54744 54816])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54832 54836]))                          )
                        (reparse-symbol indented_block_body) [54821 54875])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [54879 54920])
                    ("_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54935 54939])
                            ("child" variable nil (reparse-symbol function_parameters) [54941 54946]))                          )
                        (reparse-symbol indented_block_body) [54926 55451])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55676 55680])
                            ("child" variable nil (reparse-symbol function_parameters) [55682 55687]))                          
                        :documentation "
        Replace the current child of this transform with another one.

        The new child must have the same number of input and output
        dimensions as the current child.
        ")
                        (reparse-symbol indented_block_body) [55668 56310])
                    ("_get_is_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56334 56338]))                          )
                        (reparse-symbol indented_block_body) [56315 56378])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [56382 56418])
                    ("_get_is_separable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56446 56450]))                          )
                        (reparse-symbol indented_block_body) [56424 56493])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [56497 56539])
                    ("_get_has_inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56566 56570]))                          )
                        (reparse-symbol indented_block_body) [56545 56612])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [56616 56656]))                  
                :type "class")
                nil [52491 56657])
            ("AffineBase" type
               (:documentation "
    The base class of all affine transformations of any number of
    dimensions.
    "
                :superclasses ("Transform")
                :members 
                  ( ("is_affine" variable nil (reparse-symbol indented_block_body) [56790 56806])
                    ("__init__" function
                       (:suite 
                          ( ("Transform" code nil (reparse-symbol indented_block_body) [56857 56898])
                            ("self" variable nil (reparse-symbol indented_block_body) [56907 56928]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56825 56829])
                            ("args" variable nil (reparse-symbol function_parameters) [56831 56836])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [56838 56846]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [56812 56929])
                    ("__array__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56948 56952])
                            ("args" variable nil (reparse-symbol function_parameters) [56954 56959])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [56961 56969]))                          )
                        (reparse-symbol indented_block_body) [56934 57078])
                    ("_concat" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("a" variable nil (reparse-symbol function_parameters) [57113 57114])
                            ("b" variable nil (reparse-symbol function_parameters) [57116 57117]))                          
                        :documentation "
        Concatenates two transformation matrices (represented as numpy
        arrays) together.
        ")
                        (reparse-symbol indented_block_body) [57083 57269])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57285 57289])
                            ("other" variable nil (reparse-symbol function_parameters) [57291 57296]))                          )
                        (reparse-symbol indented_block_body) [57274 57443])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57462 57466])
                            ("values" variable nil (reparse-symbol function_parameters) [57468 57474]))                          )
                        (reparse-symbol indented_block_body) [57448 57522])
                    ("transform" variable nil (reparse-symbol indented_block_body) [57526 57573])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57600 57604])
                            ("values" variable nil (reparse-symbol function_parameters) [57606 57612]))                          )
                        (reparse-symbol indented_block_body) [57579 57736])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [57740 57801])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57832 57836])
                            ("points" variable nil (reparse-symbol function_parameters) [57838 57844]))                          )
                        (reparse-symbol indented_block_body) [57807 57869])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [57873 57942])
                    ("transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57967 57971])
                            ("path" variable nil (reparse-symbol function_parameters) [57973 57977]))                          )
                        (reparse-symbol indented_block_body) [57948 58028])
                    ("transform_path" variable nil (reparse-symbol indented_block_body) [58032 58089])
                    ("transform_path_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58121 58125])
                            ("path" variable nil (reparse-symbol function_parameters) [58127 58131]))                          )
                        (reparse-symbol indented_block_body) [58095 58251])
                    ("transform_path_affine" variable nil (reparse-symbol indented_block_body) [58255 58326])
                    ("transform_path_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58362 58366])
                            ("path" variable nil (reparse-symbol function_parameters) [58368 58372]))                          )
                        (reparse-symbol indented_block_body) [58332 58395])
                    ("transform_path_non_affine" variable nil (reparse-symbol indented_block_body) [58399 58478])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58499 58503]))                          )
                        (reparse-symbol indented_block_body) [58484 58526])
                    ("get_affine" variable nil (reparse-symbol indented_block_body) [58530 58579]))                  
                :type "class")
                nil [56659 58580])
            ("Affine2DBase" type
               (:documentation "
    The base class of all 2D affine transformations.

    2D affine transformations are performed using a 3x3 numpy array::

        a c e
        b d f
        0 0 1

    This class provides the read-only interface.  For a mutable 2D
    affine transformation, use :class:`Affine2D`.

    Subclasses of this class will generally only need to override a
    constructor and :meth:`get_matrix` that generates a custom 3x3 matrix.
    "
                :superclasses ("AffineBase")
                :members 
                  ( ("has_inverse" variable nil (reparse-symbol indented_block_body) [59063 59081])
                    ("input_dims" variable nil (reparse-symbol indented_block_body) [59087 59101])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [59106 59121])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59138 59142]))                          )
                        (reparse-symbol indented_block_body) [59127 59195])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [59199 59241])
                    ("_get_is_separable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59269 59273]))                          )
                        (reparse-symbol indented_block_body) [59247 59361])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [59365 59407])
                    ("to_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59427 59431]))                          
                        :documentation "
        Return the values of the matrix as a sequence (a,b,c,d,e,f)
        ")
                        (reparse-symbol indented_block_body) [59413 59613])
                    ("matrix_from_values" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("a" variable nil (reparse-symbol function_parameters) [59659 59660])
                            ("b" variable nil (reparse-symbol function_parameters) [59662 59663])
                            ("c" variable nil (reparse-symbol function_parameters) [59665 59666])
                            ("d" variable nil (reparse-symbol function_parameters) [59668 59669])
                            ("e" variable nil (reparse-symbol function_parameters) [59671 59672])
                            ("f" variable nil (reparse-symbol function_parameters) [59674 59675]))                          
                        :documentation "
        (staticmethod) Create a new transformation matrix as a 3x3
        numpy array of the form::

          a c e
          b d f
          0 0 1
        ")
                        (reparse-symbol indented_block_body) [59618 59928])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59954 59958])
                            ("points" variable nil (reparse-symbol function_parameters) [59960 59966]))                          )
                        (reparse-symbol indented_block_body) [59933 60215])
                    ("transform_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60240 60244])
                            ("point" variable nil (reparse-symbol function_parameters) [60246 60251]))                          )
                        (reparse-symbol indented_block_body) [60220 60335])
                    ("transform_point" variable nil (reparse-symbol indented_block_body) [60339 60399])
                    ("if" code nil (reparse-symbol indented_block_body) [60405 61052])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [61056 61118])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61137 61141]))                          )
                        (reparse-symbol indented_block_body) [61124 61507])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [61511 61557]))                  
                :type "class")
                nil [58582 61558])
            ("Affine2D" type
               (:documentation "
    A mutable 2D affine transformation.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize an Affine transform from a 3x3 numpy float array::

          a c e
          b d f
          0 0 1

        If *matrix* is None, initialize with the identity transform.
        \"\"\"" code nil (reparse-symbol indented_block_body) [61702 61906])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [61915 61952])
                            ("if" code nil (reparse-symbol indented_block_body) [61961 62129])
                            ("self" variable nil (reparse-symbol indented_block_body) [62137 62155])
                            ("self" variable nil (reparse-symbol indented_block_body) [62164 62181]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61664 61668])
                            ("matrix" variable nil (reparse-symbol function_parameters) [61670 61676])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [61683 61691]))                          
                        :documentation "
        Initialize an Affine transform from a 3x3 numpy float array::

          a c e
          b d f
          0 0 1

        If *matrix* is None, initialize with the identity transform.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [61651 62182])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62200 62204]))                          )
                        (reparse-symbol indented_block_body) [62187 62255])
                    ("from_values" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("a" variable nil (reparse-symbol function_parameters) [62524 62525])
                            ("b" variable nil (reparse-symbol function_parameters) [62527 62528])
                            ("c" variable nil (reparse-symbol function_parameters) [62530 62531])
                            ("d" variable nil (reparse-symbol function_parameters) [62533 62534])
                            ("e" variable nil (reparse-symbol function_parameters) [62536 62537])
                            ("f" variable nil (reparse-symbol function_parameters) [62539 62540]))                          
                        :documentation "
        (staticmethod) Create a new Affine2D instance from the given
        values::

          a c e
          b d f
          0 0 1

        .
        ")
                        (reparse-symbol indented_block_body) [62490 62835])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62855 62859]))                          
                        :documentation "
        Get the underlying transformation matrix as a 3x3 numpy array::

          a c e
          b d f
          0 0 1

        .
        ")
                        (reparse-symbol indented_block_body) [62840 63069])
                    ("set_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63089 63093])
                            ("mtx" variable nil (reparse-symbol function_parameters) [63095 63098]))                          
                        :documentation "
        Set the underlying transformation matrix from a 3x3 numpy array::

          a c e
          b d f
          0 0 1

        .
        ")
                        (reparse-symbol indented_block_body) [63074 63309])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63322 63326])
                            ("other" variable nil (reparse-symbol function_parameters) [63328 63333]))                          
                        :documentation "
        Set this transformation from the frozen copy of another
        :class:`Affine2DBase` object.
        ")
                        (reparse-symbol indented_block_body) [63314 63720])
                    ("identity" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        (staticmethod) Return a new :class:`Affine2D` object that is
        the identity transform.

        Unless this transform will be mutated later on, consider using
        the faster :class:`IdentityTransform` class instead.
        ")
                        (reparse-symbol indented_block_body) [63725 64057])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64072 64076]))                          
                        :documentation "
        Reset the underlying matrix to the identity transform.
        ")
                        (reparse-symbol indented_block_body) [64062 64247])
                    ("rotate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64263 64267])
                            ("theta" variable nil (reparse-symbol function_parameters) [64269 64274]))                          
                        :documentation "
        Add a rotation (in radians) to this transform in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [64252 64795])
                    ("rotate_deg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64815 64819])
                            ("degrees" variable nil (reparse-symbol function_parameters) [64821 64828]))                          
                        :documentation "
        Add a rotation (in degrees) to this transform in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [64800 65140])
                    ("rotate_around" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65163 65167])
                            ("x" variable nil (reparse-symbol function_parameters) [65169 65170])
                            ("y" variable nil (reparse-symbol function_parameters) [65172 65173])
                            ("theta" variable nil (reparse-symbol function_parameters) [65175 65180]))                          
                        :documentation "
        Add a rotation (in radians) around the point (x, y) in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [65145 65515])
                    ("rotate_deg_around" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65542 65546])
                            ("x" variable nil (reparse-symbol function_parameters) [65548 65549])
                            ("y" variable nil (reparse-symbol function_parameters) [65551 65552])
                            ("degrees" variable nil (reparse-symbol function_parameters) [65554 65561]))                          
                        :documentation "
        Add a rotation (in degrees) around the point (x, y) in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [65520 65902])
                    ("translate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65921 65925])
                            ("tx" variable nil (reparse-symbol function_parameters) [65927 65929])
                            ("ty" variable nil (reparse-symbol function_parameters) [65931 65933]))                          
                        :documentation "
        Adds a translation in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [65907 66386])
                    ("scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66401 66405])
                            ("sx" variable nil (reparse-symbol function_parameters) [66407 66409])
                            ("sy" variable nil (reparse-symbol function_parameters) [66411 66413]))                          
                        :documentation "
        Adds a scale in place.

        If *sy* is None, the same scale is applied in both the *x*- and
        *y*-directions.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [66391 66997])
                    ("skew" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67011 67015])
                            ("xShear" variable nil (reparse-symbol function_parameters) [67017 67023])
                            ("yShear" variable nil (reparse-symbol function_parameters) [67025 67031]))                          
                        :documentation "
        Adds a skew in place.

        *xShear* and *yShear* are the shear angles along the *x*- and
        *y*-axes, respectively, in radians.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [67002 67654])
                    ("skew_deg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67672 67676])
                            ("xShear" variable nil (reparse-symbol function_parameters) [67678 67684])
                            ("yShear" variable nil (reparse-symbol function_parameters) [67686 67692]))                          
                        :documentation "
        Adds a skew in place.

        *xShear* and *yShear* are the shear angles along the *x*- and
        *y*-axes, respectively, in degrees.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [67659 68099])
                    ("_get_is_separable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68126 68130]))                          )
                        (reparse-symbol indented_block_body) [68104 68218])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [68222 68264]))                  
                :type "class")
                nil [61560 68265])
            ("IdentityTransform" type
               (:documentation "
    A special class that does one thing, the identity transform, in a
    fast way.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("_mtx" variable nil (reparse-symbol indented_block_body) [68410 68431])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68448 68452]))                          )
                        (reparse-symbol indented_block_body) [68437 68475])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [68479 68523])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68542 68546]))                          )
                        (reparse-symbol indented_block_body) [68529 68586])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68606 68610]))                          )
                        (reparse-symbol indented_block_body) [68591 68638])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [68642 68694])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68714 68718])
                            ("points" variable nil (reparse-symbol function_parameters) [68720 68726]))                          )
                        (reparse-symbol indented_block_body) [68700 68766])
                    ("transform" variable nil (reparse-symbol indented_block_body) [68770 68820])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [68826 68854])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [68859 68923])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [68929 68961])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [68966 69038])
                    ("transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69063 69067])
                            ("path" variable nil (reparse-symbol function_parameters) [69069 69073]))                          )
                        (reparse-symbol indented_block_body) [69044 69096])
                    ("transform_path" variable nil (reparse-symbol indented_block_body) [69100 69160])
                    ("transform_path_affine" variable nil (reparse-symbol indented_block_body) [69166 69204])
                    ("transform_path_affine" variable nil (reparse-symbol indented_block_body) [69209 69283])
                    ("transform_path_non_affine" variable nil (reparse-symbol indented_block_body) [69289 69331])
                    ("transform_path_non_affine" variable nil (reparse-symbol indented_block_body) [69336 69418])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69439 69443]))                          )
                        (reparse-symbol indented_block_body) [69424 69466])
                    ("get_affine" variable nil (reparse-symbol indented_block_body) [69470 69522])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [69528 69549])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [69554 69602]))                  
                :type "class")
                nil [68267 69603])
            ("BlendedGenericTransform" type
               (:documentation "
    A \"blended\" transform uses one transform for the *x*-direction, and
    another transform for the *y*-direction.

    This \"generic\" version can handle any given child transform in the
    *x*- and *y*-directions.
    "
                :superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [69885 69899])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [69904 69919])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [69924 69943])
                    ("pass_through" variable nil (reparse-symbol indented_block_body) [69948 69967])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new \"blended\" transform using *x_transform* to
        transform the *x*-axis and *y_transform* to transform the
        *y*-axis.

        You will generally not call this constructor directly but use
        the :func:`blended_transform_factory` function instead, which
        can determine automatically which kind of blended transform to
        create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [70037 70428])
                            ("Transform" code nil (reparse-symbol indented_block_body) [70478 70512])
                            ("self" variable nil (reparse-symbol indented_block_body) [70521 70542])
                            ("self" variable nil (reparse-symbol indented_block_body) [70551 70572])
                            ("self" code nil (reparse-symbol indented_block_body) [70581 70624])
                            ("self" variable nil (reparse-symbol indented_block_body) [70633 70652]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69986 69990])
                            ("x_transform" variable nil (reparse-symbol function_parameters) [69992 70003])
                            ("y_transform" variable nil (reparse-symbol function_parameters) [70005 70016])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [70018 70026]))                          
                        :documentation "
        Create a new \"blended\" transform using *x_transform* to
        transform the *x*-axis and *y_transform* to transform the
        *y*-axis.

        You will generally not call this constructor directly but use
        the :func:`blended_transform_factory` function instead, which
        can determine automatically which kind of blended transform to
        create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [69973 70653])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70669 70673])
                            ("other" variable nil (reparse-symbol function_parameters) [70675 70680]))                          )
                        (reparse-symbol indented_block_body) [70658 71005])
                    ("contains_branch_seperately" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71041 71045])
                            ("transform" variable nil (reparse-symbol function_parameters) [71047 71056]))                          )
                        (reparse-symbol indented_block_body) [71010 71229])
                    ("depth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71258 71262]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [71234 71316])
                    ("contains_branch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71341 71345])
                            ("other" variable nil (reparse-symbol function_parameters) [71347 71352]))                          )
                        (reparse-symbol indented_block_body) [71321 71470])
                    ("_get_is_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71494 71498]))                          )
                        (reparse-symbol indented_block_body) [71475 71556])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [71560 71596])
                    ("_get_has_inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71623 71627]))                          )
                        (reparse-symbol indented_block_body) [71602 71689])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [71693 71733])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71750 71754]))                          )
                        (reparse-symbol indented_block_body) [71739 71834])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [71838 71879])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71898 71902]))                          )
                        (reparse-symbol indented_block_body) [71885 71974])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72004 72008])
                            ("points" variable nil (reparse-symbol function_parameters) [72010 72016]))                          )
                        (reparse-symbol indented_block_body) [71979 72898])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [72902 72971])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72990 72994]))                          )
                        (reparse-symbol indented_block_body) [72977 73076])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [73080 73125])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73146 73150]))                          )
                        (reparse-symbol indented_block_body) [73131 73772])
                    ("get_affine" variable nil (reparse-symbol indented_block_body) [73776 73825]))                  
                :type "class")
                nil [69605 73826])
            ("BlendedAffine2D" type
               (:documentation "
    A \"blended\" transform uses one transform for the *x*-direction, and
    another transform for the *y*-direction.

    This version is an optimization for the case where both child
    transforms are of type :class:`Affine2DBase`.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [74119 74138])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new \"blended\" transform using *x_transform* to
        transform the *x*-axis and *y_transform* to transform the
        *y*-axis.

        Both *x_transform* and *y_transform* must be 2D affine
        transforms.

        You will generally not call this constructor directly but use
        the :func:`blended_transform_factory` function instead, which
        can determine automatically which kind of blended transform to
        create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [74208 74683])
                            ("is_affine" code nil (reparse-symbol indented_block_body) [74692 74751])
                            ("is_separable" code nil (reparse-symbol indented_block_body) [74760 74828])
                            ("is_correct" code nil (reparse-symbol indented_block_body) [74837 74876])
                            ("if" code nil (reparse-symbol indented_block_body) [74885 75049])
                            ("Transform" code nil (reparse-symbol indented_block_body) [75058 75092])
                            ("self" variable nil (reparse-symbol indented_block_body) [75101 75122])
                            ("self" variable nil (reparse-symbol indented_block_body) [75131 75152])
                            ("self" code nil (reparse-symbol indented_block_body) [75161 75204])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [75214 75241])
                            ("self" variable nil (reparse-symbol indented_block_body) [75250 75266]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74157 74161])
                            ("x_transform" variable nil (reparse-symbol function_parameters) [74163 74174])
                            ("y_transform" variable nil (reparse-symbol function_parameters) [74176 74187])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [74189 74197]))                          
                        :documentation "
        Create a new \"blended\" transform using *x_transform* to
        transform the *x*-axis and *y_transform* to transform the
        *y*-axis.

        Both *x_transform* and *y_transform* must be 2D affine
        transforms.

        You will generally not call this constructor directly but use
        the :func:`blended_transform_factory` function instead, which
        can determine automatically which kind of blended transform to
        create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [74144 75267])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75283 75287])
                            ("other" variable nil (reparse-symbol function_parameters) [75289 75294]))                          )
                        (reparse-symbol indented_block_body) [75272 75627])
                    ("contains_branch_seperately" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75663 75667])
                            ("transform" variable nil (reparse-symbol function_parameters) [75669 75678]))                          )
                        (reparse-symbol indented_block_body) [75632 75852])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75870 75874]))                          )
                        (reparse-symbol indented_block_body) [75857 75938])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75958 75962]))                          )
                        (reparse-symbol indented_block_body) [75943 76523])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [76527 76579]))                  
                :type "class")
                nil [73828 76580])
            ("blended_transform_factory" function
               (:documentation "
    Create a new \"blended\" transform using *x_transform* to transform
    the *x*-axis and *y_transform* to transform the *y*-axis.

    A faster version of the blended transform is returned for the case
    where both child transforms are affine.
    "
                :arguments 
                  ( ("x_transform" variable nil (reparse-symbol function_parameters) [76612 76623])
                    ("y_transform" variable nil (reparse-symbol function_parameters) [76625 76636]))                  )
                nil [76582 77119])
            ("CompositeGenericTransform" type
               (:documentation "
    A composite transform formed by applying transform *a* then
    transform *b*.

    This \"generic\" version can handle any two arbitrary
    transformations.
    "
                :superclasses ("Transform")
                :members 
                  ( ("pass_through" variable nil (reparse-symbol indented_block_body) [77346 77365])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new composite transform that is the result of
        applying transform *a* then transform *b*.

        You will generally not call this constructor directly but use
        the :func:`composite_transform_factory` function instead,
        which can automatically choose the best kind of composite
        transform instance to create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [77415 77785])
                            ("if" code nil (reparse-symbol indented_block_body) [77794 77979])
                            ("self" variable nil (reparse-symbol indented_block_body) [77987 78017])
                            ("self" variable nil (reparse-symbol indented_block_body) [78026 78058])
                            ("Transform" code nil (reparse-symbol indented_block_body) [78068 78102])
                            ("self" variable nil (reparse-symbol indented_block_body) [78111 78122])
                            ("self" variable nil (reparse-symbol indented_block_body) [78131 78142])
                            ("self" code nil (reparse-symbol indented_block_body) [78151 78174]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77384 77388])
                            ("a" variable nil (reparse-symbol function_parameters) [77390 77391])
                            ("b" variable nil (reparse-symbol function_parameters) [77393 77394])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [77396 77404]))                          
                        :documentation "
        Create a new composite transform that is the result of
        applying transform *a* then transform *b*.

        You will generally not call this constructor directly but use
        the :func:`composite_transform_factory` function instead,
        which can automatically choose the best kind of composite
        transform instance to create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [77371 78175])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [78180 78254])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78271 78275]))                          )
                        (reparse-symbol indented_block_body) [78260 78504])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [78508 78549])
                    ("_invalidate_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78580 78584])
                            ("value" variable nil (reparse-symbol function_parameters) [78586 78591])
                            ("invalidating_node" variable nil (reparse-symbol function_parameters) [78593 78610]))                          )
                        (reparse-symbol indented_block_body) [78555 79314])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79330 79334])
                            ("other" variable nil (reparse-symbol function_parameters) [79336 79341]))                          )
                        (reparse-symbol indented_block_body) [79319 79543])
                    ("_iter_break_from_left_to_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79583 79587]))                          )
                        (reparse-symbol indented_block_body) [79548 79876])
                    ("depth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79905 79909]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [79881 79957])
                    ("_get_is_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79981 79985]))                          )
                        (reparse-symbol indented_block_body) [79962 80043])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [80047 80083])
                    ("_get_is_separable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80111 80115]))                          )
                        (reparse-symbol indented_block_body) [80089 80179])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [80183 80225])
                    ("if" code nil (reparse-symbol indented_block_body) [80231 80319])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80337 80341]))                          )
                        (reparse-symbol indented_block_body) [80324 80416])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80442 80446])
                            ("points" variable nil (reparse-symbol function_parameters) [80448 80454]))                          )
                        (reparse-symbol indented_block_body) [80421 80508])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [80512 80573])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80604 80608])
                            ("points" variable nil (reparse-symbol function_parameters) [80610 80616]))                          )
                        (reparse-symbol indented_block_body) [80579 80933])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [80937 81006])
                    ("transform_path_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81042 81046])
                            ("path" variable nil (reparse-symbol function_parameters) [81048 81052]))                          )
                        (reparse-symbol indented_block_body) [81012 81382])
                    ("transform_path_non_affine" variable nil (reparse-symbol indented_block_body) [81386 81465])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81486 81490]))                          )
                        (reparse-symbol indented_block_body) [81471 81719])
                    ("get_affine" variable nil (reparse-symbol indented_block_body) [81723 81772])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81791 81795]))                          )
                        (reparse-symbol indented_block_body) [81778 81879])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [81883 81928])
                    ("_get_has_inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81955 81959]))                          )
                        (reparse-symbol indented_block_body) [81934 82021])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [82025 82065]))                  
                :type "class")
                nil [77121 82066])
            ("CompositeAffine2D" type
               (:documentation "
    A composite transform formed by applying transform *a* then transform *b*.

    This version is an optimization that handles the case where both *a*
    and *b* are 2D affines.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new composite transform that is the result of
        applying transform *a* then transform *b*.

        Both *a* and *b* must be instances of :class:`Affine2DBase`.

        You will generally not call this constructor directly but use
        the :func:`composite_transform_factory` function instead,
        which can automatically choose the best kind of composite
        transform instance to create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [82352 82792])
                            ("if" code nil (reparse-symbol indented_block_body) [82801 82910])
                            ("if" code nil (reparse-symbol indented_block_body) [82918 83103])
                            ("self" variable nil (reparse-symbol indented_block_body) [83111 83141])
                            ("self" variable nil (reparse-symbol indented_block_body) [83150 83182])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [83192 83229])
                            ("self" variable nil (reparse-symbol indented_block_body) [83238 83249])
                            ("self" variable nil (reparse-symbol indented_block_body) [83258 83269])
                            ("self" code nil (reparse-symbol indented_block_body) [83278 83301])
                            ("self" variable nil (reparse-symbol indented_block_body) [83310 83326]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82321 82325])
                            ("a" variable nil (reparse-symbol function_parameters) [82327 82328])
                            ("b" variable nil (reparse-symbol function_parameters) [82330 82331])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [82333 82341]))                          
                        :documentation "
        Create a new composite transform that is the result of
        applying transform *a* then transform *b*.

        Both *a* and *b* must be instances of :class:`Affine2DBase`.

        You will generally not call this constructor directly but use
        the :func:`composite_transform_factory` function instead,
        which can automatically choose the best kind of composite
        transform instance to create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [82308 83327])
                    ("if" code nil (reparse-symbol indented_block_body) [83332 83420])
                    ("depth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83449 83453]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [83425 83501])
                    ("_iter_break_from_left_to_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83541 83545]))                          )
                        (reparse-symbol indented_block_body) [83506 83834])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83852 83856]))                          )
                        (reparse-symbol indented_block_body) [83839 83923])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83943 83947]))                          )
                        (reparse-symbol indented_block_body) [83928 84173])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [84177 84229]))                  
                :type "class")
                nil [82068 84230])
            ("composite_transform_factory" function
               (:documentation "
    Create a new composite transform that is the result of applying
    transform a then transform b.

    Shortcut versions of the blended transform are provided for the
    case where both child transforms are affine, or one or the other
    is the identity transform.

    Composite transforms may also be created using the '+' operator,
    e.g.::

      c = a + b
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [84264 84265])
                    ("b" variable nil (reparse-symbol function_parameters) [84267 84268]))                  )
                nil [84232 85163])
            ("BboxTransform" type
               (:documentation "
    :class:`BboxTransform` linearly transforms points from one
    :class:`Bbox` to another :class:`Bbox`.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [85327 85346])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new :class:`BboxTransform` that linearly transforms
        points from *boxin* to *boxout*.
        \"\"\"" code nil (reparse-symbol indented_block_body) [85405 85530])
                            ("if" code nil (reparse-symbol indented_block_body) [85539 85671])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [85680 85717])
                            ("self" variable nil (reparse-symbol indented_block_body) [85726 85745])
                            ("self" variable nil (reparse-symbol indented_block_body) [85754 85775])
                            ("self" code nil (reparse-symbol indented_block_body) [85784 85816])
                            ("self" variable nil (reparse-symbol indented_block_body) [85825 85841])
                            ("self" variable nil (reparse-symbol indented_block_body) [85850 85871]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85365 85369])
                            ("boxin" variable nil (reparse-symbol function_parameters) [85371 85376])
                            ("boxout" variable nil (reparse-symbol function_parameters) [85378 85384])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [85386 85394]))                          
                        :documentation "
        Create a new :class:`BboxTransform` that linearly transforms
        points from *boxin* to *boxout*.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [85352 85872])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85890 85894]))                          )
                        (reparse-symbol indented_block_body) [85877 85966])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85986 85990]))                          )
                        (reparse-symbol indented_block_body) [85971 86690])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [86694 86746]))                  
                :type "class")
                nil [85165 86747])
            ("BboxTransformTo" type
               (:documentation "
    :class:`BboxTransformTo` is a transformation that linearly
    transforms points from the unit bounding box to a given
    :class:`Bbox`.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [86948 86967])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new :class:`BboxTransformTo` that linearly transforms
        points from the unit bounding box to *boxout*.
        \"\"\"" code nil (reparse-symbol indented_block_body) [87019 87160])
                            ("if" code nil (reparse-symbol indented_block_body) [87169 87246])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [87255 87292])
                            ("self" variable nil (reparse-symbol indented_block_body) [87301 87322])
                            ("self" code nil (reparse-symbol indented_block_body) [87331 87356])
                            ("self" variable nil (reparse-symbol indented_block_body) [87365 87381])
                            ("self" variable nil (reparse-symbol indented_block_body) [87390 87411]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86986 86990])
                            ("boxout" variable nil (reparse-symbol function_parameters) [86992 86998])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [87000 87008]))                          
                        :documentation "
        Create a new :class:`BboxTransformTo` that linearly transforms
        points from the unit bounding box to *boxout*.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [86973 87412])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87430 87434]))                          )
                        (reparse-symbol indented_block_body) [87417 87491])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87511 87515]))                          )
                        (reparse-symbol indented_block_body) [87496 88028])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [88032 88084]))                  
                :type "class")
                nil [86749 88085])
            ("BboxTransformToMaxOnly" type
               (:documentation "
    :class:`BboxTransformTo` is a transformation that linearly
    transforms points from the unit bounding box to a given
    :class:`Bbox` with a fixed upper left of (0, 0).
    "
                :superclasses ("BboxTransformTo")
                :members 
                  ( ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88343 88347]))                          )
                        (reparse-symbol indented_block_body) [88330 88411])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88431 88435]))                          )
                        (reparse-symbol indented_block_body) [88416 88927])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [88931 88983]))                  
                :type "class")
                nil [88087 88984])
            ("BboxTransformFrom" type
               (:documentation "
    :class:`BboxTransformFrom` linearly transforms points from a given
    :class:`Bbox` to the unit bounding box.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [89160 89179])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [89230 89305])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [89314 89351])
                            ("self" variable nil (reparse-symbol indented_block_body) [89360 89379])
                            ("self" code nil (reparse-symbol indented_block_body) [89388 89412])
                            ("self" variable nil (reparse-symbol indented_block_body) [89421 89437])
                            ("self" variable nil (reparse-symbol indented_block_body) [89446 89467]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89198 89202])
                            ("boxin" variable nil (reparse-symbol function_parameters) [89204 89209])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [89211 89219]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [89185 89468])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89486 89490]))                          )
                        (reparse-symbol indented_block_body) [89473 89548])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89568 89572]))                          )
                        (reparse-symbol indented_block_body) [89553 90189])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [90193 90245]))                  
                :type "class")
                nil [88986 90246])
            ("ScaledTranslation" type
               (:documentation "
    A transformation that translates by *xt* and *yt*, after *xt* and *yt*
    have been transformad by the given transform *scale_trans*.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Affine2DBase" code nil (reparse-symbol indented_block_body) [90505 90542])
                            ("self" variable nil (reparse-symbol indented_block_body) [90551 90569])
                            ("self" variable nil (reparse-symbol indented_block_body) [90578 90609])
                            ("self" code nil (reparse-symbol indented_block_body) [90618 90648])
                            ("self" variable nil (reparse-symbol indented_block_body) [90657 90673])
                            ("self" variable nil (reparse-symbol indented_block_body) [90682 90703]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90459 90463])
                            ("xt" variable nil (reparse-symbol function_parameters) [90465 90467])
                            ("yt" variable nil (reparse-symbol function_parameters) [90469 90471])
                            ("scale_trans" variable nil (reparse-symbol function_parameters) [90473 90484])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [90486 90494]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [90446 90704])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90722 90726]))                          )
                        (reparse-symbol indented_block_body) [90709 90781])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90801 90805]))                          )
                        (reparse-symbol indented_block_body) [90786 91186])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [91190 91242]))                  
                :type "class")
                nil [90248 91243])
            ("TransformedPath" type
               (:documentation "
    A :class:`TransformedPath` caches a non-affine transformed copy of
    the :class:`~matplotlib.path.Path`.  This cached copy is
    automatically updated when the non-affine part of the transform
    changes.

    .. note::

        Paths are considered immutable by this class. Any update to the
        path's vertices/codes will not trigger a transform recomputation.

    "
                :superclasses ("TransformNode")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new :class:`TransformedPath` from the given
        :class:`~matplotlib.path.Path` and :class:`Transform`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [91724 91863])
                            ("if" code nil (reparse-symbol indented_block_body) [91872 92059])
                            ("TransformNode" code nil (reparse-symbol indented_block_body) [92067 92095])
                            ("self" variable nil (reparse-symbol indented_block_body) [92105 92122])
                            ("self" variable nil (reparse-symbol indented_block_body) [92131 92158])
                            ("self" code nil (reparse-symbol indented_block_body) [92167 92195])
                            ("self" variable nil (reparse-symbol indented_block_body) [92204 92233])
                            ("self" variable nil (reparse-symbol indented_block_body) [92242 92273]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91692 91696])
                            ("path" variable nil (reparse-symbol function_parameters) [91698 91702])
                            ("transform" variable nil (reparse-symbol function_parameters) [91704 91713]))                          
                        :documentation "
        Create a new :class:`TransformedPath` from the given
        :class:`~matplotlib.path.Path` and :class:`Transform`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [91679 92274])
                    ("_revalidate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92295 92299]))                          )
                        (reparse-symbol indented_block_body) [92279 92998])
                    ("get_transformed_points_and_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93041 93045]))                          
                        :documentation "
        Return a copy of the child path, with the non-affine part of
        the transform already applied, along with the affine part of
        the path necessary to complete the transformation.  Unlike
        :meth:`get_transformed_path_and_affine`, no interpolation will
        be performed.
        ")
                        (reparse-symbol indented_block_body) [93003 93456])
                    ("get_transformed_path_and_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93497 93501]))                          
                        :documentation "
        Return a copy of the child path, with the non-affine part of
        the transform already applied, along with the affine part of
        the path necessary to complete the transformation.
        ")
                        (reparse-symbol indented_block_body) [93461 93809])
                    ("get_fully_transformed_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93845 93849]))                          
                        :documentation "
        Return a fully-transformed copy of the child path.
        ")
                        (reparse-symbol indented_block_body) [93814 94039])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94059 94063]))                          )
                        (reparse-symbol indented_block_body) [94044 94110]))                  
                :type "class")
                nil [91245 94110])
            ("nonsingular" function (:arguments 
              ( ("vmin" variable nil (reparse-symbol function_parameters) [94128 94132])
                ("vmax" variable nil (reparse-symbol function_parameters) [94134 94138])
                ("expander" variable nil (reparse-symbol function_parameters) [94140 94148])
                ("tiny" variable nil (reparse-symbol function_parameters) [94156 94160])
                ("increasing" variable nil (reparse-symbol function_parameters) [94168 94178]))              ) nil [94112 95737])
            ("interval_contains" function (:arguments 
              ( ("interval" variable nil (reparse-symbol function_parameters) [95761 95769])
                ("val" variable nil (reparse-symbol function_parameters) [95771 95774]))              ) nil [95739 95892])
            ("interval_contains_open" function (:arguments 
              ( ("interval" variable nil (reparse-symbol function_parameters) [95920 95928])
                ("val" variable nil (reparse-symbol function_parameters) [95930 95933]))              ) nil [95893 96047])
            ("offset_copy" function (:arguments 
              ( ("trans" variable nil (reparse-symbol function_parameters) [96064 96069])
                ("fig" variable nil (reparse-symbol function_parameters) [96071 96074])
                ("x" variable nil (reparse-symbol function_parameters) [96081 96082])
                ("y" variable nil (reparse-symbol function_parameters) [96088 96089])
                ("units" variable nil (reparse-symbol function_parameters) [96095 96100]))              ) nil [96048 96777]))          
      :file "transforms.py"
      :pointmax 96777
      :fsize 96776
      :lastmodtime '(22681 7108 743473 0)
      :unmatched-syntax '((FROM 1659 . 1663) (PERIOD 1664 . 1665) (FROM 1639 . 1643) (PERIOD 1644 . 1645)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Manage figures for pyplot interface.
\"\"\"" code nil nil [1 45])
            ("" code nil nil [69 154])
            ("six" include nil nil [156 166])
            ("sys" include nil nil [167 177])
            ("gc" include nil nil [178 187])
            ("atexit" include nil nil [188 201])
            ("error_msg" function (:arguments 
              ( ("msg" variable nil (reparse-symbol function_parameters) [218 221]))              ) nil [204 256])
            ("Gcf" type
               (:documentation "
    Singleton to manage a set of integer-numbered figures.

    This class is never instantiated; it consists of two class
    attributes (a list and a dictionary), and a set of static
    methods that operate on those attributes, accessing them
    directly as class attributes.

    Attributes:

        *figs*:
          dictionary of the form {*num*: *manager*, ...}

        *_activeQue*:
          list of *managers*, with active one at the end

    "
                :superclasses ("object")
                :members 
                  ( ("_activeQue" variable nil (reparse-symbol indented_block_body) [749 764])
                    ("figs" variable nil (reparse-symbol indented_block_body) [769 778])
                    ("get_fig_manager" function
                       (:documentation "
        If figure manager *num* exists, make it the active
        figure and return the manager; otherwise return *None*.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [821 824])
                            ("num" variable nil (reparse-symbol function_parameters) [826 829]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [784 1112])
                    ("destroy" function
                       (:documentation "
        Try to remove all traces of figure *num*.

        In the interactive backends, this is bound to the
        window \"destroy\" and \"delete\" events.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1146 1149])
                            ("num" variable nil (reparse-symbol function_parameters) [1151 1154]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1117 1827])
                    ("destroy_fig" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1865 1868])
                            ("fig" variable nil (reparse-symbol function_parameters) [1870 1873]))                          )
                        (reparse-symbol indented_block_body) [1832 2139])
                    ("destroy_all" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2177 2180]))                          )
                        (reparse-symbol indented_block_body) [2144 2568])
                    ("has_fignum" function
                       (:documentation "
        Return *True* if figure *num* exists.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2605 2608])
                            ("num" variable nil (reparse-symbol function_parameters) [2610 2613]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2573 2717])
                    ("get_all_fig_managers" function
                       (:documentation "
        Return a list of figure managers.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2764 2767]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2722 2875])
                    ("get_num_fig_managers" function
                       (:documentation "
        Return the number of figures being managed.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2922 2925]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2880 3033])
                    ("get_active" function
                       (:documentation "
        Return the manager of the active figure, or *None*.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3070 3073]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3038 3273])
                    ("set_active" function
                       (:documentation "
        Make the figure corresponding to *manager* the active one.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3310 3313])
                            ("manager" variable nil (reparse-symbol function_parameters) [3315 3322]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3278 3653])
                    ("draw_all" function
                       (:documentation "
        Redraw all figures registered with the pyplot
        state machine.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3688 3691])
                            ("force" variable nil (reparse-symbol function_parameters) [3693 3698]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3658 3949]))                  
                :type "class")
                nil [258 3949])
            ("atexit" code nil nil [3950 3982]))          
      :file "_pylab_helpers.py"
      :pointmax 3983
      :fsize 3982
      :lastmodtime '(22681 7108 763473 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module is to support *bbox_inches* option in savefig command.
\"\"\"" code nil nil [1 75])
            ("" code nil nil [100 185])
            ("six" include nil nil [187 197])
            ("warnings" include nil nil [199 214])
            ("matplotlib.transforms" include nil nil [215 280])
            ("adjust_bbox" function
               (:documentation "
    Temporarily adjust the figure so that only the specified area
    (bbox_inches) is saved.

    It modifies fig.bbox, fig.bbox_inches,
    fig.transFigure._boxout, and fig.patch.  While the figure size
    changes, the scale of the original figure is conserved.  A
    function which restores the original values are returned.
    "
                :arguments 
                  ( ("fig" variable nil (reparse-symbol function_parameters) [299 302])
                    ("bbox_inches" variable nil (reparse-symbol function_parameters) [304 315])
                    ("fixed_dpi" variable nil (reparse-symbol function_parameters) [317 326]))                  )
                nil [283 2203])
            ("process_figure_for_rasterizing" function
               (:documentation "
    This need to be called when figure dpi changes during the drawing
    (e.g., rasterizing). It recovers the bbox and re-adjust it with
    the new dpi.
    "
                :arguments 
                  ( ("fig" variable nil (reparse-symbol function_parameters) [2240 2243])
                    ("bbox_inches_restore" variable nil (reparse-symbol function_parameters) [2245 2264])
                    ("fixed_dpi" variable nil (reparse-symbol function_parameters) [2266 2275]))                  )
                nil [2205 2602]))          
      :file "tight_bbox.py"
      :pointmax 2602
      :fsize 2601
      :lastmodtime '(22681 7108 739473 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("" code nil nil [49 134])
            ("collections" include nil nil [136 171])
            ("six" include nil nil [173 183])
            ("six.moves" include nil nil [184 209])
            ("warnings" include nil nil [211 226])
            ("numpy" include nil nil [228 246])
            ("matplotlib.path" include nil nil [248 280])
            ("matplotlib" include nil nil [281 312])
            ("matplotlib.font_manager" include nil nil [313 359])
            ("matplotlib.ft2font" include nil nil [360 423])
            ("matplotlib.ft2font" include nil nil [424 472])
            ("matplotlib.mathtext" include nil nil [473 519])
            ("matplotlib.dviread" include nil nil [520 556])
            ("matplotlib.font_manager" include nil nil [557 617])
            ("matplotlib.transforms" include nil nil [618 660])
            ("six.moves.urllib.parse" include nil nil [661 717])
            ("TextToPath" type
               (:documentation "
    A class that convert a given text to a path using ttf fonts.
    "
                :superclasses ("object")
                :members 
                  ( ("FONT_SCALE" variable nil (reparse-symbol indented_block_body) [832 849])
                    ("DPI" variable nil (reparse-symbol indented_block_body) [854 862])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialization
        \"\"\"" code nil (reparse-symbol indented_block_body) [896 934])
                            ("self" variable nil (reparse-symbol indented_block_body) [943 988])
                            ("self" variable nil (reparse-symbol indented_block_body) [997 1021])
                            ("matplotlib.cbook" include nil (reparse-symbol indented_block_body) [1031 1067])
                            ("self" variable nil (reparse-symbol indented_block_body) [1076 1104])
                            ("self" variable nil (reparse-symbol indented_block_body) [1114 1137])
                            ("self" variable nil (reparse-symbol indented_block_body) [1147 1183]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [881 885]))                          
                        :documentation "
        Initialization
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [868 1184])
                    ("_get_adobe_standard_encoding" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1222 1226]))                          )
                        (reparse-symbol indented_block_body) [1189 1387])
                    ("_get_font" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1406 1410])
                            ("prop" variable nil (reparse-symbol function_parameters) [1412 1416]))                          
                        :documentation "
        find a ttf font.
        ")
                        (reparse-symbol indented_block_body) [1392 1613])
                    ("_get_hinting_flag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1640 1644]))                          )
                        (reparse-symbol indented_block_body) [1618 1678])
                    ("_get_char_id" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1700 1704])
                            ("font" variable nil (reparse-symbol function_parameters) [1706 1710])
                            ("ccode" variable nil (reparse-symbol function_parameters) [1712 1717]))                          
                        :documentation "
        Return a unique id for the given font and character-code set.
        ")
                        (reparse-symbol indented_block_body) [1683 2090])
                    ("_get_char_id_ps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2115 2119])
                            ("font" variable nil (reparse-symbol function_parameters) [2121 2125])
                            ("ccode" variable nil (reparse-symbol function_parameters) [2127 2132]))                          
                        :documentation "
        Return a unique id for the given font and character-code set (for tex).
        ")
                        (reparse-symbol indented_block_body) [2095 2366])
                    ("glyph_to_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2389 2393])
                            ("font" variable nil (reparse-symbol function_parameters) [2395 2399])
                            ("currx" variable nil (reparse-symbol function_parameters) [2401 2406]))                          
                        :documentation "
        convert the ft2font glyph to vertices and codes.
        ")
                        (reparse-symbol indented_block_body) [2371 2618])
                    ("get_text_width_height_descent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2657 2661])
                            ("s" variable nil (reparse-symbol function_parameters) [2663 2664])
                            ("prop" variable nil (reparse-symbol function_parameters) [2666 2670])
                            ("ismath" variable nil (reparse-symbol function_parameters) [2672 2678]))                          )
                        (reparse-symbol indented_block_body) [2623 3657])
                    ("get_text_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3680 3684])
                            ("prop" variable nil (reparse-symbol function_parameters) [3686 3690])
                            ("s" variable nil (reparse-symbol function_parameters) [3692 3693])
                            ("ismath" variable nil (reparse-symbol function_parameters) [3695 3701])
                            ("usetex" variable nil (reparse-symbol function_parameters) [3709 3715]))                          
                        :documentation "
        convert text *s* to path (a tuple of vertices and codes for
        matplotlib.path.Path).

        *prop*
          font property

        *s*
          text to be converted

        *usetex*
          If True, use matplotlib usetex mode.

        *ismath*
          If True, use mathtext parser. Effective only if usetex == False.


        ")
                        (reparse-symbol indented_block_body) [3662 5014])
                    ("get_glyphs_with_font" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5044 5048])
                            ("font" variable nil (reparse-symbol function_parameters) [5050 5054])
                            ("s" variable nil (reparse-symbol function_parameters) [5056 5057])
                            ("glyph_map" variable nil (reparse-symbol function_parameters) [5059 5068])
                            ("return_new_glyphs_only" variable nil (reparse-symbol function_parameters) [5104 5126]))                          
                        :documentation "
        convert the string *s* to vertices and codes using the
        provided ttf font.
        ")
                        (reparse-symbol indented_block_body) [5019 6680])
                    ("get_glyphs_mathtext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6709 6713])
                            ("prop" variable nil (reparse-symbol function_parameters) [6715 6719])
                            ("s" variable nil (reparse-symbol function_parameters) [6721 6722])
                            ("glyph_map" variable nil (reparse-symbol function_parameters) [6724 6733])
                            ("return_new_glyphs_only" variable nil (reparse-symbol function_parameters) [6768 6790]))                          
                        :documentation "
        convert the string *s* to vertices and codes by parsing it with
        mathtext.
        ")
                        (reparse-symbol indented_block_body) [6685 8425])
                    ("get_texmanager" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8449 8453]))                          
                        :documentation "
        return the :class:`matplotlib.texmanager.TexManager` instance
        ")
                        (reparse-symbol indented_block_body) [8430 8720])
                    ("get_glyphs_tex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8744 8748])
                            ("prop" variable nil (reparse-symbol function_parameters) [8750 8754])
                            ("s" variable nil (reparse-symbol function_parameters) [8756 8757])
                            ("glyph_map" variable nil (reparse-symbol function_parameters) [8759 8768])
                            ("return_new_glyphs_only" variable nil (reparse-symbol function_parameters) [8798 8820]))                          
                        :documentation "
        convert the string *s* to vertices and codes using matplotlib's usetex
        mode.
        ")
                        (reparse-symbol indented_block_body) [8725 13123]))                  
                :type "class")
                nil [720 13123])
            ("text_to_path" variable nil nil [13125 13152])
            ("TextPath" type
               (:documentation "
    Create a path from the text.
    "
                :superclasses ("Path")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a path from the text. No support for TeX yet. Note that
        it simply is a path, not an artist. You need to use the
        PathPatch (or other artists) to draw this path onto the
        canvas.

        xy : position of the text.
        s : text
        size : font size
        prop : font property
        \"\"\"" code nil (reparse-symbol indented_block_body) [13375 13712])
                            ("if" code nil (reparse-symbol indented_block_body) [13722 13775])
                            ("if" code nil (reparse-symbol indented_block_body) [13784 13846])
                            ("self" variable nil (reparse-symbol indented_block_body) [13855 13868])
                            ("self" code nil (reparse-symbol indented_block_body) [13877 13896])
                            ("self" variable nil (reparse-symbol indented_block_body) [13906 13934])
                            ("self, self" code nil (reparse-symbol indented_block_body) [13944 14115])
                            ("self" variable nil (reparse-symbol indented_block_body) [14125 14154])
                            ("self" variable nil (reparse-symbol indented_block_body) [14163 14225])
                            ("self" variable nil (reparse-symbol indented_block_body) [14234 14261])
                            ("self" variable nil (reparse-symbol indented_block_body) [14270 14318]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13244 13248])
                            ("xy" variable nil (reparse-symbol function_parameters) [13250 13252])
                            ("s" variable nil (reparse-symbol function_parameters) [13254 13255])
                            ("size" variable nil (reparse-symbol function_parameters) [13257 13261])
                            ("prop" variable nil (reparse-symbol function_parameters) [13268 13272])
                            ("_interpolation_steps" variable nil (reparse-symbol function_parameters) [13296 13316])
                            ("usetex" variable nil (reparse-symbol function_parameters) [13320 13326])
                            ("kl" variable nil (reparse-symbol function_parameters) [13351 13354])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [13356 13364]))                          
                        :documentation "
        Create a path from the text. No support for TeX yet. Note that
        it simply is a path, not an artist. You need to use the
        PathPatch (or other artists) to draw this path onto the
        canvas.

        xy : position of the text.
        s : text
        size : font size
        prop : font property
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13231 14319])
                    ("set_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14337 14341])
                            ("size" variable nil (reparse-symbol function_parameters) [14343 14347]))                          
                        :documentation "
        set the size of the text
        ")
                        (reparse-symbol indented_block_body) [14324 14462])
                    ("get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14480 14484]))                          
                        :documentation "
        get the size of the text
        ")
                        (reparse-symbol indented_block_body) [14467 14570])
                    ("_get_vertices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14593 14597]))                          
                        :documentation "
        Return the cached path after updating it if necessary.
        ")
                        (reparse-symbol indented_block_body) [14575 14756])
                    ("_get_codes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14776 14780]))                          
                        :documentation "
        Return the codes
        ")
                        (reparse-symbol indented_block_body) [14761 14859])
                    ("vertices" variable nil (reparse-symbol indented_block_body) [14864 14898])
                    ("codes" variable nil (reparse-symbol indented_block_body) [14903 14931])
                    ("_revalidate_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14958 14962]))                          
                        :documentation "
        update the path if necessary.

        The path for the text is initially create with the font size
        of FONT_SCALE, and this path is rescaled to other size when
        necessary.

        ")
                        (reparse-symbol indented_block_body) [14937 15531])
                    ("is_math_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15553 15557])
                            ("s" variable nil (reparse-symbol function_parameters) [15559 15560]))                          
                        :documentation "
        Returns True if the given string *s* contains any mathtext.
        ")
                        (reparse-symbol indented_block_body) [15536 16109])
                    ("text_get_vertices_codes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16142 16146])
                            ("prop" variable nil (reparse-symbol function_parameters) [16148 16152])
                            ("s" variable nil (reparse-symbol function_parameters) [16154 16155])
                            ("usetex" variable nil (reparse-symbol function_parameters) [16157 16163]))                          
                        :documentation "
        convert the string *s* to vertices and codes using the
        provided font property *prop*. Mostly copied from
        backend_svg.py.
        ")
                        (reparse-symbol indented_block_body) [16114 16669]))                  
                :type "class")
                nil [13155 16669]))          
      :file "textpath.py"
      :pointmax 16669
      :fsize 16668
      :lastmodtime '(22681 7108 767472 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Abstract base classes define the primitives for Tools.
These tools are used by `matplotlib.backend_managers.ToolManager`

:class:`ToolBase`
    Simple stateless tool

:class:`ToolToggleBase`
    Tool that has two states, only one Toggle tool can be
    active at any given time for the same
    `matplotlib.backend_managers.ToolManager`
\"\"\"" code nil nil [1 345])
            ("matplotlib" include nil nil [348 379])
            ("matplotlib._pylab_helpers" include nil nil [380 421])
            ("matplotlib.cbook" include nil nil [422 454])
            ("weakref" include nil nil [455 492])
            ("numpy" include nil nil [493 511])
            ("six" include nil nil [512 522])
            ("warnings" include nil nil [523 538])
            ("Cursors" type
               (:documentation "Simple namespace for cursor reference"
                :superclasses ("object")
                :members 
                  ( ("HAND, POINTER, SELECT_REGION, MOVE" code nil (reparse-symbol indented_block_body) [616 667]))                  
                :type "class")
                nil [541 668])
            ("cursors" variable nil nil [668 687])
            ("_views_positions" variable nil nil [712 740])
            ("ToolBase" type
               (:documentation "
    Base tool class

    A base tool, only implements `trigger` method or not method at all.
    The tool is instantiated by `matplotlib.backend_managers.ToolManager`

    Attributes
    ----------
    toolmanager: `matplotlib.backend_managers.ToolManager`
        ToolManager that controls this Tool
    figure: `FigureCanvas`
        Figure instance that is affected by this Tool
    name: String
        Used as **Id** of the tool, has to be unique among tools of the same
        ToolManager
    "
                :superclasses ("object")
                :members 
                  ( ("default_keymap" variable nil (reparse-symbol indented_block_body) [1284 1305])
                    ("\"\"\"
    Keymap to associate with this tool

    **String**: List of comma separated keys that will be used to call this
    tool when the keypress event of *self.figure.canvas* is emited
    \"\"\"" code nil (reparse-symbol indented_block_body) [1310 1504])
                    ("description" variable nil (reparse-symbol indented_block_body) [1510 1528])
                    ("\"\"\"
    Description of the Tool

    **String**: If the Tool is included in the Toolbar this text is used
    as a Tooltip
    \"\"\"" code nil (reparse-symbol indented_block_body) [1533 1663])
                    ("image" variable nil (reparse-symbol indented_block_body) [1669 1681])
                    ("\"\"\"
    Filename of the image

    **String**: Filename of the image to use in the toolbar. If None, the
    `name` is used as a label in the toolbar button
    \"\"\"" code nil (reparse-symbol indented_block_body) [1686 1850])
                    ("__init__" function
                       (:suite 
                          ( ("warnings" code nil (reparse-symbol indented_block_body) [1903 2122])
                            ("self" variable nil (reparse-symbol indented_block_body) [2131 2148])
                            ("self" variable nil (reparse-symbol indented_block_body) [2157 2176])
                            ("self" variable nil (reparse-symbol indented_block_body) [2185 2215])
                            ("self" variable nil (reparse-symbol indented_block_body) [2224 2263]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1869 1873])
                            ("toolmanager" variable nil (reparse-symbol function_parameters) [1875 1886])
                            ("name" variable nil (reparse-symbol function_parameters) [1888 1892]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1856 2264])
                    ("figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2294 2298]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2269 2329])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2346 2350])
                            ("sender" variable nil (reparse-symbol function_parameters) [2352 2358])
                            ("event" variable nil (reparse-symbol function_parameters) [2360 2365])
                            ("data" variable nil (reparse-symbol function_parameters) [2367 2371]))                          
                        :documentation "
        Called when this tool gets used

        This method is called by
        `matplotlib.backend_managers.ToolManager.trigger_tool`

        Parameters
        ----------
        event: `Event`
            The Canvas event that caused this tool to be called
        sender: object
            Object that requested the tool to be triggered
        data: object
            Extra data
        ")
                        (reparse-symbol indented_block_body) [2334 2806])
                    ("figure" function
                       (:parent "dummy"
                        :decorators 
                          ( ("figure.setter" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2841 2845])
                            ("figure" variable nil (reparse-symbol function_parameters) [2847 2853]))                          
                        :documentation "
        Set the figure

        Set the figure to be affected by this tool

        Parameters
        ----------
        figure: `Figure`
        ")
                        (reparse-symbol indented_block_body) [2811 3050])
                    ("name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3078 3082]))                          
                        :documentation "Tool Id")
                        (reparse-symbol indented_block_body) [3055 3133])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3150 3154]))                          
                        :documentation "
        Destroy the tool

        This method is called when the tool is removed by
        `matplotlib.backend_managers.ToolManager.remove_tool`
        ")
                        (reparse-symbol indented_block_body) [3138 3340]))                  
                :type "class")
                nil [743 3340])
            ("ToolToggleBase" type
               (:documentation "
    Toggleable tool

    Every time it is triggered, it switches between enable and disable
    "
                :superclasses ("ToolBase")
                :members 
                  ( ("radio_group" variable nil (reparse-symbol indented_block_body) [3487 3505])
                    ("\"\"\"Attribute to group 'radio' like tools (mutually exclusive)

    **String** that identifies the group or **None** if not belonging to a
    group
    \"\"\"" code nil (reparse-symbol indented_block_body) [3510 3665])
                    ("cursor" variable nil (reparse-symbol indented_block_body) [3671 3684])
                    ("\"\"\"Cursor to use when the tool is active\"\"\"" code nil (reparse-symbol indented_block_body) [3689 3732])
                    ("__init__" function
                       (:suite 
                          ( ("ToolBase" code nil (reparse-symbol indented_block_body) [3783 3823])
                            ("self" variable nil (reparse-symbol indented_block_body) [3832 3853]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3751 3755])
                            ("args" variable nil (reparse-symbol function_parameters) [3757 3762])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3764 3772]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3738 3854])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3871 3875])
                            ("sender" variable nil (reparse-symbol function_parameters) [3877 3883])
                            ("event" variable nil (reparse-symbol function_parameters) [3885 3890])
                            ("data" variable nil (reparse-symbol function_parameters) [3892 3896]))                          
                        :documentation "Calls `enable` or `disable` based on `toggled` value")
                        (reparse-symbol indented_block_body) [3859 4116])
                    ("enable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4132 4136])
                            ("event" variable nil (reparse-symbol function_parameters) [4138 4143]))                          
                        :documentation "
        Enable the toggle tool

        `trigger` calls this method when `toggled` is False
        ")
                        (reparse-symbol indented_block_body) [4121 4281])
                    ("disable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4298 4302])
                            ("event" variable nil (reparse-symbol function_parameters) [4304 4309]))                          
                        :documentation "
        Disable the toggle tool

        `trigger` call this method when `toggled` is True.

        This can happen in different circumstances

        * Click on the toolbar tool button
        * Call to `matplotlib.backend_managers.ToolManager.trigger_tool`
        * Another `ToolToggleBase` derived tool is triggered
          (from the same `ToolManager`)
        ")
                        (reparse-symbol indented_block_body) [4286 4717])
                    ("toggled" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4748 4752]))                          
                        :documentation "State of the toggled tool")
                        (reparse-symbol indented_block_body) [4722 4825]))                  
                :type "class")
                nil [3342 4825])
            ("SetCursorBase" type
               (:documentation "
    Change to the current cursor while inaxes

    This tool, keeps track of all `ToolToggleBase` derived tools, and calls
    set_cursor when a tool gets triggered
    "
                :superclasses ("ToolBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("ToolBase" code nil (reparse-symbol indented_block_body) [5088 5128])
                            ("self" variable nil (reparse-symbol indented_block_body) [5137 5240])
                            ("self" variable nil (reparse-symbol indented_block_body) [5249 5268])
                            ("self" variable nil (reparse-symbol indented_block_body) [5277 5315])
                            ("self" variable nil (reparse-symbol indented_block_body) [5324 5364])
                            ("self" code nil (reparse-symbol indented_block_body) [5373 5494])
                            ("for" code nil (reparse-symbol indented_block_body) [5536 5614]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5056 5060])
                            ("args" variable nil (reparse-symbol function_parameters) [5062 5067])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5069 5077]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5043 5614])
                    ("_tool_trigger_cbk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5641 5645])
                            ("event" variable nil (reparse-symbol function_parameters) [5647 5652]))                          )
                        (reparse-symbol indented_block_body) [5619 5826])
                    ("_add_tool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5845 5849])
                            ("tool" variable nil (reparse-symbol function_parameters) [5851 5855]))                          
                        :documentation "set the cursor when the tool is triggered")
                        (reparse-symbol indented_block_body) [5831 6121])
                    ("_add_tool_cbk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6144 6148])
                            ("event" variable nil (reparse-symbol function_parameters) [6150 6155]))                          
                        :documentation "Process every newly added tool")
                        (reparse-symbol indented_block_body) [6126 6289])
                    ("_set_cursor_cbk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6314 6318])
                            ("event" variable nil (reparse-symbol function_parameters) [6320 6325]))                          )
                        (reparse-symbol indented_block_body) [6294 6806])
                    ("set_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6826 6830])
                            ("cursor" variable nil (reparse-symbol function_parameters) [6832 6838]))                          
                        :documentation "
        Set the cursor

        This method has to be implemented per backend
        ")
                        (reparse-symbol indented_block_body) [6811 6977]))                  
                :type "class")
                nil [4827 6977])
            ("ToolCursorPosition" type
               (:documentation "
    Send message with the current pointer position

    This tool runs in the background reporting the position of the cursor
    "
                :superclasses ("ToolBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("ToolBase" code nil (reparse-symbol indented_block_body) [7206 7246])
                            ("self" variable nil (reparse-symbol indented_block_body) [7255 7355]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7174 7178])
                            ("args" variable nil (reparse-symbol function_parameters) [7180 7185])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7187 7195]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7161 7356])
                    ("send_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7378 7382])
                            ("event" variable nil (reparse-symbol function_parameters) [7384 7389]))                          
                        :documentation "Call `matplotlib.backend_managers.ToolManager.message_event`")
                        (reparse-symbol indented_block_body) [7361 8323]))                  
                :type "class")
                nil [6979 8323])
            ("RubberbandBase" type
               (:documentation "Draw and remove rubberband"
                :superclasses ("ToolBase")
                :members 
                  ( ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8410 8414])
                            ("sender" variable nil (reparse-symbol function_parameters) [8416 8422])
                            ("event" variable nil (reparse-symbol function_parameters) [8424 8429])
                            ("data" variable nil (reparse-symbol function_parameters) [8431 8435]))                          
                        :documentation "Call `draw_rubberband` or `remove_rubberband` based on data")
                        (reparse-symbol indented_block_body) [8398 8715])
                    ("draw_rubberband" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8740 8744])
                            ("data" variable nil (reparse-symbol function_parameters) [8746 8751]))                          
                        :documentation "
        Draw rubberband

        This method must get implemented per backend
        ")
                        (reparse-symbol indented_block_body) [8720 8890])
                    ("remove_rubberband" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8917 8921]))                          
                        :documentation "
        Remove rubberband

        This method should get implemented per backend
        ")
                        (reparse-symbol indented_block_body) [8895 9043]))                  
                :type "class")
                nil [8325 9043])
            ("ToolQuit" type
               (:documentation "Tool to call the figure manager destroy method"
                :superclasses ("ToolBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [9133 9164])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [9169 9209])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9227 9231])
                            ("sender" variable nil (reparse-symbol function_parameters) [9233 9239])
                            ("event" variable nil (reparse-symbol function_parameters) [9241 9246])
                            ("data" variable nil (reparse-symbol function_parameters) [9248 9252]))                          )
                        (reparse-symbol indented_block_body) [9215 9297]))                  
                :type "class")
                nil [9045 9297])
            ("ToolEnableAllNavigation" type
               (:documentation "Tool to enable all axes for toolmanager interaction"
                :superclasses ("ToolBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [9407 9451])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [9456 9500])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9518 9522])
                            ("sender" variable nil (reparse-symbol function_parameters) [9524 9530])
                            ("event" variable nil (reparse-symbol function_parameters) [9532 9537])
                            ("data" variable nil (reparse-symbol function_parameters) [9539 9543]))                          )
                        (reparse-symbol indented_block_body) [9506 9785]))                  
                :type "class")
                nil [9299 9785])
            ("ToolEnableNavigation" type
               (:documentation "Tool to enable a specific axes for toolmanager interaction"
                :superclasses ("ToolBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [9899 9943])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [9948 9992])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10010 10014])
                            ("sender" variable nil (reparse-symbol function_parameters) [10016 10022])
                            ("event" variable nil (reparse-symbol function_parameters) [10024 10029])
                            ("data" variable nil (reparse-symbol function_parameters) [10031 10035]))                          )
                        (reparse-symbol indented_block_body) [9998 10324]))                  
                :type "class")
                nil [9787 10324])
            ("ToolGrid" type
               (:documentation "Tool to toggle the grid of the figure"
                :superclasses ("ToolToggleBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [10411 10438])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [10443 10483])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10501 10505])
                            ("sender" variable nil (reparse-symbol function_parameters) [10507 10513])
                            ("event" variable nil (reparse-symbol function_parameters) [10515 10520])
                            ("data" variable nil (reparse-symbol function_parameters) [10522 10526]))                          )
                        (reparse-symbol indented_block_body) [10489 10644])
                    ("enable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10660 10664])
                            ("event" variable nil (reparse-symbol function_parameters) [10666 10671]))                          )
                        (reparse-symbol indented_block_body) [10649 10745])
                    ("disable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10762 10766])
                            ("event" variable nil (reparse-symbol function_parameters) [10768 10773]))                          )
                        (reparse-symbol indented_block_body) [10750 10848]))                  
                :type "class")
                nil [10326 10848])
            ("ToolFullScreen" type
               (:documentation "Tool to toggle full screen"
                :superclasses ("ToolToggleBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [10930 10968])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [10973 11019])
                    ("enable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11036 11040])
                            ("event" variable nil (reparse-symbol function_parameters) [11042 11047]))                          )
                        (reparse-symbol indented_block_body) [11025 11106])
                    ("disable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11123 11127])
                            ("event" variable nil (reparse-symbol function_parameters) [11129 11134]))                          )
                        (reparse-symbol indented_block_body) [11111 11193]))                  
                :type "class")
                nil [10850 11193])
            ("AxisScaleBase" type
               (:documentation "Base Tool to toggle between linear and logarithmic"
                :superclasses ("ToolToggleBase")
                :members 
                  ( ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11310 11314])
                            ("sender" variable nil (reparse-symbol function_parameters) [11316 11322])
                            ("event" variable nil (reparse-symbol function_parameters) [11324 11329])
                            ("data" variable nil (reparse-symbol function_parameters) [11331 11335]))                          )
                        (reparse-symbol indented_block_body) [11298 11453])
                    ("enable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11469 11473])
                            ("event" variable nil (reparse-symbol function_parameters) [11475 11480]))                          )
                        (reparse-symbol indented_block_body) [11458 11566])
                    ("disable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11583 11587])
                            ("event" variable nil (reparse-symbol function_parameters) [11589 11594]))                          )
                        (reparse-symbol indented_block_body) [11571 11683]))                  
                :type "class")
                nil [11195 11683])
            ("ToolYScale" type
               (:documentation "Tool to toggle between linear and logarithmic scales on the Y axis"
                :superclasses ("AxisScaleBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [11800 11835])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [11840 11882])
                    ("set_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11902 11906])
                            ("ax" variable nil (reparse-symbol function_parameters) [11908 11910])
                            ("scale" variable nil (reparse-symbol function_parameters) [11912 11917]))                          )
                        (reparse-symbol indented_block_body) [11888 11949]))                  
                :type "class")
                nil [11685 11949])
            ("ToolXScale" type
               (:documentation "Tool to toggle between linear and logarithmic scales on the X axis"
                :superclasses ("AxisScaleBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [12066 12101])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [12106 12148])
                    ("set_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12168 12172])
                            ("ax" variable nil (reparse-symbol function_parameters) [12174 12176])
                            ("scale" variable nil (reparse-symbol function_parameters) [12178 12183]))                          )
                        (reparse-symbol indented_block_body) [12154 12215]))                  
                :type "class")
                nil [11951 12215])
            ("ToolViewsPositions" type
               (:documentation "
    Auxiliary Tool to handle changes in views and positions

    Runs in the background and should get used by all the tools that
    need to access the figure's history of views and positions, e.g.

    * `ToolZoom`
    * `ToolPan`
    * `ToolHome`
    * `ToolBack`
    * `ToolForward`
    "
                :superclasses ("ToolBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [12606 12638])
                            ("self" variable nil (reparse-symbol indented_block_body) [12647 12683])
                            ("ToolBase" code nil (reparse-symbol indented_block_body) [12692 12732]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12574 12578])
                            ("args" variable nil (reparse-symbol function_parameters) [12580 12585])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [12587 12595]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12561 12733])
                    ("add_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12753 12757]))                          
                        :documentation "Add the current figure to the stack of views and positions")
                        (reparse-symbol indented_block_body) [12738 13196])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13211 13215])
                            ("figure" variable nil (reparse-symbol function_parameters) [13217 13223]))                          
                        :documentation "Reset the axes stack")
                        (reparse-symbol indented_block_body) [13201 13376])
                    ("update_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13397 13401]))                          
                        :documentation "
        Update the viewlim and position from the view and
        position stack for each axes
        ")
                        (reparse-symbol indented_block_body) [13381 13988])
                    ("push_current" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14010 14014]))                          
                        :documentation "push the current view limits and position onto the stack")
                        (reparse-symbol indented_block_body) [13993 14473])
                    ("refresh_locators" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14499 14503]))                          
                        :documentation "Redraw the canvases, update the locators")
                        (reparse-symbol indented_block_body) [14478 15325])
                    ("home" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15339 15343]))                          
                        :documentation "Recall the first view and position from the stack")
                        (reparse-symbol indented_block_body) [15330 15492])
                    ("back" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15506 15510]))                          
                        :documentation "Back one step in the stack of views and positions")
                        (reparse-symbol indented_block_body) [15497 15659])
                    ("forward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15676 15680]))                          
                        :documentation "Forward one step in the stack of views and positions")
                        (reparse-symbol indented_block_body) [15664 15838]))                  
                :type "class")
                nil [12217 15838])
            ("ViewsPositionsBase" type
               (:documentation "Base class for `ToolHome`, `ToolBack` and `ToolForward`"
                :superclasses ("ToolBase")
                :members 
                  ( ("_on_trigger" variable nil (reparse-symbol indented_block_body) [15947 15965])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15983 15987])
                            ("sender" variable nil (reparse-symbol function_parameters) [15989 15995])
                            ("event" variable nil (reparse-symbol function_parameters) [15997 16002])
                            ("data" variable nil (reparse-symbol function_parameters) [16004 16008]))                          )
                        (reparse-symbol indented_block_body) [15971 16244]))                  
                :type "class")
                nil [15840 16244])
            ("ToolHome" type
               (:documentation "Restore the original view lim"
                :superclasses ("ViewsPositionsBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [16327 16362])
                    ("image" variable nil (reparse-symbol indented_block_body) [16367 16385])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [16390 16430])
                    ("_on_trigger" variable nil (reparse-symbol indented_block_body) [16435 16455]))                  
                :type "class")
                nil [16246 16456])
            ("ToolBack" type
               (:documentation "Move back up the view lim stack"
                :superclasses ("ViewsPositionsBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [16541 16579])
                    ("image" variable nil (reparse-symbol indented_block_body) [16584 16602])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [16607 16647])
                    ("_on_trigger" variable nil (reparse-symbol indented_block_body) [16652 16672]))                  
                :type "class")
                nil [16458 16673])
            ("ToolForward" type
               (:documentation "Move forward in the view lim stack"
                :superclasses ("ViewsPositionsBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [16764 16800])
                    ("image" variable nil (reparse-symbol indented_block_body) [16805 16826])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [16831 16874])
                    ("_on_trigger" variable nil (reparse-symbol indented_block_body) [16879 16902]))                  
                :type "class")
                nil [16675 16903])
            ("ConfigureSubplotsBase" type
               (:documentation "Base tool for the configuration of subplots"
                :superclasses ("ToolBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [17003 17037])
                    ("image" variable nil (reparse-symbol indented_block_body) [17042 17064]))                  
                :type "class")
                nil [16905 17065])
            ("SaveFigureBase" type
               (:documentation "Base tool for figure saving"
                :superclasses ("ToolBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [17142 17173])
                    ("image" variable nil (reparse-symbol indented_block_body) [17178 17200])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [17205 17245]))                  
                :type "class")
                nil [17067 17246])
            ("ZoomPanBase" type
               (:documentation "Base class for `ToolZoom` and `ToolPan`"
                :superclasses ("ToolToggleBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("ToolToggleBase" code nil (reparse-symbol indented_block_body) [17372 17408])
                            ("self" variable nil (reparse-symbol indented_block_body) [17417 17444])
                            ("self" variable nil (reparse-symbol indented_block_body) [17453 17473])
                            ("self" variable nil (reparse-symbol indented_block_body) [17482 17502])
                            ("self" variable nil (reparse-symbol indented_block_body) [17511 17533])
                            ("self" variable nil (reparse-symbol indented_block_body) [17542 17563])
                            ("self" variable nil (reparse-symbol indented_block_body) [17572 17592]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17350 17354])
                            ("args" variable nil (reparse-symbol function_parameters) [17356 17361]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17337 17593])
                    ("enable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17609 17613])
                            ("event" variable nil (reparse-symbol function_parameters) [17615 17620]))                          
                        :documentation "Connect press/release events and lock the canvas")
                        (reparse-symbol indented_block_body) [17598 18045])
                    ("disable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18062 18066])
                            ("event" variable nil (reparse-symbol function_parameters) [18068 18073]))                          
                        :documentation "Release the canvas and disconnect press/release events")
                        (reparse-symbol indented_block_body) [18050 18401])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18418 18422])
                            ("sender" variable nil (reparse-symbol function_parameters) [18424 18430])
                            ("event" variable nil (reparse-symbol function_parameters) [18432 18437])
                            ("data" variable nil (reparse-symbol function_parameters) [18439 18443]))                          )
                        (reparse-symbol indented_block_body) [18406 18574])
                    ("scroll_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18595 18599])
                            ("event" variable nil (reparse-symbol function_parameters) [18601 18606]))                          )
                        (reparse-symbol indented_block_body) [18579 19663]))                  
                :type "class")
                nil [17248 19663])
            ("ToolZoom" type
               (:documentation "Zoom to rectangle"
                :superclasses ("ZoomPanBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [19727 19760])
                    ("image" variable nil (reparse-symbol indented_block_body) [19765 19791])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [19796 19836])
                    ("cursor" variable nil (reparse-symbol indented_block_body) [19841 19871])
                    ("radio_group" variable nil (reparse-symbol indented_block_body) [19876 19899])
                    ("__init__" function
                       (:suite 
                          ( ("ZoomPanBase" code nil (reparse-symbol indented_block_body) [19940 19973])
                            ("self" variable nil (reparse-symbol indented_block_body) [19982 20001]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19918 19922])
                            ("args" variable nil (reparse-symbol function_parameters) [19924 19929]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19905 20002])
                    ("_cancel_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20026 20030]))                          )
                        (reparse-symbol indented_block_body) [20007 20364])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20380 20384])
                            ("event" variable nil (reparse-symbol function_parameters) [20386 20391]))                          
                        :documentation "the _press mouse button in zoom to rect mode callback")
                        (reparse-symbol indented_block_body) [20369 21536])
                    ("_switch_on_zoom_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21566 21570])
                            ("event" variable nil (reparse-symbol function_parameters) [21572 21577]))                          )
                        (reparse-symbol indented_block_body) [21541 21648])
                    ("_switch_off_zoom_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21679 21683])
                            ("event" variable nil (reparse-symbol function_parameters) [21685 21690]))                          )
                        (reparse-symbol indented_block_body) [21653 21756])
                    ("_mouse_move" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21777 21781])
                            ("event" variable nil (reparse-symbol function_parameters) [21783 21788]))                          
                        :documentation "the drag callback in zoom mode")
                        (reparse-symbol indented_block_body) [21761 22601])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22619 22623])
                            ("event" variable nil (reparse-symbol function_parameters) [22625 22630]))                          
                        :documentation "the release mouse button callback in zoom to rect mode")
                        (reparse-symbol indented_block_body) [22606 24083]))                  
                :type "class")
                nil [19665 24083])
            ("ToolPan" type
               (:documentation "Pan axes with left mouse, zoom with right"
                :superclasses ("ZoomPanBase")
                :members 
                  ( ("default_keymap" variable nil (reparse-symbol indented_block_body) [24170 24209])
                    ("description" variable nil (reparse-symbol indented_block_body) [24214 24271])
                    ("image" variable nil (reparse-symbol indented_block_body) [24276 24294])
                    ("cursor" variable nil (reparse-symbol indented_block_body) [24299 24320])
                    ("radio_group" variable nil (reparse-symbol indented_block_body) [24325 24348])
                    ("__init__" function
                       (:suite 
                          ( ("ZoomPanBase" code nil (reparse-symbol indented_block_body) [24389 24422])
                            ("self" variable nil (reparse-symbol indented_block_body) [24431 24450]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24367 24371])
                            ("args" variable nil (reparse-symbol function_parameters) [24373 24378]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24354 24451])
                    ("_cancel_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24475 24479]))                          )
                        (reparse-symbol indented_block_body) [24456 24723])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24739 24743])
                            ("event" variable nil (reparse-symbol function_parameters) [24745 24750]))                          )
                        (reparse-symbol indented_block_body) [24728 25468])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25486 25490])
                            ("event" variable nil (reparse-symbol function_parameters) [25492 25497]))                          )
                        (reparse-symbol indented_block_body) [25473 25946])
                    ("_mouse_move" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25967 25971])
                            ("event" variable nil (reparse-symbol function_parameters) [25973 25978]))                          )
                        (reparse-symbol indented_block_body) [25951 26284]))                  
                :type "class")
                nil [24085 26284])
            ("default_tools" variable nil nil [26286 27019])
            ("\"\"\"Default tools\"\"\"" code nil nil [27020 27039])
            ("default_toolbar_tools" variable nil nil [27041 27220])
            ("\"\"\"Default tools in the toolbar\"\"\"" code nil nil [27221 27255])
            ("add_tools_to_manager" function
               (:documentation "
    Add multiple tools to `ToolManager`

    Parameters
    ----------
    toolmanager: ToolManager
        `backend_managers.ToolManager` object that will get the tools added
    tools : {str: class_like}, optional
        The tools to add in a {name: tool} dict, see `add_tool` for more
        info.
    "
                :arguments 
                  ( ("toolmanager" variable nil (reparse-symbol function_parameters) [27283 27294])
                    ("tools" variable nil (reparse-symbol function_parameters) [27296 27301]))                  )
                nil [27258 27723])
            ("add_tools_to_container" function
               (:documentation "
    Add multiple tools to the container.

    Parameters
    ----------
    container: Container
        `backend_bases.ToolContainerBase` object that will get the tools added
    tools : list, optional
        List in the form
        [[group1, [tool1, tool2 ...]], [group2, [...]]]
        Where the tools given by tool1, and tool2 will display in group1.
        See `add_tool` for details.
    "
                :arguments 
                  ( ("container" variable nil (reparse-symbol function_parameters) [27752 27761])
                    ("tools" variable nil (reparse-symbol function_parameters) [27763 27768]))                  )
                nil [27725 28347]))          
      :file "backend_tools.py"
      :pointmax 28347
      :fsize 28346
      :lastmodtime '(22681 7108 755473 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This provides several classes used for blocking interaction with figure
windows:

:class:`BlockingInput`
    creates a callable object to retrieve events in a blocking way for
    interactive sessions

:class:`BlockingKeyMouseInput`
    creates a callable object to retrieve key or mouse clicks in a blocking
    way for interactive sessions.
    Note: Subclass of BlockingInput. Used by waitforbuttonpress

:class:`BlockingMouseInput`
    creates a callable object to retrieve mouse clicks in a blocking way for
    interactive sessions.
    Note: Subclass of BlockingInput.  Used by ginput

:class:`BlockingContourLabeler`
    creates a callable object to retrieve mouse clicks in a blocking way that
    will then be used to place labels on a ContourSet
    Note: Subclass of BlockingMouseInput.  Used by clabel
\"\"\"" code nil nil [1 823])
            ("" code nil nil [848 933])
            ("six" include nil nil [935 945])
            ("matplotlib" include nil nil [946 976])
            ("matplotlib.cbook" include nil nil [977 1028])
            ("matplotlib.lines" include nil nil [1029 1062])
            ("warnings" include nil nil [1064 1079])
            ("BlockingInput" type
               (:documentation "
    Class that creates a callable object to retrieve events in a
    blocking way.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1262 1276])
                            ("if" code nil (reparse-symbol indented_block_body) [1285 1402])
                            ("self" variable nil (reparse-symbol indented_block_body) [1410 1438]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1227 1231])
                            ("fig" variable nil (reparse-symbol function_parameters) [1233 1236])
                            ("eventslist" variable nil (reparse-symbol function_parameters) [1238 1248]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1214 1439])
                    ("on_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1457 1461])
                            ("event" variable nil (reparse-symbol function_parameters) [1463 1468]))                          
                        :documentation "
        Event handler that will be passed to the current figure to
        retrieve events.
        ")
                        (reparse-symbol indented_block_body) [1444 2047])
                    ("post_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2067 2071]))                          
                        :documentation "For baseclass, do nothing but collect events")
                        (reparse-symbol indented_block_body) [2052 2146])
                    ("cleanup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2163 2167]))                          
                        :documentation "Disconnect all callbacks")
                        (reparse-symbol indented_block_body) [2151 2319])
                    ("add_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2338 2342])
                            ("event" variable nil (reparse-symbol function_parameters) [2344 2349]))                          
                        :documentation "For base class, this just appends an event to events.")
                        (reparse-symbol indented_block_body) [2324 2454])
                    ("pop_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2473 2477])
                            ("index" variable nil (reparse-symbol function_parameters) [2479 2484]))                          
                        :documentation "
        This removes an event from the event list.  Defaults to
        removing last event, but an index can be supplied.  Note that
        this does not check that there are events, much like the
        normal pop method.  If not events exist, this will throw an
        exception.
        ")
                        (reparse-symbol indented_block_body) [2459 2831])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2844 2848])
                            ("index" variable nil (reparse-symbol function_parameters) [2850 2855]))                          )
                        (reparse-symbol indented_block_body) [2836 2891])
                    ("pop" variable nil (reparse-symbol indented_block_body) [2895 2926])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2945 2949])
                            ("n" variable nil (reparse-symbol function_parameters) [2951 2952])
                            ("timeout" variable nil (reparse-symbol function_parameters) [2956 2963]))                          
                        :documentation "
        Blocking call to retrieve n events
        ")
                        (reparse-symbol indented_block_body) [2932 3761]))                  
                :type "class")
                nil [1082 3761])
            ("BlockingMouseInput" type
               (:documentation "
    Class that creates a callable object to retrieve mouse clicks in a
    blocking way.

    This class will also retrieve keyboard clicks and treat them like
    appropriate mouse clicks (delete and backspace are like mouse button 3,
    enter is like mouse button 2 and all others are like mouse button 1).
    "
                :superclasses ("BlockingInput")
                :members 
                  ( ("button_add" variable nil (reparse-symbol indented_block_body) [4135 4149])
                    ("button_pop" variable nil (reparse-symbol indented_block_body) [4154 4168])
                    ("button_stop" variable nil (reparse-symbol indented_block_body) [4173 4188])
                    ("__init__" function
                       (:suite 
                          ( ("BlockingInput" code nil (reparse-symbol indented_block_body) [4267 4432])
                            ("self" variable nil (reparse-symbol indented_block_body) [4441 4468])
                            ("self" variable nil (reparse-symbol indented_block_body) [4477 4504])
                            ("self" variable nil (reparse-symbol indented_block_body) [4513 4542]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4207 4211])
                            ("fig" variable nil (reparse-symbol function_parameters) [4213 4216])
                            ("mouse_add" variable nil (reparse-symbol function_parameters) [4218 4227])
                            ("mouse_pop" variable nil (reparse-symbol function_parameters) [4231 4240])
                            ("mouse_stop" variable nil (reparse-symbol function_parameters) [4244 4254]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4194 4543])
                    ("post_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4563 4567]))                          
                        :documentation "
        This will be called to process events
        ")
                        (reparse-symbol indented_block_body) [4548 4847])
                    ("mouse_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4868 4872]))                          )
                        (reparse-symbol indented_block_body) [4852 5195])
                    ("key_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5214 5218]))                          )
                        (reparse-symbol indented_block_body) [5200 5830])
                    ("mouse_event_add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5855 5859])
                            ("event" variable nil (reparse-symbol function_parameters) [5861 5866]))                          
                        :documentation "
        Will be called for any event involving a button other than
        button 2 or 3.  This will add a click if it is inside axes.
        ")
                        (reparse-symbol indented_block_body) [5835 6189])
                    ("mouse_event_stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6215 6219])
                            ("event" variable nil (reparse-symbol function_parameters) [6221 6226]))                          
                        :documentation "
        Will be called for any event involving button 2.
        Button 2 ends blocking input.
        ")
                        (reparse-symbol indented_block_body) [6194 6714])
                    ("mouse_event_pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6739 6743])
                            ("event" variable nil (reparse-symbol function_parameters) [6745 6750]))                          
                        :documentation "
        Will be called for any event involving button 3.
        Button 3 removes the last click.
        ")
                        (reparse-symbol indented_block_body) [6719 7063])
                    ("add_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7082 7086])
                            ("event" variable nil (reparse-symbol function_parameters) [7088 7093]))                          
                        :documentation "
        This add the coordinates of an event to the list of clicks
        ")
                        (reparse-symbol indented_block_body) [7068 7650])
                    ("pop_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7669 7673])
                            ("event" variable nil (reparse-symbol function_parameters) [7675 7680])
                            ("index" variable nil (reparse-symbol function_parameters) [7682 7687]))                          
                        :documentation "
        This removes a click from the list of clicks.  Defaults to
        removing the last click.
        ")
                        (reparse-symbol indented_block_body) [7655 7982])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8207 8211])
                            ("event" variable nil (reparse-symbol function_parameters) [8213 8218])
                            ("index" variable nil (reparse-symbol function_parameters) [8220 8225]))                          
                        :documentation "
        This removes a click and the associated event from the object.
        Defaults to removing the last click, but any index can be
        supplied.
        ")
                        (reparse-symbol indented_block_body) [8199 8486])
                    ("cleanup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8503 8507])
                            ("event" variable nil (reparse-symbol function_parameters) [8509 8514]))                          )
                        (reparse-symbol indented_block_body) [8491 8792])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8810 8814])
                            ("n" variable nil (reparse-symbol function_parameters) [8816 8817])
                            ("timeout" variable nil (reparse-symbol function_parameters) [8821 8828])
                            ("show_clicks" variable nil (reparse-symbol function_parameters) [8833 8844]))                          
                        :documentation "
        Blocking call to retrieve n coordinate pairs through mouse
        clicks.
        ")
                        (reparse-symbol indented_block_body) [8797 9134]))                  
                :type "class")
                nil [3763 9134])
            ("BlockingContourLabeler" type
               (:documentation "
    Class that creates a callable object that uses mouse clicks or key
    clicks on a figure window to place contour labels.
    "
                :superclasses ("BlockingMouseInput")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9364 9376])
                            ("BlockingMouseInput" code nil (reparse-symbol indented_block_body) [9385 9436]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9345 9349])
                            ("cs" variable nil (reparse-symbol function_parameters) [9351 9353]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9332 9437])
                    ("add_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9456 9460])
                            ("event" variable nil (reparse-symbol function_parameters) [9462 9467]))                          )
                        (reparse-symbol indented_block_body) [9442 9498])
                    ("pop_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9517 9521])
                            ("event" variable nil (reparse-symbol function_parameters) [9523 9528])
                            ("index" variable nil (reparse-symbol function_parameters) [9530 9535]))                          )
                        (reparse-symbol indented_block_body) [9503 9569])
                    ("button1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9586 9590])
                            ("event" variable nil (reparse-symbol function_parameters) [9592 9597]))                          
                        :documentation "
        This will be called if an event involving a button other than
        2 or 3 occcurs.  This will add a label to a contour.
        ")
                        (reparse-symbol indented_block_body) [9574 10118])
                    ("button3" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10135 10139])
                            ("event" variable nil (reparse-symbol function_parameters) [10141 10146]))                          
                        :documentation "
        This will be called if button 3 is clicked.  This will remove
        a label if not in inline mode.  Unfortunately, if one is doing
        inline labels, then there is currently no way to fix the
        broken contour - once humpty-dumpty is broken, he can't be put
        back together.  In inline mode, this does nothing.
        ")
                        (reparse-symbol indented_block_body) [10123 10641])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10659 10663])
                            ("inline" variable nil (reparse-symbol function_parameters) [10665 10671])
                            ("inline_spacing" variable nil (reparse-symbol function_parameters) [10673 10687])
                            ("n" variable nil (reparse-symbol function_parameters) [10691 10692])
                            ("timeout" variable nil (reparse-symbol function_parameters) [10697 10704]))                          )
                        (reparse-symbol indented_block_body) [10646 10904]))                  
                :type "class")
                nil [9136 10904])
            ("BlockingKeyMouseInput" type
               (:documentation "
    Class that creates a callable object to retrieve a single mouse or
    keyboard click
    "
                :superclasses ("BlockingInput")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("BlockingInput" code nil (reparse-symbol indented_block_body) [11093 11197]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11073 11077])
                            ("fig" variable nil (reparse-symbol function_parameters) [11079 11082]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11060 11198])
                    ("post_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11218 11222]))                          
                        :documentation "
        Determines if it is a key event
        ")
                        (reparse-symbol indented_block_body) [11203 11452])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11470 11474])
                            ("timeout" variable nil (reparse-symbol function_parameters) [11476 11483]))                          
                        :documentation "
        Blocking call to retrieve a single mouse or key click
        Returns True if key click, False if mouse, or None if timeout
        ")
                        (reparse-symbol indented_block_body) [11457 11767]))                  
                :type "class")
                nil [10906 11767]))          
      :file "blocking_input.py"
      :pointmax 11767
      :fsize 11766
      :lastmodtime '(22681 7108 743473 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The legend module defines the Legend class, which is responsible for
drawing legends associated with axes and/or figures.

.. important::

    It is unlikely that you would ever create a Legend instance manually.
    Most users would normally create a legend via the
    :meth:`~matplotlib.axes.Axes.legend` function. For more details on legends
    there is also a :ref:`legend guide <plotting-guide-legend>`.

The Legend class can be considered as a container of legend handles
and legend texts. Creation of corresponding legend handles from the
plot elements in the axes or figures (e.g., lines, patches, etc.) are
specified by the handler map, which defines the mapping between the
plot elements and the legend handlers to be used (the default legend
handlers are defined in the :mod:`~matplotlib.legend_handler` module).
Note that not all kinds of artist are supported by the legend yet by default
but it is possible to extend the legend handler's capabilities to
support arbitrary objects. See the :ref:`legend guide <plotting-guide-legend>`
for more information.

\"\"\"" code nil nil [1 1079])
            ("" code nil nil [1103 1188])
            ("six" include nil nil [1190 1200])
            ("six.moves" include nil nil [1201 1229])
            ("warnings" include nil nil [1231 1246])
            ("numpy" include nil nil [1248 1266])
            ("matplotlib" include nil nil [1268 1299])
            ("matplotlib.artist" include nil nil [1300 1357])
            ("" code nil nil [1387 1435])
            ("matplotlib.font_manager" include nil nil [1436 1486])
            ("matplotlib.lines" include nil nil [1487 1522])
            ("matplotlib.patches" include nil nil [1523 1594])
            ("" code nil nil [1630 1791])
            ("matplotlib.transforms" include nil nil [1792 1857])
            ("matplotlib.transforms" include nil nil [1858 1926])
            ("matplotlib.offsetbox" include nil nil [1928 2000])
            ("matplotlib.offsetbox" include nil nil [2001 2052])
            ("matplotlib.container" include nil nil [2054 2133])
            ("legend_handler" include nil nil [2141 2162])
            ("DraggableLegend" type
               (:superclasses ("DraggableOffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        update : If \"loc\", update *loc* parameter of
                 legend upon finalizing. If \"bbox\", update
                 *bbox_to_anchor* parameter.
        \"\"\"" code nil (reparse-symbol indented_block_body) [2278 2450])
                            ("self" variable nil (reparse-symbol indented_block_body) [2459 2479])
                            ("if" code nil (reparse-symbol indented_block_body) [2489 2677])
                            ("DraggableOffsetBox" code nil (reparse-symbol indented_block_body) [2686 2802]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2225 2229])
                            ("legend" variable nil (reparse-symbol function_parameters) [2231 2237])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [2239 2247])
                            ("update" variable nil (reparse-symbol function_parameters) [2255 2261]))                          
                        :documentation "
        update : If \"loc\", update *loc* parameter of
                 legend upon finalizing. If \"bbox\", update
                 *bbox_to_anchor* parameter.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2212 2803])
                    ("artist_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2826 2830])
                            ("legend" variable nil (reparse-symbol function_parameters) [2832 2838])
                            ("evt" variable nil (reparse-symbol function_parameters) [2840 2843]))                          )
                        (reparse-symbol indented_block_body) [2808 2887])
                    ("finalize_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2912 2916]))                          )
                        (reparse-symbol indented_block_body) [2892 3272])
                    ("_update_loc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3293 3297])
                            ("loc_in_canvas" variable nil (reparse-symbol function_parameters) [3299 3312]))                          )
                        (reparse-symbol indented_block_body) [3277 3796])
                    ("_update_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3828 3832])
                            ("loc_in_canvas" variable nil (reparse-symbol function_parameters) [3834 3847]))                          )
                        (reparse-symbol indented_block_body) [3801 4000]))                  
                :type "class")
                nil [2165 4000])
            ("Legend" type
               (:documentation "
    Place a legend on the axes at location loc.  Labels are a
    sequence of strings and loc can be a string or an integer
    specifying the legend location

    The location codes are::

      'best'         : 0, (only implemented for axes legends)
      'upper right'  : 1,
      'upper left'   : 2,
      'lower left'   : 3,
      'lower right'  : 4,
      'right'        : 5,
      'center left'  : 6,
      'center right' : 7,
      'lower center' : 8,
      'upper center' : 9,
      'center'       : 10,

    loc can be a tuple of the normalized coordinate values with
    respect its parent.

    "
                :superclasses ("Artist")
                :members 
                  ( ("codes" variable nil (reparse-symbol indented_block_body) [4647 5047])
                    ("zorder" variable nil (reparse-symbol indented_block_body) [5053 5063])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5081 5085]))                          )
                        (reparse-symbol indented_block_body) [5069 5112])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        - *parent*: the artist that contains the legend
        - *handles*: a list of artists (lines, patches) to be added to the
                      legend
        - *labels*: a list of strings to label the legend

        Optional keyword arguments:

        ================   ====================================================
        Keyword            Description
        ================   ====================================================
        loc                Location code string, or tuple (see below).
        prop               the font property
        fontsize           the font size (used only if prop is not specified)
        markerscale        the relative size of legend markers vs. original
        markerfirst        If True (default), marker is to left of the label.
        numpoints          the number of points in the legend for line
        scatterpoints      the number of points in the legend for scatter plot
        scatteryoffsets    a list of yoffsets for scatter symbols in legend
        frameon            If True, draw the legend on a patch (frame).
        fancybox           If True, draw the frame with a round fancybox.
        shadow             If True, draw a shadow behind legend.
        framealpha         Transparency of the frame.
        edgecolor          Frame edgecolor.
        facecolor          Frame facecolor.
        ncol               number of columns
        borderpad          the fractional whitespace inside the legend border
        labelspacing       the vertical space between the legend entries
        handlelength       the length of the legend handles
        handleheight       the height of the legend handles
        handletextpad      the pad between the legend handle and text
        borderaxespad      the pad between the axes and legend border
        columnspacing      the spacing between columns
        title              the legend title
        bbox_to_anchor     the bbox that the legend will be anchored.
        bbox_transform     the transform for the bbox. transAxes if None.
        ================   ====================================================


        The pad and spacing parameters are measured in font-size units.  e.g.,
        a fontsize of 10 points and a handlelength=5 implies a handlelength of
        50 points.  Values from rcParams will be used if None.

        Users can specify any arbitrary location for the legend using the
        *bbox_to_anchor* keyword argument. bbox_to_anchor can be an instance
        of BboxBase(or its derivatives) or a tuple of 2 or 4 floats.
        See :meth:`set_bbox_to_anchor` for more detail.

        The legend location can be specified by setting *loc* with a tuple of
        2 floats, which is interpreted as the lower-left corner of the legend
        in the normalized axes coordinate.
        \"\"\"" code nil (reparse-symbol indented_block_body) [7329 10205])
                            ("matplotlib.axes" include nil (reparse-symbol indented_block_body) [10263 10295])
                            ("matplotlib.figure" include nil (reparse-symbol indented_block_body) [10304 10340])
                            ("Artist" code nil (reparse-symbol indented_block_body) [10350 10371])
                            ("if" code nil (reparse-symbol indented_block_body) [10381 10814])
                            ("self" variable nil (reparse-symbol indented_block_body) [10823 10870])
                            ("self" variable nil (reparse-symbol indented_block_body) [10880 10895])
                            ("self" variable nil (reparse-symbol indented_block_body) [10904 10927])
                            ("self" variable nil (reparse-symbol indented_block_body) [10936 10965])
                            ("self" variable nil (reparse-symbol indented_block_body) [11068 11106])
                            ("locals_view" variable nil (reparse-symbol indented_block_body) [11116 11138])
                            ("for" code nil (reparse-symbol indented_block_body) [11147 11583])
                            ("del" code nil (reparse-symbol indented_block_body) [11591 11606])
                            ("handles" variable nil (reparse-symbol indented_block_body) [11616 11639])
                            ("if" code nil (reparse-symbol indented_block_body) [11648 11690])
                            ("self" variable nil (reparse-symbol indented_block_body) [11698 11715])
                            ("if" code nil (reparse-symbol indented_block_body) [11725 11826])
                            ("if" code nil (reparse-symbol indented_block_body) [11896 12077])
                            ("reps" code nil (reparse-symbol indented_block_body) [12085 12148])
                            ("self" variable nil (reparse-symbol indented_block_body) [12157 12278])
                            ("self" variable nil (reparse-symbol indented_block_body) [12442 12465])
                            ("if" code nil (reparse-symbol indented_block_body) [12475 12808])
                            ("self" variable nil (reparse-symbol indented_block_body) [12816 12836])
                            ("if" code nil (reparse-symbol indented_block_body) [12846 12994])
                            ("if" code nil (reparse-symbol indented_block_body) [13002 13818])
                            ("if" code nil (reparse-symbol indented_block_body) [13826 14072])
                            ("self" variable nil (reparse-symbol indented_block_body) [14081 14098])
                            ("self" code nil (reparse-symbol indented_block_body) [14107 14162])
                            ("if" code nil (reparse-symbol indented_block_body) [14313 14388])
                            ("if" code nil (reparse-symbol indented_block_body) [14396 14474])
                            ("if" code nil (reparse-symbol indented_block_body) [14483 14558])
                            ("if" code nil (reparse-symbol indented_block_body) [14566 14644])
                            ("self" variable nil (reparse-symbol indented_block_body) [14653 14880])
                            ("if" code nil (reparse-symbol indented_block_body) [15053 15125])
                            ("if" code nil (reparse-symbol indented_block_body) [15134 15339])
                            ("self" code nil (reparse-symbol indented_block_body) [15348 15388])
                            ("self" variable nil (reparse-symbol indented_block_body) [15398 15423])
                            ("if" code nil (reparse-symbol indented_block_body) [15432 15509])
                            ("self" code nil (reparse-symbol indented_block_body) [15552 15603])
                            ("if" code nil (reparse-symbol indented_block_body) [15613 15771])
                            ("self" variable nil (reparse-symbol indented_block_body) [15780 15795])
                            ("self" code nil (reparse-symbol indented_block_body) [15804 15825])
                            ("self" variable nil (reparse-symbol indented_block_body) [15834 15877])
                            ("self" variable nil (reparse-symbol indented_block_body) [15886 15908]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5130 5134])
                            ("parent" variable nil (reparse-symbol function_parameters) [5136 5142])
                            ("handles" variable nil (reparse-symbol function_parameters) [5144 5151])
                            ("labels" variable nil (reparse-symbol function_parameters) [5153 5159])
                            ("loc" variable nil (reparse-symbol function_parameters) [5178 5181])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [5205 5214])
                            ("markerscale" variable nil (reparse-symbol function_parameters) [5283 5294])
                            ("markerfirst" variable nil (reparse-symbol function_parameters) [5408 5419])
                            ("scatterpoints" variable nil (reparse-symbol function_parameters) [5545 5558])
                            ("scatteryoffsets" variable nil (reparse-symbol function_parameters) [5612 5627])
                            ("prop" variable nil (reparse-symbol function_parameters) [5651 5655])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [5722 5730])
                            ("borderpad" variable nil (reparse-symbol function_parameters) [5870 5879])
                            ("labelspacing" variable nil (reparse-symbol function_parameters) [5950 5962])
                            ("handlelength" variable nil (reparse-symbol function_parameters) [6076 6088])
                            ("handleheight" variable nil (reparse-symbol function_parameters) [6149 6161])
                            ("handletextpad" variable nil (reparse-symbol function_parameters) [6222 6235])
                            ("borderaxespad" variable nil (reparse-symbol function_parameters) [6345 6358])
                            ("columnspacing" variable nil (reparse-symbol function_parameters) [6468 6481])
                            ("ncol" variable nil (reparse-symbol function_parameters) [6533 6537])
                            ("mode" variable nil (reparse-symbol function_parameters) [6582 6586])
                            ("fancybox" variable nil (reparse-symbol function_parameters) [6705 6713])
                            ("shadow" variable nil (reparse-symbol function_parameters) [6834 6840])
                            ("title" variable nil (reparse-symbol function_parameters) [6864 6869])
                            ("framealpha" variable nil (reparse-symbol function_parameters) [6924 6934])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [6977 6986])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [7035 7044])
                            ("bbox_to_anchor" variable nil (reparse-symbol function_parameters) [7094 7108])
                            ("bbox_transform" variable nil (reparse-symbol function_parameters) [7174 7188])
                            ("frameon" variable nil (reparse-symbol function_parameters) [7238 7245])
                            ("handler_map" variable nil (reparse-symbol function_parameters) [7283 7294]))                          
                        :documentation "
        - *parent*: the artist that contains the legend
        - *handles*: a list of artists (lines, patches) to be added to the
                      legend
        - *labels*: a list of strings to label the legend

        Optional keyword arguments:

        ================   ====================================================
        Keyword            Description
        ================   ====================================================
        loc                Location code string, or tuple (see below).
        prop               the font property
        fontsize           the font size (used only if prop is not specified)
        markerscale        the relative size of legend markers vs. original
        markerfirst        If True (default), marker is to left of the label.
        numpoints          the number of points in the legend for line
        scatterpoints      the number of points in the legend for scatter plot
        scatteryoffsets    a list of yoffsets for scatter symbols in legend
        frameon            If True, draw the legend on a patch (frame).
        fancybox           If True, draw the frame with a round fancybox.
        shadow             If True, draw a shadow behind legend.
        framealpha         Transparency of the frame.
        edgecolor          Frame edgecolor.
        facecolor          Frame facecolor.
        ncol               number of columns
        borderpad          the fractional whitespace inside the legend border
        labelspacing       the vertical space between the legend entries
        handlelength       the length of the legend handles
        handleheight       the height of the legend handles
        handletextpad      the pad between the legend handle and text
        borderaxespad      the pad between the axes and legend border
        columnspacing      the spacing between columns
        title              the legend title
        bbox_to_anchor     the bbox that the legend will be anchored.
        bbox_transform     the transform for the bbox. transAxes if None.
        ================   ====================================================


        The pad and spacing parameters are measured in font-size units.  e.g.,
        a fontsize of 10 points and a handlelength=5 implies a handlelength of
        50 points.  Values from rcParams will be used if None.

        Users can specify any arbitrary location for the legend using the
        *bbox_to_anchor* keyword argument. bbox_to_anchor can be an instance
        of BboxBase(or its derivatives) or a tuple of 2 or 4 floats.
        See :meth:`set_bbox_to_anchor` for more detail.

        The legend location can be specified by setting *loc* with a tuple of
        2 floats, which is interpreted as the lower-left corner of the legend
        in the normalized axes coordinate.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5117 15909])
                    ("_set_artist_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15936 15940])
                            ("a" variable nil (reparse-symbol function_parameters) [15942 15943]))                          
                        :documentation "
        set the boilerplate props for artists added to axes
        ")
                        (reparse-symbol indented_block_body) [15914 16202])
                    ("_set_loc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16220 16224])
                            ("loc" variable nil (reparse-symbol function_parameters) [16226 16229]))                          )
                        (reparse-symbol indented_block_body) [16207 16805])
                    ("_get_loc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16823 16827]))                          )
                        (reparse-symbol indented_block_body) [16810 16860])
                    ("_loc" variable nil (reparse-symbol indented_block_body) [16865 16900])
                    ("_findoffset_best" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16927 16931])
                            ("width" variable nil (reparse-symbol function_parameters) [16933 16938])
                            ("height" variable nil (reparse-symbol function_parameters) [16940 16946])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [16948 16956])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [16958 16966])
                            ("renderer" variable nil (reparse-symbol function_parameters) [16968 16976]))                          )
                        (reparse-symbol indented_block_body) [16906 17158])
                    ("_findoffset_loc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17183 17187])
                            ("width" variable nil (reparse-symbol function_parameters) [17189 17194])
                            ("height" variable nil (reparse-symbol function_parameters) [17196 17202])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [17204 17212])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [17214 17222])
                            ("renderer" variable nil (reparse-symbol function_parameters) [17224 17232]))                          )
                        (reparse-symbol indented_block_body) [17163 17875])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17914 17918])
                            ("renderer" variable nil (reparse-symbol function_parameters) [17920 17928]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17880 19093])
                    ("_approx_text_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19122 19126])
                            ("renderer" variable nil (reparse-symbol function_parameters) [19128 19136]))                          
                        :documentation "
        Return the approximate height of the text. This is used to place
        the legend handle.
        ")
                        (reparse-symbol indented_block_body) [19098 19406])
                    ("_default_handler_map" variable nil (reparse-symbol indented_block_body) [19520 20261])
                    ("get_default_handler_map" function
                       (:documentation "
        A class method that returns the default handler map.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [20420 20423]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [20375 20551])
                    ("set_default_handler_map" function
                       (:documentation "
        A class method to set the default handler map.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [20601 20604])
                            ("handler_map" variable nil (reparse-symbol function_parameters) [20606 20617]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [20556 20746])
                    ("update_default_handler_map" function
                       (:documentation "
        A class method to update the default handler map.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [20799 20802])
                            ("handler_map" variable nil (reparse-symbol function_parameters) [20804 20815]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [20751 20953])
                    ("get_legend_handler_map" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20985 20989]))                          
                        :documentation "
        return the handler map.
        ")
                        (reparse-symbol indented_block_body) [20958 21315])
                    ("get_legend_handler" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("legend_handler_map" variable nil (reparse-symbol function_parameters) [21361 21379])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [21381 21392]))                          
                        :documentation "
        return a legend handler from *legend_handler_map* that
        corresponds to *orig_handler*.

        *legend_handler_map* should be a dictionary object (that is
        returned by the get_legend_handler_map method).

        It first checks if the *orig_handle* itself is a key in the
        *legend_hanler_map* and return the associated value.
        Otherwise, it checks for each of the classes in its
        method-resolution-order. If no matching key is found, it
        returns None.
        ")
                        (reparse-symbol indented_block_body) [21320 22379])
                    ("_init_legend_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22405 22409])
                            ("handles" variable nil (reparse-symbol function_parameters) [22411 22418])
                            ("labels" variable nil (reparse-symbol function_parameters) [22420 22426])
                            ("markerfirst" variable nil (reparse-symbol function_parameters) [22428 22439]))                          
                        :documentation "
        Initialize the legend_box. The legend_box is an instance of
        the OffsetBox, which is packed with legend handles and
        texts. Once packed, their location is calculated during the
        drawing time.
        ")
                        (reparse-symbol indented_block_body) [22384 28752])
                    ("_auto_legend_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28779 28783]))                          
                        :documentation "
        Returns list of vertices and extents covered by the plot.

        Returns a two long list.

        First element is a list of (x, y) vertices (in
        display-coordinates) covered by all the lines and line
        collections, in the legend's handles.

        Second element is a list of bounding boxes for all the patches in
        the legend's handles.
        ")
                        (reparse-symbol indented_block_body) [28757 30449])
                    ("draw_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30469 30473])
                            ("b" variable nil (reparse-symbol function_parameters) [30475 30476]))                          )
                        (reparse-symbol indented_block_body) [30454 30555])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30577 30581]))                          )
                        (reparse-symbol indented_block_body) [30560 30789])
                    ("get_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30808 30812]))                          )
                        (reparse-symbol indented_block_body) [30794 30912])
                    ("get_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30931 30935]))                          )
                        (reparse-symbol indented_block_body) [30917 31074])
                    ("get_patches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31095 31099]))                          )
                        (reparse-symbol indented_block_body) [31079 31307])
                    ("get_texts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31326 31330]))                          )
                        (reparse-symbol indented_block_body) [31312 31440])
                    ("set_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31459 31463])
                            ("title" variable nil (reparse-symbol function_parameters) [31465 31470])
                            ("prop" variable nil (reparse-symbol function_parameters) [31472 31476]))                          
                        :documentation "
        set the legend title. Fontproperties can be optionally set
        with *prop* parameter.
        ")
                        (reparse-symbol indented_block_body) [31445 32006])
                    ("get_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32025 32029]))                          )
                        (reparse-symbol indented_block_body) [32011 32128])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32155 32159])
                            ("args" variable nil (reparse-symbol function_parameters) [32161 32166])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [32168 32176]))                          )
                        (reparse-symbol indented_block_body) [32133 32286])
                    ("get_frame_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32308 32312]))                          
                        :documentation "
        Get whether the legend box patch is drawn
        ")
                        (reparse-symbol indented_block_body) [32291 32420])
                    ("set_frame_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32442 32446])
                            ("b" variable nil (reparse-symbol function_parameters) [32448 32449]))                          
                        :documentation "
        Set whether the legend box patch is drawn

        ACCEPTS: [ *True* | *False* ]
        ")
                        (reparse-symbol indented_block_body) [32425 32619])
                    ("get_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32647 32651]))                          
                        :documentation "
        return the bbox that the legend will be anchored
        ")
                        (reparse-symbol indented_block_body) [32624 32866])
                    ("set_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32894 32898])
                            ("bbox" variable nil (reparse-symbol function_parameters) [32900 32904])
                            ("transform" variable nil (reparse-symbol function_parameters) [32906 32915]))                          
                        :documentation "
        set the bbox that the legend will be anchored.

        *bbox* can be a BboxBase instance, a tuple of [left, bottom,
        width, height] in the given transform (normalized axes
        coordinate if None), or a tuple of [left, bottom] where the
        width and height will be assumed to be zero.
        ")
                        (reparse-symbol indented_block_body) [32871 33966])
                    ("_get_anchored_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33994 33998])
                            ("loc" variable nil (reparse-symbol function_parameters) [34000 34003])
                            ("bbox" variable nil (reparse-symbol function_parameters) [34005 34009])
                            ("parentbbox" variable nil (reparse-symbol function_parameters) [34011 34021])
                            ("renderer" variable nil (reparse-symbol function_parameters) [34023 34031]))                          
                        :documentation "
        Place the *bbox* inside the *parentbbox* according to a given
        location code. Return the (x,y) coordinate of the bbox.

        - loc: a location code in range(1, 11).
          This corresponds to the possible values for self._loc, excluding
          \"best\".

        - bbox: bbox to be placed, display coodinate units.
        - parentbbox: a parent box which will contain the bbox. In
            display coordinates.
        ")
                        (reparse-symbol indented_block_body) [33971 35234])
                    ("_find_best_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35263 35267])
                            ("width" variable nil (reparse-symbol function_parameters) [35269 35274])
                            ("height" variable nil (reparse-symbol function_parameters) [35276 35282])
                            ("renderer" variable nil (reparse-symbol function_parameters) [35284 35292])
                            ("consider" variable nil (reparse-symbol function_parameters) [35294 35302]))                          
                        :documentation "
        Determine the best location to place the legend.

        `consider` is a list of (x, y) pairs to consider as a potential
        lower-left corner of the legend. All are display coords.
        ")
                        (reparse-symbol indented_block_body) [35239 37763])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37781 37785])
                            ("event" variable nil (reparse-symbol function_parameters) [37787 37792]))                          )
                        (reparse-symbol indented_block_body) [37768 37843])
                    ("draggable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37862 37866])
                            ("state" variable nil (reparse-symbol function_parameters) [37868 37873])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [37880 37888])
                            ("update" variable nil (reparse-symbol function_parameters) [37896 37902]))                          
                        :documentation "
        Set the draggable state -- if state is

          * None : toggle the current state

          * True : turn draggable on

          * False : turn draggable off

        If draggable is on, you can drag the legend on the canvas with
        the mouse.  The DraggableLegend helper instance is returned if
        draggable is on.

        The update parameter control which parameter of the legend changes
        when dragged. If update is \"loc\", the *loc* paramter of the legend
        is changed. If \"bbox\", the *bbox_to_anchor* parameter is changed.
        ")
                        (reparse-symbol indented_block_body) [37848 39063]))                  
                :type "class")
                nil [4002 39063]))          
      :file "legend.py"
      :pointmax 39063
      :fsize 39062
      :lastmodtime '(22681 7108 755473 0)
      :unmatched-syntax '((FROM 2134 . 2138) (PERIOD 2139 . 2140)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module for parsing and generating fontconfig patterns.

See the `fontconfig pattern specification
<https://www.freedesktop.org/software/fontconfig/fontconfig-user.html>`_ for
more information.
\"\"\"" code nil nil [1 203])
            ("" code nil nil [709 794])
            ("six" include nil nil [796 806])
            ("sys" include nil nil [808 822])
            ("re" include nil nil [808 822])
            ("pyparsing" include nil nil [823 925])
            ("family_punc" variable nil nil [927 950])
            ("family_unescape" variable nil nil [951 1010])
            ("family_escape" variable nil nil [1011 1066])
            ("value_punc" variable nil nil [1068 1090])
            ("value_unescape" variable nil nil [1091 1148])
            ("value_escape" variable nil nil [1149 1202])
            ("FontconfigPatternParser" type
               (:documentation "A simple pyparsing-based parser for fontconfig-style patterns.

    See the `fontconfig pattern specification
    <https://www.freedesktop.org/software/fontconfig/fontconfig-user.html>`_
    for more information.
    "
                :superclasses ("object")
                :members 
                  ( ("_constants" variable nil (reparse-symbol indented_block_body) [1476 2712])
                    ("__init__" function
                       (:suite 
                          ( ("family" variable nil (reparse-symbol indented_block_body) [2746 2898])
                            ("size" variable nil (reparse-symbol indented_block_body) [2907 3009])
                            ("name" variable nil (reparse-symbol indented_block_body) [3018 3100])
                            ("value" variable nil (reparse-symbol indented_block_body) [3109 3258])
                            ("families" variable nil (reparse-symbol indented_block_body) [3268 3444])
                            ("point_sizes" variable nil (reparse-symbol indented_block_body) [3454 3629])
                            ("property" variable nil (reparse-symbol indented_block_body) [3639 3960])
                            ("pattern" variable nil (reparse-symbol indented_block_body) [3970 4294])
                            ("self" variable nil (reparse-symbol indented_block_body) [4304 4326])
                            ("self" variable nil (reparse-symbol indented_block_body) [4335 4371]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2731 2735]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2718 4372])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4387 4391])
                            ("pattern" variable nil (reparse-symbol function_parameters) [4393 4400]))                          
                        :documentation "
        Parse the given fontconfig *pattern* and return a dictionary
        of key/value pairs useful for initializing a
        :class:`font_manager.FontProperties` object.
        ")
                        (reparse-symbol indented_block_body) [4377 4932])
                    ("_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4949 4953])
                            ("s" variable nil (reparse-symbol function_parameters) [4955 4956])
                            ("loc" variable nil (reparse-symbol function_parameters) [4958 4961])
                            ("tokens" variable nil (reparse-symbol function_parameters) [4963 4969]))                          )
                        (reparse-symbol indented_block_body) [4937 5028])
                    ("_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5043 5047])
                            ("s" variable nil (reparse-symbol function_parameters) [5049 5050])
                            ("loc" variable nil (reparse-symbol function_parameters) [5052 5055])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5057 5063]))                          )
                        (reparse-symbol indented_block_body) [5033 5100])
                    ("_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5115 5119])
                            ("s" variable nil (reparse-symbol function_parameters) [5121 5122])
                            ("loc" variable nil (reparse-symbol function_parameters) [5124 5127])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5129 5135]))                          )
                        (reparse-symbol indented_block_body) [5105 5170])
                    ("_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5186 5190])
                            ("s" variable nil (reparse-symbol function_parameters) [5192 5193])
                            ("loc" variable nil (reparse-symbol function_parameters) [5195 5198])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5200 5206]))                          )
                        (reparse-symbol indented_block_body) [5175 5264])
                    ("_families" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5283 5287])
                            ("s" variable nil (reparse-symbol function_parameters) [5289 5290])
                            ("loc" variable nil (reparse-symbol function_parameters) [5292 5295])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5297 5303]))                          )
                        (reparse-symbol indented_block_body) [5269 5386])
                    ("_point_sizes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5408 5412])
                            ("s" variable nil (reparse-symbol function_parameters) [5414 5415])
                            ("loc" variable nil (reparse-symbol function_parameters) [5417 5420])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5422 5428]))                          )
                        (reparse-symbol indented_block_body) [5391 5509])
                    ("_property" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5528 5532])
                            ("s" variable nil (reparse-symbol function_parameters) [5534 5535])
                            ("loc" variable nil (reparse-symbol function_parameters) [5537 5540])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5542 5548]))                          )
                        (reparse-symbol indented_block_body) [5514 5894]))                  
                :type "class")
                nil [1204 5894])
            ("parse_fontconfig_pattern" variable nil nil [5895 5953])
            ("generate_fontconfig_pattern" function
               (:documentation "
    Given a dictionary of key/value pairs, generates a fontconfig
    pattern string.
    "
                :arguments 
                  ( ("d" variable nil (reparse-symbol function_parameters) [5987 5988]))                  )
                nil [5955 6557]))          
      :file "fontconfig_pattern.py"
      :pointmax 6557
      :fsize 6556
      :lastmodtime '(22681 7108 755473 0)
      :unmatched-syntax '((INDENT_BLOCK 4740 . 4842) (NEWLINE 4739 . 4740) (COLON 4738 . 4739) (TRY 4648 . 4651) (AS 4734 . 4736)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Nothing here but dictionaries for generating LinearSegmentedColormaps,
and a dictionary of these dictionaries.

Documentation for each is in pyplot.colormaps().  Please update this
with the purpose and type of your colormap if you add data for one here.
\"\"\"" code nil nil [1 262])
            ("" code nil nil [287 372])
            ("matplotlib.cbook" include nil nil [374 418])
            ("numpy" include nil nil [419 437])
            ("_binary_data" variable nil nil [439 592])
            ("_autumn_data" variable nil nil [594 767])
            ("_bone_data" variable nil nil [769 1232])
            ("_cool_data" variable nil nil [1234 1399])
            ("_copper_data" variable nil nil [1401 1722])
            ("_flag_data" variable nil nil [1724 1940])
            ("_prism_data" variable nil nil [1942 2170])
            ("cubehelix" function (:arguments 
              ( ("gamma" variable nil (reparse-symbol function_parameters) [2187 2192])
                ("s" variable nil (reparse-symbol function_parameters) [2198 2199])
                ("r" variable nil (reparse-symbol function_parameters) [2205 2206])
                ("h" variable nil (reparse-symbol function_parameters) [2213 2214]))              ) nil [2173 4958])
            ("_cubehelix_data" variable nil nil [4959 4988])
            ("_bwr_data" variable nil nil [4990 5053])
            ("_brg_data" variable nil nil [5054 5117])
            ("gfunc" variable nil nil [5147 6579])
            ("gfunc32" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6594 6595]))              ) nil [6582 6796])
            ("_gnuplot_data" variable nil nil [6797 6895])
            ("_gnuplot2_data" variable nil nil [6897 6998])
            ("_ocean_data" variable nil nil [7000 7097])
            ("_afmhot_data" variable nil nil [7099 7198])
            ("_rainbow_data" variable nil nil [7200 7300])
            ("_seismic_data" variable nil nil [7302 7428])
            ("_terrain_data" variable nil nil [7430 7647])
            ("_gray_data" variable nil nil [7649 7795])
            ("_hot_data" variable nil nil [7797 8258])
            ("_hsv_data" variable nil nil [8260 9489])
            ("_jet_data" variable nil nil [9491 9856])
            ("_pink_data" variable nil nil [9858 20377])
            ("_spring_data" variable nil nil [20379 20552])
            ("_summer_data" variable nil nil [20555 20732])
            ("_winter_data" variable nil nil [20735 20908])
            ("_nipy_spectral_data" variable nil nil [20910 22673])
            ("_Blues_data" variable nil nil [23059 23718])
            ("_BrBG_data" variable nil nil [23720 24520])
            ("_BuGn_data" variable nil nil [24522 25180])
            ("_BuPu_data" variable nil nil [25182 25840])
            ("_GnBu_data" variable nil nil [25842 26500])
            ("_Greens_data" variable nil nil [26502 27162])
            ("_Greys_data" variable nil nil [27164 27823])
            ("_Oranges_data" variable nil nil [27825 28486])
            ("_OrRd_data" variable nil nil [28488 29146])
            ("_PiYG_data" variable nil nil [29148 29948])
            ("_PRGn_data" variable nil nil [29950 30750])
            ("_PuBu_data" variable nil nil [30752 31410])
            ("_PuBuGn_data" variable nil nil [31412 32072])
            ("_PuOr_data" variable nil nil [32074 32874])
            ("_PuRd_data" variable nil nil [32876 33534])
            ("_Purples_data" variable nil nil [33536 34197])
            ("_RdBu_data" variable nil nil [34199 34999])
            ("_RdGy_data" variable nil nil [35001 35801])
            ("_RdPu_data" variable nil nil [35803 36461])
            ("_RdYlBu_data" variable nil nil [36463 37254])
            ("_RdYlGn_data" variable nil nil [37256 38047])
            ("_Reds_data" variable nil nil [38049 38698])
            ("_Spectral_data" variable nil nil [38700 39493])
            ("_YlGn_data" variable nil nil [39495 40144])
            ("_YlGnBu_data" variable nil nil [40146 40797])
            ("_YlOrBr_data" variable nil nil [40799 41450])
            ("_YlOrRd_data" variable nil nil [41452 42103])
            ("_Accent_data" variable nil nil [42207 42781])
            ("_Dark2_data" variable nil nil [42783 43356])
            ("_Paired_data" variable nil nil [43358 44208])
            ("_Pastel1_data" variable nil nil [44210 44854])
            ("_Pastel2_data" variable nil nil [44856 45431])
            ("_Set1_data" variable nil nil [45433 46058])
            ("_Set2_data" variable nil nil [46060 46632])
            ("_Set3_data" variable nil nil [46634 47482])
            ("_gist_earth_data" variable nil nil [47995 49103])
            ("_gist_gray_data" variable nil nil [49105 49204])
            ("_gist_heat_data" variable nil nil [49206 49336])
            ("_gist_ncar_data" variable nil nil [49338 50604])
            ("_gist_rainbow_data" variable nil nil [50606 50925])
            ("_gist_stern_data" variable nil nil [50927 51298])
            ("_gist_yarg_data" variable nil nil [51300 51420])
            ("_coolwarm_data" variable nil nil [51611 56002])
            ("_CMRmap_data" variable nil nil [56221 57520])
            ("_wistia_data" variable nil nil [57929 58650])
            ("_Vega10_data" variable nil nil [58752 59574])
            ("_Vega20_data" variable nil nil [59576 61138])
            ("_Vega20b_data" variable nil nil [61140 62683])
            ("_Vega20c_data" variable nil nil [62685 64248])
            ("_deprecation_datad" type
               (:documentation "
    This class only exists for the purpose of raising an appropriate warning
    for the deprecation of spectral. It should be remove in 2.2, once the
    colormap spectral disappears.
    "
                :superclasses ("dict")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64504 64508])
                            ("key" variable nil (reparse-symbol function_parameters) [64510 64513]))                          )
                        (reparse-symbol indented_block_body) [64488 64845]))                  
                :type "class")
                nil [64251 64845])
            ("datad" variable nil nil [64847 65714])
            ("datad" variable nil nil [65717 65745])
            ("datad" variable nil nil [65746 65772])
            ("datad" variable nil nil [65773 65799])
            ("datad" variable nil nil [65800 65826])
            ("datad" variable nil nil [65827 65853])
            ("datad" variable nil nil [65854 65884])
            ("datad" variable nil nil [65885 65913])
            ("datad" variable nil nil [65914 65946])
            ("datad" variable nil nil [65947 65973])
            ("datad" variable nil nil [65974 66000])
            ("datad" variable nil nil [66001 66027])
            ("datad" variable nil nil [66028 66054])
            ("datad" variable nil nil [66055 66085])
            ("datad" variable nil nil [66086 66112])
            ("datad" variable nil nil [66113 66139])
            ("datad" variable nil nil [66140 66172])
            ("datad" variable nil nil [66173 66199])
            ("datad" variable nil nil [66200 66226])
            ("datad" variable nil nil [66227 66253])
            ("datad" variable nil nil [66254 66284])
            ("datad" variable nil nil [66285 66315])
            ("datad" variable nil nil [66316 66342])
            ("datad" variable nil nil [66343 66377])
            ("datad" variable nil nil [66378 66404])
            ("datad" variable nil nil [66405 66435])
            ("datad" variable nil nil [66436 66466])
            ("datad" variable nil nil [66467 66497])
            ("datad" variable nil nil [66499 66537])
            ("datad" variable nil nil [66538 66574])
            ("datad" variable nil nil [66575 66611])
            ("datad" variable nil nil [66612 66648])
            ("datad" variable nil nil [66649 66691])
            ("datad" variable nil nil [66692 66730])
            ("datad" variable nil nil [66731 66767])
            ("datad" variable nil nil [66769 66803])
            ("datad" variable nil nil [66805 66835])
            ("datad" variable nil nil [66851 66893])
            ("datad" variable nil nil [66894 66934])
            ("datad" variable nil nil [66935 66977])
            ("datad" variable nil nil [66978 67022])
            ("datad" variable nil nil [67023 67067])
            ("datad" variable nil nil [67068 67106])
            ("datad" variable nil nil [67107 67145])
            ("datad" variable nil nil [67146 67184])
            ("datad" variable nil nil [67186 67228])
            ("datad" variable nil nil [67229 67271])
            ("datad" variable nil nil [67272 67316])
            ("datad" variable nil nil [67317 67361]))          
      :file "_cm.py"
      :pointmax 67362
      :fsize 67361
      :lastmodtime '(22681 7108 703474 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("ListedColormap" include nil nil [14 35])
            ("_magma_data" variable nil nil [37 12068])
            ("_inferno_data" variable nil nil [12070 24613])
            ("_plasma_data" variable nil nil [24615 36902])
            ("_viridis_data" variable nil nil [36904 49447])
            ("cmaps" variable nil nil [49450 49460])
            ("for" code nil nil [49461 49825]))          
      :file "_cm_listed.py"
      :pointmax 49825
      :fsize 49824
      :lastmodtime '(22681 7108 715473 0)
      :unmatched-syntax '((PERIOD 6 . 7)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags nil
      :file "markers.py"
      :pointmax 32365
      :fsize 32364
      :lastmodtime '(22681 7108 755473 0)
      :unmatched-syntax '(($EOI 32365 . 32365)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module for finding, managing, and using fonts across platforms.

This module provides a single :class:`FontManager` instance that can
be shared across backends and platforms.  The :func:`findfont`
function returns the best TrueType (TTF) font file in the local or
system font path that matches the specified :class:`FontProperties`
instance.  The :class:`FontManager` also handles Adobe Font Metrics
(AFM) font files for use by the PostScript backend.

The design is based on the `W3C Cascading Style Sheet, Level 1 (CSS1)
font specification <http://www.w3.org/TR/1998/REC-CSS2-19980512/>`_.
Future versions may implement the Level 2 or 2.1 specifications.

Experimental support is included for using `fontconfig` on Unix
variant platforms (Linux, OS X, Solaris).  To enable it, set the
constant ``USE_FONTCONFIG`` in this file to ``True``.  Fontconfig has
the advantage that it is the standard way to look up fonts on X11
platforms, so if a font is installed, it is much more likely to be
found.
\"\"\"" code nil nil [1 1007])
            ("" code nil nil [1031 1116])
            ("six" include nil nil [1118 1128])
            ("six.moves" include nil nil [1129 1168])
            ("\"\"\"
KNOWN ISSUES

  - documentation
  - font variant is untested
  - font stretch is incomplete
  - font size is incomplete
  - font size_adjust is incomplete
  - default font algorithm needs improvement and testing
  - setWeights function needs improvement
  - 'light' is an invalid weight value, remove it.
  - update_fonts not implemented

Authors   : John Hunter <jdhunter@ace.bsd.uchicago.edu>
            Paul Barrett <Barrett@STScI.Edu>
            Michael Droettboom <mdroe@STScI.edu>
Copyright : John Hunter (2004,2005), Paul Barrett (2004,2005)
License   : matplotlib license (PSF compatible)
            The font directory code is from ttfquery,
            see license/LICENSE_TTFQUERY.
\"\"\"" code nil nil [1170 1872])
            ("collections" include nil nil [1874 1906])
            ("json" include nil nil [1907 1918])
            ("os" include nil nil [1919 1928])
            ("sys" include nil nil [1929 1939])
            ("threading" include nil nil [1940 1967])
            ("warnings" include nil nil [1968 1983])
            ("matplotlib" include nil nil [1985 2002])
            ("matplotlib" include nil nil [2003 2069])
            ("matplotlib.cbook" include nil nil [2070 2113])
            ("matplotlib.compat" include nil nil [2114 2154])
            ("" code nil nil [2197 2257])
            ("try" code nil nil [2259 2358])
            ("USE_FONTCONFIG" variable nil nil [2360 2382])
            ("verbose" variable nil nil [2383 2411])
            ("font_scalings" variable nil nil [2413 2664])
            ("stretch_dict" variable nil nil [2666 2943])
            ("weight_dict" variable nil nil [2945 3296])
            ("font_family_aliases" variable nil nil [3298 3462])
            ("MSFolders" variable nil nil [3481 3566])
            ("MSFontDirectories" variable nil nil [3569 3705])
            ("X11FontDirectories" variable nil nil [3708 4097])
            ("OSXFontDirectories" variable nil nil [4099 4278])
            ("if" code nil nil [4280 4596])
            ("get_fontext_synonyms" function
               (:documentation "
    Return a list of file extensions extensions that are synonyms for
    the given file extension *fileext*.
    "
                :arguments 
                  ( ("fontext" variable nil (reparse-symbol function_parameters) [4623 4630]))                  )
                nil [4598 4867])
            ("list_fonts" function
               (:documentation "
    Return a list of all fonts matching any of the extensions,
    possibly upper-cased, found recursively under the directory.
    "
                :arguments 
                  ( ("directory" variable nil (reparse-symbol function_parameters) [4884 4893])
                    ("extensions" variable nil (reparse-symbol function_parameters) [4895 4905]))                  )
                nil [4869 5204])
            ("win32FontDirectory" function (:documentation "
    Return the user-specified font directory for Win32.  This is
    looked up from the registry key::

      \\\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\\Fonts

    If the key is not found, $WINDIR/Fonts will be returned.
    ") nil [5206 6084])
            ("win32InstalledFonts" function
               (:documentation "
    Search for fonts in the specified font directory, or use the
    system directories if none given.  A list of TrueType font
    filenames are returned by default, or AFM fonts if *fontext* ==
    'afm'.
    "
                :arguments 
                  ( ("directory" variable nil (reparse-symbol function_parameters) [6110 6119])
                    ("fontext" variable nil (reparse-symbol function_parameters) [6126 6133]))                  )
                nil [6086 7614])
            ("OSXInstalledFonts" function
               (:documentation "
    Get list of font files on OS X - ignores font suffix by default.
    "
                :arguments 
                  ( ("directories" variable nil (reparse-symbol function_parameters) [7638 7649])
                    ("fontext" variable nil (reparse-symbol function_parameters) [7656 7663]))                  )
                nil [7616 8080])
            ("" code nil nil [8092 8094])
            ("_call_fc_list" function (:documentation "Cache and list the font filenames known to `fc-list`.
    ") nil [8095 8807])
            ("get_fontconfig_fonts" function
               (:documentation "List the font filenames known to `fc-list` having the given extension.
    "
                :arguments 
                  ( ("fontext" variable nil (reparse-symbol function_parameters) [8834 8841]))                  )
                nil [8809 9085])
            ("findSystemFonts" function
               (:documentation "
    Search for fonts in the specified font paths.  If no paths are
    given, will use a standard set of system paths, as well as the
    list of fonts tracked by fontconfig if fontconfig is installed and
    available.  A list of TrueType fonts are returned by default with
    AFM fonts as an option.
    "
                :arguments 
                  ( ("fontpaths" variable nil (reparse-symbol function_parameters) [9108 9117])
                    ("fontext" variable nil (reparse-symbol function_parameters) [9124 9131]))                  )
                nil [9088 10559])
            ("weight_as_number" function
               (:documentation "
    Return the weight property as a numeric value.  String values
    are converted to their corresponding numeric value.
    "
                :arguments 
                  ( ("weight" variable nil (reparse-symbol function_parameters) [10582 10588]))                  )
                nil [10561 11024])
            ("FontEntry" type
               (:documentation "
    A class for storing Font properties.  It is used when populating
    the font lookup dictionary.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11452 11472])
                            ("self" variable nil (reparse-symbol indented_block_body) [11481 11500])
                            ("self" variable nil (reparse-symbol indented_block_body) [11509 11529])
                            ("self" variable nil (reparse-symbol indented_block_body) [11538 11560])
                            ("self" variable nil (reparse-symbol indented_block_body) [11569 11590])
                            ("self" variable nil (reparse-symbol indented_block_body) [11599 11621])
                            ("try" code nil (reparse-symbol indented_block_body) [11630 11732]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11185 11189])
                            ("fname" variable nil (reparse-symbol function_parameters) [11208 11213])
                            ("name" variable nil (reparse-symbol function_parameters) [11237 11241])
                            ("style" variable nil (reparse-symbol function_parameters) [11266 11271])
                            ("variant" variable nil (reparse-symbol function_parameters) [11301 11308])
                            ("weight" variable nil (reparse-symbol function_parameters) [11336 11342])
                            ("stretch" variable nil (reparse-symbol function_parameters) [11371 11378])
                            ("size" variable nil (reparse-symbol function_parameters) [11406 11410]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11172 11732])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11750 11754]))                          )
                        (reparse-symbol indented_block_body) [11737 11925]))                  
                :type "class")
                nil [11026 11925])
            ("ttfFontProperty" function
               (:documentation "
    A function for populating the :class:`FontKey` by extracting
    information from the TrueType font file.

    *font* is a :class:`FT2Font` instance.
    "
                :arguments 
                  ( ("font" variable nil (reparse-symbol function_parameters) [11947 11951]))                  )
                nil [11927 14670])
            ("afmFontProperty" function
               (:documentation "
    A function for populating a :class:`FontKey` instance by
    extracting information from the AFM font file.

    *font* is a class:`AFM` instance.
    "
                :arguments 
                  ( ("fontpath" variable nil (reparse-symbol function_parameters) [14692 14700])
                    ("font" variable nil (reparse-symbol function_parameters) [14702 14706]))                  )
                nil [14672 16818])
            ("createFontList" function
               (:documentation "
    A function to create a font lookup list.  The default is to create
    a list of TrueType fonts.  An AFM font list can optionally be
    created.
    "
                :arguments 
                  ( ("fontfiles" variable nil (reparse-symbol function_parameters) [16839 16848])
                    ("fontext" variable nil (reparse-symbol function_parameters) [16850 16857]))                  )
                nil [16820 18634])
            ("FontProperties" type
               (:superclasses ("object")
                :type "class")
                nil [18636 29771])
            ("ttfdict_to_fnames" function
               (:documentation "
    flatten a ttfdict to all the filenames it contains
    "
                :arguments 
                  ( ("d" variable nil (reparse-symbol function_parameters) [29795 29796]))                  )
                nil [29773 30267])
            ("pickle_dump" function
               (:documentation "
    Equivalent to pickle.dump(data, open(filename, 'w'))
    but closes the file to prevent filehandle leakage.
    "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [30285 30289])
                    ("filename" variable nil (reparse-symbol function_parameters) [30291 30299]))                  )
                nil [30269 30497])
            ("pickle_load" function
               (:documentation "
    Equivalent to pickle.load(open(filename, 'r'))
    but closes the file to prevent filehandle leakage.
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [30515 30523]))                  )
                nil [30499 30732])
            ("_normalize_font_family" function (:arguments 
              ( ("family" variable nil (reparse-symbol function_parameters) [30761 30767]))              ) nil [30734 30951])
            ("TempCache" type
               (:documentation "
    A class to store temporary caches that are (a) not saved to disk
    and (b) invalidated whenever certain font-related
    rcParams---namely the family lookup lists---are changed or the
    font cache is reloaded.  This avoids the expensive linear search
    through all fonts every time a font is looked up.
    "
                :superclasses ("object")
                :members 
                  ( ("invalidating_rcparams" variable nil (reparse-symbol indented_block_body) [31391 31515])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [31549 31572])
                            ("self" variable nil (reparse-symbol indented_block_body) [31581 31627]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31534 31538]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31521 31628])
                    ("make_rcparams_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31655 31659]))                          )
                        (reparse-symbol indented_block_body) [31633 31768])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31781 31785])
                            ("prop" variable nil (reparse-symbol function_parameters) [31787 31791]))                          )
                        (reparse-symbol indented_block_body) [31773 31990])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32003 32007])
                            ("prop" variable nil (reparse-symbol function_parameters) [32009 32013])
                            ("value" variable nil (reparse-symbol function_parameters) [32015 32020]))                          )
                        (reparse-symbol indented_block_body) [31995 32216]))                  
                :type "class")
                nil [30953 32216])
            ("FontManager" type
               (:documentation "
    On import, the :class:`FontManager` singleton instance creates a
    list of TrueType fonts based on the font properties: name, style,
    variant, weight, stretch, and size.  The :meth:`findfont` method
    does a nearest neighbor search to find the font that most closely
    matches the specification.  If no good enough match is found, a
    default font is returned.
    "
                :superclasses ("object")
                :members 
                  ( ("__version__" variable nil (reparse-symbol indented_block_body) [32805 32822])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [32884 32916])
                            ("self" variable nil (reparse-symbol indented_block_body) [32926 32956])
                            ("self" variable nil (reparse-symbol indented_block_body) [32965 32989])
                            ("paths" variable nil (reparse-symbol indented_block_body) [32999 33206])
                            ("for" code nil (reparse-symbol indented_block_body) [33253 33663])
                            ("verbose" code nil (reparse-symbol indented_block_body) [33672 33722])
                            ("self" code nil (reparse-symbol indented_block_body) [33791 33849])
                            ("self" variable nil (reparse-symbol indented_block_body) [33858 33946])
                            ("self" variable nil (reparse-symbol indented_block_body) [33955 33976])
                            ("for" code nil (reparse-symbol indented_block_body) [33986 34302])
                            ("self" variable nil (reparse-symbol indented_block_body) [34311 34355])
                            ("self" code nil (reparse-symbol indented_block_body) [34365 34465])
                            ("self" variable nil (reparse-symbol indented_block_body) [34474 34533])
                            ("if" code nil (reparse-symbol indented_block_body) [34542 34677]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32841 32845])
                            ("size" variable nil (reparse-symbol function_parameters) [32847 32851])
                            ("weight" variable nil (reparse-symbol function_parameters) [32858 32864]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32828 34677])
                    ("get_default_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34705 34709]))                          
                        :documentation "
        Return the default font weight.
        ")
                        (reparse-symbol indented_block_body) [34682 34813])
                    ("get_default_size" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        Return the default font size.
        ")
                        (reparse-symbol indented_block_body) [34818 34959])
                    ("set_default_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34987 34991])
                            ("weight" variable nil (reparse-symbol function_parameters) [34993 34999]))                          
                        :documentation "
        Set the default font weight.  The initial value is 'normal'.
        ")
                        (reparse-symbol indented_block_body) [34964 35134])
                    ("update_fonts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35156 35160])
                            ("filenames" variable nil (reparse-symbol function_parameters) [35162 35171]))                          
                        :documentation "
        Update the font dictionary with new font files.
        Currently not implemented.
        ")
                        (reparse-symbol indented_block_body) [35139 35359])
                    ("score_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35504 35508])
                            ("families" variable nil (reparse-symbol function_parameters) [35510 35518])
                            ("family2" variable nil (reparse-symbol function_parameters) [35520 35527]))                          
                        :documentation "
        Returns a match score between the list of font families in
        *families* and the font family name *family2*.

        An exact match at the head of the list returns 0.0.

        A match further down the list will return between 0 and 1.

        No match will return 1.0.
        ")
                        (reparse-symbol indented_block_body) [35487 36730])
                    ("score_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36751 36755])
                            ("style1" variable nil (reparse-symbol function_parameters) [36757 36763])
                            ("style2" variable nil (reparse-symbol function_parameters) [36765 36771]))                          
                        :documentation "
        Returns a match score between *style1* and *style2*.

        An exact match returns 0.0.

        A match between 'italic' and 'oblique' returns 0.1.

        No match returns 1.0.
        ")
                        (reparse-symbol indented_block_body) [36735 37182])
                    ("score_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37205 37209])
                            ("variant1" variable nil (reparse-symbol function_parameters) [37211 37219])
                            ("variant2" variable nil (reparse-symbol function_parameters) [37221 37229]))                          
                        :documentation "
        Returns a match score between *variant1* and *variant2*.

        An exact match returns 0.0, otherwise 1.0.
        ")
                        (reparse-symbol indented_block_body) [37187 37466])
                    ("score_stretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37489 37493])
                            ("stretch1" variable nil (reparse-symbol function_parameters) [37495 37503])
                            ("stretch2" variable nil (reparse-symbol function_parameters) [37505 37513]))                          
                        :documentation "
        Returns a match score between *stretch1* and *stretch2*.

        The result is the absolute value of the difference between the
        CSS numeric values of *stretch1* and *stretch2*, normalized
        between 0.0 and 1.0.
        ")
                        (reparse-symbol indented_block_body) [37471 38105])
                    ("score_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38127 38131])
                            ("weight1" variable nil (reparse-symbol function_parameters) [38133 38140])
                            ("weight2" variable nil (reparse-symbol function_parameters) [38142 38149]))                          
                        :documentation "
        Returns a match score between *weight1* and *weight2*.

        The result is the absolute value of the difference between the
        CSS numeric values of *weight1* and *weight2*, normalized
        between 0.0 and 1.0.
        ")
                        (reparse-symbol indented_block_body) [38110 38725])
                    ("score_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38745 38749])
                            ("size1" variable nil (reparse-symbol function_parameters) [38751 38756])
                            ("size2" variable nil (reparse-symbol function_parameters) [38758 38763]))                          
                        :documentation "
        Returns a match score between *size1* and *size2*.

        If *size2* (the size specified in the font file) is 'scalable', this
        function always returns 0.0, since any font size can be generated.

        Otherwise, the result is the absolute distance between *size1* and
        *size2*, normalized so that the usual range of font sizes (6pt -
        72pt) will lie between 0.0 and 1.0.
        ")
                        (reparse-symbol indented_block_body) [38730 39582])
                    ("findfont" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39600 39604])
                            ("prop" variable nil (reparse-symbol function_parameters) [39606 39610])
                            ("fontext" variable nil (reparse-symbol function_parameters) [39612 39619])
                            ("directory" variable nil (reparse-symbol function_parameters) [39627 39636])
                            ("fallback_to_default" variable nil (reparse-symbol function_parameters) [39660 39679])
                            ("rebuild_if_missing" variable nil (reparse-symbol function_parameters) [39686 39704]))                          
                        :documentation "
        Search the font list for the font that most closely matches
        the :class:`FontProperties` *prop*.

        :meth:`findfont` performs a nearest neighbor search.  Each
        font is given a similarity score to the target font
        properties.  The first font with the highest score is
        returned.  If no matches below a certain threshold are found,
        the default font (usually DejaVu Sans) is returned.

        `directory`, is specified, will only return fonts from the
        given directory (or subdirectory of that directory).

        The result is cached, so subsequent lookups don't have to
        perform the O(n) nearest neighbor search.

        If `fallback_to_default` is True, will fallback to the default
        font family (usually \"DejaVu Sans\" or \"Helvetica\") if
        the first lookup hard-fails.

        See the `W3C Cascading Style Sheet, Level 1
        <http://www.w3.org/TR/1998/REC-CSS2-19980512/>`_ documentation
        for a description of the font finding algorithm.
        ")
                        (reparse-symbol indented_block_body) [39587 43768])
                    ("\"\"\"
    Returns True if the given font is a Postscript Compact Font Format
    Font embedded in an OpenType wrapper.  Used by the PostScript and
    PDF backends that can not subset these fonts.
    \"\"\"" code nil (reparse-symbol indented_block_body) [43842 44044])
                    ("if" code nil (reparse-symbol indented_block_body) [44049 44384])
                    ("return" code nil (reparse-symbol indented_block_body) [44388 44400])
                    ("fontManager" variable nil (reparse-symbol indented_block_body) [44402 44420])
                    ("_fmcache" variable nil (reparse-symbol indented_block_body) [44421 44436])
                    ("re" include nil (reparse-symbol indented_block_body) [44579 44588])
                    ("fc_match" function (:arguments 
                      ( ("pattern" variable nil (reparse-symbol function_parameters) [44607 44614])
                        ("fontext" variable nil (reparse-symbol function_parameters) [44616 44623]))                      ) (reparse-symbol indented_block_body) [44594 45569])
                    ("_fc_match_cache" variable nil (reparse-symbol indented_block_body) [45574 45594])
                    ("findfont" function (:arguments 
                      ( ("prop" variable nil (reparse-symbol function_parameters) [45613 45617])
                        ("fontext" variable nil (reparse-symbol function_parameters) [45619 45626]))                      ) (reparse-symbol indented_block_body) [45600 45996])
                    ("_fmcache" variable nil (reparse-symbol indented_block_body) [46007 46022])
                    ("cachedir" variable nil (reparse-symbol indented_block_body) [46028 46053])
                    ("if" code nil (reparse-symbol indented_block_body) [46058 46250])
                    ("fontManager" variable nil (reparse-symbol indented_block_body) [46255 46273])
                    ("_lookup_cache" variable nil (reparse-symbol indented_block_body) [46279 46357])
                    ("_rebuild" function nil (reparse-symbol indented_block_body) [46363 46611])
                    ("if" code nil (reparse-symbol indented_block_body) [46616 47113])
                    ("findfont" function (:arguments 
                      ( ("prop" variable nil (reparse-symbol function_parameters) [47131 47135])
                        ("kw" variable nil (reparse-symbol function_parameters) [47137 47141]))                      ) (reparse-symbol indented_block_body) [47118 47239]))                  
                :type "class")
                nil [32218 47239]))          
      :file "font_manager.py"
      :pointmax 47239
      :fsize 47238
      :lastmodtime '(22681 7108 739473 0)
      :unmatched-syntax '((NEWLINE 46002 . 46003) (COLON 46001 . 46002) (DEDENT 45997 . 45997) (ELSE 45997 . 46001) (NEWLINE 44480 . 44481) (RPAREN 44479 . 44480) (LPAREN 44463 . 44464) (RPAREN 44462 . 44463) (NAME 44439 . 44447) (LPAREN 44459 . 44460) (NEWLINE 43837 . 43838) (COLON 43836 . 43837) (RPAREN 43835 . 43836) (LPAREN 43826 . 43827) (NEWLINE 43801 . 43802) (RBRACE 43800 . 43801) (DEDENT 43769 . 43769) (NAME 43769 . 43796) (LBRACE 43799 . 43800) (INDENT_BLOCK 8547 . 8570) (NEWLINE 8546 . 8547) (COLON 8545 . 8546) (FINALLY 8538 . 8545)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module providing some utility functions regarding bezier path manipulation.
\"\"\"" code nil nil [1 86])
            ("" code nil nil [111 196])
            ("six" include nil nil [198 208])
            ("numpy" include nil nil [210 228])
            ("matplotlib.path" include nil nil [229 261])
            ("operator" include nil nil [263 287])
            ("warnings" include nil nil [288 303])
            ("NonIntersectingPathException" type
               (:superclasses ("ValueError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [358 362]))                  
                :type "class")
                nil [306 363])
            ("get_intersection" function
               (:documentation " return a intersecting point between a line through (cx1, cy1)
    and having angle t1 and a line through (cx2, cy2) and angle t2.
    "
                :arguments 
                  ( ("cx1" variable nil (reparse-symbol function_parameters) [404 407])
                    ("cy1" variable nil (reparse-symbol function_parameters) [409 412])
                    ("cos_t1" variable nil (reparse-symbol function_parameters) [414 420])
                    ("sin_t1" variable nil (reparse-symbol function_parameters) [422 428])
                    ("cx2" variable nil (reparse-symbol function_parameters) [451 454])
                    ("cy2" variable nil (reparse-symbol function_parameters) [456 459])
                    ("cos_t2" variable nil (reparse-symbol function_parameters) [461 467])
                    ("sin_t2" variable nil (reparse-symbol function_parameters) [469 475]))                  )
                nil [383 1229])
            ("get_normal_points" function
               (:documentation "
    For a line passing through (*cx*, *cy*) and having a angle *t*, return
    locations of the two points located along its perpendicular line at the
    distance of *length*.
    "
                :arguments 
                  ( ("cx" variable nil (reparse-symbol function_parameters) [1253 1255])
                    ("cy" variable nil (reparse-symbol function_parameters) [1257 1259])
                    ("cos_t" variable nil (reparse-symbol function_parameters) [1261 1266])
                    ("sin_t" variable nil (reparse-symbol function_parameters) [1268 1273])
                    ("length" variable nil (reparse-symbol function_parameters) [1275 1281]))                  )
                nil [1231 1740])
            ("_de_casteljau1" function (:arguments 
              ( ("beta" variable nil (reparse-symbol function_parameters) [1891 1895])
                ("t" variable nil (reparse-symbol function_parameters) [1897 1898]))              ) nil [1872 1973])
            ("split_de_casteljau" function
               (:documentation "split a bezier segment defined by its controlpoints *beta*
    into two separate segment divided at *t* and return their control points.

    "
                :arguments 
                  ( ("beta" variable nil (reparse-symbol function_parameters) [1998 2002])
                    ("t" variable nil (reparse-symbol function_parameters) [2004 2005]))                  )
                nil [1975 2485])
            ("find_bezier_t_intersecting_with_closedpath" function
               (:documentation " Find a parameter t0 and t1 of the given bezier path which
    bounds the intersecting points with a provided closed
    path(*inside_closedpath*). Search starts from *t0* and *t1* and it
    uses a simple bisecting algorithm therefore one of the end point
    must be inside the path while the orther doesn't. The search stop
    when |t0-t1| gets smaller than the given tolerence.
    value for

    - bezier_point_at_t : a function which returns x, y coordinates at *t*

    - inside_closedpath : return True if the point is insed the path

    "
                :arguments 
                  ( ("bezier_point_at_t" variable nil (reparse-symbol function_parameters) [2602 2619])
                    ("inside_closedpath" variable nil (reparse-symbol function_parameters) [2668 2685])
                    ("t0" variable nil (reparse-symbol function_parameters) [2734 2736])
                    ("t1" variable nil (reparse-symbol function_parameters) [2741 2743])
                    ("tolerence" variable nil (reparse-symbol function_parameters) [2748 2757]))                  )
                nil [2555 4315])
            ("BezierSegment" type
               (:documentation "
    A simple class of a 2-dimensional bezier segment
    "
                :superclasses ("object")
                :members 
                  ( ("_binom_coeff" variable nil (reparse-symbol indented_block_body) [4517 4653])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *control_points* : location of contol points. It needs have a
         shpae of n * 2, where n is the order of the bezier line. 1<=
         n <= 3 is supported.
        \"\"\"" code nil (reparse-symbol indented_block_body) [4703 4888])
                            ("_o" variable nil (reparse-symbol indented_block_body) [4897 4921])
                            ("self" variable nil (reparse-symbol indented_block_body) [4930 4958])
                            ("_coeff" variable nil (reparse-symbol indented_block_body) [4967 5010])
                            ("_control_points" variable nil (reparse-symbol indented_block_body) [5020 5064])
                            ("xx" variable nil (reparse-symbol indented_block_body) [5073 5099])
                            ("yy" variable nil (reparse-symbol indented_block_body) [5108 5134])
                            ("self" code nil (reparse-symbol indented_block_body) [5144 5166])
                            ("self" code nil (reparse-symbol indented_block_body) [5175 5197]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4672 4676])
                            ("control_points" variable nil (reparse-symbol function_parameters) [4678 4692]))                          
                        :documentation "
        *control_points* : location of contol points. It needs have a
         shpae of n * 2, where n is the order of the bezier line. 1<=
         n <= 3 is supported.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4659 5198])
                    ("point_at_t" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5218 5222])
                            ("t" variable nil (reparse-symbol function_parameters) [5224 5225]))                          )
                        (reparse-symbol indented_block_body) [5203 5502]))                  
                :type "class")
                nil [4317 5502])
            ("split_bezier_intersecting_with_closedpath" function
               (:documentation "
    bezier : control points of the bezier segment
    inside_closedpath : a function which returns true if the point is inside
                        the path
    "
                :arguments 
                  ( ("bezier" variable nil (reparse-symbol function_parameters) [5550 5556])
                    ("inside_closedpath" variable nil (reparse-symbol function_parameters) [5604 5621])
                    ("tolerence" variable nil (reparse-symbol function_parameters) [5669 5678]))                  )
                nil [5504 6250])
            ("find_r_to_boundary_of_closedpath" function
               (:documentation "
    Find a radius r (centered at *xy*) between *rmin* and *rmax* at
    which it intersect with the path.

    inside_closedpath : function
    cx, cy : center
    cos_t, sin_t : cosine and sine for the angle
    rmin, rmax :
    "
                :arguments 
                  ( ("inside_closedpath" variable nil (reparse-symbol function_parameters) [6289 6306])
                    ("xy" variable nil (reparse-symbol function_parameters) [6308 6310])
                    ("cos_t" variable nil (reparse-symbol function_parameters) [6349 6354])
                    ("sin_t" variable nil (reparse-symbol function_parameters) [6356 6361])
                    ("rmin" variable nil (reparse-symbol function_parameters) [6400 6404])
                    ("rmax" variable nil (reparse-symbol function_parameters) [6409 6413])
                    ("tolerence" variable nil (reparse-symbol function_parameters) [6418 6427]))                  )
                nil [6252 6960])
            ("split_path_inout" function
               (:documentation " divide a path into two segment at the point where inside(x, y)
    becomes False.
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [7006 7010])
                    ("inside" variable nil (reparse-symbol function_parameters) [7012 7018])
                    ("tolerence" variable nil (reparse-symbol function_parameters) [7020 7029])
                    ("reorder_inout" variable nil (reparse-symbol function_parameters) [7036 7049]))                  )
                nil [6985 9108])
            ("inside_circle" function (:arguments 
              ( ("cx" variable nil (reparse-symbol function_parameters) [9128 9130])
                ("cy" variable nil (reparse-symbol function_parameters) [9132 9134])
                ("r" variable nil (reparse-symbol function_parameters) [9136 9137]))              ) nil [9110 9255])
            ("get_cos_sin" function (:arguments 
              ( ("x0" variable nil (reparse-symbol function_parameters) [9299 9301])
                ("y0" variable nil (reparse-symbol function_parameters) [9303 9305])
                ("x1" variable nil (reparse-symbol function_parameters) [9307 9309])
                ("y1" variable nil (reparse-symbol function_parameters) [9311 9313]))              ) nil [9283 9478])
            ("check_if_parallel" function
               (:documentation " returns
       * 1 if two lines are parralel in same direction
       * -1 if two lines are parralel in opposite direction
       * 0 otherwise
    "
                :arguments 
                  ( ("dx1" variable nil (reparse-symbol function_parameters) [9502 9505])
                    ("dy1" variable nil (reparse-symbol function_parameters) [9507 9510])
                    ("dx2" variable nil (reparse-symbol function_parameters) [9512 9515])
                    ("dy2" variable nil (reparse-symbol function_parameters) [9517 9520])
                    ("tolerence" variable nil (reparse-symbol function_parameters) [9522 9531]))                  )
                nil [9480 9943])
            ("get_parallels" function
               (:documentation "
    Given the quadratic bezier control points *bezier2*, returns
    control points of quadratic bezier lines roughly parallel to given
    one separated by *width*.
    "
                :arguments 
                  ( ("bezier2" variable nil (reparse-symbol function_parameters) [9963 9970])
                    ("width" variable nil (reparse-symbol function_parameters) [9972 9977]))                  )
                nil [9945 12904])
            ("find_control_points" function
               (:documentation " Find control points of the bezier line throught c1, mm, c2. We
    simply assume that c1, mm, c2 which have parametric value 0, 0.5, and 1.
    "
                :arguments 
                  ( ("c1x" variable nil (reparse-symbol function_parameters) [12930 12933])
                    ("c1y" variable nil (reparse-symbol function_parameters) [12935 12938])
                    ("mmx" variable nil (reparse-symbol function_parameters) [12940 12943])
                    ("mmy" variable nil (reparse-symbol function_parameters) [12945 12948])
                    ("c2x" variable nil (reparse-symbol function_parameters) [12950 12953])
                    ("c2y" variable nil (reparse-symbol function_parameters) [12955 12958]))                  )
                nil [12906 13245])
            ("make_wedged_bezier2" function
               (:documentation "
    Being similar to get_parallels, returns control points of two quadrativ
    bezier lines having a width roughly parralel to given one separated by
    *width*.
    "
                :arguments 
                  ( ("bezier2" variable nil (reparse-symbol function_parameters) [13271 13278])
                    ("width" variable nil (reparse-symbol function_parameters) [13280 13285])
                    ("w1" variable nil (reparse-symbol function_parameters) [13287 13289])
                    ("wm" variable nil (reparse-symbol function_parameters) [13294 13296])
                    ("w2" variable nil (reparse-symbol function_parameters) [13302 13304]))                  )
                nil [13247 15193])
            ("make_path_regular" function
               (:documentation "
    fill in the codes if None.
    "
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [15217 15218]))                  )
                nil [15195 15468])
            ("concatenate_paths" function
               (:documentation "
    concatenate list of paths into a single path.
    "
                :arguments 
                  ( ("paths" variable nil (reparse-symbol function_parameters) [15492 15497]))                  )
                nil [15470 15820]))          
      :file "bezier.py"
      :pointmax 15820
      :fsize 15819
      :lastmodtime '(22681 7108 727473 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags nil
      :file "mlab.py"
      :pointmax 123602
      :fsize 123601
      :lastmodtime '(22681 7108 739473 0)
      :unmatched-syntax '(($EOI 123602 . 123602)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"
:mod:`~matplotlib.mathtext` is a module for parsing a subset of the
TeX math syntax and drawing them to a matplotlib backend.

For a tutorial of its usage see :ref:`mathtext-tutorial`.  This
document is primarily concerned with implementation details.

The module uses pyparsing_ to parse the TeX expression.

.. _pyparsing: http://pyparsing.wikispaces.com/

The Bakoma distribution of the TeX Computer Modern fonts, and STIX
fonts are supported.  There is experimental support for using
arbitrary fonts, but results may vary without proper tweaking and
metrics for those fonts.
\"\"\"" code nil nil [1 588])
            ("" code nil nil [612 697])
            ("six" include nil nil [699 709])
            ("sys" include nil nil [711 725])
            ("os" include nil nil [711 725])
            ("six" include nil nil [726 748])
            ("math" include nil nil [749 770])
            ("try" code nil nil [771 834])
            ("unicodedata" include nil nil [834 852])
            ("warnings" include nil nil [853 878])
            ("numpy" include nil nil [880 908])
            ("numpy" include nil nil [909 927])
            ("pyparsing" include nil nil [929 945])
            ("" code nil nil [968 1204])
            ("if" code nil nil [1231 1588])
            ("matplotlib.afm" include nil nil [1589 1619])
            ("" code nil nil [1649 1734])
            ("" code nil nil [1766 1863])
            ("matplotlib.font_manager" include nil nil [1864 1934])
            ("" code nil nil [1973 2131])
            ("matplotlib" include nil nil [2132 2178])
            ("matplotlib.colors" include nil nil [2180 2215])
            ("matplotlib._png" include nil nil [2216 2246])
            ("get_unicode_index" function
               (:documentation "get_unicode_index(symbol, [bool]) -> integer

Return the integer index (from the Unicode table) of symbol.  *symbol*
can be a single unicode character, a TeX command (i.e. r'\\pi'), or a
Type1 symbol name (i.e. 'phi').
If math is False, the current symbol should be treated as a non-math symbol.
"
                :arguments 
                  ( ("symbol" variable nil (reparse-symbol function_parameters) [2382 2388])
                    ("math" variable nil (reparse-symbol function_parameters) [2390 2394]))                  )
                nil [2360 122150]))          
      :file "mathtext.py"
      :pointmax 122150
      :fsize 122149
      :lastmodtime '(22681 7108 739473 0)
      :unmatched-syntax '((INDENT_BLOCK 120663 . 120699) (NEWLINE 120662 . 120663) (MULT 120652 . 120653) (INDENT_BLOCK 120594 . 120643) (NEWLINE 120593 . 120594) (MULT 120588 . 120589) (INDENT_BLOCK 120515 . 120579) (NEWLINE 120514 . 120515) (MULT 120506 . 120507) (NAME 120480 . 120485) (NEWLINE 120496 . 120497) (NAME 120165 . 120170) (NEWLINE 120181 . 120182) (INDENT_BLOCK 120054 . 120090) (NEWLINE 120053 . 120054) (MULT 120043 . 120044) (INDENT_BLOCK 119985 . 120034) (NEWLINE 119984 . 119985) (MULT 119979 . 119980) (INDENT_BLOCK 119924 . 119970) (NEWLINE 119923 . 119924) (MULT 119916 . 119917) (STRING_LITERAL 119616 . 119860) (NAME 119860 . 119862) (NAME 119863 . 119871) (NAME 119872 . 119878) (COMMA 119884 . 119885) (NEWLINE 119607 . 119608) (COLON 119606 . 119607) (RPAREN 119605 . 119606) (DEDENT 119531 . 119535) (DEF 119535 . 119538) (LPAREN 119545 . 119546) (NEWLINE 118678 . 118679) (COLON 118677 . 118678) (RPAREN 118676 . 118677) (DEDENT 118611 . 118615) (DEF 118615 . 118618) (LPAREN 118626 . 118627) (NEWLINE 117944 . 117945) (COLON 117943 . 117944) (RPAREN 117942 . 117943) (DEDENT 117892 . 117896) (DEF 117896 . 117899) (LPAREN 117907 . 117908) (INDENT_BLOCK 94156 . 115089) (INDENT_BLOCK 93484 . 94156) (COLON 93455 . 93456) (DEDENT 93419 . 93423) (NAME 93423 . 93436) (LBRACE 93439 . 93440) (NEWLINE 92947 . 92948) (COLON 92946 . 92947) (RPAREN 92945 . 92946) (DEDENT 92909 . 92913) (DEF 92913 . 92916) (LPAREN 92928 . 92929) (NEWLINE 92566 . 92567) (COLON 92565 . 92566) (RPAREN 92564 . 92565) (DEDENT 92529 . 92533) (DEF 92533 . 92536) (LPAREN 92545 . 92546) (NEWLINE 92421 . 92422) (COLON 92420 . 92421) (RPAREN 92419 . 92420) (DEDENT 92388 . 92392) (DEF 92392 . 92395) (LPAREN 92400 . 92401) (NEWLINE 92277 . 92278) (COLON 92276 . 92277) (RPAREN 92275 . 92276) (DEDENT 92237 . 92241) (DEF 92241 . 92244) (LPAREN 92256 . 92257) (NEWLINE 92174 . 92175) (COLON 92173 . 92174) (RPAREN 92172 . 92173) (DEDENT 92141 . 92145) (DEF 92145 . 92148) (LPAREN 92153 . 92154) (NEWLINE 91957 . 91958) (COLON 91956 . 91957) (RPAREN 91955 . 91956) (DEDENT 91932 . 91936) (DEF 91936 . 91939) (LPAREN 91950 . 91951) (NEWLINE 91827 . 91828) (COLON 91826 . 91827) (RPAREN 91825 . 91826) (DEDENT 91803 . 91807) (DEF 91807 . 91810) (LPAREN 91820 . 91821) (NEWLINE 91686 . 91687) (COLON 91685 . 91686) (RPAREN 91684 . 91685) (DEDENT 91662 . 91666) (DEF 91666 . 91669) (LPAREN 91679 . 91680) (NEWLINE 90750 . 90751) (COLON 90749 . 90750) (RPAREN 90748 . 90749) (DEDENT 90726 . 90730) (CLASS 90730 . 90735) (LPAREN 90741 . 90742) (INDENT_BLOCK 90151 . 90354) (NEWLINE 90150 . 90151) (COLON 90149 . 90150) (TRY 90051 . 90054) (AS 90143 . 90145) (NEWLINE 89722 . 89723) (COLON 89721 . 89722) (RPAREN 89720 . 89721) (DEDENT 89670 . 89674) (DEF 89674 . 89677) (LPAREN 89683 . 89684) (INDENT_BLOCK 46674 . 47564) (NEWLINE 46673 . 46674) (DEDENT 46647 . 46647) (NAME 46647 . 46669) (LBRACE 46672 . 46673) (NEWLINE 46570 . 46571) (COLON 46569 . 46570) (RPAREN 46568 . 46569) (DEDENT 46521 . 46521) (CLASS 46521 . 46526) (LPAREN 46550 . 46551) (NEWLINE 46509 . 46510) (COLON 46508 . 46509) (RPAREN 46507 . 46508) (DEDENT 46459 . 46459) (CLASS 46459 . 46464) (LPAREN 46489 . 46490) (NEWLINE 46368 . 46369) (COLON 46367 . 46368) (RPAREN 46366 . 46367) (DEDENT 46321 . 46321) (CLASS 46321 . 46326) (LPAREN 46348 . 46349) (NEWLINE 46199 . 46200) (COLON 46198 . 46199) (RPAREN 46197 . 46198) (DEDENT 46156 . 46156) (CLASS 46156 . 46161) (LPAREN 46179 . 46180) (NEWLINE 45997 . 45998) (COLON 45996 . 45997) (RPAREN 45995 . 45996) (DEDENT 45944 . 45944) (CLASS 45944 . 45949) (LPAREN 45977 . 45978) (NEWLINE 44778 . 44779) (COLON 44777 . 44778) (RPAREN 44776 . 44777) (CLASS 44746 . 44751) (LPAREN 44769 . 44770) (NEWLINE 38309 . 38310) (COLON 38308 . 38309) (RPAREN 38307 . 38308) (DEDENT 38280 . 38280) (CLASS 38280 . 38285) (LPAREN 38301 . 38302) (NEWLINE 38150 . 38151) (COLON 38149 . 38150) (RPAREN 38148 . 38149) (DEDENT 38119 . 38119) (CLASS 38119 . 38124) (LPAREN 38138 . 38139) (NEWLINE 34207 . 34208) (COLON 34206 . 34207) (RPAREN 34205 . 34206) (DEDENT 34177 . 34177) (CLASS 34177 . 34182) (LPAREN 34192 . 34193) (NEWLINE 33717 . 33718) (COLON 33716 . 33717) (RPAREN 33715 . 33716) (DEDENT 33682 . 33682) (CLASS 33682 . 33687) (LPAREN 33703 . 33704) (NEWLINE 33215 . 33216) (COLON 33214 . 33215) (RPAREN 33213 . 33214) (DEDENT 33179 . 33179) (CLASS 33179 . 33184) (LPAREN 33201 . 33202) (NEWLINE 31417 . 31418) (COLON 31416 . 31417) (RPAREN 31415 . 31416) (DEDENT 31385 . 31385) (CLASS 31385 . 31390) (LPAREN 31402 . 31403) (NEWLINE 26859 . 26860) (COLON 26858 . 26859) (RPAREN 26857 . 26858) (DEDENT 26825 . 26825) (CLASS 26825 . 26830) (LPAREN 26843 . 26844) (NEWLINE 22006 . 22007) (COLON 22005 . 22006) (RPAREN 22004 . 22005) (DEDENT 21973 . 21973) (CLASS 21973 . 21978) (LPAREN 21990 . 21991) (NEWLINE 17861 . 17862) (COLON 17860 . 17861) (RPAREN 17859 . 17860) (DEDENT 17834 . 17834) (CLASS 17834 . 17839) (LPAREN 17853 . 17854) (NEWLINE 12658 . 12659) (COLON 12657 . 12658) (RPAREN 12656 . 12657) (DEDENT 12638 . 12638) (CLASS 12638 . 12643) (LPAREN 12649 . 12650) (NEWLINE 11895 . 11896) (COLON 11894 . 11895) (RPAREN 11893 . 11894) (DEDENT 11851 . 11851) (CLASS 11851 . 11856) (LPAREN 11877 . 11878) (NEWLINE 11116 . 11117) (COLON 11115 . 11116) (RPAREN 11114 . 11115) (DEDENT 11073 . 11073) (CLASS 11073 . 11078) (LPAREN 11098 . 11099) (NEWLINE 10215 . 10216) (COLON 10214 . 10215) (RPAREN 10213 . 10214) (DEDENT 10173 . 10173) (CLASS 10173 . 10178) (LPAREN 10197 . 10198) (NEWLINE 9387 . 9388) (COLON 9386 . 9387) (RPAREN 9385 . 9386) (DEDENT 9345 . 9345) (CLASS 9345 . 9350) (LPAREN 9369 . 9370) (NEWLINE 8170 . 8171) (COLON 8169 . 8170) (RPAREN 8168 . 8169) (DEDENT 8129 . 8129) (CLASS 8129 . 8134) (LPAREN 8152 . 8153) (NEWLINE 7919 . 7920) (COLON 7918 . 7919) (RPAREN 7917 . 7918) (DEDENT 7871 . 7871) (CLASS 7871 . 7876) (LPAREN 7898 . 7899) (NEWLINE 5337 . 5338) (COLON 5336 . 5337) (RPAREN 5335 . 5336) (DEDENT 5295 . 5295) (CLASS 5295 . 5300) (LPAREN 5319 . 5320) (NEWLINE 3854 . 3855) (COLON 3853 . 3854) (RPAREN 3852 . 3853) (DEDENT 3824 . 3824) (CLASS 3824 . 3829) (LPAREN 3845 . 3846) (NEWLINE 3551 . 3552) (COLON 3550 . 3551) (RPAREN 3549 . 3550) (DEDENT 3528 . 3528) (DEF 3528 . 3531) (LPAREN 3543 . 3544) (NEWLINE 3393 . 3394) (COLON 3392 . 3393) (DEDENT 3373 . 3377) (EXCEPT 3377 . 3383)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module supports embedded TeX expressions in matplotlib via dvipng
and dvips for the raster and postscript backends.  The tex and
dvipng/dvips information is cached in ~/.matplotlib/tex.cache for reuse between
sessions

Requirements:

* latex
* \\*Agg backends: dvipng
* PS backend: latex w/ psfrag, dvips, and Ghostscript 8.51
  (older versions do not work properly)

Backends:

* \\*Agg
* PS
* PDF

For raster output, you can get RGBA numpy arrays from TeX expressions
as follows::

  texmanager = TexManager()
  s = ('\\\\TeX\\\\ is Number '
       '$\\\\displaystyle\\\\sum_{n=1}^\\\\infty\\\\frac{-e^{i\\pi}}{2^n}$!')
  Z = self.texmanager.get_rgba(s, size=12, dpi=80, rgb=(1,0,0))

To enable tex rendering of all text in your matplotlib figure, set
text.usetex in your matplotlibrc file or include these two lines in
your script::

  from matplotlib import rc
  rc('text', usetex=True)

\"\"\"" code nil nil [1 890])
            ("" code nil nil [915 1000])
            ("six" include nil nil [1002 1012])
            ("copy" include nil nil [1014 1025])
            ("glob" include nil nil [1026 1037])
            ("os" include nil nil [1038 1047])
            ("shutil" include nil nil [1048 1061])
            ("sys" include nil nil [1062 1072])
            ("warnings" include nil nil [1073 1088])
            ("hashlib" include nil nil [1090 1113])
            ("distutils.version" include nil nil [1115 1139])
            ("numpy" include nil nil [1140 1158])
            ("matplotlib" include nil nil [1159 1183])
            ("matplotlib" include nil nil [1184 1215])
            ("matplotlib._png" include nil nil [1216 1252])
            ("matplotlib.cbook" include nil nil [1253 1296])
            ("matplotlib.compat.subprocess" include nil nil [1297 1357])
            ("matplotlib.dviread" include nil nil [1358 1394])
            ("re" include nil nil [1395 1404])
            ("DEBUG" variable nil nil [1406 1419])
            ("if" code nil nil [1421 1502])
            ("dvipng_hack_alpha" function nil nil [1504 2322])
            ("TexManager" type
               (:documentation "
    Convert strings to dvi files using TeX, caching the results to a
    working dir
    "
                :superclasses ("object")
                :members 
                  ( ("oldpath" variable nil (reparse-symbol indented_block_body) [2456 2480])
                    ("if" code nil (reparse-symbol indented_block_body) [2485 2543])
                    ("oldcache" variable nil (reparse-symbol indented_block_body) [2547 2593])
                    ("cachedir" variable nil (reparse-symbol indented_block_body) [2599 2628])
                    ("if" code nil (reparse-symbol indented_block_body) [2633 2904])
                    ("if" code nil (reparse-symbol indented_block_body) [2909 3479])
                    ("if" code nil (reparse-symbol indented_block_body) [3484 3534])
                    ("_dvipng_hack_alpha" variable nil (reparse-symbol indented_block_body) [3539 3564])
                    ("rgba_arrayd" variable nil (reparse-symbol indented_block_body) [3639 3655])
                    ("grey_arrayd" variable nil (reparse-symbol indented_block_body) [3660 3676])
                    ("postscriptd" variable nil (reparse-symbol indented_block_body) [3681 3697])
                    ("pscnt" variable nil (reparse-symbol indented_block_body) [3702 3711])
                    ("serif" variable nil (reparse-symbol indented_block_body) [3717 3736])
                    ("sans_serif" variable nil (reparse-symbol indented_block_body) [3741 3766])
                    ("monospace" variable nil (reparse-symbol indented_block_body) [3771 3795])
                    ("cursive" variable nil (reparse-symbol indented_block_body) [3800 3843])
                    ("font_family" variable nil (reparse-symbol indented_block_body) [3848 3869])
                    ("font_families" variable nil (reparse-symbol indented_block_body) [3874 3937])
                    ("font_info" variable nil (reparse-symbol indented_block_body) [3943 4954])
                    ("_rc_cache" variable nil (reparse-symbol indented_block_body) [4960 4976])
                    ("_rc_cache_keys" variable nil (reparse-symbol indented_block_body) [4981 5137])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [5172 5338])
                            ("mkdirs" code nil (reparse-symbol indented_block_body) [5347 5368])
                            ("ff" variable nil (reparse-symbol indented_block_body) [5377 5405])
                            ("if" code nil (reparse-symbol indented_block_body) [5414 5932])
                            ("fontconfig" variable nil (reparse-symbol indented_block_body) [5941 5972])
                            ("for" code nil (reparse-symbol indented_block_body) [5981 7070])
                            ("preamble_bytes" variable nil (reparse-symbol indented_block_body) [7295 7369])
                            ("fontconfig" code nil (reparse-symbol indented_block_body) [7378 7428])
                            ("self" variable nil (reparse-symbol indented_block_body) [7437 7475])
                            ("cmd" variable nil (reparse-symbol indented_block_body) [7591 7651])
                            ("if" code nil (reparse-symbol indented_block_body) [7660 7734])
                            ("while" code nil (reparse-symbol indented_block_body) [7742 7828])
                            ("cmd" variable nil (reparse-symbol indented_block_body) [7836 7856])
                            ("self" variable nil (reparse-symbol indented_block_body) [7865 7995]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5156 5160]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5143 7996])
                    ("get_basefile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8018 8022])
                            ("tex" variable nil (reparse-symbol function_parameters) [8024 8027])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [8029 8037])
                            ("dpi" variable nil (reparse-symbol function_parameters) [8039 8042]))                          
                        :documentation "
        returns a filename based on a hash of the string, fontsize, and dpi
        ")
                        (reparse-symbol indented_block_body) [8001 8479])
                    ("get_font_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8504 8508]))                          
                        :documentation "Reinitializes self if relevant rcParams on have changed.")
                        (reparse-symbol indented_block_body) [8484 9461])
                    ("get_font_preamble" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9488 9492]))                          
                        :documentation "
        returns a string containing font configuration for the tex preamble
        ")
                        (reparse-symbol indented_block_body) [9466 9630])
                    ("get_custom_preamble" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9659 9663]))                          
                        :documentation "returns a string containing user additions to the tex preamble")
                        (reparse-symbol indented_block_body) [9635 9801])
                    ("_get_shell_cmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9825 9829])
                            ("args" variable nil (reparse-symbol function_parameters) [9831 9836]))                          
                        :documentation "
        On windows, changing directories can be complicated by the presence of
        multiple drives. get_shell_cmd deals with this issue.
        ")
                        (reparse-symbol indented_block_body) [9806 10212])
                    ("make_tex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10230 10234])
                            ("tex" variable nil (reparse-symbol function_parameters) [10236 10239])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [10241 10249]))                          
                        :documentation "
        Generate a tex file to render the tex string at a specific font size

        returns the file name
        ")
                        (reparse-symbol indented_block_body) [10217 11829])
                    ("_re_vbox" variable nil (reparse-symbol indented_block_body) [11834 11920])
                    ("make_tex_preview" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11947 11951])
                            ("tex" variable nil (reparse-symbol function_parameters) [11953 11956])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [11958 11966]))                          
                        :documentation "
        Generate a tex file to render the tex string at a specific
        font size.  It uses the preview.sty to determin the dimension
        (width, height, descent) of the output.

        returns the file name
        ")
                        (reparse-symbol indented_block_body) [11926 14020])
                    ("make_dvi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14038 14042])
                            ("tex" variable nil (reparse-symbol function_parameters) [14044 14047])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [14049 14057]))                          
                        :documentation "
        generates a dvi file containing latex's layout of tex string

        returns the file name
        ")
                        (reparse-symbol indented_block_body) [14025 15943])
                    ("make_dvi_preview" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15969 15973])
                            ("tex" variable nil (reparse-symbol function_parameters) [15975 15978])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [15980 15988]))                          
                        :documentation "
        generates a dvi file containing latex's layout of tex
        string. It calls make_tex_preview() method and store the size
        information (width, height, descent) in a separte file.

        returns the file name
        ")
                        (reparse-symbol indented_block_body) [15948 18120])
                    ("make_png" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18138 18142])
                            ("tex" variable nil (reparse-symbol function_parameters) [18144 18147])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [18149 18157])
                            ("dpi" variable nil (reparse-symbol function_parameters) [18159 18162]))                          
                        :documentation "
        generates a png file containing latex's rendering of tex string

        returns the filename
        ")
                        (reparse-symbol indented_block_body) [18125 19590])
                    ("make_ps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19607 19611])
                            ("tex" variable nil (reparse-symbol function_parameters) [19613 19616])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [19618 19626]))                          
                        :documentation "
        generates a postscript file containing latex's rendering of tex string

        returns the file name
        ")
                        (reparse-symbol indented_block_body) [19595 20779])
                    ("get_ps_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20800 20804])
                            ("tex" variable nil (reparse-symbol function_parameters) [20806 20809])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [20811 20819]))                          
                        :documentation "
        returns a list containing the postscript bounding box for latex's
        rendering of the tex string
        ")
                        (reparse-symbol indented_block_body) [20784 21240])
                    ("get_grey" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21258 21262])
                            ("tex" variable nil (reparse-symbol function_parameters) [21264 21267])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [21269 21277])
                            ("dpi" variable nil (reparse-symbol function_parameters) [21284 21287]))                          
                        :documentation "returns the alpha channel")
                        (reparse-symbol indented_block_body) [21245 23549])
                    ("get_rgba" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23567 23571])
                            ("tex" variable nil (reparse-symbol function_parameters) [23573 23576])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [23578 23586])
                            ("dpi" variable nil (reparse-symbol function_parameters) [23593 23596])
                            ("rgb" variable nil (reparse-symbol function_parameters) [23603 23606]))                          
                        :documentation "
        Returns latex's rendering of the tex string as an rgba array
        ")
                        (reparse-symbol indented_block_body) [23554 24292])
                    ("get_text_width_height_descent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24331 24335])
                            ("tex" variable nil (reparse-symbol function_parameters) [24337 24340])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [24342 24350])
                            ("renderer" variable nil (reparse-symbol function_parameters) [24352 24360]))                          
                        :documentation "
        return width, heigth and descent of the text.
        ")
                        (reparse-symbol indented_block_body) [24297 25575]))                  
                :type "class")
                nil [2324 25575]))          
      :file "texmanager.py"
      :pointmax 25575
      :fsize 25574
      :lastmodtime '(22681 7108 751473 0)
      :unmatched-syntax '((INDENT_BLOCK 13695 . 13996) (NEWLINE 13694 . 13695) (COLON 13693 . 13694) (TRY 13592 . 13595) (AS 13687 . 13689) (INDENT_BLOCK 11504 . 11805) (NEWLINE 11503 . 11504) (COLON 11502 . 11503) (TRY 11401 . 11404) (AS 11496 . 11498) (INDENT_BLOCK 3154 . 3319) (NEWLINE 3153 . 3154) (COLON 3152 . 3153) (ELSE 3148 . 3152) (INDENT_BLOCK 3069 . 3136) (NEWLINE 3068 . 3069) (COLON 3067 . 3068) (TRY 2983 . 2986) (AS 3063 . 3065)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
An experimental module for reading dvi files output by TeX. Several
limitations make this not (currently) useful as a general-purpose dvi
preprocessor, but it is currently used by the pdf backend for
processing usetex text.

Interface::

  dvi = Dvi(filename, 72)
  # iterate over pages (but only one page is supported for now):
  for page in dvi:
      w, h, d = page.width, page.height, page.descent
      for x,y,font,glyph,width in page.text:
          fontname = font.texname
          pointsize = font.size
          ...
      for x,y,height,width in page.boxes:
          ...

\"\"\"" code nil nil [1 592])
            ("" code nil nil [616 701])
            ("six" include nil nil [703 713])
            ("six.moves" include nil nil [714 742])
            ("errno" include nil nil [744 756])
            ("matplotlib" include nil nil [757 774])
            ("matplotlib.cbook" include nil nil [775 811])
            ("matplotlib.compat" include nil nil [812 852])
            ("matplotlib" include nil nil [853 884])
            ("numpy" include nil nil [885 903])
            ("struct" include nil nil [904 917])
            ("sys" include nil nil [918 928])
            ("os" include nil nil [929 938])
            ("if" code nil nil [940 985])
            ("_dvistate" variable nil nil [986 1062])
            ("Dvi" type
               (:documentation "
    A dvi (\"device-independent\") file, as produced by TeX.
    The current implementation only reads the first page and does not
    even attempt to verify the postamble.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the object. This takes the filename as input and
        opens the file; actually reading the file happens when
        iterating through the pages of the file.
        \"\"\"" code nil (reparse-symbol indented_block_body) [1318 1513])
                            ("matplotlib" code nil (reparse-symbol indented_block_body) [1522 1576])
                            ("self" variable nil (reparse-symbol indented_block_body) [1585 1617])
                            ("self" variable nil (reparse-symbol indented_block_body) [1626 1640])
                            ("self" variable nil (reparse-symbol indented_block_body) [1649 1664])
                            ("self" variable nil (reparse-symbol indented_block_body) [1673 1699])
                            ("self" variable nil (reparse-symbol indented_block_body) [1708 1752]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1288 1292])
                            ("filename" variable nil (reparse-symbol function_parameters) [1294 1302])
                            ("dpi" variable nil (reparse-symbol function_parameters) [1304 1307]))                          
                        :documentation "
        Initialize the object. This takes the filename as input and
        opens the file; actually reading the file happens when
        iterating through the pages of the file.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1275 1753])
                    ("_get_baseline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1776 1780])
                            ("filename" variable nil (reparse-symbol function_parameters) [1782 1790]))                          )
                        (reparse-symbol indented_block_body) [1758 2185])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2203 2207]))                          
                        :documentation "
        Iterate through the pages of the file.

        Returns (text, boxes) pairs, where:
          text is a list of (x, y, fontnum, glyphnum, width) tuples
          boxes is a list of (x, y, height, width) tuples

        The coordinates are transformed into a standard Cartesian
        coordinate system at the dpi value given when initializing.
        The coordinates are floating point numbers, but otherwise
        precision is not lost and coordinate values are not clipped to
        integers.
        ")
                        (reparse-symbol indented_block_body) [2190 2902])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2917 2921]))                          
                        :documentation "
        Close the underlying file if it is open.
        ")
                        (reparse-symbol indented_block_body) [2907 3060])
                    ("_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3077 3081]))                          
                        :documentation "
        Output the text and boxes belonging to the most recent page.
        page = dvi._output()
        ")
                        (reparse-symbol indented_block_body) [3065 4695])
                    ("_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4710 4714]))                          
                        :documentation "
        Read one page from the file. Return True if successful,
        False if there were no more pages.
        ")
                        (reparse-symbol indented_block_body) [4700 5138])
                    ("_arg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5152 5156])
                            ("nbytes" variable nil (reparse-symbol function_parameters) [5158 5164])
                            ("signed" variable nil (reparse-symbol function_parameters) [5166 5172]))                          
                        :documentation "
        Read and return an integer argument *nbytes* long.
        Signedness is determined by the *signed* keyword.
        ")
                        (reparse-symbol indented_block_body) [5143 5560])
                    ("_dispatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5579 5583])
                            ("byte" variable nil (reparse-symbol function_parameters) [5585 5589]))                          
                        :documentation "
        Based on the opcode *byte*, read the correct kinds of
        arguments from the dvi file and call the method implementing
        that opcode with those arguments.
        ")
                        (reparse-symbol indented_block_body) [5565 9272])
                    ("_pre" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9286 9290])
                            ("i" variable nil (reparse-symbol function_parameters) [9292 9293])
                            ("num" variable nil (reparse-symbol function_parameters) [9295 9298])
                            ("den" variable nil (reparse-symbol function_parameters) [9300 9303])
                            ("mag" variable nil (reparse-symbol function_parameters) [9305 9308])
                            ("comment" variable nil (reparse-symbol function_parameters) [9310 9317]))                          )
                        (reparse-symbol indented_block_body) [9277 10163])
                    ("_set_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10182 10186])
                            ("char" variable nil (reparse-symbol function_parameters) [10188 10192]))                          )
                        (reparse-symbol indented_block_body) [10168 10383])
                    ("_set_rule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10402 10406])
                            ("a" variable nil (reparse-symbol function_parameters) [10408 10409])
                            ("b" variable nil (reparse-symbol function_parameters) [10411 10412]))                          )
                        (reparse-symbol indented_block_body) [10388 10570])
                    ("_put_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10589 10593])
                            ("char" variable nil (reparse-symbol function_parameters) [10595 10599]))                          )
                        (reparse-symbol indented_block_body) [10575 11573])
                    ("_put_rule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11592 11596])
                            ("a" variable nil (reparse-symbol function_parameters) [11598 11599])
                            ("b" variable nil (reparse-symbol function_parameters) [11601 11602]))                          )
                        (reparse-symbol indented_block_body) [11578 11793])
                    ("_nop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11807 11811]))                          )
                        (reparse-symbol indented_block_body) [11798 11827])
                    ("_bop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11841 11845])
                            ("c0" variable nil (reparse-symbol function_parameters) [11847 11849])
                            ("c1" variable nil (reparse-symbol function_parameters) [11851 11853])
                            ("c2" variable nil (reparse-symbol function_parameters) [11855 11857])
                            ("c3" variable nil (reparse-symbol function_parameters) [11859 11861])
                            ("c4" variable nil (reparse-symbol function_parameters) [11863 11865])
                            ("c5" variable nil (reparse-symbol function_parameters) [11867 11869])
                            ("c6" variable nil (reparse-symbol function_parameters) [11871 11873])
                            ("c7" variable nil (reparse-symbol function_parameters) [11875 11877])
                            ("c8" variable nil (reparse-symbol function_parameters) [11879 11881])
                            ("c9" variable nil (reparse-symbol function_parameters) [11883 11885])
                            ("p" variable nil (reparse-symbol function_parameters) [11887 11888]))                          )
                        (reparse-symbol indented_block_body) [11832 12277])
                    ("_eop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12291 12295]))                          )
                        (reparse-symbol indented_block_body) [12282 12507])
                    ("_push" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12522 12526]))                          )
                        (reparse-symbol indented_block_body) [12512 12707])
                    ("_pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12721 12725]))                          )
                        (reparse-symbol indented_block_body) [12712 12903])
                    ("_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12919 12923])
                            ("b" variable nil (reparse-symbol function_parameters) [12925 12926]))                          )
                        (reparse-symbol indented_block_body) [12908 13052])
                    ("_right_w" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13070 13074])
                            ("new_w" variable nil (reparse-symbol function_parameters) [13076 13081]))                          )
                        (reparse-symbol indented_block_body) [13057 13265])
                    ("_right_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13283 13287])
                            ("new_x" variable nil (reparse-symbol function_parameters) [13289 13294]))                          )
                        (reparse-symbol indented_block_body) [13270 13478])
                    ("_down" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13493 13497])
                            ("a" variable nil (reparse-symbol function_parameters) [13499 13500]))                          )
                        (reparse-symbol indented_block_body) [13483 13625])
                    ("_down_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13642 13646])
                            ("new_y" variable nil (reparse-symbol function_parameters) [13648 13653]))                          )
                        (reparse-symbol indented_block_body) [13630 13837])
                    ("_down_z" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13854 13858])
                            ("new_z" variable nil (reparse-symbol function_parameters) [13860 13865]))                          )
                        (reparse-symbol indented_block_body) [13842 14049])
                    ("_fnt_num" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14067 14071])
                            ("k" variable nil (reparse-symbol function_parameters) [14073 14074]))                          )
                        (reparse-symbol indented_block_body) [14054 14201])
                    ("_xxx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14215 14219])
                            ("special" variable nil (reparse-symbol function_parameters) [14221 14228]))                          )
                        (reparse-symbol indented_block_body) [14206 14808])
                    ("_fnt_def" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14826 14830])
                            ("k" variable nil (reparse-symbol function_parameters) [14832 14833])
                            ("c" variable nil (reparse-symbol function_parameters) [14835 14836])
                            ("s" variable nil (reparse-symbol function_parameters) [14838 14839])
                            ("d" variable nil (reparse-symbol function_parameters) [14841 14842])
                            ("a" variable nil (reparse-symbol function_parameters) [14844 14845])
                            ("l" variable nil (reparse-symbol function_parameters) [14847 14848])
                            ("n" variable nil (reparse-symbol function_parameters) [14850 14851]))                          )
                        (reparse-symbol indented_block_body) [14813 15379])
                    ("_post" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15394 15398]))                          )
                        (reparse-symbol indented_block_body) [15384 15543])
                    ("_post_post" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15680 15684]))                          )
                        (reparse-symbol indented_block_body) [15665 15721]))                  
                :type "class")
                nil [1064 15721])
            ("DviFont" type
               (:documentation "
    Object that holds a font's texname and size, supports comparison,
    and knows the widths of glyphs in the same units as the AFM file.
    There are also internal attributes (for use by dviread.py) that
    are *not* used for comparison.

    The size is in Adobe points (converted from TeX points).

    .. attribute:: texname

       Name of the font as used internally by TeX and friends. This
       is usually very different from any external font names, and
       :class:`dviread.PsfontsMap` can be used to find the external
       name of the font.

    .. attribute:: size

       Size of the font in Adobe points, converted from the slightly
       smaller TeX points.

    .. attribute:: widths

       Widths of glyphs in glyph-space units, typically 1/1000ths of
       the point size.

    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [16570 16636])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [16695 16784])
                            ("self, self, self, self" code nil (reparse-symbol indented_block_body) [16792 16878])
                            ("self" code nil (reparse-symbol indented_block_body) [16887 16931])
                            ("try" code nil (reparse-symbol indented_block_body) [16940 17049])
                            ("self" variable nil (reparse-symbol indented_block_body) [17057 17161]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16655 16659])
                            ("scale" variable nil (reparse-symbol function_parameters) [16661 16666])
                            ("tfm" variable nil (reparse-symbol function_parameters) [16668 16671])
                            ("texname" variable nil (reparse-symbol function_parameters) [16673 16680])
                            ("vf" variable nil (reparse-symbol function_parameters) [16682 16684]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16642 17162])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17178 17182])
                            ("other" variable nil (reparse-symbol function_parameters) [17184 17189]))                          )
                        (reparse-symbol indented_block_body) [17167 17317])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17333 17337])
                            ("other" variable nil (reparse-symbol function_parameters) [17339 17344]))                          )
                        (reparse-symbol indented_block_body) [17322 17385])
                    ("_width_of" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17404 17408])
                            ("char" variable nil (reparse-symbol function_parameters) [17410 17414]))                          
                        :documentation "
        Width of char in dvi units. For internal use by dviread.py.
        ")
                        (reparse-symbol indented_block_body) [17390 17780])
                    ("_height_depth_of" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17806 17810])
                            ("char" variable nil (reparse-symbol function_parameters) [17812 17816]))                          
                        :documentation "
        Height and depth of char in dvi units. For internal use by dviread.py.
        ")
                        (reparse-symbol indented_block_body) [17785 18417]))                  
                :type "class")
                nil [15722 18417])
            ("Vf" type
               (:documentation "
    A virtual font (\\*.vf file) containing subroutines for dvi files.

    Usage::

      vf = Vf(filename)
      glyph = vf[code]
      glyph.text, glyph.boxes, glyph.width
    "
                :superclasses ("Dvi")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Dvi" code nil (reparse-symbol indented_block_body) [18666 18697])
                            ("try" code nil (reparse-symbol indented_block_body) [18706 18880]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18641 18645])
                            ("filename" variable nil (reparse-symbol function_parameters) [18647 18655]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18628 18880])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18901 18905])
                            ("code" variable nil (reparse-symbol function_parameters) [18907 18911]))                          )
                        (reparse-symbol indented_block_body) [18885 18947])
                    ("_dispatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18966 18970])
                            ("byte" variable nil (reparse-symbol function_parameters) [18972 18976]))                          )
                        (reparse-symbol indented_block_body) [18952 20398])
                    ("_init_packet" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20420 20424])
                            ("pl" variable nil (reparse-symbol function_parameters) [20426 20428])
                            ("cc" variable nil (reparse-symbol function_parameters) [20430 20432])
                            ("tfm" variable nil (reparse-symbol function_parameters) [20434 20437]))                          )
                        (reparse-symbol indented_block_body) [20403 20857])
                    ("_finalize_packet" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20883 20887]))                          )
                        (reparse-symbol indented_block_body) [20862 21059])
                    ("_pre" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21073 21077])
                            ("i" variable nil (reparse-symbol function_parameters) [21079 21080])
                            ("x" variable nil (reparse-symbol function_parameters) [21082 21083])
                            ("cs" variable nil (reparse-symbol function_parameters) [21085 21087])
                            ("ds" variable nil (reparse-symbol function_parameters) [21089 21091]))                          )
                        (reparse-symbol indented_block_body) [21064 21405])
                    ("_fnt_def" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21465 21469])
                            ("k" variable nil (reparse-symbol function_parameters) [21471 21472])
                            ("args" variable nil (reparse-symbol function_parameters) [21474 21479]))                          )
                        (reparse-symbol indented_block_body) [21452 21589]))                  
                :type "class")
                nil [18418 21589])
            ("_fix2comp" function
               (:documentation "
    Convert from two's complement to negative.
    "
                :arguments 
                  ( ("num" variable nil (reparse-symbol function_parameters) [21604 21607]))                  )
                nil [21590 21777])
            ("_mul2012" function
               (:documentation "
    Multiply two numbers in 20.12 fixed point format.
    "
                :arguments 
                  ( ("num1" variable nil (reparse-symbol function_parameters) [21791 21795])
                    ("num2" variable nil (reparse-symbol function_parameters) [21797 21801]))                  )
                nil [21778 21972])
            ("Tfm" type
               (:documentation "
    A TeX Font Metric file. This implementation covers only the bare
    minimum needed by the Dvi class.

    .. attribute:: checksum

       Used for verifying against the dvi file.

    .. attribute:: design_size

       Design size of the font (in what units?)

    .. attribute::  width

       Width of each character, needs to be scaled by the factor
       specified in the dvi file. This is a dict because indexing may
       not start from 0.

    .. attribute:: height

       Height of each character.

    .. attribute:: depth

       Depth of each character.
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [22585 22652])
                    ("__init__" function
                       (:suite 
                          ( ("matplotlib" code nil (reparse-symbol indented_block_body) [22696 22762])
                            ("with" code nil (reparse-symbol indented_block_body) [22771 23448])
                            ("self, self, self" code nil (reparse-symbol indented_block_body) [23457 23505])
                            ("widths, heights, depths" code nil (reparse-symbol indented_block_body) [23514 23649])
                            ("for" code nil (reparse-symbol indented_block_body) [23658 23937]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22671 22675])
                            ("filename" variable nil (reparse-symbol function_parameters) [22677 22685]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22658 23937]))                  
                :type "class")
                nil [21973 23937])
            ("PsfontsMap" type
               (:documentation "
    A psfonts.map formatted file, mapping TeX fonts to PS fonts.
    Usage::

     >>> map = PsfontsMap(find_tex_file('pdftex.map'))
     >>> entry = map['ptmbo8r']
     >>> entry.texname
     'ptmbo8r'
     >>> entry.psname
     'Times-Bold'
     >>> entry.encoding
     '/usr/local/texlive/2008/texmf-dist/fonts/enc/dvips/base/8r.enc'
     >>> entry.effects
     {'slant': 0.16700000000000001}
     >>> entry.filename

    For historical reasons, TeX knows many Type-1 fonts by different
    names than the outside world. (For one thing, the names have to
    fit in eight characters.) Also, TeX's native fonts are not Type-1
    but Metafont, which is nontrivial to convert to PostScript except
    as a bitmap. While high-quality conversions to Type-1 format exist
    and are shipped with modern TeX distributions, we need to know
    which Type-1 fonts are the counterparts of which native fonts. For
    these reasons a mapping is needed from internal font names to font
    file names.

    A texmf tree typically includes mapping files called e.g.
    psfonts.map, pdftex.map, dvipdfm.map. psfonts.map is used by
    dvips, pdftex.map by pdfTeX, and dvipdfm.map by dvipdfm.
    psfonts.map might avoid embedding the 35 PostScript fonts (i.e.,
    have no filename for them, as in the Times-Bold example above),
    while the pdf-related files perhaps only avoid the \"Base 14\" pdf
    fonts. But the user may have configured these files differently.
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [25442 25464])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [25508 25523])
                            ("with" code nil (reparse-symbol indented_block_body) [25532 25597]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25483 25487])
                            ("filename" variable nil (reparse-symbol function_parameters) [25489 25497]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25470 25597])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25618 25622])
                            ("texname" variable nil (reparse-symbol function_parameters) [25624 25631]))                          )
                        (reparse-symbol indented_block_body) [25602 26062])
                    ("_parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26078 26082])
                            ("file" variable nil (reparse-symbol function_parameters) [26084 26088]))                          
                        :documentation "Parse each line into words.")
                        (reparse-symbol indented_block_body) [26067 26901])
                    ("_register" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26920 26924])
                            ("words" variable nil (reparse-symbol function_parameters) [26926 26931]))                          
                        :documentation "Register a font described by \"words\".

        The format is, AFAIK: texname fontname [effects and filenames]
        Effects are PostScript snippets like \".177 SlantFont\",
        filenames begin with one or two less-than signs. A filename
        ending in enc is an encoding file, other filenames are font
        files. This can be overridden with a left bracket: <[foobar
        indicates an encoding file named foobar.

        There is some difference between <foo.pfb and <<bar.pfb in
        subsetting, but I have no example of << in my TeX installation.
        ")
                        (reparse-symbol indented_block_body) [26906 29093]))                  
                :type "class")
                nil [23938 29093])
            ("Encoding" type
               (:documentation "
    Parses a \\*.enc file referenced from a psfonts.map style file.
    The format this class understands is a very limited subset of
    PostScript.

    Usage (subject to change)::

      for name in Encoding(filename):
          whatever(name)
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [29384 29409])
                    ("__init__" function
                       (:suite 
                          ( ("with" code nil (reparse-symbol indented_block_body) [29453 29716]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29428 29432])
                            ("filename" variable nil (reparse-symbol function_parameters) [29434 29442]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29415 29716])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29734 29738]))                          )
                        (reparse-symbol indented_block_body) [29721 29799])
                    ("_parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29815 29819])
                            ("file" variable nil (reparse-symbol function_parameters) [29821 29825]))                          )
                        (reparse-symbol indented_block_body) [29804 30791]))                  
                :type "class")
                nil [29094 30791])
            ("find_tex_file" function
               (:documentation "
    Call :program:`kpsewhich` to find a file in the texmf tree. If
    *format* is not None, it is used as the value for the
    `--format` option.

    Apparently most existing TeX distributions on Unix-like systems
    use kpathsea. I hear MikTeX (a popular distribution on Windows)
    doesn't use kpathsea, so what do we do? (TODO)

    .. seealso::

      `Kpathsea documentation <http://www.tug.org/kpathsea/>`_
        The library that :program:`kpsewhich` is part of.
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [30810 30818])
                    ("format" variable nil (reparse-symbol function_parameters) [30820 30826]))                  )
                nil [30792 32082])
            ("_tfmcache" variable nil nil [32279 32293])
            ("_vfcache" variable nil nil [32294 32307])
            ("_fontfile" function (:arguments 
              ( ("texname" variable nil (reparse-symbol function_parameters) [32323 32330])
                ("class_" variable nil (reparse-symbol function_parameters) [32332 32338])
                ("suffix" variable nil (reparse-symbol function_parameters) [32340 32346])
                ("cache" variable nil (reparse-symbol function_parameters) [32348 32353]))              ) nil [32309 32607])
            ("_tfmfile" function (:arguments 
              ( ("texname" variable nil (reparse-symbol function_parameters) [32621 32628]))              ) nil [32608 32685])
            ("_vffile" function (:arguments 
              ( ("texname" variable nil (reparse-symbol function_parameters) [32698 32705]))              ) nil [32686 32759])
            ("if" code nil nil [32762 33394]))          
      :file "dviread.py"
      :pointmax 33394
      :fsize 33393
      :lastmodtime '(22681 7108 743473 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The OffsetBox is a simple container artist. The child artist are meant
to be drawn at a relative position to its parent.  The [VH]Packer,
DrawingArea and TextArea are derived from the OffsetBox.

The [VH]Packer automatically adjust the relative postisions of their
children, which should be instances of the OffsetBox. This is used to
align similar artists together, e.g., in legend.

The DrawingArea can contain any Artist as a child. The
DrawingArea has a fixed width and height. The position of children
relative to the parent is fixed.  The TextArea is contains a single
Text instance. The width and height of the TextArea instance is the
width and height of the its child text.
\"\"\"" code nil nil [1 691])
            ("" code nil nil [716 801])
            ("six" include nil nil [803 813])
            ("six.moves" include nil nil [814 847])
            ("warnings" include nil nil [849 864])
            ("matplotlib.transforms" include nil nil [865 908])
            ("matplotlib.artist" include nil nil [909 944])
            ("matplotlib.text" include nil nil [945 976])
            ("matplotlib.path" include nil nil [977 1008])
            ("numpy" include nil nil [1009 1027])
            ("matplotlib.transforms" include nil nil [1028 1093])
            ("matplotlib.font_manager" include nil nil [1095 1145])
            ("matplotlib.patches" include nil nil [1146 1208])
            ("matplotlib" include nil nil [1209 1240])
            ("matplotlib" include nil nil [1242 1274])
            ("matplotlib.image" include nil nil [1309 1347])
            ("matplotlib.patches" include nil nil [1349 1407])
            ("matplotlib.text" include nil nil [1408 1451])
            ("DEBUG" variable nil nil [1454 1467])
            ("bbox_artist" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [1505 1510])
                ("kwargs" variable nil (reparse-symbol function_parameters) [1512 1520]))              ) nil [1489 1575])
            ("_get_packed_offsets" function
               (:documentation "
    Geiven a list of (width, xdescent) of each boxes, calculate the
    total width and the x-offset positions of each items according to
    *mode*. xdescent is analagous to the usual descent, but along the
    x-direction. xdescent values are currently ignored.

    *wd_list* : list of (width, xdescent) of boxes to be packed.
    *sep* : spacing between boxes
    *total* : Intended total length. None if not used.
    *mode* : packing mode. 'fixed', 'expand', or 'equal'.
    "
                :arguments 
                  ( ("wd_list" variable nil (reparse-symbol function_parameters) [1770 1777])
                    ("total" variable nil (reparse-symbol function_parameters) [1779 1784])
                    ("sep" variable nil (reparse-symbol function_parameters) [1786 1789])
                    ("mode" variable nil (reparse-symbol function_parameters) [1791 1795]))                  )
                nil [1746 3255])
            ("_get_aligned_offsets" function
               (:documentation "
    Given a list of (height, descent) of each boxes, align the boxes
    with *align* and calculate the y-offsets of each boxes.
    total width and the offset positions of each items according to
    *mode*. xdescent is analogous to the usual descent, but along the
    x-direction. xdescent values are currently ignored.

    *hd_list* : list of (width, xdescent) of boxes to be aligned.
    *sep* : spacing between boxes
    *height* : Intended total length. None if not used.
    *align* : align mode. 'baseline', 'top', 'bottom', or 'center'.
    "
                :arguments 
                  ( ("hd_list" variable nil (reparse-symbol function_parameters) [3282 3289])
                    ("height" variable nil (reparse-symbol function_parameters) [3291 3297])
                    ("align" variable nil (reparse-symbol function_parameters) [3299 3304]))                  )
                nil [3257 4605])
            ("OffsetBox" type
               (:documentation "
    The OffsetBox is a simple container artist. The child artist are meant
    to be drawn at a relative position to its parent.
    "
                :superclasses ("martist.Artist")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [4835 4883])
                            ("self" code nil (reparse-symbol indented_block_body) [5073 5096])
                            ("self" variable nil (reparse-symbol indented_block_body) [5106 5125])
                            ("self" variable nil (reparse-symbol indented_block_body) [5134 5155]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4802 4806])
                            ("args" variable nil (reparse-symbol function_parameters) [4808 4813])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4815 4823]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4789 5156])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5178 5182]))                          )
                        (reparse-symbol indented_block_body) [5161 5530])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5552 5556])
                            ("state" variable nil (reparse-symbol function_parameters) [5558 5563]))                          )
                        (reparse-symbol indented_block_body) [5535 5794])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5814 5818])
                            ("fig" variable nil (reparse-symbol function_parameters) [5820 5823]))                          
                        :documentation "
        Set the figure

        accepts a class:`~matplotlib.figure.Figure` instance
        ")
                        (reparse-symbol indented_block_body) [5799 6048])
                    ("axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6094 6098])
                            ("ax" variable nil (reparse-symbol function_parameters) [6100 6102]))                          
                        :decorators 
                          ( ("martist.Artist.axes.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6053 6281])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6299 6303])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [6305 6315]))                          )
                        (reparse-symbol indented_block_body) [6286 6469])
                    ("set_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6489 6493])
                            ("xy" variable nil (reparse-symbol function_parameters) [6495 6497]))                          
                        :documentation "
        Set the offset

        accepts x, y, tuple, or a callable object.
        ")
                        (reparse-symbol indented_block_body) [6474 6651])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6671 6675])
                            ("width" variable nil (reparse-symbol function_parameters) [6677 6682])
                            ("height" variable nil (reparse-symbol function_parameters) [6684 6690])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [6692 6700])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [6702 6710])
                            ("renderer" variable nil (reparse-symbol function_parameters) [6712 6720]))                          
                        :documentation "
        Get the offset

        accepts extent of the box
        ")
                        (reparse-symbol indented_block_body) [6656 6967])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6986 6990])
                            ("width" variable nil (reparse-symbol function_parameters) [6992 6997]))                          
                        :documentation "
        Set the width

        accepts float
        ")
                        (reparse-symbol indented_block_body) [6972 7122])
                    ("set_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7142 7146])
                            ("height" variable nil (reparse-symbol function_parameters) [7148 7154]))                          
                        :documentation "
        Set the height

        accepts float
        ")
                        (reparse-symbol indented_block_body) [7127 7282])
                    ("get_visible_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7312 7316]))                          
                        :documentation "
        Return a list of visible artists it contains.
        ")
                        (reparse-symbol indented_block_body) [7287 7459])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7481 7485]))                          
                        :documentation "
        Return a list of artists it contains.
        ")
                        (reparse-symbol indented_block_body) [7464 7588])
                    ("get_extent_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7616 7620])
                            ("renderer" variable nil (reparse-symbol function_parameters) [7622 7630]))                          )
                        (reparse-symbol indented_block_body) [7593 7661])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7681 7685])
                            ("renderer" variable nil (reparse-symbol function_parameters) [7687 7695]))                          
                        :documentation "
        Return with, height, xdescent, ydescent of box
        ")
                        (reparse-symbol indented_block_body) [7666 7871])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7898 7902])
                            ("renderer" variable nil (reparse-symbol function_parameters) [7904 7912]))                          )
                        (reparse-symbol indented_block_body) [7876 8177])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8191 8195])
                            ("renderer" variable nil (reparse-symbol function_parameters) [8197 8205]))                          
                        :documentation "
        Update the location of children if necessary and draw them
        to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [8182 8797]))                  
                :type "class")
                nil [4607 8797])
            ("PackerBase" type
               (:superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        pad : float, optional
            Boundary pad.

        sep : float, optional
            Spacing between items.

        width : float, optional

        height : float, optional
           Width and height of the container box, calculated if
           `None`.

        align : str, optional
            Alignment of boxes. Can be one of ``top``, ``bottom``,
            ``left``, ``right``, ``center`` and ``baseline``

        mode : str, optional
            Packing mode.

        Notes
        -----
        *pad* and *sep* need to given in points and will be scale with
        the renderer dpi, while *width* and *height* need to be in
        pixels.
        \"\"\"" code nil (reparse-symbol indented_block_body) [8977 9700])
                            ("super" code nil (reparse-symbol indented_block_body) [9709 9743])
                            ("self" variable nil (reparse-symbol indented_block_body) [9753 9773])
                            ("self" variable nil (reparse-symbol indented_block_body) [9782 9800])
                            ("self" variable nil (reparse-symbol indented_block_body) [9809 9823])
                            ("self" variable nil (reparse-symbol indented_block_body) [9832 9846])
                            ("self" variable nil (reparse-symbol indented_block_body) [9855 9871])
                            ("self" variable nil (reparse-symbol indented_block_body) [9880 9898])
                            ("self" variable nil (reparse-symbol indented_block_body) [9908 9933]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8845 8849])
                            ("pad" variable nil (reparse-symbol function_parameters) [8851 8854])
                            ("sep" variable nil (reparse-symbol function_parameters) [8861 8864])
                            ("width" variable nil (reparse-symbol function_parameters) [8871 8876])
                            ("height" variable nil (reparse-symbol function_parameters) [8883 8889])
                            ("align" variable nil (reparse-symbol function_parameters) [8913 8918])
                            ("mode" variable nil (reparse-symbol function_parameters) [8925 8929])
                            ("children" variable nil (reparse-symbol function_parameters) [8953 8961]))                          
                        :documentation "
        Parameters
        ----------
        pad : float, optional
            Boundary pad.

        sep : float, optional
            Spacing between items.

        width : float, optional

        height : float, optional
           Width and height of the container box, calculated if
           `None`.

        align : str, optional
            Alignment of boxes. Can be one of ``top``, ``bottom``,
            ``left``, ``right``, ``center`` and ``baseline``

        mode : str, optional
            Packing mode.

        Notes
        -----
        *pad* and *sep* need to given in points and will be scale with
        the renderer dpi, while *width* and *height* need to be in
        pixels.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8832 9934]))                  
                :type "class")
                nil [8799 9934])
            ("VPacker" type
               (:documentation "
    The VPacker has its children packed vertically. It automatically
    adjust the relative positions of children in the drawing time.
    "
                :superclasses ("PackerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        pad : float, optional
            Boundary pad.

        sep : float, optional
            Spacing between items.

        width : float, optional

        height : float, optional

            width and height of the container box, calculated if
            `None`.

        align : str, optional
            Alignment of boxes.

        mode : str, optional
            Packing mode.

        Notes
        -----
        *pad* and *sep* need to given in points and will be scale with
        the renderer dpi, while *width* and *height* need to be in
        pixels.
        \"\"\"" code nil (reparse-symbol indented_block_body) [10273 10903])
                            ("super" code nil (reparse-symbol indented_block_body) [10912 11065]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10132 10136])
                            ("pad" variable nil (reparse-symbol function_parameters) [10138 10141])
                            ("sep" variable nil (reparse-symbol function_parameters) [10148 10151])
                            ("width" variable nil (reparse-symbol function_parameters) [10158 10163])
                            ("height" variable nil (reparse-symbol function_parameters) [10170 10176])
                            ("align" variable nil (reparse-symbol function_parameters) [10200 10205])
                            ("mode" variable nil (reparse-symbol function_parameters) [10218 10222])
                            ("children" variable nil (reparse-symbol function_parameters) [10249 10257]))                          
                        :documentation "
        Parameters
        ----------
        pad : float, optional
            Boundary pad.

        sep : float, optional
            Spacing between items.

        width : float, optional

        height : float, optional

            width and height of the container box, calculated if
            `None`.

        align : str, optional
            Alignment of boxes.

        mode : str, optional
            Packing mode.

        Notes
        -----
        *pad* and *sep* need to given in points and will be scale with
        the renderer dpi, while *width* and *height* need to be in
        pixels.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10119 11066])
                    ("get_extent_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11094 11098])
                            ("renderer" variable nil (reparse-symbol function_parameters) [11100 11108]))                          
                        :documentation "
        update offset of childrens and return the extents of the box
        ")
                        (reparse-symbol indented_block_body) [11071 12515]))                  
                :type "class")
                nil [9936 12515])
            ("HPacker" type
               (:documentation "
    The HPacker has its children packed horizontally. It automatically
    adjusts the relative positions of children at draw time.
    "
                :superclasses ("PackerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        pad : float, optional
            Boundary pad.

        sep : float, optional
            Spacing between items.

        width : float, optional

        height : float, optional
           Width and height of the container box, calculated if
           `None`.

        align : str
           Alignment of boxes.

        mode : str
           Packing mode.

        Notes
        -----
        *pad* and *sep* need to given in points and will be scale with
        the renderer dpi, while *width* and *height* need to be in
        pixels.
        \"\"\"" code nil (reparse-symbol indented_block_body) [12850 13455])
                            ("super" code nil (reparse-symbol indented_block_body) [13464 13579]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12709 12713])
                            ("pad" variable nil (reparse-symbol function_parameters) [12715 12718])
                            ("sep" variable nil (reparse-symbol function_parameters) [12725 12728])
                            ("width" variable nil (reparse-symbol function_parameters) [12735 12740])
                            ("height" variable nil (reparse-symbol function_parameters) [12747 12753])
                            ("align" variable nil (reparse-symbol function_parameters) [12777 12782])
                            ("mode" variable nil (reparse-symbol function_parameters) [12795 12799])
                            ("children" variable nil (reparse-symbol function_parameters) [12826 12834]))                          
                        :documentation "
        Parameters
        ----------
        pad : float, optional
            Boundary pad.

        sep : float, optional
            Spacing between items.

        width : float, optional

        height : float, optional
           Width and height of the container box, calculated if
           `None`.

        align : str
           Alignment of boxes.

        mode : str
           Packing mode.

        Notes
        -----
        *pad* and *sep* need to given in points and will be scale with
        the renderer dpi, while *width* and *height* need to be in
        pixels.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12696 13580])
                    ("get_extent_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13608 13612])
                            ("renderer" variable nil (reparse-symbol function_parameters) [13614 13622]))                          
                        :documentation "
        update offset of children and return the extents of the box
        ")
                        (reparse-symbol indented_block_body) [13585 15041]))                  
                :type "class")
                nil [12517 15041])
            ("PaddedBox" type
               (:superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *pad* : boundary pad

        .. note::
          *pad* need to given in points and will be
          scale with the renderer dpi, while *width* and *height*
          need to be in pixels.
        \"\"\"" code nil (reparse-symbol indented_block_body) [15156 15369])
                            ("super" code nil (reparse-symbol indented_block_body) [15379 15412])
                            ("self" variable nil (reparse-symbol indented_block_body) [15422 15436])
                            ("self" variable nil (reparse-symbol indented_block_body) [15445 15469])
                            ("self" variable nil (reparse-symbol indented_block_body) [15479 15698])
                            ("self" code nil (reparse-symbol indented_block_body) [15708 15748])
                            ("if" code nil (reparse-symbol indented_block_body) [15758 15829])
                            ("self" variable nil (reparse-symbol indented_block_body) [15838 15866]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15088 15092])
                            ("child" variable nil (reparse-symbol function_parameters) [15094 15099])
                            ("pad" variable nil (reparse-symbol function_parameters) [15101 15104])
                            ("draw_frame" variable nil (reparse-symbol function_parameters) [15111 15121])
                            ("patch_attrs" variable nil (reparse-symbol function_parameters) [15129 15140]))                          
                        :documentation "
        *pad* : boundary pad

        .. note::
          *pad* need to given in points and will be
          scale with the renderer dpi, while *width* and *height*
          need to be in pixels.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15075 15867])
                    ("get_extent_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15895 15899])
                            ("renderer" variable nil (reparse-symbol function_parameters) [15901 15909]))                          
                        :documentation "
        update offset of childrens and return the extents of the box
        ")
                        (reparse-symbol indented_block_body) [15872 16253])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16267 16271])
                            ("renderer" variable nil (reparse-symbol function_parameters) [16273 16281]))                          
                        :documentation "
        Update the location of children if necessary and draw them
        to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [16258 16956])
                    ("update_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16978 16982])
                            ("bbox" variable nil (reparse-symbol function_parameters) [16984 16988])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [16990 16998]))                          )
                        (reparse-symbol indented_block_body) [16961 17209])
                    ("draw_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17229 17233])
                            ("renderer" variable nil (reparse-symbol function_parameters) [17235 17243]))                          )
                        (reparse-symbol indented_block_body) [17214 17446]))                  
                :type "class")
                nil [15043 17446])
            ("DrawingArea" type
               (:documentation "
    The DrawingArea can contain any Artist as a child. The DrawingArea
    has a fixed width and height. The position of children relative to
    the parent is fixed. The children can be clipped at the
    boundaries of the parent.
    "
                :superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *width*, *height* : width and height of the container box.
        *xdescent*, *ydescent* : descent of the box in x- and y-direction.
        *clip* : Whether to clip the children
        \"\"\"" code nil (reparse-symbol indented_block_body) [17829 18032])
                            ("super" code nil (reparse-symbol indented_block_body) [18042 18077])
                            ("self" variable nil (reparse-symbol indented_block_body) [18087 18105])
                            ("self" variable nil (reparse-symbol indented_block_body) [18114 18134])
                            ("self" variable nil (reparse-symbol indented_block_body) [18143 18167])
                            ("self" variable nil (reparse-symbol indented_block_body) [18176 18200])
                            ("self" variable nil (reparse-symbol indented_block_body) [18209 18235])
                            ("self" variable nil (reparse-symbol indented_block_body) [18245 18291])
                            ("self" code nil (reparse-symbol indented_block_body) [18300 18329])
                            ("self" code nil (reparse-symbol indented_block_body) [18338 18375])
                            ("self" variable nil (reparse-symbol indented_block_body) [18385 18428]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17744 17748])
                            ("width" variable nil (reparse-symbol function_parameters) [17750 17755])
                            ("height" variable nil (reparse-symbol function_parameters) [17757 17763])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [17765 17773])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [17795 17803])
                            ("clip" variable nil (reparse-symbol function_parameters) [17808 17812]))                          
                        :documentation "
        *width*, *height* : width and height of the container box.
        *xdescent*, *ydescent* : descent of the box in x- and y-direction.
        *clip* : Whether to clip the children
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17731 18429])
                    ("clip_children" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18466 18470]))                          
                        :documentation "
        If the children of this DrawingArea should be clipped
        by DrawingArea bounding box.
        ")
                        (reparse-symbol indented_block_body) [18434 18631])
                    ("clip_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18680 18684])
                            ("val" variable nil (reparse-symbol function_parameters) [18686 18689]))                          
                        :decorators 
                          ( ("clip_children.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18636 18758])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18781 18785]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` applied
        to the children
        ")
                        (reparse-symbol indented_block_body) [18763 18963])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18986 18990])
                            ("t" variable nil (reparse-symbol function_parameters) [18992 18993]))                          
                        :documentation "
        set_transform is ignored.
        ")
                        (reparse-symbol indented_block_body) [18968 19067])
                    ("set_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19087 19091])
                            ("xy" variable nil (reparse-symbol function_parameters) [19093 19095]))                          
                        :documentation "
        set offset of the container.

        Accept : tuple of x,y cooridnate in disokay units.
        ")
                        (reparse-symbol indented_block_body) [19072 19364])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19384 19388]))                          
                        :documentation "
        return offset of the container.
        ")
                        (reparse-symbol indented_block_body) [19369 19483])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19510 19514])
                            ("renderer" variable nil (reparse-symbol function_parameters) [19516 19524]))                          )
                        (reparse-symbol indented_block_body) [19488 19768])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19788 19792])
                            ("renderer" variable nil (reparse-symbol function_parameters) [19794 19802]))                          
                        :documentation "
        Return with, height, xdescent, ydescent of box
        ")
                        (reparse-symbol indented_block_body) [19773 20059])
                    ("add_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20079 20083])
                            ("a" variable nil (reparse-symbol function_parameters) [20085 20086]))                          )
                        (reparse-symbol indented_block_body) [20064 20432])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20446 20450])
                            ("renderer" variable nil (reparse-symbol function_parameters) [20452 20460]))                          
                        :documentation "
        Draw the children
        ")
                        (reparse-symbol indented_block_body) [20437 21287]))                  
                :type "class")
                nil [17448 21287])
            ("TextArea" type
               (:documentation "
    The TextArea is contains a single Text instance. The text is
    placed at (0,0) with baseline+left alignment. The width and height
    of the TextArea instance is the width and height of the its child
    text.
    "
                :superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        s : str
            a string to be displayed.

        textprops : `~matplotlib.font_manager.FontProperties`, optional

        multilinebaseline : bool, optional
            If `True`, baseline for multiline text is adjusted so that
            it is (approximatedly) center-aligned with singleline
            text.

        minimumdescent : bool, optional
            If `True`, the box has a minimum descent of \"p\".
        \"\"\"" code nil (reparse-symbol indented_block_body) [21714 22195])
                            ("if" code nil (reparse-symbol indented_block_body) [22204 22253])
                            ("if" code nil (reparse-symbol indented_block_body) [22262 22329])
                            ("self" variable nil (reparse-symbol indented_block_body) [22338 22383])
                            ("OffsetBox" code nil (reparse-symbol indented_block_body) [22393 22417])
                            ("self" variable nil (reparse-symbol indented_block_body) [22427 22456])
                            ("self" variable nil (reparse-symbol indented_block_body) [22466 22512])
                            ("self" code nil (reparse-symbol indented_block_body) [22521 22550])
                            ("self" code nil (reparse-symbol indented_block_body) [22559 22596])
                            ("self" variable nil (reparse-symbol indented_block_body) [22605 22654])
                            ("self" code nil (reparse-symbol indented_block_body) [22663 22770])
                            ("self" variable nil (reparse-symbol indented_block_body) [22780 22823])
                            ("self" variable nil (reparse-symbol indented_block_body) [22832 22869]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21565 21569])
                            ("s" variable nil (reparse-symbol function_parameters) [21571 21572])
                            ("textprops" variable nil (reparse-symbol function_parameters) [21591 21600])
                            ("multilinebaseline" variable nil (reparse-symbol function_parameters) [21624 21641])
                            ("minimumdescent" variable nil (reparse-symbol function_parameters) [21665 21679]))                          
                        :documentation "
        Parameters
        ----------
        s : str
            a string to be displayed.

        textprops : `~matplotlib.font_manager.FontProperties`, optional

        multilinebaseline : bool, optional
            If `True`, baseline for multiline text is adjusted so that
            it is (approximatedly) center-aligned with singleline
            text.

        minimumdescent : bool, optional
            If `True`, the box has a minimum descent of \"p\".
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21552 22870])
                    ("set_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22888 22892])
                            ("s" variable nil (reparse-symbol function_parameters) [22894 22895]))                          )
                        (reparse-symbol indented_block_body) [22875 23004])
                    ("get_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23022 23026]))                          )
                        (reparse-symbol indented_block_body) [23009 23130])
                    ("set_multilinebaseline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23161 23165])
                            ("t" variable nil (reparse-symbol function_parameters) [23167 23168]))                          
                        :documentation "
        Set multilinebaseline .

        If True, baseline for multiline text is
        adjusted so that it is (approximatedly) center-aligned with
        singleline text.
        ")
                        (reparse-symbol indented_block_body) [23135 23431])
                    ("get_multilinebaseline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23462 23466]))                          
                        :documentation "
        get multilinebaseline .
        ")
                        (reparse-symbol indented_block_body) [23436 23564])
                    ("set_minimumdescent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23592 23596])
                            ("t" variable nil (reparse-symbol function_parameters) [23598 23599]))                          
                        :documentation "
        Set minimumdescent .

        If True, extent of the single line text is adjusted so that
        it has minimum descent of \"p\"
        ")
                        (reparse-symbol indented_block_body) [23569 23821])
                    ("get_minimumdescent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23849 23853]))                          
                        :documentation "
        get minimumdescent.
        ")
                        (reparse-symbol indented_block_body) [23826 23944])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23967 23971])
                            ("t" variable nil (reparse-symbol function_parameters) [23973 23974]))                          
                        :documentation "
        set_transform is ignored.
        ")
                        (reparse-symbol indented_block_body) [23949 24048])
                    ("set_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24068 24072])
                            ("xy" variable nil (reparse-symbol function_parameters) [24074 24076]))                          
                        :documentation "
        set offset of the container.

        Accept : tuple of x,y coordinates in display units.
        ")
                        (reparse-symbol indented_block_body) [24053 24346])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24366 24370]))                          
                        :documentation "
        return offset of the container.
        ")
                        (reparse-symbol indented_block_body) [24351 24465])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24492 24496])
                            ("renderer" variable nil (reparse-symbol function_parameters) [24498 24506]))                          )
                        (reparse-symbol indented_block_body) [24470 24749])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24769 24773])
                            ("renderer" variable nil (reparse-symbol function_parameters) [24775 24783]))                          )
                        (reparse-symbol indented_block_body) [24754 25683])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25697 25701])
                            ("renderer" variable nil (reparse-symbol function_parameters) [25703 25711]))                          
                        :documentation "
        Draw the children
        ")
                        (reparse-symbol indented_block_body) [25688 25895]))                  
                :type "class")
                nil [21289 25895])
            ("AuxTransformBox" type
               (:documentation "
    Offset Box with the aux_transform . Its children will be
    transformed with the aux_transform first then will be
    offseted. The absolute coordinate of the aux_transform is meaning
    as it will be automatically adjust so that the left-lower corner
    of the bounding box of children will be set to (0,0) before the
    offset transform.

    It is similar to drawing area, except that the extent of the box
    is not predetermined but calculated from the window extent of its
    children. Furthermore, the extent of the children will be
    calculated in the transformed coordinate.
    "
                :superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [26590 26624])
                            ("OffsetBox" code nil (reparse-symbol indented_block_body) [26633 26657])
                            ("self" variable nil (reparse-symbol indented_block_body) [26667 26713])
                            ("self" code nil (reparse-symbol indented_block_body) [26722 26751])
                            ("self" code nil (reparse-symbol indented_block_body) [26760 26797])
                            ("self" variable nil (reparse-symbol indented_block_body) [26969 27019])
                            ("self" code nil (reparse-symbol indented_block_body) [27028 27061]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26560 26564])
                            ("aux_transform" variable nil (reparse-symbol function_parameters) [26566 26579]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26547 27062])
                    ("add_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27082 27086])
                            ("a" variable nil (reparse-symbol function_parameters) [27088 27089]))                          )
                        (reparse-symbol indented_block_body) [27067 27271])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27294 27298]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` applied
        to the children
        ")
                        (reparse-symbol indented_block_body) [27276 27538])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27561 27565])
                            ("t" variable nil (reparse-symbol function_parameters) [27567 27568]))                          
                        :documentation "
        set_transform is ignored.
        ")
                        (reparse-symbol indented_block_body) [27543 27642])
                    ("set_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27662 27666])
                            ("xy" variable nil (reparse-symbol function_parameters) [27668 27670]))                          
                        :documentation "
        set offset of the container.

        Accept : tuple of x,y coordinate in disokay units.
        ")
                        (reparse-symbol indented_block_body) [27647 27939])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27959 27963]))                          
                        :documentation "
        return offset of the container.
        ")
                        (reparse-symbol indented_block_body) [27944 28058])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28085 28089])
                            ("renderer" variable nil (reparse-symbol function_parameters) [28091 28099]))                          )
                        (reparse-symbol indented_block_body) [28063 28342])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28362 28366])
                            ("renderer" variable nil (reparse-symbol function_parameters) [28368 28376]))                          )
                        (reparse-symbol indented_block_body) [28347 29005])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29019 29023])
                            ("renderer" variable nil (reparse-symbol function_parameters) [29025 29033]))                          
                        :documentation "
        Draw the children
        ")
                        (reparse-symbol indented_block_body) [29010 29245]))                  
                :type "class")
                nil [25897 29245])
            ("AnchoredOffsetbox" type
               (:documentation "
    An offset box placed according to the legend location
    loc. AnchoredOffsetbox has a single child. When multiple children
    is needed, use other OffsetBox class to enclose them.  By default,
    the offset box is anchored against its parent axes. You may
    explicitly specify the bbox_to_anchor.
    "
                :superclasses ("OffsetBox")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [29609 29619])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        loc is a string or an integer specifying the legend location.
        The valid  location codes are::

        'upper right'  : 1,
        'upper left'   : 2,
        'lower left'   : 3,
        'lower right'  : 4,
        'right'        : 5,
        'center left'  : 6,
        'center right' : 7,
        'lower center' : 8,
        'upper center' : 9,
        'center'       : 10,

        pad : pad around the child for drawing a frame. given in
          fraction of fontsize.

        borderpad : pad between offsetbox frame and the bbox_to_anchor,

        child : OffsetBox instance that will be anchored.

        prop : font property. This is only used as a reference for paddings.

        frameon : draw a frame box if True.

        bbox_to_anchor : bbox to anchor. Use self.axes.bbox if None.

        bbox_transform : with which the bbox_to_anchor will be transformed.

        \"\"\"" code nil (reparse-symbol indented_block_body) [29880 30788])
                            ("super" code nil (reparse-symbol indented_block_body) [30797 30846])
                            ("self" code nil (reparse-symbol indented_block_body) [30856 30911])
                            ("self" code nil (reparse-symbol indented_block_body) [30920 30941])
                            ("self" variable nil (reparse-symbol indented_block_body) [30951 30965])
                            ("self" variable nil (reparse-symbol indented_block_body) [30974 31000])
                            ("self" variable nil (reparse-symbol indented_block_body) [31009 31023])
                            ("if" code nil (reparse-symbol indented_block_body) [31033 31349])
                            ("self" variable nil (reparse-symbol indented_block_body) [31358 31571])
                            ("self" code nil (reparse-symbol indented_block_body) [31580 31620])
                            ("self" variable nil (reparse-symbol indented_block_body) [31629 31654]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29662 29666])
                            ("loc" variable nil (reparse-symbol function_parameters) [29668 29671])
                            ("pad" variable nil (reparse-symbol function_parameters) [29690 29693])
                            ("borderpad" variable nil (reparse-symbol function_parameters) [29699 29708])
                            ("child" variable nil (reparse-symbol function_parameters) [29731 29736])
                            ("prop" variable nil (reparse-symbol function_parameters) [29743 29747])
                            ("frameon" variable nil (reparse-symbol function_parameters) [29754 29761])
                            ("bbox_to_anchor" variable nil (reparse-symbol function_parameters) [29785 29799])
                            ("bbox_transform" variable nil (reparse-symbol function_parameters) [29823 29837])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [29861 29869]))                          
                        :documentation "
        loc is a string or an integer specifying the legend location.
        The valid  location codes are::

        'upper right'  : 1,
        'upper left'   : 2,
        'lower left'   : 3,
        'lower right'  : 4,
        'right'        : 5,
        'center left'  : 6,
        'center right' : 7,
        'lower center' : 8,
        'upper center' : 9,
        'center'       : 10,

        pad : pad around the child for drawing a frame. given in
          fraction of fontsize.

        borderpad : pad between offsetbox frame and the bbox_to_anchor,

        child : OffsetBox instance that will be anchored.

        prop : font property. This is only used as a reference for paddings.

        frameon : draw a frame box if True.

        bbox_to_anchor : bbox to anchor. Use self.axes.bbox if None.

        bbox_transform : with which the bbox_to_anchor will be transformed.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29649 31655])
                    ("set_child" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31674 31678])
                            ("child" variable nil (reparse-symbol function_parameters) [31680 31685]))                          )
                        (reparse-symbol indented_block_body) [31660 31846])
                    ("get_child" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31865 31869]))                          )
                        (reparse-symbol indented_block_body) [31851 31926])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31948 31952]))                          )
                        (reparse-symbol indented_block_body) [31931 32022])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32042 32046])
                            ("renderer" variable nil (reparse-symbol function_parameters) [32048 32056]))                          
                        :documentation "
        return the extent of the artist. The extent of the child
        added with the pad is returned
        ")
                        (reparse-symbol indented_block_body) [32027 32420])
                    ("get_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32448 32452]))                          
                        :documentation "
        return the bbox that the legend will be anchored
        ")
                        (reparse-symbol indented_block_body) [32425 32887])
                    ("set_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32915 32919])
                            ("bbox" variable nil (reparse-symbol function_parameters) [32921 32925])
                            ("transform" variable nil (reparse-symbol function_parameters) [32927 32936]))                          
                        :documentation "
        set the bbox that the child will be anchored.

        *bbox* can be a Bbox instance, a list of [left, bottom, width,
        height], or a list of [left, bottom] where the width and
        height will be assumed to be zero. The bbox will be
        transformed to display coordinate by the given transform.
        ")
                        (reparse-symbol indented_block_body) [32892 33760])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33787 33791])
                            ("renderer" variable nil (reparse-symbol function_parameters) [33793 33801]))                          )
                        (reparse-symbol indented_block_body) [33765 34080])
                    ("_update_offset_func" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34109 34113])
                            ("renderer" variable nil (reparse-symbol function_parameters) [34115 34123])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [34125 34133]))                          
                        :documentation "
        Update the offset func which depends on the dpi of the
        renderer (because of the padding).
        ")
                        (reparse-symbol indented_block_body) [34085 34933])
                    ("update_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34955 34959])
                            ("bbox" variable nil (reparse-symbol function_parameters) [34961 34965])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [34967 34975]))                          )
                        (reparse-symbol indented_block_body) [34938 35160])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35174 35178])
                            ("renderer" variable nil (reparse-symbol function_parameters) [35180 35188]))                          )
                        (reparse-symbol indented_block_body) [35165 35889])
                    ("_get_anchored_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35917 35921])
                            ("loc" variable nil (reparse-symbol function_parameters) [35923 35926])
                            ("bbox" variable nil (reparse-symbol function_parameters) [35928 35932])
                            ("parentbbox" variable nil (reparse-symbol function_parameters) [35934 35944])
                            ("borderpad" variable nil (reparse-symbol function_parameters) [35946 35955]))                          
                        :documentation "
        return the position of the bbox anchored at the parentbbox
        with the loc code, with the borderpad.
        ")
                        (reparse-symbol indented_block_body) [35894 36752]))                  
                :type "class")
                nil [29247 36752])
            ("AnchoredText" type
               (:documentation "
    AnchoredOffsetbox with Text.
    "
                :superclasses ("AnchoredOffsetbox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        s : string
            Text.

        loc : str
            Location code.

        pad : float, optional
            Pad between the text and the frame as fraction of the font
            size.

        borderpad : float, optional
            Pad between the frame and the axes (or *bbox_to_anchor*).

        prop : `matplotlib.font_manager.FontProperties`
            Font properties.

        Notes
        -----
        Other keyword parameters of `AnchoredOffsetbox` are also
        allowed.
        \"\"\"" code nil (reparse-symbol indented_block_body) [36928 37488])
                            ("if" code nil (reparse-symbol indented_block_body) [37498 37537])
                            ("propkeys" variable nil (reparse-symbol indented_block_body) [37545 37580])
                            ("badkwargs" variable nil (reparse-symbol indented_block_body) [37589 37657])
                            ("if" code nil (reparse-symbol indented_block_body) [37666 37837])
                            ("self" variable nil (reparse-symbol indented_block_body) [37846 37934])
                            ("fp" variable nil (reparse-symbol indented_block_body) [37943 37983])
                            ("super" code nil (reparse-symbol indented_block_body) [37993 38226]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36860 36864])
                            ("s" variable nil (reparse-symbol function_parameters) [36866 36867])
                            ("loc" variable nil (reparse-symbol function_parameters) [36869 36872])
                            ("pad" variable nil (reparse-symbol function_parameters) [36874 36877])
                            ("borderpad" variable nil (reparse-symbol function_parameters) [36883 36892])
                            ("prop" variable nil (reparse-symbol function_parameters) [36898 36902])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [36909 36917]))                          
                        :documentation "
        Parameters
        ----------
        s : string
            Text.

        loc : str
            Location code.

        pad : float, optional
            Pad between the text and the frame as fraction of the font
            size.

        borderpad : float, optional
            Pad between the frame and the axes (or *bbox_to_anchor*).

        prop : `matplotlib.font_manager.FontProperties`
            Font properties.

        Notes
        -----
        Other keyword parameters of `AnchoredOffsetbox` are also
        allowed.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36847 38227]))                  
                :type "class")
                nil [36754 38227])
            ("OffsetImage" type
               (:superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("OffsetBox" code nil (reparse-symbol indented_block_body) [38617 38641])
                            ("self" variable nil (reparse-symbol indented_block_body) [38650 38673])
                            ("self" variable nil (reparse-symbol indented_block_body) [38683 39153])
                            ("self" variable nil (reparse-symbol indented_block_body) [39163 39192])
                            ("self" code nil (reparse-symbol indented_block_body) [39202 39221])
                            ("self" code nil (reparse-symbol indented_block_body) [39230 39248]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38276 38280])
                            ("arr" variable nil (reparse-symbol function_parameters) [38282 38285])
                            ("zoom" variable nil (reparse-symbol function_parameters) [38304 38308])
                            ("cmap" variable nil (reparse-symbol function_parameters) [38329 38333])
                            ("norm" variable nil (reparse-symbol function_parameters) [38357 38361])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [38385 38398])
                            ("origin" variable nil (reparse-symbol function_parameters) [38422 38428])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [38452 38462])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [38483 38492])
                            ("resample" variable nil (reparse-symbol function_parameters) [38515 38523])
                            ("dpi_cor" variable nil (reparse-symbol function_parameters) [38548 38555])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [38579 38587]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38263 39249])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39267 39271])
                            ("arr" variable nil (reparse-symbol function_parameters) [39273 39276]))                          )
                        (reparse-symbol indented_block_body) [39254 39382])
                    ("get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39400 39404]))                          )
                        (reparse-symbol indented_block_body) [39387 39433])
                    ("set_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39451 39455])
                            ("zoom" variable nil (reparse-symbol function_parameters) [39457 39461]))                          )
                        (reparse-symbol indented_block_body) [39438 39516])
                    ("get_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39534 39538]))                          )
                        (reparse-symbol indented_block_body) [39521 39567])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39989 39993]))                          
                        :documentation "
        return offset of the container.
        ")
                        (reparse-symbol indented_block_body) [39974 40088])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40110 40114]))                          )
                        (reparse-symbol indented_block_body) [40093 40145])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40172 40176])
                            ("renderer" variable nil (reparse-symbol function_parameters) [40178 40186]))                          )
                        (reparse-symbol indented_block_body) [40150 40412])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40432 40436])
                            ("renderer" variable nil (reparse-symbol function_parameters) [40438 40446]))                          )
                        (reparse-symbol indented_block_body) [40417 40767])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40781 40785])
                            ("renderer" variable nil (reparse-symbol function_parameters) [40787 40795]))                          
                        :documentation "
        Draw the children
        ")
                        (reparse-symbol indented_block_body) [40772 40979]))                  
                :type "class")
                nil [38229 40979])
            ("AnnotationBbox" type
               (:documentation "
    Annotation-like class, but with offsetbox instead of Text.
    "
                :superclasses ("martist.Artist" "_AnnotationBase")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [41119 41129])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41147 41151]))                          )
                        (reparse-symbol indented_block_body) [41135 41220])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *offsetbox* : OffsetBox instance

        *xycoords* : same as Annotation but can be a tuple of two
           strings which are interpreted as x and y coordinates.

        *boxcoords* : similar to textcoords as Annotation but can be a
           tuple of two strings which are interpreted as x and y
           coordinates.

        *box_alignment* : a tuple of two floats for a vertical and
           horizontal alignment of the offset box w.r.t. the *boxcoords*.
           The lower-left corner is (0.0) and upper-right corner is (1.1).

        other parameters are identical to that of Annotation.
        \"\"\"" code nil (reparse-symbol indented_block_body) [41655 42284])
                            ("martist" code nil (reparse-symbol indented_block_body) [42294 42333])
                            ("_AnnotationBase" code nil (reparse-symbol indented_block_body) [42342 42527])
                            ("self" variable nil (reparse-symbol indented_block_body) [42537 42563])
                            ("self" variable nil (reparse-symbol indented_block_body) [42573 42601])
                            ("self" code nil (reparse-symbol indented_block_body) [42611 42638])
                            ("if" code nil (reparse-symbol indented_block_body) [42648 42739])
                            ("if" code nil (reparse-symbol indented_block_body) [42748 42861])
                            ("if" code nil (reparse-symbol indented_block_body) [42870 43189])
                            ("self" variable nil (reparse-symbol indented_block_body) [43251 43286])
                            ("self" variable nil (reparse-symbol indented_block_body) [43312 43525])
                            ("self" code nil (reparse-symbol indented_block_body) [43534 43576])
                            ("if" code nil (reparse-symbol indented_block_body) [43585 43639])
                            ("self" variable nil (reparse-symbol indented_block_body) [43647 43672]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41268 41272])
                            ("offsetbox" variable nil (reparse-symbol function_parameters) [41274 41283])
                            ("xy" variable nil (reparse-symbol function_parameters) [41285 41287])
                            ("xybox" variable nil (reparse-symbol function_parameters) [41306 41311])
                            ("xycoords" variable nil (reparse-symbol function_parameters) [41335 41343])
                            ("boxcoords" variable nil (reparse-symbol function_parameters) [41369 41378])
                            ("frameon" variable nil (reparse-symbol function_parameters) [41402 41409])
                            ("pad" variable nil (reparse-symbol function_parameters) [41416 41419])
                            ("annotation_clip" variable nil (reparse-symbol function_parameters) [41455 41470])
                            ("box_alignment" variable nil (reparse-symbol function_parameters) [41494 41507])
                            ("bboxprops" variable nil (reparse-symbol function_parameters) [41537 41546])
                            ("arrowprops" variable nil (reparse-symbol function_parameters) [41570 41580])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [41604 41612])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [41636 41644]))                          
                        :documentation "
        *offsetbox* : OffsetBox instance

        *xycoords* : same as Annotation but can be a tuple of two
           strings which are interpreted as x and y coordinates.

        *boxcoords* : similar to textcoords as Annotation but can be a
           tuple of two strings which are interpreted as x and y
           coordinates.

        *box_alignment* : a tuple of two floats for a vertical and
           horizontal alignment of the offset box w.r.t. the *boxcoords*.
           The lower-left corner is (0.0) and upper-right corner is (1.1).

        other parameters are identical to that of Annotation.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41225 43673])
                    ("xyann" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43702 43706]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [43678 43735])
                    ("xyann" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43768 43772])
                            ("xyann" variable nil (reparse-symbol function_parameters) [43774 43779]))                          
                        :decorators 
                          ( ("xyann.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [43740 43835])
                    ("anncoords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43868 43872]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [43840 43905])
                    ("anncoords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43946 43950])
                            ("coords" variable nil (reparse-symbol function_parameters) [43952 43958]))                          
                        :decorators 
                          ( ("anncoords.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [43910 44019])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44037 44041])
                            ("event" variable nil (reparse-symbol function_parameters) [44043 44048]))                          )
                        (reparse-symbol indented_block_body) [44024 44326])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44348 44352]))                          )
                        (reparse-symbol indented_block_body) [44331 44502])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44522 44526])
                            ("fig" variable nil (reparse-symbol function_parameters) [44528 44531]))                          )
                        (reparse-symbol indented_block_body) [44507 44705])
                    ("set_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44727 44731])
                            ("s" variable nil (reparse-symbol function_parameters) [44733 44734]))                          
                        :documentation "
        set fontsize in points
        ")
                        (reparse-symbol indented_block_body) [44710 44933])
                    ("get_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44955 44959])
                            ("s" variable nil (reparse-symbol function_parameters) [44961 44962]))                          
                        :documentation "
        return fontsize in points
        ")
                        (reparse-symbol indented_block_body) [44938 45074])
                    ("update_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45100 45104])
                            ("renderer" variable nil (reparse-symbol function_parameters) [45106 45114]))                          
                        :documentation "
        Update the pixel positions of the annotated point and the text.
        ")
                        (reparse-symbol indented_block_body) [45079 45541])
                    ("_update_position_xybox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45573 45577])
                            ("renderer" variable nil (reparse-symbol function_parameters) [45579 45587])
                            ("xy_pixel" variable nil (reparse-symbol function_parameters) [45589 45597]))                          
                        :documentation "
        Update the pixel positions of the annotation text and the arrow
        patch.
        ")
                        (reparse-symbol indented_block_body) [45546 47684])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47698 47702])
                            ("renderer" variable nil (reparse-symbol function_parameters) [47704 47712]))                          
                        :documentation "
        Draw the :class:`Annotation` object to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [47689 48447]))                  
                :type "class")
                nil [40981 48447])
            ("DraggableBase" type
               (:superclasses ("object")
                :type "class")
                nil [48449 52280])
            ("DraggableOffsetBox" type
               (:superclasses ("DraggableBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("DraggableBase" code nil (reparse-symbol indented_block_body) [52394 52453])
                            ("self" variable nil (reparse-symbol indented_block_body) [52462 52488]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52340 52344])
                            ("ref_artist" variable nil (reparse-symbol function_parameters) [52346 52356])
                            ("offsetbox" variable nil (reparse-symbol function_parameters) [52358 52367])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [52369 52377]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52327 52489])
                    ("save_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52510 52514]))                          )
                        (reparse-symbol indented_block_body) [52494 52814])
                    ("update_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52837 52841])
                            ("dx" variable nil (reparse-symbol function_parameters) [52843 52845])
                            ("dy" variable nil (reparse-symbol function_parameters) [52847 52849]))                          )
                        (reparse-symbol indented_block_body) [52819 52970])
                    ("get_loc_in_canvas" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52997 53001]))                          )
                        (reparse-symbol indented_block_body) [52975 53254]))                  
                :type "class")
                nil [52282 53254])
            ("DraggableAnnotation" type
               (:superclasses ("DraggableBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("DraggableBase" code nil (reparse-symbol indented_block_body) [53358 53417])
                            ("self" variable nil (reparse-symbol indented_block_body) [53426 53454]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53315 53319])
                            ("annotation" variable nil (reparse-symbol function_parameters) [53321 53331])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [53333 53341]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [53302 53455])
                    ("save_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53476 53480]))                          )
                        (reparse-symbol indented_block_body) [53460 53581])
                    ("update_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53604 53608])
                            ("dx" variable nil (reparse-symbol function_parameters) [53610 53612])
                            ("dy" variable nil (reparse-symbol function_parameters) [53614 53616]))                          )
                        (reparse-symbol indented_block_body) [53586 53753]))                  
                :type "class")
                nil [53256 53753])
            ("if" code nil nil [53755 54985]))          
      :file "offsetbox.py"
      :pointmax 54985
      :fsize 54984
      :lastmodtime '(22681 7108 707473 0)
      :unmatched-syntax '((FROM 5604 . 5608) (PERIOD 5609 . 5610) (FROM 5310 . 5314) (PERIOD 5315 . 5316)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("" code nil nil [24 109])
            ("six" include nil nil [111 121])
            ("matplotlib.cbook" include nil nil [123 155])
            ("matplotlib.artist" include nil nil [156 191])
            ("Container" type
               (:documentation "
    Base class for containers.
    "
                :superclasses ("tuple")
                :members 
                  ( ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [283 287]))                          )
                        (reparse-symbol indented_block_body) [270 354])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [371 374])
                        ("kl" variable nil (reparse-symbol function_parameters) [376 379])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [381 389]))                      ) (reparse-symbol indented_block_body) [359 433])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [483 504])
                            ("self" variable nil (reparse-symbol indented_block_body) [545 558])
                            ("self" variable nil (reparse-symbol indented_block_body) [585 609])
                            ("self" variable nil (reparse-symbol indented_block_body) [648 674])
                            ("self" code nil (reparse-symbol indented_block_body) [684 705]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [451 455])
                            ("kl" variable nil (reparse-symbol function_parameters) [457 459])
                            ("label" variable nil (reparse-symbol function_parameters) [461 466]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [438 706])
                    ("set_remove_method" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [733 737])
                            ("f" variable nil (reparse-symbol function_parameters) [739 740]))                          )
                        (reparse-symbol indented_block_body) [711 775])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [791 795]))                          )
                        (reparse-symbol indented_block_body) [780 1070])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1092 1096]))                          )
                        (reparse-symbol indented_block_body) [1075 1319])
                    ("get_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1338 1342]))                          
                        :documentation "
        Get the label used for this artist in the legend.
        ")
                        (reparse-symbol indented_block_body) [1324 1454])
                    ("set_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1473 1477])
                            ("s" variable nil (reparse-symbol function_parameters) [1479 1480]))                          
                        :documentation "
        Set the label to *s* for auto legend.

        ACCEPTS: string or anything printable with '%s' conversion.
        ")
                        (reparse-symbol indented_block_body) [1459 1756])
                    ("add_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1778 1782])
                            ("func" variable nil (reparse-symbol function_parameters) [1784 1788]))                          
                        :documentation "
        Adds a callback function that will be called whenever one of
        the :class:`Artist`'s properties changes.

        Returns an *id* that is useful for removing the callback with
        :meth:`remove_callback` later.
        ")
                        (reparse-symbol indented_block_body) [1761 2150])
                    ("remove_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2175 2179])
                            ("oid" variable nil (reparse-symbol function_parameters) [2181 2184]))                          
                        :documentation "
        Remove a callback based on its *id*.

        .. seealso::

            :meth:`add_callback`
               For adding callbacks

        ")
                        (reparse-symbol indented_block_body) [2155 2445])
                    ("pchanged" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2463 2467]))                          
                        :documentation "
        Fire an event when property changed, calling all of the
        registered callbacks.
        ")
                        (reparse-symbol indented_block_body) [2450 2678])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2700 2704]))                          )
                        (reparse-symbol indented_block_body) [2683 2748]))                  
                :type "class")
                nil [194 2748])
            ("BarContainer" type
               (:superclasses ("Container")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2848 2870])
                            ("self" variable nil (reparse-symbol indented_block_body) [2879 2903])
                            ("Container" code nil (reparse-symbol indented_block_body) [2912 2955]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2799 2803])
                            ("patches" variable nil (reparse-symbol function_parameters) [2805 2812])
                            ("errorbar" variable nil (reparse-symbol function_parameters) [2814 2822])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2829 2837]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2786 2956]))                  
                :type "class")
                nil [2750 2956])
            ("ErrorbarContainer" type
               (:superclasses ("Container")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3076 3094])
                            ("self" variable nil (reparse-symbol indented_block_body) [3103 3127])
                            ("self" variable nil (reparse-symbol indented_block_body) [3136 3160])
                            ("Container" code nil (reparse-symbol indented_block_body) [3169 3210]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3012 3016])
                            ("lines" variable nil (reparse-symbol function_parameters) [3018 3023])
                            ("has_xerr" variable nil (reparse-symbol function_parameters) [3025 3033])
                            ("has_yerr" variable nil (reparse-symbol function_parameters) [3041 3049])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3057 3065]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2999 3211]))                  
                :type "class")
                nil [2958 3211])
            ("StemContainer" type
               (:superclasses ("Container")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("markerline, stemlines, baseline" code nil (reparse-symbol indented_block_body) [3319 3382])
                            ("self" variable nil (reparse-symbol indented_block_body) [3391 3419])
                            ("self" variable nil (reparse-symbol indented_block_body) [3428 3454])
                            ("self" variable nil (reparse-symbol indented_block_body) [3463 3487])
                            ("Container" code nil (reparse-symbol indented_block_body) [3496 3561]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3263 3267])
                            ("markerline_stemlines_baseline" variable nil (reparse-symbol function_parameters) [3269 3298])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3300 3308]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3250 3562]))                  
                :type "class")
                nil [3213 3562]))          
      :file "container.py"
      :pointmax 3562
      :fsize 3561
      :lastmodtime '(22681 7108 755473 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module defines default legend handlers.

It is strongly encouraged to have read the :ref:`legend guide
<plotting-guide-legend>` before this documentation.

Legend handlers are expected to be a callable object with a following
signature. ::

    legend_handler(legend, orig_handle, fontsize, handlebox)

Where *legend* is the legend itself, *orig_handle* is the original
plot, *fontsize* is the fontsize in pixles, and *handlebox* is a
OffsetBox instance. Within the call, you should create relevant
artists (using relevant properties from the *legend* and/or
*orig_handle*) and add them into the handlebox. The artists needs to
be scaled according to the fontsize (note that the size is in pixel,
i.e., this is dpi-scaled value).

This module includes definition of several legend handler classes
derived from the base class (HandlerBase) with the following method.

    def legend_artist(self, legend, orig_handle, fontsize, handlebox):


\"\"\"" code nil nil [1 953])
            ("" code nil nil [977 1062])
            ("six" include nil nil [1064 1074])
            ("six.moves" include nil nil [1075 1100])
            ("numpy" include nil nil [1102 1120])
            ("matplotlib.lines" include nil nil [1122 1157])
            ("matplotlib.patches" include nil nil [1158 1198])
            ("matplotlib.collections" include nil nil [1199 1237])
            ("matplotlib.colors" include nil nil [1238 1273])
            ("update_from_first_child" function (:arguments 
              ( ("tgt" variable nil (reparse-symbol function_parameters) [1304 1307])
                ("src" variable nil (reparse-symbol function_parameters) [1309 1312]))              ) nil [1276 1358])
            ("HandlerBase" type
               (:documentation "
    A Base class for default legend handlers.

    The derived classes are meant to override *create_artists* method, which
    has a following signature.::

      def create_artists(self, legend, orig_handle,
                         xdescent, ydescent, width, height, fontsize,
                         trans):

    The overridden method needs to create artists of the given
    transform that fits in the given dimension (xdescent, ydescent,
    width, height) that are scaled by fontsize if necessary.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self, self" code nil (reparse-symbol indented_block_body) [1978 2013])
                            ("self" variable nil (reparse-symbol indented_block_body) [2022 2058]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1927 1931])
                            ("xpad" variable nil (reparse-symbol function_parameters) [1933 1937])
                            ("ypad" variable nil (reparse-symbol function_parameters) [1942 1946])
                            ("update_func" variable nil (reparse-symbol function_parameters) [1951 1962]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1914 2059])
                    ("_update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2081 2085])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [2087 2100])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [2102 2113]))                          )
                        (reparse-symbol indented_block_body) [2064 2302])
                    ("_default_update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2332 2336])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [2338 2351])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [2353 2364]))                          )
                        (reparse-symbol indented_block_body) [2307 2414])
                    ("update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2435 2439])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [2441 2454])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [2456 2467])
                            ("legend" variable nil (reparse-symbol function_parameters) [2469 2475]))                          )
                        (reparse-symbol indented_block_body) [2419 2665])
                    ("adjust_drawing_area" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2694 2698])
                            ("legend" variable nil (reparse-symbol function_parameters) [2700 2706])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [2708 2719])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [2749 2757])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [2759 2767])
                            ("width" variable nil (reparse-symbol function_parameters) [2769 2774])
                            ("height" variable nil (reparse-symbol function_parameters) [2776 2782])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [2784 2792]))                          )
                        (reparse-symbol indented_block_body) [2670 3072])
                    ("legend_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3095 3099])
                            ("legend" variable nil (reparse-symbol function_parameters) [3101 3107])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [3109 3120])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [3145 3153])
                            ("handlebox" variable nil (reparse-symbol function_parameters) [3155 3164]))                          
                        :documentation "
        Return the artist that this HandlerBase generates for the given
        original artist/handle.

        Parameters
        ----------
        legend : :class:`matplotlib.legend.Legend` instance
            The legend for which these legend artists are being created.
        orig_handle : :class:`matplotlib.artist.Artist` or similar
            The object for which these legend artists are being created.
        fontsize : float or int
            The fontsize in pixels. The artists being created should
            be scaled according to the given fontsize.
        handlebox : :class:`matplotlib.offsetbox.OffsetBox` instance
            The box which has been created to hold this legend entry's
            artists. Artists created in the `legend_artist` method must
            be added to this handlebox inside this method.

        ")
                        (reparse-symbol indented_block_body) [3077 4674])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4698 4702])
                            ("legend" variable nil (reparse-symbol function_parameters) [4704 4710])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [4712 4723])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [4748 4756])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [4758 4766])
                            ("width" variable nil (reparse-symbol function_parameters) [4768 4773])
                            ("height" variable nil (reparse-symbol function_parameters) [4775 4781])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [4783 4791])
                            ("trans" variable nil (reparse-symbol function_parameters) [4816 4821]))                          )
                        (reparse-symbol indented_block_body) [4679 4883]))                  
                :type "class")
                nil [1360 4883])
            ("HandlerNpoints" type
               (:superclasses ("HandlerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerBase" code nil (reparse-symbol indented_block_body) [4990 5022])
                            ("self" variable nil (reparse-symbol indented_block_body) [5032 5059])
                            ("self" variable nil (reparse-symbol indented_block_body) [5068 5097]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4937 4941])
                            ("marker_pad" variable nil (reparse-symbol function_parameters) [4943 4953])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [4959 4968])
                            ("kw" variable nil (reparse-symbol function_parameters) [4975 4979]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4924 5098])
                    ("get_numpoints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5121 5125])
                            ("legend" variable nil (reparse-symbol function_parameters) [5127 5133]))                          )
                        (reparse-symbol indented_block_body) [5103 5257])
                    ("get_xdata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5276 5280])
                            ("legend" variable nil (reparse-symbol function_parameters) [5282 5288])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [5290 5298])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [5300 5308])
                            ("width" variable nil (reparse-symbol function_parameters) [5310 5315])
                            ("height" variable nil (reparse-symbol function_parameters) [5317 5323])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [5325 5333]))                          )
                        (reparse-symbol indented_block_body) [5262 5890]))                  
                :type "class")
                nil [4885 5890])
            ("HandlerNpointsYoffsets" type
               (:superclasses ("HandlerNpoints")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerNpoints" code nil (reparse-symbol indented_block_body) [6007 6063])
                            ("self" variable nil (reparse-symbol indented_block_body) [6072 6097]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5955 5959])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [5961 5970])
                            ("yoffsets" variable nil (reparse-symbol function_parameters) [5977 5985])
                            ("kw" variable nil (reparse-symbol function_parameters) [5992 5996]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5942 6098])
                    ("get_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6117 6121])
                            ("legend" variable nil (reparse-symbol function_parameters) [6123 6129])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [6131 6139])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [6141 6149])
                            ("width" variable nil (reparse-symbol function_parameters) [6151 6156])
                            ("height" variable nil (reparse-symbol function_parameters) [6158 6164])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [6166 6174]))                          )
                        (reparse-symbol indented_block_body) [6103 6357]))                  
                :type "class")
                nil [5892 6357])
            ("HandlerLine2D" type
               (:documentation "
    Handler for Line2D instances.
    "
                :superclasses ("HandlerNpoints")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerNpoints" code nil (reparse-symbol indented_block_body) [6516 6595]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6463 6467])
                            ("marker_pad" variable nil (reparse-symbol function_parameters) [6469 6479])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [6485 6494])
                            ("kw" variable nil (reparse-symbol function_parameters) [6501 6505]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6450 6596])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6620 6624])
                            ("legend" variable nil (reparse-symbol function_parameters) [6626 6632])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [6634 6645])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [6670 6678])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [6680 6688])
                            ("width" variable nil (reparse-symbol function_parameters) [6690 6695])
                            ("height" variable nil (reparse-symbol function_parameters) [6697 6703])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [6705 6713])
                            ("trans" variable nil (reparse-symbol function_parameters) [6738 6743]))                          )
                        (reparse-symbol indented_block_body) [6601 7791]))                  
                :type "class")
                nil [6359 7791])
            ("HandlerPatch" type
               (:documentation "
    Handler for Patch instances.
    "
                :superclasses ("HandlerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The HandlerPatch class optionally takes a function ``patch_func``
        who's responsibility is to create the legend key artist. The
        ``patch_func`` should have the signature::

            def patch_func(legend=legend, orig_handle=orig_handle,
                           xdescent=xdescent, ydescent=ydescent,
                           width=width, height=height, fontsize=fontsize)

        Subsequently the created artist will have its ``update_prop`` method
        called and the appropriate transform will be applied.

        \"\"\"" code nil (reparse-symbol indented_block_body) [7930 8487])
                            ("HandlerBase" code nil (reparse-symbol indented_block_body) [8496 8528])
                            ("self" variable nil (reparse-symbol indented_block_body) [8537 8566]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7892 7896])
                            ("patch_func" variable nil (reparse-symbol function_parameters) [7898 7908])
                            ("kw" variable nil (reparse-symbol function_parameters) [7915 7919]))                          
                        :documentation "
        The HandlerPatch class optionally takes a function ``patch_func``
        who's responsibility is to create the legend key artist. The
        ``patch_func`` should have the signature::

            def patch_func(legend=legend, orig_handle=orig_handle,
                           xdescent=xdescent, ydescent=ydescent,
                           width=width, height=height, fontsize=fontsize)

        Subsequently the created artist will have its ``update_prop`` method
        called and the appropriate transform will be applied.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7879 8567])
                    ("_create_patch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8590 8594])
                            ("legend" variable nil (reparse-symbol function_parameters) [8596 8602])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [8604 8615])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [8639 8647])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [8649 8657])
                            ("width" variable nil (reparse-symbol function_parameters) [8659 8664])
                            ("height" variable nil (reparse-symbol function_parameters) [8666 8672])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [8674 8682]))                          )
                        (reparse-symbol indented_block_body) [8572 9084])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9108 9112])
                            ("legend" variable nil (reparse-symbol function_parameters) [9114 9120])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [9122 9133])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [9158 9166])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [9168 9176])
                            ("width" variable nil (reparse-symbol function_parameters) [9178 9183])
                            ("height" variable nil (reparse-symbol function_parameters) [9185 9191])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [9193 9201])
                            ("trans" variable nil (reparse-symbol function_parameters) [9203 9208]))                          )
                        (reparse-symbol indented_block_body) [9089 9438]))                  
                :type "class")
                nil [7793 9438])
            ("HandlerLineCollection" type
               (:documentation "
    Handler for LineCollection instances.
    "
                :superclasses ("HandlerLine2D")
                :members 
                  ( ("get_numpoints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9564 9568])
                            ("legend" variable nil (reparse-symbol function_parameters) [9570 9576]))                          )
                        (reparse-symbol indented_block_body) [9546 9704])
                    ("_default_update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9734 9738])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [9740 9753])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [9755 9766]))                          )
                        (reparse-symbol indented_block_body) [9709 10028])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10052 10056])
                            ("legend" variable nil (reparse-symbol function_parameters) [10058 10064])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [10066 10077])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [10102 10110])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [10112 10120])
                            ("width" variable nil (reparse-symbol function_parameters) [10122 10127])
                            ("height" variable nil (reparse-symbol function_parameters) [10129 10135])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [10137 10145])
                            ("trans" variable nil (reparse-symbol function_parameters) [10147 10152]))                          )
                        (reparse-symbol indented_block_body) [10033 10530]))                  
                :type "class")
                nil [9440 10530])
            ("HandlerRegularPolyCollection" type
               (:documentation "
    Handler for RegularPolyCollections.
    "
                :superclasses ("HandlerNpointsYoffsets")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerNpointsYoffsets" code nil (reparse-symbol indented_block_body) [10713 10775])
                            ("self" variable nil (reparse-symbol indented_block_body) [10785 10804]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10665 10669])
                            ("yoffsets" variable nil (reparse-symbol function_parameters) [10671 10679])
                            ("sizes" variable nil (reparse-symbol function_parameters) [10686 10691])
                            ("kw" variable nil (reparse-symbol function_parameters) [10698 10702]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10652 10805])
                    ("get_numpoints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10828 10832])
                            ("legend" variable nil (reparse-symbol function_parameters) [10834 10840]))                          )
                        (reparse-symbol indented_block_body) [10810 10968])
                    ("get_sizes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10987 10991])
                            ("legend" variable nil (reparse-symbol function_parameters) [10993 10999])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [11001 11012])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [11031 11039])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [11041 11049])
                            ("width" variable nil (reparse-symbol function_parameters) [11051 11056])
                            ("height" variable nil (reparse-symbol function_parameters) [11058 11064])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [11066 11074]))                          )
                        (reparse-symbol indented_block_body) [10973 11759])
                    ("update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11780 11784])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [11786 11799])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [11801 11812])
                            ("legend" variable nil (reparse-symbol function_parameters) [11814 11820]))                          )
                        (reparse-symbol indented_block_body) [11764 12059])
                    ("create_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12086 12090])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [12092 12103])
                            ("sizes" variable nil (reparse-symbol function_parameters) [12105 12110])
                            ("offsets" variable nil (reparse-symbol function_parameters) [12112 12119])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [12121 12132]))                          )
                        (reparse-symbol indented_block_body) [12064 12454])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12478 12482])
                            ("legend" variable nil (reparse-symbol function_parameters) [12484 12490])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [12492 12503])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [12528 12536])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [12538 12546])
                            ("width" variable nil (reparse-symbol function_parameters) [12548 12553])
                            ("height" variable nil (reparse-symbol function_parameters) [12555 12561])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [12563 12571])
                            ("trans" variable nil (reparse-symbol function_parameters) [12596 12601]))                          )
                        (reparse-symbol indented_block_body) [12459 13277]))                  
                :type "class")
                nil [10532 13277])
            ("HandlerPathCollection" type
               (:documentation "
    Handler for PathCollections, which are used by scatter
    "
                :superclasses ("HandlerRegularPolyCollection")
                :members 
                  ( ("create_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13439 13443])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [13445 13456])
                            ("sizes" variable nil (reparse-symbol function_parameters) [13458 13463])
                            ("offsets" variable nil (reparse-symbol function_parameters) [13465 13472])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [13474 13485]))                          )
                        (reparse-symbol indented_block_body) [13417 13742]))                  
                :type "class")
                nil [13279 13742])
            ("HandlerCircleCollection" type
               (:documentation "
    Handler for CircleCollections
    "
                :superclasses ("HandlerRegularPolyCollection")
                :members 
                  ( ("create_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13881 13885])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [13887 13898])
                            ("sizes" variable nil (reparse-symbol function_parameters) [13900 13905])
                            ("offsets" variable nil (reparse-symbol function_parameters) [13907 13914])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [13916 13927]))                          )
                        (reparse-symbol indented_block_body) [13859 14118]))                  
                :type "class")
                nil [13744 14118])
            ("HandlerErrorbar" type
               (:documentation "
    Handler for Errorbars
    "
                :superclasses ("HandlerLine2D")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [14319 14346])
                            ("self" variable nil (reparse-symbol indented_block_body) [14355 14382])
                            ("HandlerLine2D" code nil (reparse-symbol indented_block_body) [14392 14501]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14217 14221])
                            ("xerr_size" variable nil (reparse-symbol function_parameters) [14223 14232])
                            ("yerr_size" variable nil (reparse-symbol function_parameters) [14238 14247])
                            ("marker_pad" variable nil (reparse-symbol function_parameters) [14271 14281])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [14287 14296])
                            ("kw" variable nil (reparse-symbol function_parameters) [14303 14307]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14204 14502])
                    ("get_err_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14524 14528])
                            ("legend" variable nil (reparse-symbol function_parameters) [14530 14536])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [14538 14546])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [14548 14556])
                            ("width" variable nil (reparse-symbol function_parameters) [14558 14563])
                            ("height" variable nil (reparse-symbol function_parameters) [14565 14571])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [14573 14581]))                          )
                        (reparse-symbol indented_block_body) [14507 14804])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14828 14832])
                            ("legend" variable nil (reparse-symbol function_parameters) [14834 14840])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [14842 14853])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [14878 14886])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [14888 14896])
                            ("width" variable nil (reparse-symbol function_parameters) [14898 14903])
                            ("height" variable nil (reparse-symbol function_parameters) [14905 14911])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [14913 14921])
                            ("trans" variable nil (reparse-symbol function_parameters) [14946 14951]))                          )
                        (reparse-symbol indented_block_body) [14809 18252]))                  
                :type "class")
                nil [14120 18252])
            ("HandlerStem" type
               (:documentation "
    Handler for Errorbars
    "
                :superclasses ("HandlerNpointsYoffsets")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerNpointsYoffsets" code nil (reparse-symbol indented_block_body) [18454 18680])
                            ("self" variable nil (reparse-symbol indented_block_body) [18689 18710]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18355 18359])
                            ("marker_pad" variable nil (reparse-symbol function_parameters) [18361 18371])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [18377 18386])
                            ("bottom" variable nil (reparse-symbol function_parameters) [18410 18416])
                            ("yoffsets" variable nil (reparse-symbol function_parameters) [18423 18431])
                            ("kw" variable nil (reparse-symbol function_parameters) [18438 18442]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18342 18711])
                    ("get_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18730 18734])
                            ("legend" variable nil (reparse-symbol function_parameters) [18736 18742])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [18744 18752])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [18754 18762])
                            ("width" variable nil (reparse-symbol function_parameters) [18764 18769])
                            ("height" variable nil (reparse-symbol function_parameters) [18771 18777])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [18779 18787]))                          )
                        (reparse-symbol indented_block_body) [18716 18984])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19008 19012])
                            ("legend" variable nil (reparse-symbol function_parameters) [19014 19020])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [19022 19033])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [19058 19066])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [19068 19076])
                            ("width" variable nil (reparse-symbol function_parameters) [19078 19083])
                            ("height" variable nil (reparse-symbol function_parameters) [19085 19091])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [19093 19101])
                            ("trans" variable nil (reparse-symbol function_parameters) [19126 19131]))                          )
                        (reparse-symbol indented_block_body) [18989 20339]))                  
                :type "class")
                nil [18253 20339])
            ("HandlerTuple" type
               (:documentation "
    Handler for Tuple
    "
                :superclasses ("HandlerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerBase" code nil (reparse-symbol indented_block_body) [20454 20490]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20429 20433])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20435 20443]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20416 20491])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20515 20519])
                            ("legend" variable nil (reparse-symbol function_parameters) [20521 20527])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [20529 20540])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [20565 20573])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [20575 20583])
                            ("width" variable nil (reparse-symbol function_parameters) [20585 20590])
                            ("height" variable nil (reparse-symbol function_parameters) [20592 20598])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [20600 20608])
                            ("trans" variable nil (reparse-symbol function_parameters) [20633 20638]))                          )
                        (reparse-symbol indented_block_body) [20496 21129]))                  
                :type "class")
                nil [20341 21129])
            ("HandlerPolyCollection" type
               (:documentation "
    Handler for PolyCollection used in fill_between and stackplot.
    "
                :superclasses ("HandlerBase")
                :members 
                  ( ("_update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21277 21281])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [21283 21296])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [21298 21309]))                          )
                        (reparse-symbol indented_block_body) [21260 22270])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22294 22298])
                            ("legend" variable nil (reparse-symbol function_parameters) [22300 22306])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [22308 22319])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [22344 22352])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [22354 22362])
                            ("width" variable nil (reparse-symbol function_parameters) [22364 22369])
                            ("height" variable nil (reparse-symbol function_parameters) [22371 22377])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [22379 22387])
                            ("trans" variable nil (reparse-symbol function_parameters) [22389 22394]))                          )
                        (reparse-symbol indented_block_body) [22275 22595]))                  
                :type "class")
                nil [21131 22595]))          
      :file "legend_handler.py"
      :pointmax 22595
      :fsize 22594
      :lastmodtime '(22681 7108 707473 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags nil
      :file "afm.py"
      :pointmax 16504
      :fsize 16503
      :lastmodtime '(22681 7108 739473 0)
      :unmatched-syntax '(($EOI 16504 . 16504))))
  :file "!home!krishna!.local!lib!python2.7!site-packages!matplotlib!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
