;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Top-level display functions for displaying object in different formats.\"\"\"" code nil nil [25 102])
            ("__future__" include nil nil [206 243])
            ("try" code nil nil [245 375])
            ("json" include nil nil [376 387])
            ("mimetypes" include nil nil [388 404])
            ("os" include nil nil [405 414])
            ("struct" include nil nil [415 428])
            ("sys" include nil nil [429 439])
            ("warnings" include nil nil [440 455])
            ("" code nil nil [493 588])
            ("IPython.testing.skipdoctest" include nil nil [589 641])
            ("__all__" variable nil nil [643 1047])
            ("_safe_exists" function
               (:documentation "Check path, but don't let exceptions raise"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [1245 1249]))                  )
                nil [1228 1393])
            ("_merge" function
               (:documentation "Like update, but merges sub-dicts instead of clobbering at the top level.

    Updates d1 in-place
    "
                :arguments 
                  ( ("d1" variable nil (reparse-symbol function_parameters) [1405 1407])
                    ("d2" variable nil (reparse-symbol function_parameters) [1409 1411]))                  )
                nil [1394 1701])
            ("_display_mimetype" function
               (:documentation "internal implementation of all display_foo methods

    Parameters
    ----------
    mimetype : str
        The mimetype to be published (e.g. 'image/png')
    objs : tuple of objects
        The Python objects to display, or if raw=True raw text data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("mimetype" variable nil (reparse-symbol function_parameters) [1724 1732])
                    ("objs" variable nil (reparse-symbol function_parameters) [1734 1738])
                    ("raw" variable nil (reparse-symbol function_parameters) [1740 1743])
                    ("metadata" variable nil (reparse-symbol function_parameters) [1751 1759]))                  )
                nil [1702 2549])
            ("publish_display_data" function
               (:documentation "Publish data and metadata to all frontends.

    See the ``display_data`` message in the messaging documentation for
    more details about this message type.

    The following MIME types are currently implemented:

    * text/plain
    * text/html
    * text/markdown
    * text/latex
    * application/json
    * application/javascript
    * image/png
    * image/jpeg
    * image/svg+xml

    Parameters
    ----------
    data : dict
        A dictionary having keys that are valid MIME types (like
        'text/plain' or 'image/svg+xml') and values that are the data for
        that MIME type. The data itself must be a JSON'able data
        structure. Minimally all data should have the 'text/plain' data,
        which can be displayed by all frontends. If more than the plain
        text is given, it is up to the frontend to decide which
        representation to use.
    metadata : dict
        A dictionary for metadata related to the data. This can contain
        arbitrary key, value pairs that frontends can use to interpret
        the data. mime-type keys matching those in data can be used
        to specify metadata about particular representations.
    source : str, deprecated
        Unused.
        "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [2751 2755])
                    ("metadata" variable nil (reparse-symbol function_parameters) [2757 2765])
                    ("source" variable nil (reparse-symbol function_parameters) [2772 2778]))                  )
                nil [2726 4194])
            ("display" function
               (:documentation "Display a Python object in all frontends.

    By default all representations will be computed and sent to the frontends.
    Frontends can decide which representation is used and how.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display.
    raw : bool, optional
        Are the objects to be displayed already mimetype-keyed dicts of raw display data,
        or Python objects that need to be formatted before display? [default: False]
    include : list or tuple, optional
        A list of format type strings (MIME types) to include in the
        format data dict. If this is set *only* the format types included
        in this list will be computed.
    exclude : list or tuple, optional
        A list of format type strings (MIME types) to exclude in the format
        data dict. If this is set all format types will be computed,
        except for those included in this argument.
    metadata : dict, optional
        A dictionary of metadata to associate with the output.
        mime-type keys in this dictionary will be associated with the individual
        representation formats, if they exist.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [4207 4212])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [4214 4222]))                  )
                nil [4195 6214])
            ("display_pretty" function
               (:documentation "Display the pretty (default) representation of an object.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw text data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [6235 6240])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [6242 6250]))                  )
                nil [6216 6763])
            ("display_html" function
               (:documentation "Display the HTML representation of an object.
    
    Note: If raw=False and the object does not have a HTML
    representation, no HTML will be shown.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw HTML data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [6782 6787])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [6789 6797]))                  )
                nil [6765 7404])
            ("display_markdown" function
               (:documentation "Displays the Markdown representation of an object.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw markdown data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [7427 7432])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [7434 7442]))                  )
                nil [7406 7956])
            ("display_svg" function
               (:documentation "Display the SVG representation of an object.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw svg data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [7974 7979])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [7981 7989]))                  )
                nil [7958 8491])
            ("display_png" function
               (:documentation "Display the PNG representation of an object.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw png data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [8509 8514])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [8516 8524]))                  )
                nil [8493 9022])
            ("display_jpeg" function
               (:documentation "Display the JPEG representation of an object.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw JPEG data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [9041 9046])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [9048 9056]))                  )
                nil [9024 9557])
            ("display_latex" function
               (:documentation "Display the LaTeX representation of an object.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw latex data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [9577 9582])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [9584 9592]))                  )
                nil [9559 10095])
            ("display_json" function
               (:documentation "Display the JSON representation of an object.

    Note that not many frontends support displaying JSON.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw json data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [10114 10119])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [10121 10129]))                  )
                nil [10097 10695])
            ("display_javascript" function
               (:documentation "Display the Javascript representation of an object.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw javascript data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [10720 10725])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [10727 10735]))                  )
                nil [10697 11260])
            ("display_pdf" function
               (:documentation "Display the PDF representation of an object.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw javascript data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [11278 11283])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [11285 11293]))                  )
                nil [11262 11804])
            ("DisplayObject" type
               (:documentation "An object that wraps data to be displayed."
                :superclasses ("object")
                :members 
                  ( ("_read_flags" variable nil (reparse-symbol indented_block_body) [12069 12086])
                    ("_show_mem_addr" variable nil (reparse-symbol indented_block_body) [12091 12113])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a display object given raw data.

        When this object is returned by an expression or passed to the
        display function, it will result in the data being displayed
        in the frontend. The MIME type of the data should match the
        subclasses used, so the Png subclass should be used for 'image/png'
        data. If the data is a URL, the data will first be downloaded
        and then displayed. If

        Parameters
        ----------
        data : unicode, str or bytes
            The raw data or a URL or file to load the data from
        url : unicode
            A URL to download the data from.
        filename : unicode
            Path to a local file to load the data from.
        \"\"\"" code nil (reparse-symbol indented_block_body) [12183 12913])
                            ("if" code nil (reparse-symbol indented_block_body) [12922 13266])
                            ("self" variable nil (reparse-symbol indented_block_body) [13275 13291])
                            ("self" variable nil (reparse-symbol indented_block_body) [13300 13314])
                            ("unicode_type" code nil (reparse-symbol indented_block_body) [13369 13391])
                            ("self" code nil (reparse-symbol indented_block_body) [13401 13414])
                            ("self" code nil (reparse-symbol indented_block_body) [13423 13441]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12132 12136])
                            ("data" variable nil (reparse-symbol function_parameters) [12138 12142])
                            ("url" variable nil (reparse-symbol function_parameters) [12149 12152])
                            ("filename" variable nil (reparse-symbol function_parameters) [12159 12167]))                          
                        :documentation "Create a display object given raw data.

        When this object is returned by an expression or passed to the
        display function, it will result in the data being displayed
        in the frontend. The MIME type of the data should match the
        subclasses used, so the Png subclass should be used for 'image/png'
        data. If the data is a URL, the data will first be downloaded
        and then displayed. If

        Parameters
        ----------
        data : unicode, str or bytes
            The raw data or a URL or file to load the data from
        url : unicode
            A URL to download the data from.
        filename : unicode
            Path to a local file to load the data from.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12119 13442])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13460 13464]))                          )
                        (reparse-symbol indented_block_body) [13447 13687])
                    ("_check_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13708 13712]))                          
                        :documentation "Override in subclasses if there's something to check.")
                        (reparse-symbol indented_block_body) [13692 13796])
                    ("reload" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13812 13816]))                          
                        :documentation "Reload the raw data from file or URL.")
                        (reparse-symbol indented_block_body) [13801 14876]))                  
                :type "class")
                nil [11982 14876])
            ("TextDisplayObject" type
               (:documentation "Validate that display data is text"
                :superclasses ("DisplayObject")
                :members 
                  ( ("_check_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14982 14986]))                          )
                        (reparse-symbol indented_block_body) [14966 15161]))                  
                :type "class")
                nil [14877 15161])
            ("Pretty" type
               (:superclasses ("TextDisplayObject")
                :members 
                  ( ("_repr_pretty_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15218 15222]))                          )
                        (reparse-symbol indented_block_body) [15200 15250]))                  
                :type "class")
                nil [15162 15250])
            ("HTML" type
               (:superclasses ("TextDisplayObject")
                :members 
                  ( ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15304 15308]))                          )
                        (reparse-symbol indented_block_body) [15288 15336])
                    ("__html__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15354 15358]))                          
                        :documentation "
        This method exists to inform other HTML-using modules (e.g. Markupsafe,
        htmltag, etc) that this object is HTML and does not need things like
        special characters (<>&) escaped.
        ")
                        (reparse-symbol indented_block_body) [15341 15618]))                  
                :type "class")
                nil [15252 15618])
            ("Markdown" type
               (:superclasses ("TextDisplayObject")
                :members 
                  ( ("_repr_markdown_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15680 15684]))                          )
                        (reparse-symbol indented_block_body) [15660 15712]))                  
                :type "class")
                nil [15620 15712])
            ("Math" type
               (:superclasses ("TextDisplayObject")
                :members 
                  ( ("_repr_latex_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15767 15771]))                          )
                        (reparse-symbol indented_block_body) [15750 15835]))                  
                :type "class")
                nil [15714 15835])
            ("Latex" type
               (:superclasses ("TextDisplayObject")
                :members 
                  ( ("_repr_latex_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15891 15895]))                          )
                        (reparse-symbol indented_block_body) [15874 15923]))                  
                :type "class")
                nil [15837 15923])
            ("SVG" type
               (:superclasses ("DisplayObject")
                :members 
                  ( ("_read_flags" variable nil (reparse-symbol indented_block_body) [15956 15974])
                    ("_data" variable nil (reparse-symbol indented_block_body) [16074 16086])
                    ("data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16115 16119]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16092 16148])
                    ("data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16179 16183])
                            ("svg" variable nil (reparse-symbol function_parameters) [16185 16188]))                          
                        :decorators 
                          ( ("data.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16153 16735])
                    ("_repr_svg_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16755 16759]))                          )
                        (reparse-symbol indented_block_body) [16740 16787]))                  
                :type "class")
                nil [15925 16787])
            ("JSON" type
               (:documentation "JSON expects a JSON-able dict or list
    
    not an already-serialized JSON string.
    
    Scalar types (None, number, string) are not allowed, only dict or list containers.
    "
                :superclasses ("DisplayObject")
                :members 
                  ( ("_data" variable nil (reparse-symbol indented_block_body) [17094 17106])
                    ("_check_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17127 17131]))                          )
                        (reparse-symbol indented_block_body) [17111 17323])
                    ("data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17351 17355]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17328 17384])
                    ("data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17419 17423])
                            ("data" variable nil (reparse-symbol function_parameters) [17425 17429]))                          
                        :decorators 
                          ( ("data.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17393 17619])
                    ("_repr_json_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17640 17644]))                          )
                        (reparse-symbol indented_block_body) [17624 17672]))                  
                :type "class")
                nil [16789 17672])
            ("css_t" variable nil nil [17673 17784])
            ("lib_t1" variable nil nil [17786 17833])
            ("lib_t2" variable nil nil [17834 17853])
            ("Javascript" type
               (:superclasses ("TextDisplayObject")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a Javascript display object given raw data.

        When this object is returned by an expression or passed to the
        display function, it will result in the data being displayed
        in the frontend. If the data is a URL, the data will first be
        downloaded and then displayed.

        In the Notebook, the containing element will be available as `element`,
        and jQuery will be available.  Content appended to `element` will be
        visible in the output area. 

        Parameters
        ----------
        data : unicode, str or bytes
            The Javascript source code or a URL to download it from.
        url : unicode
            A URL to download the data from.
        filename : unicode
            Path to a local file to load the data from.
        lib : list or str
            A sequence of Javascript library URLs to load asynchronously before
            running the source code. The full URLs of the libraries should
            be given. A single Javascript library URL can also be given as a
            string.
        css: : list or str
            A sequence of css files to load before running the source code.
            The full URLs of the css files should be given. A single css URL
            can also be given as a string.
        \"\"\"" code nil (reparse-symbol indented_block_body) [17981 19287])
                            ("if" code nil (reparse-symbol indented_block_body) [19296 19401])
                            ("if" code nil (reparse-symbol indented_block_body) [19409 19514])
                            ("if" code nil (reparse-symbol indented_block_body) [19522 19624])
                            ("if" code nil (reparse-symbol indented_block_body) [19632 19734])
                            ("self" variable nil (reparse-symbol indented_block_body) [19742 19756])
                            ("self" variable nil (reparse-symbol indented_block_body) [19765 19779])
                            ("super" code nil (reparse-symbol indented_block_body) [19788 19859]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17910 17914])
                            ("data" variable nil (reparse-symbol function_parameters) [17916 17920])
                            ("url" variable nil (reparse-symbol function_parameters) [17927 17930])
                            ("filename" variable nil (reparse-symbol function_parameters) [17937 17945])
                            ("lib" variable nil (reparse-symbol function_parameters) [17952 17955])
                            ("css" variable nil (reparse-symbol function_parameters) [17962 17965]))                          
                        :documentation "Create a Javascript display object given raw data.

        When this object is returned by an expression or passed to the
        display function, it will result in the data being displayed
        in the frontend. If the data is a URL, the data will first be
        downloaded and then displayed.

        In the Notebook, the containing element will be available as `element`,
        and jQuery will be available.  Content appended to `element` will be
        visible in the output area. 

        Parameters
        ----------
        data : unicode, str or bytes
            The Javascript source code or a URL to download it from.
        url : unicode
            A URL to download the data from.
        filename : unicode
            Path to a local file to load the data from.
        lib : list or str
            A sequence of Javascript library URLs to load asynchronously before
            running the source code. The full URLs of the libraries should
            be given. A single Javascript library URL can also be given as a
            string.
        css: : list or str
            A sequence of css files to load before running the source code.
            The full URLs of the css files should be given. A single css URL
            can also be given as a string.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17897 19860])
                    ("_repr_javascript_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19887 19891]))                          )
                        (reparse-symbol indented_block_body) [19865 20092]))                  
                :type "class")
                nil [17855 20092])
            ("'\\x89PNG\\r\\n\\x1a\\n'" code nil nil [20143 20162])
            ("'\\xff\\xd8'" code nil nil [20172 20182])
            ("_pngxy" function
               (:documentation "read the (width, height) from a PNG header"
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [20195 20199]))                  )
                nil [20184 20392])
            ("_jpegxy" function
               (:documentation "read the (width, height) from a JPEG header"
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [20405 20409]))                  )
                nil [20393 20908])
            ("Image" type
               (:superclasses ("DisplayObject")
                :members 
                  ( ("_read_flags" variable nil (reparse-symbol indented_block_body) [20942 20960])
                    ("_FMT_JPEG" variable nil (reparse-symbol indented_block_body) [20965 20984])
                    ("_FMT_PNG" variable nil (reparse-symbol indented_block_body) [20989 21006])
                    ("_ACCEPTABLE_EMBEDDINGS" variable nil (reparse-symbol indented_block_body) [21011 21057])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a PNG/JPEG image object given raw data.

        When this object is returned by an input cell or passed to the
        display function, it will result in the image being displayed
        in the frontend.

        Parameters
        ----------
        data : unicode, str or bytes
            The raw image data or a URL or filename to load the data from.
            This always results in embedded image data.
        url : unicode
            A URL to download the data from. If you specify `url=`,
            the image data will not be embedded unless you also specify `embed=True`.
        filename : unicode
            Path to a local file to load the data from.
            Images from a file are always embedded.
        format : unicode
            The format of the image data (png/jpeg/jpg). If a filename or URL is given
            for format will be inferred from the filename extension.
        embed : bool
            Should the image data be embedded using a data URI (True) or be
            loaded using an <img> tag. Set this to True if you want the image
            to be viewable later with no internet connection in the notebook.

            Default is `True`, unless the keyword argument `url` is set, then
            default value is `False`.

            Note that QtConsole is not able to display images if `embed` is set to `False`
        width : int
            Width in pixels to which to constrain the image in html
        height : int
            Height in pixels to which to constrain the image in html
        retina : bool
            Automatically set the width and height to half of the measured
            width and height.
            This only works for embedded images because it reads the width/height
            from image data.
            For non-embedded images, you can just set the desired display width
            and height directly.
        unconfined: bool
            Set unconfined=True to disable max-width confinement of the image.
        metadata: dict
            Specify extra metadata to attach to the image.

        Examples
        --------
        # embedded image data, works in qtconsole and notebook
        # when passed positionally, the first arg can be any of raw image data,
        # a URL, or a filename from which to load image data.
        # The result is always embedding image data for inline images.
        Image('http://www.google.fr/images/srpr/logo3w.png')
        Image('/path/to/image.jpg')
        Image(b'RAW_PNG_DATA...')

        # Specifying Image(url=...) does not embed the image data,
        # it only generates `<img>` tag with a link to the source.
        # This will not work in the qtconsole or offline.
        Image(url='http://www.google.fr/images/srpr/logo3w.png')

        \"\"\"" code nil (reparse-symbol indented_block_body) [21258 24063])
                            ("if" code nil (reparse-symbol indented_block_body) [24072 24517])
                            ("if" code nil (reparse-symbol indented_block_body) [24526 25053])
                            ("if" code nil (reparse-symbol indented_block_body) [25109 25155])
                            ("if" code nil (reparse-symbol indented_block_body) [25164 25252])
                            ("self" variable nil (reparse-symbol indented_block_body) [25261 25303])
                            ("" code nil (reparse-symbol indented_block_body) [25357 25370])
                            ("if" code nil (reparse-symbol indented_block_body) [25380 25529])
                            ("self" variable nil (reparse-symbol indented_block_body) [25537 25555])
                            ("self" variable nil (reparse-symbol indented_block_body) [25564 25584])
                            ("self" variable nil (reparse-symbol indented_block_body) [25593 25613])
                            ("self" variable nil (reparse-symbol indented_block_body) [25622 25650])
                            ("self" variable nil (reparse-symbol indented_block_body) [25659 25683])
                            ("super" code nil (reparse-symbol indented_block_body) [25692 25758])
                            ("if" code nil (reparse-symbol indented_block_body) [25776 25820]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21076 21080])
                            ("data" variable nil (reparse-symbol function_parameters) [21082 21086])
                            ("url" variable nil (reparse-symbol function_parameters) [21093 21096])
                            ("filename" variable nil (reparse-symbol function_parameters) [21103 21111])
                            ("format" variable nil (reparse-symbol function_parameters) [21118 21124])
                            ("embed" variable nil (reparse-symbol function_parameters) [21148 21153])
                            ("width" variable nil (reparse-symbol function_parameters) [21160 21165])
                            ("height" variable nil (reparse-symbol function_parameters) [21172 21178])
                            ("retina" variable nil (reparse-symbol function_parameters) [21185 21191])
                            ("unconfined" variable nil (reparse-symbol function_parameters) [21216 21226])
                            ("metadata" variable nil (reparse-symbol function_parameters) [21234 21242]))                          
                        :documentation "Create a PNG/JPEG image object given raw data.

        When this object is returned by an input cell or passed to the
        display function, it will result in the image being displayed
        in the frontend.

        Parameters
        ----------
        data : unicode, str or bytes
            The raw image data or a URL or filename to load the data from.
            This always results in embedded image data.
        url : unicode
            A URL to download the data from. If you specify `url=`,
            the image data will not be embedded unless you also specify `embed=True`.
        filename : unicode
            Path to a local file to load the data from.
            Images from a file are always embedded.
        format : unicode
            The format of the image data (png/jpeg/jpg). If a filename or URL is given
            for format will be inferred from the filename extension.
        embed : bool
            Should the image data be embedded using a data URI (True) or be
            loaded using an <img> tag. Set this to True if you want the image
            to be viewable later with no internet connection in the notebook.

            Default is `True`, unless the keyword argument `url` is set, then
            default value is `False`.

            Note that QtConsole is not able to display images if `embed` is set to `False`
        width : int
            Width in pixels to which to constrain the image in html
        height : int
            Height in pixels to which to constrain the image in html
        retina : bool
            Automatically set the width and height to half of the measured
            width and height.
            This only works for embedded images because it reads the width/height
            from image data.
            For non-embedded images, you can just set the desired display width
            and height directly.
        unconfined: bool
            Set unconfined=True to disable max-width confinement of the image.
        metadata: dict
            Specify extra metadata to attach to the image.

        Examples
        --------
        # embedded image data, works in qtconsole and notebook
        # when passed positionally, the first arg can be any of raw image data,
        # a URL, or a filename from which to load image data.
        # The result is always embedding image data for inline images.
        Image('http://www.google.fr/images/srpr/logo3w.png')
        Image('/path/to/image.jpg')
        Image(b'RAW_PNG_DATA...')

        # Specifying Image(url=...) does not embed the image data,
        # it only generates `<img>` tag with a link to the source.
        # This will not work in the qtconsole or offline.
        Image(url='http://www.google.fr/images/srpr/logo3w.png')

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21063 25820])
                    ("_retina_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25847 25851]))                          
                        :documentation "load pixel-doubled width and height from image data")
                        (reparse-symbol indented_block_body) [25829 26239])
                    ("reload" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26255 26259]))                          
                        :documentation "Reload the raw data from file or URL.")
                        (reparse-symbol indented_block_body) [26244 26441])
                    ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26462 26466]))                          )
                        (reparse-symbol indented_block_body) [26446 26978])
                    ("_data_and_metadata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27006 27010]))                          
                        :documentation "shortcut for returning metadata with shape information, if defined")
                        (reparse-symbol indented_block_body) [26983 27462])
                    ("_repr_png_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27482 27486]))                          )
                        (reparse-symbol indented_block_body) [27467 27583])
                    ("_repr_jpeg_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27604 27608]))                          )
                        (reparse-symbol indented_block_body) [27588 27733])
                    ("_find_ext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27752 27756])
                            ("s" variable nil (reparse-symbol function_parameters) [27758 27759]))                          )
                        (reparse-symbol indented_block_body) [27738 27816]))                  
                :type "class")
                nil [20909 27816])
            ("Video" type
               (:superclasses ("DisplayObject")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a video object given raw data or an URL.

        When this object is returned by an input cell or passed to the
        display function, it will result in the video being displayed
        in the frontend.

        Parameters
        ----------
        data : unicode, str or bytes
            The raw video data or a URL or filename to load the data from.
            Raw data will require passing `embed=True`.
        url : unicode
            A URL for the video. If you specify `url=`,
            the image data will not be embedded.
        filename : unicode
            Path to a local file containing the video.
            Will be interpreted as a local URL unless `embed=True`.
        embed : bool
            Should the video be embedded using a data URI (True) or be
            loaded using a <video> tag (False).

            Since videos are large, embedding them should be avoided, if possible.
            You must confirm embedding as your intention by passing `embed=True`.

            Local files can be displayed with URLs without embedding the content, via::

                Video('./video.mp4')

        mimetype: unicode
            Specify the mimetype for embedded videos.
            Default will be guessed from file extension, if available.

        Examples
        --------

        Video('https://archive.org/download/Sita_Sings_the_Blues/Sita_Sings_the_Blues_small.mp4')
        Video('path/to/video.mp4')
        Video('path/to/video.mp4', embed=True)
        Video(b'raw-videodata', embed=True)
        \"\"\"" code nil (reparse-symbol indented_block_body) [27942 29500])
                            ("if" code nil (reparse-symbol indented_block_body) [29509 29735])
                            ("if" code nil (reparse-symbol indented_block_body) [29752 30029])
                            ("self" variable nil (reparse-symbol indented_block_body) [30038 30062])
                            ("self" variable nil (reparse-symbol indented_block_body) [30071 30089])
                            ("super" code nil (reparse-symbol indented_block_body) [30098 30164]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27863 27867])
                            ("data" variable nil (reparse-symbol function_parameters) [27869 27873])
                            ("url" variable nil (reparse-symbol function_parameters) [27880 27883])
                            ("filename" variable nil (reparse-symbol function_parameters) [27890 27898])
                            ("embed" variable nil (reparse-symbol function_parameters) [27905 27910])
                            ("mimetype" variable nil (reparse-symbol function_parameters) [27918 27926]))                          
                        :documentation "Create a video object given raw data or an URL.

        When this object is returned by an input cell or passed to the
        display function, it will result in the video being displayed
        in the frontend.

        Parameters
        ----------
        data : unicode, str or bytes
            The raw video data or a URL or filename to load the data from.
            Raw data will require passing `embed=True`.
        url : unicode
            A URL for the video. If you specify `url=`,
            the image data will not be embedded.
        filename : unicode
            Path to a local file containing the video.
            Will be interpreted as a local URL unless `embed=True`.
        embed : bool
            Should the video be embedded using a data URI (True) or be
            loaded using a <video> tag (False).

            Since videos are large, embedding them should be avoided, if possible.
            You must confirm embedding as your intention by passing `embed=True`.

            Local files can be displayed with URLs without embedding the content, via::

                Video('./video.mp4')

        mimetype: unicode
            Specify the mimetype for embedded videos.
            Default will be guessed from file extension, if available.

        Examples
        --------

        Video('https://archive.org/download/Sita_Sings_the_Blues/Sita_Sings_the_Blues_small.mp4')
        Video('path/to/video.mp4')
        Video('path/to/video.mp4', embed=True)
        Video(b'raw-videodata', embed=True)
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27850 30165])
                    ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30186 30190]))                          )
                        (reparse-symbol indented_block_body) [30170 31339])
                    ("reload" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31355 31359]))                          )
                        (reparse-symbol indented_block_body) [31344 31390])
                    ("_repr_png_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31410 31414]))                          )
                        (reparse-symbol indented_block_body) [31395 31445])
                    ("_repr_jpeg_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31465 31469]))                          )
                        (reparse-symbol indented_block_body) [31449 31500]))                  
                :type "class")
                nil [27817 31500])
            ("clear_output" function
               (:documentation "Clear the output of the current cell receiving output.

    Parameters
    ----------
    wait : bool [default: false]
        Wait to clear the output until new output is available to replace it."
                :arguments 
                  ( ("wait" variable nil (reparse-symbol function_parameters) [31518 31522]))                  )
                nil [31501 32041])
            ("set_matplotlib_formats" function
               (:documentation "Select figure formats for the inline backend. Optionally pass quality for JPEG.

    For example, this enables PNG and JPEG output with a JPEG quality of 90%::

        In [1]: set_matplotlib_formats('png', 'jpeg', quality=90)

    To set this in your config files use the following::
    
        c.InlineBackend.figure_formats = {'png', 'jpeg'}
        c.InlineBackend.print_figure_kwargs.update({'quality' : 90})

    Parameters
    ----------
    *formats : strs
        One or more figure formats to enable: 'png', 'retina', 'jpeg', 'svg', 'pdf'.
    **kwargs :
        Keyword args will be relayed to ``figure.canvas.print_figure``.
    "
                :arguments 
                  ( ("formats" variable nil (reparse-symbol function_parameters) [32084 32092])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [32094 32102]))                  
                :decorators 
                  ( ("skip_doctest" function (:type "decorator") nil nil))                  )
                nil [32043 33190])
            ("set_matplotlib_close" function
               (:documentation "Set whether the inline backend closes all figures automatically or not.
    
    By default, the inline backend used in the IPython Notebook will close all
    matplotlib figures automatically after each cell is run. This means that
    plots in different cells won't interfere. Sometimes, you may want to make
    a plot in one cell and then refine it in later cells. This can be accomplished
    by::
    
        In [1]: set_matplotlib_close(False)
    
    To set this in your config files use the following::
    
        c.InlineBackend.close_figures = False
    
    Parameters
    ----------
    close : bool
        Should all matplotlib figures be automatically closed after each cell is
        run?
    "
                :arguments 
                  ( ("close" variable nil (reparse-symbol function_parameters) [33230 33235]))                  
                :decorators 
                  ( ("skip_doctest" function (:type "decorator") nil nil))                  )
                nil [33191 34087]))          
      :file "display.py"
      :pointmax 34088
      :fsize 34087
      :lastmodtime '(22681 7109 991451 0)
      :unmatched-syntax '((NAME 30337 . 30340) (IF 30352 . 30354) (ELSE 30376 . 30380) (NAME 25312 . 25316) (IF 25331 . 25333) (ELSE 25352 . 25356) (INDENT_BLOCK 20817 . 20838) (NEWLINE 20783 . 20784) (COLON 20782 . 20783) (ELSE 20778 . 20782) (INDENT_BLOCK 20729 . 20770) (NEWLINE 20693 . 20694) (IF 20659 . 20661) (STRING_LITERAL 20682 . 20692) (COLON 20692 . 20693) (NAME 13323 . 13327) (IF 13344 . 13346) (ELSE 13364 . 13368))))
  :file "!home!krishna!.local!lib!python2.7!site-packages!IPython!core!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
