;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Provides classes to represent module version numbers (one class for
each style of version numbering).  There are currently two such classes
implemented: StrictVersion and LooseVersion.

Every version number class implements the following interface:
  * the 'parse' method takes a string and parses it to some internal
    representation; if the string is an invalid version number,
    'parse' raises a ValueError exception
  * the class constructor takes an optional string argument which,
    if supplied, is passed to 'parse'
  * __str__ reconstructs the string that was passed to 'parse' (or
    an equivalent string -- ie. one that will generate an equivalent
    version number instance)
  * __repr__ generates Python code to recreate the version number instance
  * __cmp__ compares the current instance with either another instance
    of the same class or a string (which will be parsed to an instance
    of the same class, thus must follow the same rules)
\"\"\"" code nil nil [140 1113])
            ("re" include nil nil [1115 1132])
            ("string" include nil nil [1115 1132])
            ("types" include nil nil [1133 1161])
            ("Version" type
               (:documentation "Abstract base class for version numbering classes.  Just provides
    constructor (__init__) and reproducer (__repr__), because those
    seem to be the same for all version numbering classes.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1434 1478]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1405 1409])
                            ("vstring" variable nil (reparse-symbol function_parameters) [1411 1418]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1391 1478])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1497 1501]))                          )
                        (reparse-symbol indented_block_body) [1483 1570]))                  
                :type "class")
                nil [1163 1570])
            ("StrictVersion" type
               (:documentation "Version numbering for anal retentives and software idealists.
    Implements the standard interface for version number classes as
    described above.  A version number consists of two or three
    dot-separated numeric components, with an optional \"pre-release\" tag
    on the end.  The pre-release tag consists of the letter 'a' or 'b'
    followed by a number.  If the numeric components of two version
    numbers are equal, then one with a pre-release tag will always
    be deemed earlier (lesser) than one without.

    The following are valid version numbers (shown in the order that
    would be obtained by sorting according to the supplied cmp function):

        0.4       0.4.0  (these two are equivalent)
        0.4.1
        0.5a1
        0.5b3
        0.5
        0.9.6
        1.0
        1.0.4a3
        1.0.4b1
        1.0.4

    The following are examples of invalid version numbers:

        1
        2.7.2.2
        1.3.a4
        1.3pl1
        1.3c4

    The rationale for this version numbering system will be explained
    in the distutils documentation.
    "
                :superclasses ("Version")
                :members 
                  ( ("version_re" variable nil (reparse-symbol indented_block_body) [3625 3734])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3752 3756])
                            ("vstring" variable nil (reparse-symbol function_parameters) [3758 3765]))                          )
                        (reparse-symbol indented_block_body) [3741 4337])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4356 4360]))                          )
                        (reparse-symbol indented_block_body) [4343 4672])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4691 4695])
                            ("other" variable nil (reparse-symbol function_parameters) [4697 4702]))                          )
                        (reparse-symbol indented_block_body) [4678 5718]))                  
                :type "class")
                nil [2490 5718])
            ("LooseVersion" type
               (:documentation "Version numbering for anarchists and software realists.
    Implements the standard interface for version number classes as
    described above.  A version number consists of a series of numbers,
    separated by either periods or strings of letters.  When comparing
    version numbers, the numeric components will be compared
    numerically, and the alphabetic components lexically.  The following
    are all valid version numbers, in no particular order:

        1.5.1
        1.5.2b2
        161
        3.10a
        8.02
        3.4j
        1996.07.12
        3.2.pl0
        3.1.1.6
        2g6
        11g
        0.960923
        2.2beta29
        1.13++
        5.5.kw
        2.0b1pl0

    In fact, there is no such thing as an invalid version number under
    this scheme; the rules for comparison are simple and predictable,
    but may not always give the results you want (for some definition
    of \"want\").
    "
                :superclasses ("Version")
                :members 
                  ( ("component_re" variable nil (reparse-symbol indented_block_body) [10414 10475])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [10524 10568]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10495 10499])
                            ("vstring" variable nil (reparse-symbol function_parameters) [10501 10508]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10481 10568])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10585 10589])
                            ("vstring" variable nil (reparse-symbol function_parameters) [10591 10598]))                          )
                        (reparse-symbol indented_block_body) [10574 11113])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11132 11136]))                          )
                        (reparse-symbol indented_block_body) [11119 11167])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11187 11191]))                          )
                        (reparse-symbol indented_block_body) [11173 11243])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11262 11266])
                            ("other" variable nil (reparse-symbol function_parameters) [11268 11273]))                          )
                        (reparse-symbol indented_block_body) [11249 11407]))                  
                :type "class")
                nil [9435 11407]))          
      :file "version.py"
      :pointmax 11434
      :fsize 11433
      :lastmodtime '(22493 12834 0 0)
      :unmatched-syntax nil))
  :file "!usr!lib!python2.7!distutils!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
