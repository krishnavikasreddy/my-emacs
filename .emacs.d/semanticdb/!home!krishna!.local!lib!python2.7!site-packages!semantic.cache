;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Cycler
======

Cycling through combinations of values, producing dictionaries.

You can add cyclers::

    from cycler import cycler
    cc = (cycler(color=list('rgb')) +
          cycler(linestyle=['-', '--', '-.']))
    for d in cc:
        print(d)

Results in::

    {'color': 'r', 'linestyle': '-'}
    {'color': 'g', 'linestyle': '--'}
    {'color': 'b', 'linestyle': '-.'}


You can multiply cyclers::

    from cycler import cycler
    cc = (cycler(color=list('rgb')) *
          cycler(linestyle=['-', '--', '-.']))
    for d in cc:
        print(d)

Results in::

    {'color': 'r', 'linestyle': '-'}
    {'color': 'r', 'linestyle': '--'}
    {'color': 'r', 'linestyle': '-.'}
    {'color': 'g', 'linestyle': '-'}
    {'color': 'g', 'linestyle': '--'}
    {'color': 'g', 'linestyle': '-.'}
    {'color': 'b', 'linestyle': '-'}
    {'color': 'b', 'linestyle': '--'}
    {'color': 'b', 'linestyle': '-.'}
\"\"\"" code nil nil [1 921])
            ("" code nil nil [946 1031])
            ("six" include nil nil [1033 1043])
            ("itertools" include nil nil [1044 1080])
            ("six.moves" include nil nil [1081 1114])
            ("operator" include nil nil [1115 1144])
            ("copy" include nil nil [1145 1156])
            ("__version__" variable nil nil [1158 1180])
            ("_process_keys" function
               (:documentation "
    Helper function to compose cycler keys

    Parameters
    ----------
    left, right : iterable of dictionaries or None
        The cyclers to be composed
    Returns
    -------
    keys : set
        The keys in the composition of the two cyclers
    "
                :arguments 
                  ( ("left" variable nil (reparse-symbol function_parameters) [1201 1205])
                    ("right" variable nil (reparse-symbol function_parameters) [1207 1212]))                  )
                nil [1183 1775])
            ("Cycler" type
               (:documentation "
    Composable cycles

    This class has compositions methods:

    ``+``
      for 'inner' products (zip)

    ``+=``
      in-place ``+``

    ``*``
      for outer products (itertools.product) and integer multiplication

    ``*=``
      in-place ``*``

    and supports basic slicing via ``[]``

    Parameters
    ----------
    left : Cycler or None
        The 'left' cycler

    right : Cycler or None
        The 'right' cycler

    op : func or None
        Function which composes the 'left' and 'right' cyclers.

    "
                :superclasses ("object")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2358 2362]))                          )
                        (reparse-symbol indented_block_body) [2345 2392])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Semi-private init

        Do not use this directly, use `cycler` function instead.
        \"\"\"" code nil (reparse-symbol indented_block_body) [2452 2550])
                            ("if" code nil (reparse-symbol indented_block_body) [2559 2914])
                            ("if" code nil (reparse-symbol indented_block_body) [2923 3287])
                            ("self" variable nil (reparse-symbol indented_block_body) [3296 3347])
                            ("self" variable nil (reparse-symbol indented_block_body) [3356 3369]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2410 2414])
                            ("left" variable nil (reparse-symbol function_parameters) [2416 2420])
                            ("right" variable nil (reparse-symbol function_parameters) [2422 2427])
                            ("op" variable nil (reparse-symbol function_parameters) [2434 2436]))                          
                        :documentation "Semi-private init

        Do not use this directly, use `cycler` function instead.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2397 3370])
                    ("keys" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3398 3402]))                          
                        :documentation "
        The keys this Cycler knows about
        ")
                        (reparse-symbol indented_block_body) [3375 3501])
                    ("change_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3521 3525])
                            ("old" variable nil (reparse-symbol function_parameters) [3527 3530])
                            ("new" variable nil (reparse-symbol function_parameters) [3532 3535]))                          
                        :documentation "
        Change a key in this cycler to a new name.
        Modification is performed in-place.

        Does nothing if the old key is the same as the new key.
        Raises a ValueError if the new key is already a key.
        Raises a KeyError if the old key isn't a key.

        ")
                        (reparse-symbol indented_block_body) [3506 4758])
                    ("_compose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4776 4780]))                          
                        :documentation "
        Compose the 'left' and 'right' components of this cycle
        with the proper operation (zip or product as of now)
        ")
                        (reparse-symbol indented_block_body) [4763 5086])
                    ("_from_iter" function
                       (:documentation "
        Class method to create 'base' Cycler objects
        that do not have a 'right' or 'op' and for which
        the 'left' object is not another Cycler.

        Parameters
        ----------
        label : str
            The property key.

        itr : iterable
            Finite length iterable of the property values.

        Returns
        -------
        cycler : Cycler
            New 'base' `Cycler`
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5123 5126])
                            ("label" variable nil (reparse-symbol function_parameters) [5128 5133])
                            ("itr" variable nil (reparse-symbol function_parameters) [5135 5138]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5091 5711])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5732 5736])
                            ("key" variable nil (reparse-symbol function_parameters) [5738 5741]))                          )
                        (reparse-symbol indented_block_body) [5716 6074])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6092 6096]))                          )
                        (reparse-symbol indented_block_body) [6079 6216])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6233 6237])
                            ("other" variable nil (reparse-symbol function_parameters) [6239 6244]))                          
                        :documentation "
        Pair-wise combine two equal length cycles (zip)

        Parameters
        ----------
        other : Cycler
           The second Cycler
        ")
                        (reparse-symbol indented_block_body) [6221 6638])
                    ("__mul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6655 6659])
                            ("other" variable nil (reparse-symbol function_parameters) [6661 6666]))                          
                        :documentation "
        Outer product of two cycles (`itertools.product`) or integer
        multiplication.

        Parameters
        ----------
        other : Cycler or int
           The second Cycler or integer
        ")
                        (reparse-symbol indented_block_body) [6643 7219])
                    ("__rmul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7237 7241])
                            ("other" variable nil (reparse-symbol function_parameters) [7243 7248]))                          )
                        (reparse-symbol indented_block_body) [7224 7279])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7296 7300]))                          )
                        (reparse-symbol indented_block_body) [7284 7525])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7543 7547])
                            ("other" variable nil (reparse-symbol function_parameters) [7549 7554]))                          
                        :documentation "
        In-place pair-wise combine two equal length cycles (zip)

        Parameters
        ----------
        other : Cycler
           The second Cycler
        ")
                        (reparse-symbol indented_block_body) [7530 8139])
                    ("__imul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8157 8161])
                            ("other" variable nil (reparse-symbol function_parameters) [8163 8168]))                          
                        :documentation "
        In-place outer product of two cycles (`itertools.product`)

        Parameters
        ----------
        other : Cycler
           The second Cycler
        ")
                        (reparse-symbol indented_block_body) [8144 8759])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8775 8779])
                            ("other" variable nil (reparse-symbol function_parameters) [8781 8786]))                          
                        :documentation "
        Check equality
        ")
                        (reparse-symbol indented_block_body) [8764 9014])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9032 9036]))                          )
                        (reparse-symbol indented_block_body) [9019 9439])
                    ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9460 9464]))                          )
                        (reparse-symbol indented_block_body) [9444 9938])
                    ("by_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9954 9958]))                          
                        :documentation "Values by key

        This returns the transposed values of the cycler.  Iterating
        over a `Cycler` yields dicts with a single value for each key,
        this method returns a `dict` of `list` which are the values
        for the given key.

        The returned value can be used to create an equivalent `Cycler`
        using only `+`.

        Returns
        -------
        transpose : dict
            dict of lists of the values for each key.
        ")
                        (reparse-symbol indented_block_body) [9943 10784])
                    ("_transpose" variable nil (reparse-symbol indented_block_body) [10818 10837])
                    ("simplify" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10856 10860]))                          
                        :documentation "Simplify the Cycler

        Returned as a composition using only sums (no multiplications)

        Returns
        -------
        simple : Cycler
            An equivalent cycler using only summation")
                        (reparse-symbol indented_block_body) [10843 11433])
                    ("concat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11449 11453])
                            ("other" variable nil (reparse-symbol function_parameters) [11455 11460]))                          
                        :documentation "Concatenate this cycler and an other.

        The keys must match exactly.

        This returns a single Cycler which is equivalent to
        `itertools.chain(self, other)`

        Examples
        --------

        >>> num = cycler('a', range(3))
        >>> let = cycler('a', 'abc')
        >>> num.concat(let)
        cycler('a', [0, 1, 2, 'a', 'b', 'c'])

        Parameters
        ----------
        other : `Cycler`
            The `Cycler` to concatenate to this one.

        Returns
        -------
        ret : `Cycler`
            The concatenated `Cycler`
        ")
                        (reparse-symbol indented_block_body) [11438 12095]))                  
                :type "class")
                nil [1777 12095])
            ("concat" function
               (:documentation "Concatenate two cyclers.

    The keys must match exactly.

    This returns a single Cycler which is equivalent to
    `itertools.chain(left, right)`

    Examples
    --------

    >>> num = cycler('a', range(3))
    >>> let = cycler('a', 'abc')
    >>> num.concat(let)
    cycler('a', [0, 1, 2, 'a', 'b', 'c'])

    Parameters
    ----------
    left, right : `Cycler`
        The two `Cycler` instances to concatenate

    Returns
    -------
    ret : `Cycler`
        The concatenated `Cycler`
    "
                :arguments 
                  ( ("left" variable nil (reparse-symbol function_parameters) [12108 12112])
                    ("right" variable nil (reparse-symbol function_parameters) [12114 12119]))                  )
                nil [12097 13107])
            ("cycler" function
               (:documentation "
    Create a new `Cycler` object from a single positional argument,
    a pair of positional arguments, or the combination of keyword arguments.

    cycler(arg)
    cycler(label1=itr1[, label2=iter2[, ...]])
    cycler(label, itr)

    Form 1 simply copies a given `Cycler` object.

    Form 2 composes a `Cycler` as an inner product of the
    pairs of keyword arguments. In other words, all of the
    iterables are cycled simultaneously, as if through zip().

    Form 3 creates a `Cycler` from a label and an iterable.
    This is useful for when the label cannot be a keyword argument
    (e.g., an integer or a name that has a space in it).

    Parameters
    ----------
    arg : Cycler
        Copy constructor for Cycler (does a shallow copy of iterables).

    label : name
        The property key. In the 2-arg form of the function,
        the label can be any hashable object. In the keyword argument
        form of the function, it must be a valid python identifier.

    itr : iterable
        Finite length iterable of the property values.
        Can be a single-property `Cycler` that would
        be like a key change, but as a shallow copy.

    Returns
    -------
    cycler : Cycler
        New `Cycler` for the given property

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [13120 13125])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [13127 13135]))                  )
                nil [13109 15191])
            ("_cycler" function
               (:documentation "
    Create a new `Cycler` object from a property name and
    iterable of values.

    Parameters
    ----------
    label : hashable
        The property key.

    itr : iterable
        Finite length iterable of the property values.

    Returns
    -------
    cycler : Cycler
        New `Cycler` for the given property
    "
                :arguments 
                  ( ("label" variable nil (reparse-symbol function_parameters) [15205 15210])
                    ("itr" variable nil (reparse-symbol function_parameters) [15212 15215]))                  )
                nil [15193 15960]))          
      :file "cycler.py"
      :pointmax 15960
      :fsize 15959
      :lastmodtime '(22681 7119 479281 0)
      :unmatched-syntax '((NAME 1547 . 1553) (IF 1574 . 1576) (ELSE 1595 . 1599) (NAME 1489 . 1495) (IF 1515 . 1517) (ELSE 1535 . 1539))))
  :file "!home!krishna!.local!lib!python2.7!site-packages!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
