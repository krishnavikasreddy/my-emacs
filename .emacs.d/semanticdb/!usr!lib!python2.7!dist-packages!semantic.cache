;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__doc__" variable nil nil [1130 2589])
            ("__version__" variable nil nil [2591 2612])
            ("__versionTime__" variable nil nil [2613 2654])
            ("__author__" variable nil nil [2655 2712])
            ("string" include nil nil [2714 2727])
            ("weakref" include nil nil [2728 2760])
            ("copy" include nil nil [2761 2772])
            ("sys" include nil nil [2773 2783])
            ("warnings" include nil nil [2784 2799])
            ("re" include nil nil [2800 2809])
            ("sre_constants" include nil nil [2810 2830])
            ("collections" include nil nil [2831 2849])
            ("pprint" include nil nil [2850 2863])
            ("traceback" include nil nil [2864 2880])
            ("types" include nil nil [2881 2893])
            ("datetime" include nil nil [2894 2923])
            ("try" code nil nil [2925 3012])
            ("try" code nil nil [3013 3215])
            ("__all__" variable nil nil [3318 4852])
            ("system_version" variable nil nil [4854 4898])
            ("PY_3" code nil nil [4899 4928])
            ("if" code nil nil [4929 6475])
            ("_generatorType" variable nil nil [6488 6532])
            ("_xml_escape" function
               (:documentation "Escape &, <, >, \", ', etc. in a string of data."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [6551 6555]))                  )
                nil [6535 6860])
            ("_Constants" type
               (:superclasses ("object")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [6891 6895]))                  
                :type "class")
                nil [6861 6896])
            ("alphas" code nil nil [6897 6957])
            ("nums" variable nil nil [6958 6983])
            ("hexnums" code nil nil [6984 7018])
            ("alphanums" code nil nil [7019 7045])
            ("_bslash" variable nil nil [7046 7066])
            ("printables" variable nil nil [7067 7146])
            ("ParseBaseException" type
               (:documentation "base exception class for all parsing runtime exceptions"
                :superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7437 7451])
                            ("if" code nil (reparse-symbol indented_block_body) [7460 7601])
                            ("self" variable nil (reparse-symbol indented_block_body) [7609 7634])
                            ("self" variable nil (reparse-symbol indented_block_body) [7643 7671]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7387 7391])
                            ("pstr" variable nil (reparse-symbol function_parameters) [7393 7397])
                            ("loc" variable nil (reparse-symbol function_parameters) [7399 7402])
                            ("msg" variable nil (reparse-symbol function_parameters) [7406 7409])
                            ("elem" variable nil (reparse-symbol function_parameters) [7416 7420]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7373 7672])
                    ("_from_exception" function
                       (:documentation "
        internal factory method to simplify creating one type of ParseException 
        from another - avoids having __init__ signature conflicts among subclasses
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7714 7717])
                            ("pe" variable nil (reparse-symbol function_parameters) [7719 7721]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7677 7974])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7996 8000])
                            ("aname" variable nil (reparse-symbol function_parameters) [8002 8007]))                          
                        :documentation "supported attributes by name are:
            - lineno - returns the line number of the exception text
            - col - returns the column number of the exception text
            - line - returns the line containing the exception text
        ")
                        (reparse-symbol indented_block_body) [7979 8579])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8597 8601]))                          )
                        (reparse-symbol indented_block_body) [8584 8726])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8744 8748]))                          )
                        (reparse-symbol indented_block_body) [8730 8779])
                    ("markInputline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8802 8806])
                            ("markerString" variable nil (reparse-symbol function_parameters) [8808 8820]))                          
                        :documentation "Extracts the exception line from the input string, and marks
           the location of the exception with a special symbol.
        ")
                        (reparse-symbol indented_block_body) [8783 9231])
                    ("__dir__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9247 9251]))                          )
                        (reparse-symbol indented_block_body) [9235 9313]))                  
                :type "class")
                nil [7148 9313])
            ("ParseException" type
               (:documentation "
    Exception thrown when parse expressions don't match class;
    supported attributes by name are:
     - lineno - returns the line number of the exception text
     - col - returns the column number of the exception text
     - line - returns the line containing the exception text
        
    Example::
        try:
            Word(nums).setName(\"integer\").parseString(\"ABC\")
        except ParseException as pe:
            print(pe)
            print(\"column: {}\".format(pe.col))
            
    prints::
       Expected integer (at char 0), (line:1, col:1)
        column: 1
    "
                :superclasses ("ParseBaseException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [9961 9965]))                  
                :type "class")
                nil [9314 9966])
            ("ParseFatalException" type
               (:documentation "user-throwable exception thrown when inconsistent parse content
       is found; stops all parsing immediately"
                :superclasses ("ParseBaseException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [10139 10143]))                  
                :type "class")
                nil [9967 10144])
            ("ParseSyntaxException" type
               (:documentation "just like L{ParseFatalException}, but thrown internally when an
       L{ErrorStop<And._ErrorStop>} ('-' operator) indicates that parsing is to stop 
       immediately because an unbacktrackable syntax error has been found"
                :superclasses ("ParseFatalException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [10432 10436]))                  
                :type "class")
                nil [10145 10959])
            ("RecursiveGrammarException" type
               (:documentation "exception thrown by L{ParserElement.validate} if the grammar could be improperly recursive"
                :superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11289 11330]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11255 11259])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [11261 11277]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11241 11331])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11349 11353]))                          )
                        (reparse-symbol indented_block_body) [11336 11429]))                  
                :type "class")
                nil [11092 11429])
            ("_ParseResultsWithOffset" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11507 11525]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11486 11490])
                            ("p1" variable nil (reparse-symbol function_parameters) [11491 11493])
                            ("p2" variable nil (reparse-symbol function_parameters) [11494 11496]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11473 11526])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11546 11550])
                            ("i" variable nil (reparse-symbol function_parameters) [11551 11552]))                          )
                        (reparse-symbol indented_block_body) [11530 11582])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11599 11603]))                          )
                        (reparse-symbol indented_block_body) [11586 11636])
                    ("setOffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11654 11658])
                            ("i" variable nil (reparse-symbol function_parameters) [11659 11660]))                          )
                        (reparse-symbol indented_block_body) [11640 11698]))                  
                :type "class")
                nil [11430 11698])
            ("ParseResults" type
               (:superclasses ("object")
                :type "class")
                nil [11699 35889])
            ("collections" code nil nil [35890 35939])
            ("col" function
               (:documentation "Returns current column within a string, counting newlines as line separators.
   The first column is number 1.

   Note: the default parsing behavior is to expand tabs in the input string
   before starting the parsing process.  See L{I{ParserElement.parseString}<ParserElement.parseString>} for more information
   on parsing strings containing C{<TAB>}s, and suggested methods to maintain a
   consistent view of the parsed string, the parse location, and line and column
   positions within the parsed string.
   "
                :arguments 
                  ( ("loc" variable nil (reparse-symbol function_parameters) [35950 35953])
                    ("strg" variable nil (reparse-symbol function_parameters) [35954 35958]))                  )
                nil [35941 36580])
            ("lineno" function
               (:documentation "Returns current line number within a string, counting newlines as line separators.
   The first line is number 1.

   Note: the default parsing behavior is to expand tabs in the input string
   before starting the parsing process.  See L{I{ParserElement.parseString}<ParserElement.parseString>} for more information
   on parsing strings containing C{<TAB>}s, and suggested methods to maintain a
   consistent view of the parsed string, the parse location, and line and column
   positions within the parsed string.
   "
                :arguments 
                  ( ("loc" variable nil (reparse-symbol function_parameters) [36592 36595])
                    ("strg" variable nil (reparse-symbol function_parameters) [36596 36600]))                  )
                nil [36581 37171])
            ("line" function
               (:documentation "Returns the line of text containing loc within a string, counting newlines as line separators.
       "
                :arguments 
                  ( ("loc" variable nil (reparse-symbol function_parameters) [37182 37185])
                    ("strg" variable nil (reparse-symbol function_parameters) [37187 37191]))                  )
                nil [37172 37478])
            ("_defaultStartDebugAction" function (:arguments 
              ( ("instring" variable nil (reparse-symbol function_parameters) [37509 37517])
                ("loc" variable nil (reparse-symbol function_parameters) [37519 37522])
                ("expr" variable nil (reparse-symbol function_parameters) [37524 37528]))              ) nil [37479 37653])
            ("_defaultSuccessDebugAction" function (:arguments 
              ( ("instring" variable nil (reparse-symbol function_parameters) [37686 37694])
                ("startloc" variable nil (reparse-symbol function_parameters) [37696 37704])
                ("endloc" variable nil (reparse-symbol function_parameters) [37706 37712])
                ("expr" variable nil (reparse-symbol function_parameters) [37714 37718])
                ("toks" variable nil (reparse-symbol function_parameters) [37720 37724]))              ) nil [37654 37795])
            ("_defaultExceptionDebugAction" function (:arguments 
              ( ("instring" variable nil (reparse-symbol function_parameters) [37830 37838])
                ("loc" variable nil (reparse-symbol function_parameters) [37840 37843])
                ("expr" variable nil (reparse-symbol function_parameters) [37845 37849])
                ("exc" variable nil (reparse-symbol function_parameters) [37851 37854]))              ) nil [37796 37903])
            ("nullDebugAction" function
               (:documentation "'Do-nothing' debug action, to suppress debugging output during parsing."
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [37924 37929]))                  )
                nil [37904 38023])
            ("'decorator to trim function calls to match the arity of the target'" code nil nil [38783 38850])
            ("_trim_arity" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [38867 38871])
                ("maxargs" variable nil (reparse-symbol function_parameters) [38873 38880]))              ) nil [38851 41274])
            ("ParserElement" type
               (:documentation "Abstract base level parser element class."
                :superclasses ("object")
                :members 
                  ( ("DEFAULT_WHITE_CHARS" variable nil (reparse-symbol indented_block_body) [41360 41391])
                    ("verbose_stacktrace" variable nil (reparse-symbol indented_block_body) [41396 41422])
                    ("setDefaultWhitespaceChars" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("chars" variable nil (reparse-symbol function_parameters) [41477 41482]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [41428 42017])
                    ("inlineLiteralsUsing" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [42064 42067]))                          
                        :documentation "
        Set class to be used for inclusion of string literals into a parser.
        
        Example::
            # default literal class used is Literal
            integer = Word(nums)
            date_str = integer(\"year\") + '/' + integer(\"month\") + '/' + integer(\"day\")           

            date_str.parseString(\"1999/12/31\")  # -> ['1999', '/', '12', '/', '31']


            # change to Suppress
            ParserElement.inlineLiteralsUsing(Suppress)
            date_str = integer(\"year\") + '/' + integer(\"month\") + '/' + integer(\"day\")           

            date_str.parseString(\"1999/12/31\")  # -> ['1999', '12', '31']
        ")
                        (reparse-symbol indented_block_body) [42022 42778])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [42829 42854])
                            ("self" variable nil (reparse-symbol indented_block_body) [42863 42885])
                            ("self" variable nil (reparse-symbol indented_block_body) [42989 43008])
                            ("self" variable nil (reparse-symbol indented_block_body) [43017 43040])
                            ("self" variable nil (reparse-symbol indented_block_body) [43049 43075])
                            ("self" variable nil (reparse-symbol indented_block_body) [43084 43110])
                            ("self" variable nil (reparse-symbol indented_block_body) [43119 43170])
                            ("self" variable nil (reparse-symbol indented_block_body) [43179 43212])
                            ("self" variable nil (reparse-symbol indented_block_body) [43221 43248])
                            ("self" variable nil (reparse-symbol indented_block_body) [43297 43318])
                            ("self" variable nil (reparse-symbol indented_block_body) [43327 43352])
                            ("self" variable nil (reparse-symbol indented_block_body) [43361 43379])
                            ("self" variable nil (reparse-symbol indented_block_body) [43388 43412])
                            ("self" variable nil (reparse-symbol indented_block_body) [43421 43446])
                            ("self" variable nil (reparse-symbol indented_block_body) [43539 43555])
                            ("self" variable nil (reparse-symbol indented_block_body) [43564 43588])
                            ("self" variable nil (reparse-symbol indented_block_body) [43679 43719])
                            ("self" variable nil (reparse-symbol indented_block_body) [43750 43764])
                            ("self" variable nil (reparse-symbol indented_block_body) [43773 43797])
                            ("self" variable nil (reparse-symbol indented_block_body) [43850 43876]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42797 42801])
                            ("savelist" variable nil (reparse-symbol function_parameters) [42803 42811]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42783 43877])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43892 43896]))                          
                        :documentation "
        Make a copy of this C{ParserElement}.  Useful for defining different parse actions
        for the same parsing pattern, using copies of the original parse element.
        
        Example::
            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
            integerK = integer.copy().addParseAction(lambda toks: toks[0]*1024) + Suppress(\"K\")
            integerM = integer.copy().addParseAction(lambda toks: toks[0]*1024*1024) + Suppress(\"M\")
            
            print(OneOrMore(integerK | integerM | integer).parseString(\"5K 100 640K 256M\"))
        prints::
            [5120, 100, 655360, 268435456]
        Equivalent form of C{expr.copy()} is just C{expr()}::
            integerM = integer().addParseAction(lambda toks: toks[0]*1024*1024) + Suppress(\"M\")
        ")
                        (reparse-symbol indented_block_body) [43882 44964])
                    ("setName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44982 44986])
                            ("name" variable nil (reparse-symbol function_parameters) [44988 44992]))                          
                        :documentation "
        Define name for this expression, makes debugging and exception messages clearer.
        
        Example::
            Word(nums).parseString(\"ABC\")  # -> Exception: Expected W:(0123...) (at char 0), (line:1, col:1)
            Word(nums).setName(\"integer\").parseString(\"ABC\")  # -> Exception: Expected integer (at char 0), (line:1, col:1)
        ")
                        (reparse-symbol indented_block_body) [44969 45543])
                    ("setResultsName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45568 45572])
                            ("name" variable nil (reparse-symbol function_parameters) [45574 45578])
                            ("listAllMatches" variable nil (reparse-symbol function_parameters) [45580 45594]))                          
                        :documentation "
        Define name for referencing matching tokens as a nested attribute
        of the returned parse results.
        NOTE: this returns a *copy* of the original C{ParserElement} object;
        this is so that the client can define a basic element, such as an
        integer, and reference it in multiple places with different names.

        You can also set results names using the abbreviated syntax,
        C{expr(\"name\")} in place of C{expr.setResultsName(\"name\")} - 
        see L{I{__call__}<__call__>}.

        Example::
            date_str = (integer.setResultsName(\"year\") + '/' 
                        + integer.setResultsName(\"month\") + '/' 
                        + integer.setResultsName(\"day\"))

            # equivalent form:
            date_str = integer(\"year\") + '/' + integer(\"month\") + '/' + integer(\"day\")
        ")
                        (reparse-symbol indented_block_body) [45548 46697])
                    ("setBreak" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46715 46719])
                            ("breakFlag" variable nil (reparse-symbol function_parameters) [46720 46729]))                          
                        :documentation "Method to invoke the Python pdb debugger when this element is
           about to be parsed. Set C{breakFlag} to True to enable, False to
           disable.
        ")
                        (reparse-symbol indented_block_body) [46702 47440])
                    ("setParseAction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47465 47469])
                            ("fns" variable nil (reparse-symbol function_parameters) [47471 47475])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [47477 47485]))                          
                        :documentation "
        Define action to perform when successfully matching parse element definition.
        Parse action fn is a callable method with 0-3 arguments, called as C{fn(s,loc,toks)},
        C{fn(loc,toks)}, C{fn(toks)}, or just C{fn()}, where:
         - s   = the original string being parsed (see note below)
         - loc = the location of the matching substring
         - toks = a list of the matched tokens, packaged as a C{L{ParseResults}} object
        If the functions in fns modify the tokens, they can return them as the return
        value from fn, and the modified list of tokens will replace the original.
        Otherwise, fn does not need to return any value.

        Optional keyword arguments:
         - callDuringTry = (default=C{False}) indicate if parse action should be run during lookaheads and alternate testing

        Note: the default parsing behavior is to expand tabs in the input string
        before starting the parsing process.  See L{I{parseString}<parseString>} for more information
        on parsing strings containing C{<TAB>}s, and suggested methods to maintain a
        consistent view of the parsed string, the parse location, and line and column
        positions within the parsed string.
        
        Example::
            integer = Word(nums)
            date_str = integer + '/' + integer + '/' + integer

            date_str.parseString(\"1999/12/31\")  # -> ['1999', '/', '12', '/', '31']

            # use parse action to convert to ints at parse time
            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
            date_str = integer + '/' + integer + '/' + integer

            # note that integer fields are now ints, not strings
            date_str.parseString(\"1999/12/31\")  # -> [1999, '/', 12, '/', 31]
        ")
                        (reparse-symbol indented_block_body) [47445 49452])
                    ("addParseAction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49477 49481])
                            ("fns" variable nil (reparse-symbol function_parameters) [49483 49487])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [49489 49497]))                          
                        :documentation "
        Add parse action to expression's list of parse actions. See L{I{setParseAction}<setParseAction>}.
        
        See examples in L{I{copy}<copy>}.
        ")
                        (reparse-symbol indented_block_body) [49457 49850])
                    ("addCondition" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49872 49876])
                            ("fns" variable nil (reparse-symbol function_parameters) [49878 49882])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [49884 49892]))                          
                        :documentation "Add a boolean predicate function to expression's list of parse actions. See 
        L{I{setParseAction}<setParseAction>} for function call signatures. Unlike C{setParseAction}, 
        functions passed to C{addCondition} need to return boolean success/fail of the condition.

        Optional keyword arguments:
         - message = define a custom message to be used in the raised exception
         - fatal   = if True, will raise ParseFatalException to stop parsing immediately; otherwise will raise ParseException
         
        Example::
            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
            year_int = integer.copy()
            year_int.addCondition(lambda toks: toks[0] >= 2000, message=\"Only support years 2000 and later\")
            date_str = year_int + '/' + integer + '/' + integer

            result = date_str.parseString(\"1999/12/31\")  # -> Exception: Only support years 2000 and later (at char 0), (line:1, col:1)
        ")
                        (reparse-symbol indented_block_body) [49855 51340])
                    ("setFailAction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51364 51368])
                            ("fn" variable nil (reparse-symbol function_parameters) [51370 51372]))                          
                        :documentation "Define action to perform if parsing fails at this expression.
           Fail acton fn is a callable function that takes the arguments
           C{fn(s,loc,expr,err)} where:
            - s = string being parsed
            - loc = location where expression match was attempted and failed
            - expr = the parse expression that failed
            - err = the exception thrown
           The function returns no value.  It may throw C{L{ParseFatalException}}
           if it is desired to stop parsing immediately.")
                        (reparse-symbol indented_block_body) [51345 51963])
                    ("_skipIgnorables" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51989 51993])
                            ("instring" variable nil (reparse-symbol function_parameters) [51995 52003])
                            ("loc" variable nil (reparse-symbol function_parameters) [52005 52008]))                          )
                        (reparse-symbol indented_block_body) [51968 52371])
                    ("preParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52390 52394])
                            ("instring" variable nil (reparse-symbol function_parameters) [52396 52404])
                            ("loc" variable nil (reparse-symbol function_parameters) [52406 52409]))                          )
                        (reparse-symbol indented_block_body) [52376 52704])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52724 52728])
                            ("instring" variable nil (reparse-symbol function_parameters) [52730 52738])
                            ("loc" variable nil (reparse-symbol function_parameters) [52740 52743])
                            ("doActions" variable nil (reparse-symbol function_parameters) [52745 52754]))                          )
                        (reparse-symbol indented_block_body) [52709 52786])
                    ("postParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52806 52810])
                            ("instring" variable nil (reparse-symbol function_parameters) [52812 52820])
                            ("loc" variable nil (reparse-symbol function_parameters) [52822 52825])
                            ("tokenlist" variable nil (reparse-symbol function_parameters) [52827 52836]))                          )
                        (reparse-symbol indented_block_body) [52791 52865])
                    ("_parseNoCache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52905 52909])
                            ("instring" variable nil (reparse-symbol function_parameters) [52911 52919])
                            ("loc" variable nil (reparse-symbol function_parameters) [52921 52924])
                            ("doActions" variable nil (reparse-symbol function_parameters) [52926 52935])
                            ("callPreParse" variable nil (reparse-symbol function_parameters) [52942 52954]))                          )
                        (reparse-symbol indented_block_body) [52886 56406])
                    ("tryParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56425 56429])
                            ("instring" variable nil (reparse-symbol function_parameters) [56431 56439])
                            ("loc" variable nil (reparse-symbol function_parameters) [56441 56444]))                          )
                        (reparse-symbol indented_block_body) [56411 56633])
                    ("canParseNext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56659 56663])
                            ("instring" variable nil (reparse-symbol function_parameters) [56665 56673])
                            ("loc" variable nil (reparse-symbol function_parameters) [56675 56678]))                          )
                        (reparse-symbol indented_block_body) [56642 56843])
                    ("_UnboundedCache" type
                       (:superclasses ("object")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("cache" variable nil (reparse-symbol indented_block_body) [56919 56929])
                                    ("self" variable nil (reparse-symbol indented_block_body) [56942 56985])
                                    ("get" function
                                       (:parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [57007 57011])
                                            ("key" variable nil (reparse-symbol function_parameters) [57013 57016]))                                          )
                                        (reparse-symbol indented_block_body) [56999 57071])
                                    ("set" function
                                       (:parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [57092 57096])
                                            ("key" variable nil (reparse-symbol function_parameters) [57098 57101])
                                            ("value" variable nil (reparse-symbol function_parameters) [57103 57108]))                                          )
                                        (reparse-symbol indented_block_body) [57084 57146])
                                    ("clear" function
                                       (:parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [57169 57173]))                                          )
                                        (reparse-symbol indented_block_body) [57159 57206])
                                    ("self" variable nil (reparse-symbol indented_block_body) [57219 57257])
                                    ("self" variable nil (reparse-symbol indented_block_body) [57270 57308])
                                    ("self" variable nil (reparse-symbol indented_block_body) [57321 57363]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [56900 56904]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [56887 57364]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [56848 57364])
                    ("if" code nil (reparse-symbol indented_block_body) [57369 58891])
                    ("packrat_cache" variable nil (reparse-symbol indented_block_body) [58995 59013])
                    ("packrat_cache_lock" variable nil (reparse-symbol indented_block_body) [59106 59134])
                    ("packrat_cache_stats" variable nil (reparse-symbol indented_block_body) [59139 59167])
                    ("_parseCache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59382 59386])
                            ("instring" variable nil (reparse-symbol function_parameters) [59388 59396])
                            ("loc" variable nil (reparse-symbol function_parameters) [59398 59401])
                            ("doActions" variable nil (reparse-symbol function_parameters) [59403 59412])
                            ("callPreParse" variable nil (reparse-symbol function_parameters) [59419 59431]))                          )
                        (reparse-symbol indented_block_body) [59365 60419])
                    ("_parse" variable nil (reparse-symbol indented_block_body) [60424 60446])
                    ("resetCache" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [60452 60624])
                    ("_packratEnabled" variable nil (reparse-symbol indented_block_body) [60629 60652])
                    ("enablePackrat" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cache_size_limit" variable nil (reparse-symbol function_parameters) [60693 60709]))                          
                        :documentation "Enables \"packrat\" parsing, which adds memoizing to the parsing logic.
           Repeated parse attempts at the same string location (which happens
           often in many complex grammars) can immediately return a cached value,
           instead of re-executing parsing/validating code.  Memoizing is done of
           both valid results and parsing exceptions.
           
           Parameters:
            - cache_size_limit - (default=C{128}) - if an integer value is provided
              will limit the size of the packrat cache; if None is passed, then
              the cache size will be unbounded; if 0 is passed, the cache will
              be effectively disabled.
            
           This speedup may break existing programs that use parse actions that
           have side-effects.  For this reason, packrat parsing is disabled when
           you first import pyparsing.  To activate the packrat feature, your
           program must call the class method C{ParserElement.enablePackrat()}.  If
           your program uses C{psyco} to \"compile as you go\", you must call
           C{enablePackrat} before calling C{psyco.full()}.  If you do not do this,
           Python will crash.  For best results, call C{enablePackrat()} immediately
           after importing pyparsing.
           
           Example::
               import pyparsing
               pyparsing.ParserElement.enablePackrat()
        ")
                        (reparse-symbol indented_block_body) [60657 62543])
                    ("parseString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62565 62569])
                            ("instring" variable nil (reparse-symbol function_parameters) [62571 62579])
                            ("parseAll" variable nil (reparse-symbol function_parameters) [62581 62589]))                          
                        :documentation "
        Execute the parse expression with the given string.
        This is the main interface to the client code, once the complete
        expression has been built.

        If you want the grammar to require that the entire input string be
        successfully parsed, then set C{parseAll} to True (equivalent to ending
        the grammar with C{L{StringEnd()}}).

        Note: C{parseString} implicitly calls C{expandtabs()} on the input string,
        in order to report proper column numbers in parse actions.
        If the input string contains tabs and
        the grammar uses parse actions that use the C{loc} argument to index into the
        string being parsed, you can ensure you have a consistent view of the input
        string by:
         - calling C{parseWithTabs} on your grammar before calling C{parseString}
           (see L{I{parseWithTabs}<parseWithTabs>})
         - define your parse action using the full C{(s,loc,toks)} signature, and
           reference the input string using the parse action's C{s} argument
         - explictly expand the tabs in your input string before calling
           C{parseString}
        
        Example::
            Word('a').parseString('aaaaabaaa')  # -> ['aaaaa']
            Word('a').parseString('aaaaabaaa', parseAll=True)  # -> Exception: Expected end of text
        ")
                        (reparse-symbol indented_block_body) [62548 64760])
                    ("scanString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64781 64785])
                            ("instring" variable nil (reparse-symbol function_parameters) [64787 64795])
                            ("maxMatches" variable nil (reparse-symbol function_parameters) [64797 64807])
                            ("overlap" variable nil (reparse-symbol function_parameters) [64818 64825]))                          
                        :documentation "
        Scan the input string for expression matches.  Each match will return the
        matching tokens, start location, and end location.  May be called with optional
        C{maxMatches} argument, to clip scanning after 'n' matches are found.  If
        C{overlap} is specified, then overlapping matches will be reported.

        Note that the start and end locations are reported relative to the string
        being parsed.  See L{I{parseString}<parseString>} for more information on parsing
        strings with embedded tabs.

        Example::
            source = \"sldjf123lsdjjkf345sldkjf879lkjsfd987\"
            print(source)
            for tokens,start,end in Word(alphas).scanString(source):
                print(' '*start + '^'*(end-start))
                print(' '*start + tokens[0])
        
        prints::
        
            sldjf123lsdjjkf345sldkjf879lkjsfd987
            ^^^^^
            sldjf
                    ^^^^^^^
                    lsdjjkf
                              ^^^^^^
                              sldkjf
                                       ^^^^^^
                                       lkjsfd
        ")
                        (reparse-symbol indented_block_body) [64765 67509])
                    ("transformString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67535 67539])
                            ("instring" variable nil (reparse-symbol function_parameters) [67541 67549]))                          
                        :documentation "
        Extension to C{L{scanString}}, to modify matching text with modified tokens that may
        be returned from a parse action.  To use C{transformString}, define a grammar and
        attach a parse action to it that modifies the returned token list.
        Invoking C{transformString()} on a target string will then scan for matches,
        and replace the matched text patterns according to the logic in the parse
        action.  C{transformString()} returns the resulting transformed string.
        
        Example::
            wd = Word(alphas)
            wd.setParseAction(lambda toks: toks[0].title())
            
            print(wd.transformString(\"now is the winter of our discontent made glorious summer by this sun of york.\"))
        Prints::
            Now Is The Winter Of Our Discontent Made Glorious Summer By This Sun Of York.
        ")
                        (reparse-symbol indented_block_body) [67514 69460])
                    ("searchString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69483 69487])
                            ("instring" variable nil (reparse-symbol function_parameters) [69489 69497])
                            ("maxMatches" variable nil (reparse-symbol function_parameters) [69499 69509]))                          
                        :documentation "
        Another extension to C{L{scanString}}, simplifying the access to the tokens found
        to match the given parse expression.  May be called with optional
        C{maxMatches} argument, to clip searching after 'n' matches are found.
        
        Example::
            # a capitalized word starts with an uppercase letter, followed by zero or more lowercase letters
            cap_word = Word(alphas.upper(), alphas.lower())
            
            print(cap_word.searchString(\"More than Iron, more than Lead, more than Gold I need Electricity\"))
        prints::
            ['More', 'Iron', 'Lead', 'Gold', 'I']
        ")
                        (reparse-symbol indented_block_body) [69465 70537])
                    ("split" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70552 70556])
                            ("instring" variable nil (reparse-symbol function_parameters) [70558 70566])
                            ("maxsplit" variable nil (reparse-symbol function_parameters) [70568 70576])
                            ("includeSeparators" variable nil (reparse-symbol function_parameters) [70587 70604]))                          
                        :documentation "
        Generator method to split a string using the given expression as a separator.
        May be called with optional C{maxsplit} argument, to limit the number of splits;
        and the optional C{includeSeparators} argument (default=C{False}), if the separating
        matching text should be included in the split results.
        
        Example::        
            punc = oneOf(list(\".,;:/-!?\"))
            print(list(punc.split(\"This, this?, this sentence, is badly punctuated!\")))
        prints::
            ['This', ' this', '', ' this sentence', ' is badly punctuated', '']
        ")
                        (reparse-symbol indented_block_body) [70542 71483])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71500 71504])
                            ("other" variable nil (reparse-symbol function_parameters) [71506 71511]))                          
                        :documentation "
        Implementation of + operator - returns C{L{And}}
        ")
                        (reparse-symbol indented_block_body) [71488 71961])
                    ("__radd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71979 71983])
                            ("other" variable nil (reparse-symbol function_parameters) [71985 71990]))                          
                        :documentation "
        Implementation of + operator when left operand is not a C{L{ParserElement}}
        ")
                        (reparse-symbol indented_block_body) [71966 72457])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72474 72478])
                            ("other" variable nil (reparse-symbol function_parameters) [72480 72485]))                          
                        :documentation "
        Implementation of - operator, returns C{L{And}} with error stop
        ")
                        (reparse-symbol indented_block_body) [72462 72967])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72985 72989])
                            ("other" variable nil (reparse-symbol function_parameters) [72991 72996]))                          
                        :documentation "
        Implementation of - operator when left operand is not a C{L{ParserElement}}
        ")
                        (reparse-symbol indented_block_body) [72972 73463])
                    ("__mul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73480 73484])
                            ("other" variable nil (reparse-symbol function_parameters) [73485 73490]))                          
                        :documentation "
        Implementation of * operator, allows use of C{expr * 3} in place of
        C{expr + expr + expr}.  Expressions may also me multiplied by a 2-integer
        tuple, similar to C{{min,max}} multipliers in regular expressions.  Tuples
        may also include C{None} as in:
         - C{expr*(n,None)} or C{expr*(n,)} is equivalent
              to C{expr*n + L{ZeroOrMore}(expr)}
              (read as \"at least n instances of C{expr}\")
         - C{expr*(None,n)} is equivalent to C{expr*(0,n)}
              (read as \"0 to n instances of C{expr}\")
         - C{expr*(None,None)} is equivalent to C{L{ZeroOrMore}(expr)}
         - C{expr*(1,None)} is equivalent to C{L{OneOrMore}(expr)}

        Note that C{expr*(None,n)} does not raise an exception if
        more than n exprs exist in the input stream; that is,
        C{expr*(None,n)} does not enforce a maximum number of expr
        occurrences.  If this behavior is desired, then write
        C{expr*(None,n) + ~expr}
        ")
                        (reparse-symbol indented_block_body) [73468 76483])
                    ("__rmul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76501 76505])
                            ("other" variable nil (reparse-symbol function_parameters) [76507 76512]))                          )
                        (reparse-symbol indented_block_body) [76488 76550])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76566 76570])
                            ("other" variable nil (reparse-symbol function_parameters) [76572 76577]))                          
                        :documentation "
        Implementation of | operator - returns C{L{MatchFirst}}
        ")
                        (reparse-symbol indented_block_body) [76555 77041])
                    ("__ror__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77058 77062])
                            ("other" variable nil (reparse-symbol function_parameters) [77064 77069]))                          
                        :documentation "
        Implementation of | operator when left operand is not a C{L{ParserElement}}
        ")
                        (reparse-symbol indented_block_body) [77046 77536])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77553 77557])
                            ("other" variable nil (reparse-symbol function_parameters) [77559 77564]))                          
                        :documentation "
        Implementation of ^ operator - returns C{L{Or}}
        ")
                        (reparse-symbol indented_block_body) [77541 78012])
                    ("__rxor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78030 78034])
                            ("other" variable nil (reparse-symbol function_parameters) [78036 78041]))                          
                        :documentation "
        Implementation of ^ operator when left operand is not a C{L{ParserElement}}
        ")
                        (reparse-symbol indented_block_body) [78017 78508])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78525 78529])
                            ("other" variable nil (reparse-symbol function_parameters) [78531 78536]))                          
                        :documentation "
        Implementation of & operator - returns C{L{Each}}
        ")
                        (reparse-symbol indented_block_body) [78513 78988])
                    ("__rand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79006 79010])
                            ("other" variable nil (reparse-symbol function_parameters) [79012 79017]))                          
                        :documentation "
        Implementation of & operator when left operand is not a C{L{ParserElement}}
        ")
                        (reparse-symbol indented_block_body) [78993 79484])
                    ("__invert__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79505 79509]))                          
                        :documentation "
        Implementation of ~ operator - returns C{L{NotAny}}
        ")
                        (reparse-symbol indented_block_body) [79489 79627])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79645 79649])
                            ("name" variable nil (reparse-symbol function_parameters) [79651 79655]))                          
                        :documentation "
        Shortcut for C{L{setResultsName}}, with C{listAllMatches=default}.
        
        If C{name} is given with a trailing C{'*'} character, then C{listAllMatches} will be
        passed as C{True}.
           
        If C{name} is omitted, same as calling C{L{copy}}.

        Example::
            # these are equivalent
            userdata = Word(alphas).setResultsName(\"name\") + Word(nums+\"-\").setResultsName(\"socsecno\")
            userdata = Word(alphas)(\"name\") + Word(nums+\"-\")(\"socsecno\")             
        ")
                        (reparse-symbol indented_block_body) [79632 80324])
                    ("suppress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80343 80347]))                          
                        :documentation "
        Suppresses the output of this C{ParserElement}; useful to keep punctuation from
        cluttering up returned output.
        ")
                        (reparse-symbol indented_block_body) [80329 80534])
                    ("leaveWhitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80560 80564]))                          
                        :documentation "
        Disables the skipping of whitespace before matching the characters in the
        C{ParserElement}'s defined pattern.  This is normally only used internally by
        the pyparsing module, but may be needed in some whitespace-sensitive grammars.
        ")
                        (reparse-symbol indented_block_body) [80539 80903])
                    ("setWhitespaceChars" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80932 80936])
                            ("chars" variable nil (reparse-symbol function_parameters) [80938 80943]))                          
                        :documentation "
        Overrides the default whitespace chars
        ")
                        (reparse-symbol indented_block_body) [80908 81148])
                    ("parseWithTabs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81172 81176]))                          
                        :documentation "
        Overrides default behavior to expand C{<TAB>}s to spaces before parsing the input string.
        Must be called before C{parseString} when the input grammar contains elements that
        match C{<TAB>} characters.
        ")
                        (reparse-symbol indented_block_body) [81153 81477])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81494 81498])
                            ("other" variable nil (reparse-symbol function_parameters) [81500 81505]))                          
                        :documentation "
        Define expression to be ignored (e.g., comments) while doing pattern
        matching; may be called repeatedly, to define multiple comment or other
        ignorable patterns.
        
        Example::
            patt = OneOrMore(Word(alphas))
            patt.parseString('ablaj /* comment */ lskjd') # -> ['ablaj']
            
            patt.ignore(cStyleComment)
            patt.parseString('ablaj /* comment */ lskjd') # -> ['ablaj', 'lskjd']
        ")
                        (reparse-symbol indented_block_body) [81482 82307])
                    ("setDebugActions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82333 82337])
                            ("startAction" variable nil (reparse-symbol function_parameters) [82339 82350])
                            ("successAction" variable nil (reparse-symbol function_parameters) [82352 82365])
                            ("exceptionAction" variable nil (reparse-symbol function_parameters) [82367 82382]))                          
                        :documentation "
        Enable display of debugging messages while doing pattern matching.
        ")
                        (reparse-symbol indented_block_body) [82312 82753])
                    ("setDebug" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82772 82776])
                            ("flag" variable nil (reparse-symbol function_parameters) [82778 82782]))                          )
                        (reparse-symbol indented_block_body) [82758 84612])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84630 84634]))                          )
                        (reparse-symbol indented_block_body) [84617 84663])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84682 84686]))                          )
                        (reparse-symbol indented_block_body) [84668 84717])
                    ("streamline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84738 84742]))                          )
                        (reparse-symbol indented_block_body) [84722 84826])
                    ("checkRecursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84851 84855])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [84857 84873]))                          )
                        (reparse-symbol indented_block_body) [84831 84890])
                    ("validate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84909 84913])
                            ("validateTrace" variable nil (reparse-symbol function_parameters) [84915 84928]))                          
                        :documentation "
        Check defined expressions for valid structure, check for infinite recursive definitions.
        ")
                        (reparse-symbol indented_block_body) [84895 85090])
                    ("parseFile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85110 85114])
                            ("file_or_filename" variable nil (reparse-symbol function_parameters) [85116 85132])
                            ("parseAll" variable nil (reparse-symbol function_parameters) [85134 85142]))                          
                        :documentation "
        Execute the parse expression on the given file or filename.
        If a filename is specified (instead of a file object),
        the entire file is opened, read, and closed before parsing.
        ")
                        (reparse-symbol indented_block_body) [85095 85894])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85910 85914])
                            ("other" variable nil (reparse-symbol function_parameters) [85915 85920]))                          )
                        (reparse-symbol indented_block_body) [85899 86179])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86195 86199])
                            ("other" variable nil (reparse-symbol function_parameters) [86200 86205]))                          )
                        (reparse-symbol indented_block_body) [86184 86243])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86261 86265]))                          )
                        (reparse-symbol indented_block_body) [86248 86298])
                    ("__req__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86315 86319])
                            ("other" variable nil (reparse-symbol function_parameters) [86320 86325]))                          )
                        (reparse-symbol indented_block_body) [86303 86357])
                    ("__rne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86374 86378])
                            ("other" variable nil (reparse-symbol function_parameters) [86379 86384]))                          )
                        (reparse-symbol indented_block_body) [86362 86422])
                    ("matches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86439 86443])
                            ("testString" variable nil (reparse-symbol function_parameters) [86445 86455])
                            ("parseAll" variable nil (reparse-symbol function_parameters) [86457 86465]))                          
                        :documentation "
        Method for quick testing of a parser against a test string. Good for simple 
        inline microtests of sub expressions while building up larger parser.0
           
        Parameters:
         - testString - to test against this expression for a match
         - parseAll - (default=C{True}) - flag to pass to C{L{parseString}} when running tests
            
        Example::
            expr = Word(nums)
            assert expr.matches(\"100\")
        ")
                        (reparse-symbol indented_block_body) [86427 87120])
                    ("runTests" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87154 87158])
                            ("tests" variable nil (reparse-symbol function_parameters) [87160 87165])
                            ("parseAll" variable nil (reparse-symbol function_parameters) [87167 87175])
                            ("comment" variable nil (reparse-symbol function_parameters) [87182 87189])
                            ("fullDump" variable nil (reparse-symbol function_parameters) [87195 87203])
                            ("printResults" variable nil (reparse-symbol function_parameters) [87210 87222])
                            ("failureTests" variable nil (reparse-symbol function_parameters) [87229 87241]))                          )
                        (reparse-symbol indented_block_body) [87141 91688]))                  
                :type "class")
                nil [41275 91688])
            ("Token" type
               (:documentation "
    Abstract C{ParserElement} subclass, for defining atomic matching patterns.
    "
                :superclasses ("ParserElement")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [91855 91899]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91839 91843]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [91825 91900]))                  
                :type "class")
                nil [91698 91900])
            ("Empty" type
               (:documentation "
    An empty token, will always match.
    "
                :superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [92011 92039])
                            ("self" variable nil (reparse-symbol indented_block_body) [92048 92067])
                            ("self" variable nil (reparse-symbol indented_block_body) [92076 92102])
                            ("self" variable nil (reparse-symbol indented_block_body) [92111 92137]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91995 91999]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [91981 92138]))                  
                :type "class")
                nil [91902 92138])
            ("NoMatch" type
               (:documentation "
    A token that will never match.
    "
                :superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [92247 92277])
                            ("self" variable nil (reparse-symbol indented_block_body) [92286 92307])
                            ("self" variable nil (reparse-symbol indented_block_body) [92316 92342])
                            ("self" variable nil (reparse-symbol indented_block_body) [92351 92377])
                            ("self" variable nil (reparse-symbol indented_block_body) [92386 92419]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92231 92235]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [92217 92420])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92440 92444])
                            ("instring" variable nil (reparse-symbol function_parameters) [92446 92454])
                            ("loc" variable nil (reparse-symbol function_parameters) [92456 92459])
                            ("doActions" variable nil (reparse-symbol function_parameters) [92461 92470]))                          )
                        (reparse-symbol indented_block_body) [92425 92542]))                  
                :type "class")
                nil [92140 92542])
            ("Literal" type
               (:documentation "
    Token to exactly match a specified string.
    
    Example::
        Literal('blah').parseString('blah')  # -> ['blah']
        Literal('blah').parseString('blahfooblah')  # -> ['blah']
        Literal('blah').parseString('bla')  # -> Exception: Expected \"blah\"
    
    For case-insensitive matching, use L{CaselessLiteral}.
    
    For keyword matching (force word break before and after the matched string),
    use L{Keyword} or L{CaselessKeyword}.
    "
                :superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [93088 93118])
                            ("self" variable nil (reparse-symbol indented_block_body) [93127 93151])
                            ("self" variable nil (reparse-symbol indented_block_body) [93160 93192])
                            ("try" code nil (reparse-symbol indented_block_body) [93201 93454])
                            ("self" code nil (reparse-symbol indented_block_body) [93462 93500])
                            ("self" code nil (reparse-symbol indented_block_body) [93509 93546])
                            ("self" variable nil (reparse-symbol indented_block_body) [93555 93582])
                            ("self" variable nil (reparse-symbol indented_block_body) [93591 93617]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93059 93063])
                            ("matchString" variable nil (reparse-symbol function_parameters) [93065 93076]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [93045 93618])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93869 93873])
                            ("instring" variable nil (reparse-symbol function_parameters) [93875 93883])
                            ("loc" variable nil (reparse-symbol function_parameters) [93885 93888])
                            ("doActions" variable nil (reparse-symbol function_parameters) [93890 93899]))                          )
                        (reparse-symbol indented_block_body) [93854 94146]))                  
                :type "class")
                nil [92544 94146])
            ("_L" variable nil nil [94146 94158])
            ("ParserElement" variable nil nil [94159 94202])
            ("Keyword" type
               (:superclasses ("Token")
                :type "class")
                nil [94204 97088])
            ("CaselessLiteral" type
               (:documentation "
    Token to match a specified string, ignoring case of letters.
    Note: the matched results will always be in the case of the given
    match string, NOT the case of the input text.

    Example::
        OneOrMore(CaselessLiteral(\"CMD\")).parseString(\"cmd CMD Cmd10\") # -> ['CMD', 'CMD', 'CMD']
        
    (Contrast with example for L{CaselessKeyword}.)
    "
                :superclasses ("Literal")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [97543 97602])
                            ("self" variable nil (reparse-symbol indented_block_body) [97652 97683])
                            ("self" code nil (reparse-symbol indented_block_body) [97692 97730])
                            ("self" code nil (reparse-symbol indented_block_body) [97739 97776]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97514 97518])
                            ("matchString" variable nil (reparse-symbol function_parameters) [97520 97531]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [97500 97777])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97797 97801])
                            ("instring" variable nil (reparse-symbol function_parameters) [97803 97811])
                            ("loc" variable nil (reparse-symbol function_parameters) [97813 97816])
                            ("doActions" variable nil (reparse-symbol function_parameters) [97818 97827]))                          )
                        (reparse-symbol indented_block_body) [97782 98023]))                  
                :type "class")
                nil [97089 98023])
            ("CaselessKeyword" type
               (:documentation "
    Caseless version of L{Keyword}.

    Example::
        OneOrMore(CaselessKeyword(\"CMD\")).parseString(\"cmd CMD Cmd10\") # -> ['CMD', 'CMD']
        
    (Contrast with example for L{CaselessLiteral}.)
    "
                :superclasses ("Keyword")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [98364 98442]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98293 98297])
                            ("matchString" variable nil (reparse-symbol function_parameters) [98299 98310])
                            ("identChars" variable nil (reparse-symbol function_parameters) [98312 98322]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [98279 98443])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98463 98467])
                            ("instring" variable nil (reparse-symbol function_parameters) [98469 98477])
                            ("loc" variable nil (reparse-symbol function_parameters) [98479 98482])
                            ("doActions" variable nil (reparse-symbol function_parameters) [98484 98493]))                          )
                        (reparse-symbol indented_block_body) [98448 98812]))                  
                :type "class")
                nil [98024 98812])
            ("Word" type
               (:documentation "
    Token for matching words composed of allowed character sets.
    Defined with string containing all allowed initial characters,
    an optional string containing allowed body characters (if omitted,
    defaults to the initial character set), and an optional minimum,
    maximum, and/or exact length.  The default value for C{min} is 1 (a
    minimum value < 1 is not valid); the default values for C{max} and C{exact}
    are 0, meaning no maximum or exact length restriction. An optional
    C{excludeChars} parameter can list characters that might be found in 
    the input C{bodyChars} string; useful to define a word of all printables
    except for one or two characters, for instance.
    
    L{srange} is useful for defining custom character set strings for defining 
    C{Word} expressions, using range notation from regular expression character sets.
    
    A common mistake is to use C{Word} to match a specific literal string, as in 
    C{Word(\"Address\")}. Remember that C{Word} uses the string argument to define
    I{sets} of matchable characters. This expression would match \"Add\", \"AAA\",
    \"dAred\", or any other word made up of the characters 'A', 'd', 'r', 'e', and 's'.
    To match an exact literal string, use L{Literal} or L{Keyword}.

    pyparsing includes helper strings for building Words:
     - L{alphas}
     - L{nums}
     - L{alphanums}
     - L{hexnums}
     - L{alphas8bit} (alphabetic characters in ASCII range 128-255 - accented, tilded, umlauted, etc.)
     - L{punc8bit} (non-alphabetic characters in ASCII range 128-255 - currency, symbols, superscripts, diacriticals, etc.)
     - L{printables} (any non-whitespace character)

    Example::
        # a word composed of digits
        integer = Word(nums) # equivalent to Word(\"0123456789\") or Word(srange(\"0-9\"))
        
        # a word with a leading capital, and zero or more lowercase
        capital_word = Word(alphas.upper(), alphas.lower())

        # hostnames are alphanumeric, with leading alpha, and '-'
        hostname = Word(alphas, alphanums+'-')
        
        # roman numeral (not a strict parser, accepts invalid mix of characters)
        roman = Word(\"IVXLCDM\")
        
        # any string of non-whitespace characters, except for ','
        csv_value = Word(printables, excludeChars=\",\")
    "
                :superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [101287 101314])
                            ("if" code nil (reparse-symbol indented_block_body) [101323 101528])
                            ("self" variable nil (reparse-symbol indented_block_body) [101536 101566])
                            ("self" variable nil (reparse-symbol indented_block_body) [101575 101606])
                            ("if" code nil (reparse-symbol indented_block_body) [101615 101818])
                            ("self" code nil (reparse-symbol indented_block_body) [101827 101854])
                            ("if" code nil (reparse-symbol indented_block_body) [101864 101999])
                            ("self" variable nil (reparse-symbol indented_block_body) [102008 102025])
                            ("if" code nil (reparse-symbol indented_block_body) [102035 102126])
                            ("if" code nil (reparse-symbol indented_block_body) [102135 102213])
                            ("self" variable nil (reparse-symbol indented_block_body) [102222 102245])
                            ("self" code nil (reparse-symbol indented_block_body) [102254 102291])
                            ("self" variable nil (reparse-symbol indented_block_body) [102300 102326])
                            ("self" variable nil (reparse-symbol indented_block_body) [102335 102361])
                            ("if" code nil (reparse-symbol indented_block_body) [102371 103292]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101185 101189])
                            ("initChars" variable nil (reparse-symbol function_parameters) [101191 101200])
                            ("bodyChars" variable nil (reparse-symbol function_parameters) [101202 101211])
                            ("min" variable nil (reparse-symbol function_parameters) [101218 101221])
                            ("max" variable nil (reparse-symbol function_parameters) [101225 101228])
                            ("exact" variable nil (reparse-symbol function_parameters) [101232 101237])
                            ("asKeyword" variable nil (reparse-symbol function_parameters) [101241 101250])
                            ("excludeChars" variable nil (reparse-symbol function_parameters) [101258 101270]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [101171 103292])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103312 103316])
                            ("instring" variable nil (reparse-symbol function_parameters) [103318 103326])
                            ("loc" variable nil (reparse-symbol function_parameters) [103328 103331])
                            ("doActions" variable nil (reparse-symbol function_parameters) [103333 103342]))                          )
                        (reparse-symbol indented_block_body) [103297 104501])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104519 104523]))                          )
                        (reparse-symbol indented_block_body) [104506 105099]))                  
                :type "class")
                nil [98813 105099])
            ("Regex" type
               (:documentation "
    Token for matching strings that match a given regular expression.
    Defined with string specifying the regular expression in a form recognized by the inbuilt Python re module.
    If the given regex contains named groups (defined using C{(?P<name>...)}), these will be preserved as 
    named parse results.

    Example::
        realnum = Regex(r\"[+-]?\\d+\\.\\d*\")
        date = Regex(r'(?P<year>\\d{4})-(?P<month>\\d\\d)-(?P<day>\\d\\d)')
        # ref: http://stackoverflow.com/questions/267399/how-do-you-match-only-valid-roman-numerals-with-a-regular-expression
        roman = Regex(r\"M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})\")
    "
                :superclasses ("Token")
                :members 
                  ( ("compiledREtype" variable nil (reparse-symbol indented_block_body) [105790 105832])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"The parameters C{pattern} and C{flags} are passed to the C{re.compile()} function as-is. See the Python C{re} module for an explanation of the acceptable patterns and flags.\"\"\"" code nil (reparse-symbol indented_block_body) [105884 106063])
                            ("super" code nil (reparse-symbol indented_block_body) [106072 106100])
                            ("if" code nil (reparse-symbol indented_block_body) [106110 107008])
                            ("self" variable nil (reparse-symbol indented_block_body) [107017 107040])
                            ("self" code nil (reparse-symbol indented_block_body) [107049 107086])
                            ("self" variable nil (reparse-symbol indented_block_body) [107095 107121])
                            ("self" variable nil (reparse-symbol indented_block_body) [107130 107156]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105851 105855])
                            ("pattern" variable nil (reparse-symbol function_parameters) [105857 105864])
                            ("flags" variable nil (reparse-symbol function_parameters) [105866 105871]))                          
                        :documentation "The parameters C{pattern} and C{flags} are passed to the C{re.compile()} function as-is. See the Python C{re} module for an explanation of the acceptable patterns and flags."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [105837 107157])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107177 107181])
                            ("instring" variable nil (reparse-symbol function_parameters) [107183 107191])
                            ("loc" variable nil (reparse-symbol function_parameters) [107193 107196])
                            ("doActions" variable nil (reparse-symbol function_parameters) [107198 107207]))                          )
                        (reparse-symbol indented_block_body) [107162 107544])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107562 107566]))                          )
                        (reparse-symbol indented_block_body) [107549 107784]))                  
                :type "class")
                nil [105101 107784])
            ("QuotedString" type
               (:superclasses ("Token")
                :members 
                  ( ("r\"\"\"
    Token for matching strings that are delimited by quoting characters.
    
    Defined with the following parameters:
        - quoteChar - string of one or more characters defining the quote delimiting string
        - escChar - character to escape quotes, typically backslash (default=C{None})
        - escQuote - special quote sequence to escape an embedded quote string (such as SQL's \"\" to escape an embedded \") (default=C{None})
        - multiline - boolean indicating whether quotes can span multiple lines (default=C{False})
        - unquoteResults - boolean indicating whether the matched text should be unquoted (default=C{True})
        - endQuoteChar - string of one or more characters defining the end of the quote delimited string (default=C{None} => same as quoteChar)
        - convertWhitespaceEscapes - convert escaped whitespace (C{'\\t'}, C{'\\n'}, etc.) to actual whitespace (default=C{True})

    Example::
        qs = QuotedString('\"')
        print(qs.searchString('lsjdf \"This is the quote\" sldjf'))
        complex_qs = QuotedString('{{', endQuoteChar='}}')
        print(complex_qs.searchString('lsjdf {{This is the \"quote\"}} sldjf'))
        sql_qs = QuotedString('\"', escQuote='\"\"')
        print(sql_qs.searchString('lsjdf \"This is the quote with \"\"embedded\"\" quotes\" sldjf'))
    prints::
        [['This is the quote']]
        [['This is the \"quote\"']]
        [['This is the quote with \"embedded\" quotes']]
    \"\"\"" code nil (reparse-symbol indented_block_body) [107817 109275])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [109437 109472])
                            ("quoteChar" variable nil (reparse-symbol indented_block_body) [109547 109576])
                            ("if" code nil (reparse-symbol indented_block_body) [109585 109728])
                            ("if" code nil (reparse-symbol indented_block_body) [109737 110030])
                            ("self" variable nil (reparse-symbol indented_block_body) [110039 110065])
                            ("self" variable nil (reparse-symbol indented_block_body) [110074 110108])
                            ("self" variable nil (reparse-symbol indented_block_body) [110117 110151])
                            ("self" variable nil (reparse-symbol indented_block_body) [110160 110192])
                            ("self" variable nil (reparse-symbol indented_block_body) [110201 110241])
                            ("self" variable nil (reparse-symbol indented_block_body) [110250 110272])
                            ("self" variable nil (reparse-symbol indented_block_body) [110281 110305])
                            ("self" variable nil (reparse-symbol indented_block_body) [110314 110350])
                            ("self" variable nil (reparse-symbol indented_block_body) [110359 110415])
                            ("if" code nil (reparse-symbol indented_block_body) [110425 111014])
                            ("if" code nil (reparse-symbol indented_block_body) [111022 111368])
                            ("if" code nil (reparse-symbol indented_block_body) [111376 111452])
                            ("if" code nil (reparse-symbol indented_block_body) [111460 111606])
                            ("self" variable nil (reparse-symbol indented_block_body) [111614 111670])
                            ("try" code nil (reparse-symbol indented_block_body) [111680 111965])
                            ("self" variable nil (reparse-symbol indented_block_body) [111974 111997])
                            ("self" code nil (reparse-symbol indented_block_body) [112006 112043])
                            ("self" variable nil (reparse-symbol indented_block_body) [112052 112078])
                            ("self" variable nil (reparse-symbol indented_block_body) [112087 112113]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109294 109298])
                            ("quoteChar" variable nil (reparse-symbol function_parameters) [109300 109309])
                            ("escChar" variable nil (reparse-symbol function_parameters) [109311 109318])
                            ("escQuote" variable nil (reparse-symbol function_parameters) [109325 109333])
                            ("multiline" variable nil (reparse-symbol function_parameters) [109340 109349])
                            ("unquoteResults" variable nil (reparse-symbol function_parameters) [109357 109371])
                            ("endQuoteChar" variable nil (reparse-symbol function_parameters) [109378 109390])
                            ("convertWhitespaceEscapes" variable nil (reparse-symbol function_parameters) [109397 109421]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [109280 112114])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112134 112138])
                            ("instring" variable nil (reparse-symbol function_parameters) [112140 112148])
                            ("loc" variable nil (reparse-symbol function_parameters) [112150 112153])
                            ("doActions" variable nil (reparse-symbol function_parameters) [112155 112164]))                          )
                        (reparse-symbol indented_block_body) [112119 113340])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113358 113362]))                          )
                        (reparse-symbol indented_block_body) [113345 113643]))                  
                :type "class")
                nil [107786 113643])
            ("CharsNotIn" type
               (:documentation "
    Token for matching words composed of characters I{not} in a given set (will
    include whitespace in matched characters if not listed in the provided exclusion set - see example).
    Defined with string containing all disallowed characters, and an optional
    minimum, maximum, and/or exact length.  The default value for C{min} is 1 (a
    minimum value < 1 is not valid); the default values for C{max} and C{exact}
    are 0, meaning no maximum or exact length restriction.

    Example::
        # define a comma-separated-value as anything that is not a ','
        csv_value = CharsNotIn(',')
        print(delimitedList(csv_value).parseString(\"dkls,lsdkjf,s12 34,@!#,213\"))
    prints::
        ['dkls', 'lsdkjf', 's12 34', '@!#', '213']
    "
                :superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [114504 114537])
                            ("self" variable nil (reparse-symbol indented_block_body) [114546 114573])
                            ("self" variable nil (reparse-symbol indented_block_body) [114582 114606])
                            ("if" code nil (reparse-symbol indented_block_body) [114616 114763])
                            ("self" variable nil (reparse-symbol indented_block_body) [114772 114789])
                            ("if" code nil (reparse-symbol indented_block_body) [114799 114890])
                            ("if" code nil (reparse-symbol indented_block_body) [114899 114977])
                            ("self" variable nil (reparse-symbol indented_block_body) [114986 115009])
                            ("self" code nil (reparse-symbol indented_block_body) [115018 115055])
                            ("self" variable nil (reparse-symbol indented_block_body) [115064 115106])
                            ("self" variable nil (reparse-symbol indented_block_body) [115115 115141]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114455 114459])
                            ("notChars" variable nil (reparse-symbol function_parameters) [114461 114469])
                            ("min" variable nil (reparse-symbol function_parameters) [114471 114474])
                            ("max" variable nil (reparse-symbol function_parameters) [114478 114481])
                            ("exact" variable nil (reparse-symbol function_parameters) [114485 114490]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [114441 115142])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [115162 115166])
                            ("instring" variable nil (reparse-symbol function_parameters) [115168 115176])
                            ("loc" variable nil (reparse-symbol function_parameters) [115178 115181])
                            ("doActions" variable nil (reparse-symbol function_parameters) [115183 115192]))                          )
                        (reparse-symbol indented_block_body) [115147 115687])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [115705 115709]))                          )
                        (reparse-symbol indented_block_body) [115692 116053]))                  
                :type "class")
                nil [113645 116053])
            ("White" type
               (:documentation "
    Special matching class for matching whitespace.  Normally, whitespace is ignored
    by pyparsing grammars.  This class is included when some whitespace structures
    are significant.  Define with a string containing the whitespace characters to be
    matched; default is C{\" \\\\t\\\\r\\\\n\"}.  Also takes optional C{min}, C{max}, and C{exact} arguments,
    as defined for the C{L{Word}} class.
    "
                :superclasses ("Token")
                :members 
                  ( ("whiteStrs" variable nil (reparse-symbol indented_block_body) [116491 116626])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [116696 116724])
                            ("self" variable nil (reparse-symbol indented_block_body) [116733 116753])
                            ("self" code nil (reparse-symbol indented_block_body) [116762 116852])
                            ("self" variable nil (reparse-symbol indented_block_body) [116895 116961])
                            ("self" variable nil (reparse-symbol indented_block_body) [116970 116996])
                            ("self" code nil (reparse-symbol indented_block_body) [117005 117042])
                            ("self" variable nil (reparse-symbol indented_block_body) [117052 117069])
                            ("if" code nil (reparse-symbol indented_block_body) [117079 117170])
                            ("if" code nil (reparse-symbol indented_block_body) [117179 117257]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116644 116648])
                            ("ws" variable nil (reparse-symbol function_parameters) [116650 116652])
                            ("min" variable nil (reparse-symbol function_parameters) [116664 116667])
                            ("max" variable nil (reparse-symbol function_parameters) [116671 116674])
                            ("exact" variable nil (reparse-symbol function_parameters) [116678 116683]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [116631 117257])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117277 117281])
                            ("instring" variable nil (reparse-symbol function_parameters) [117283 117291])
                            ("loc" variable nil (reparse-symbol function_parameters) [117293 117296])
                            ("doActions" variable nil (reparse-symbol function_parameters) [117298 117307]))                          )
                        (reparse-symbol indented_block_body) [117262 117788]))                  
                :type "class")
                nil [116054 117788])
            ("_PositionToken" type
               (:superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [117853 117890])
                            ("self" variable nil (reparse-symbol indented_block_body) [117899 117932])
                            ("self" variable nil (reparse-symbol indented_block_body) [117941 117967])
                            ("self" variable nil (reparse-symbol indented_block_body) [117976 118002]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117837 117841]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [117823 118003]))                  
                :type "class")
                nil [117790 118003])
            ("GoToColumn" type
               (:documentation "
    Token to advance to a specific column of input text; useful for tabular report scraping.
    "
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [118188 118221])
                            ("self" variable nil (reparse-symbol indented_block_body) [118230 118246]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118165 118169])
                            ("colno" variable nil (reparse-symbol function_parameters) [118171 118176]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [118151 118247])
                    ("preParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118266 118270])
                            ("instring" variable nil (reparse-symbol function_parameters) [118272 118280])
                            ("loc" variable nil (reparse-symbol function_parameters) [118282 118285]))                          )
                        (reparse-symbol indented_block_body) [118252 118605])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118625 118629])
                            ("instring" variable nil (reparse-symbol function_parameters) [118631 118639])
                            ("loc" variable nil (reparse-symbol function_parameters) [118641 118644])
                            ("doActions" variable nil (reparse-symbol function_parameters) [118646 118655]))                          )
                        (reparse-symbol indented_block_body) [118610 118928]))                  
                :type "class")
                nil [118004 118928])
            ("LineStart" type
               (:documentation "
    Matches if current position is at the beginning of a line within the parse string
    "
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [119098 119130])
                            ("self" code nil (reparse-symbol indented_block_body) [119139 119216])
                            ("self" variable nil (reparse-symbol indented_block_body) [119225 119263]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119082 119086]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [119068 119264])
                    ("preParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119283 119287])
                            ("instring" variable nil (reparse-symbol function_parameters) [119289 119297])
                            ("loc" variable nil (reparse-symbol function_parameters) [119299 119302]))                          )
                        (reparse-symbol indented_block_body) [119269 119445])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119465 119469])
                            ("instring" variable nil (reparse-symbol function_parameters) [119471 119479])
                            ("loc" variable nil (reparse-symbol function_parameters) [119481 119484])
                            ("doActions" variable nil (reparse-symbol function_parameters) [119486 119495]))                          )
                        (reparse-symbol indented_block_body) [119450 119740]))                  
                :type "class")
                nil [118929 119740])
            ("LineEnd" type
               (:documentation "
    Matches if current position is at the end of a line within the parse string
    "
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [119902 119932])
                            ("self" code nil (reparse-symbol indented_block_body) [119941 120018])
                            ("self" variable nil (reparse-symbol indented_block_body) [120027 120063]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119886 119890]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [119872 120064])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [120084 120088])
                            ("instring" variable nil (reparse-symbol function_parameters) [120090 120098])
                            ("loc" variable nil (reparse-symbol function_parameters) [120100 120103])
                            ("doActions" variable nil (reparse-symbol function_parameters) [120105 120114]))                          )
                        (reparse-symbol indented_block_body) [120069 120460]))                  
                :type "class")
                nil [119741 120460])
            ("StringStart" type
               (:documentation "
    Matches if current position is at the beginning of the parse string
    "
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [120618 120652])
                            ("self" variable nil (reparse-symbol indented_block_body) [120661 120699]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [120602 120606]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [120588 120700])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [120720 120724])
                            ("instring" variable nil (reparse-symbol function_parameters) [120726 120734])
                            ("loc" variable nil (reparse-symbol function_parameters) [120736 120739])
                            ("doActions" variable nil (reparse-symbol function_parameters) [120741 120750]))                          )
                        (reparse-symbol indented_block_body) [120705 121007]))                  
                :type "class")
                nil [120461 121007])
            ("StringEnd" type
               (:documentation "
    Matches if current position is at the end of the parse string
    "
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [121157 121189])
                            ("self" variable nil (reparse-symbol indented_block_body) [121198 121234]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121141 121145]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [121127 121235])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121255 121259])
                            ("instring" variable nil (reparse-symbol function_parameters) [121261 121269])
                            ("loc" variable nil (reparse-symbol function_parameters) [121271 121274])
                            ("doActions" variable nil (reparse-symbol function_parameters) [121276 121285]))                          )
                        (reparse-symbol indented_block_body) [121240 121599]))                  
                :type "class")
                nil [121008 121599])
            ("WordStart" type
               (:documentation "
    Matches if the current position is at the beginning of a Word, and
    is not preceded by any character in a given set of C{wordChars}
    (default=C{printables}). To emulate the C{\\b} behavior of regular expressions,
    use C{WordStart(alphanums)}. C{WordStart} will also match at the beginning of
    the string being parsed, or at the beginning of a line.
    "
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [122069 122101])
                            ("self" variable nil (reparse-symbol indented_block_body) [122110 122141])
                            ("self" variable nil (reparse-symbol indented_block_body) [122150 122192]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122030 122034])
                            ("wordChars" variable nil (reparse-symbol function_parameters) [122036 122045]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [122017 122193])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122212 122216])
                            ("instring" variable nil (reparse-symbol function_parameters) [122218 122226])
                            ("loc" variable nil (reparse-symbol function_parameters) [122228 122231])
                            ("doActions" variable nil (reparse-symbol function_parameters) [122233 122242]))                          )
                        (reparse-symbol indented_block_body) [122198 122473]))                  
                :type "class")
                nil [121600 122473])
            ("WordEnd" type
               (:documentation "
    Matches if the current position is at the end of a Word, and
    is not followed by any character in a given set of C{wordChars}
    (default=C{printables}). To emulate the C{\\b} behavior of regular expressions,
    use C{WordEnd(alphanums)}. C{WordEnd} will also match at the end of
    the string being parsed, or at the end of a line.
    "
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [122919 122949])
                            ("self" variable nil (reparse-symbol indented_block_body) [122958 122989])
                            ("self" variable nil (reparse-symbol indented_block_body) [122998 123025])
                            ("self" variable nil (reparse-symbol indented_block_body) [123034 123074]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122880 122884])
                            ("wordChars" variable nil (reparse-symbol function_parameters) [122886 122895]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [122867 123075])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123094 123098])
                            ("instring" variable nil (reparse-symbol function_parameters) [123100 123108])
                            ("loc" variable nil (reparse-symbol function_parameters) [123110 123113])
                            ("doActions" variable nil (reparse-symbol function_parameters) [123115 123124]))                          )
                        (reparse-symbol indented_block_body) [123080 123407]))                  
                :type "class")
                nil [122474 123407])
            ("ParseExpression" type
               (:documentation "
    Abstract subclass of ParserElement, for combining and post-processing parsed tokens.
    "
                :superclasses ("ParserElement")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [123611 123657])
                            ("if" code nil (reparse-symbol indented_block_body) [123666 123738])
                            ("if" code nil (reparse-symbol indented_block_body) [123747 124326])
                            ("self" variable nil (reparse-symbol indented_block_body) [124334 124359]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123570 123574])
                            ("exprs" variable nil (reparse-symbol function_parameters) [123576 123581])
                            ("savelist" variable nil (reparse-symbol function_parameters) [123583 123591]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [123556 124360])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124382 124386])
                            ("i" variable nil (reparse-symbol function_parameters) [124388 124389]))                          )
                        (reparse-symbol indented_block_body) [124365 124422])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124439 124443])
                            ("other" variable nil (reparse-symbol function_parameters) [124445 124450]))                          )
                        (reparse-symbol indented_block_body) [124427 124537])
                    ("leaveWhitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124563 124567]))                          
                        :documentation "Extends C{leaveWhitespace} defined in base class, and also invokes C{leaveWhitespace} on
           all contained expressions.")
                        (reparse-symbol indented_block_body) [124542 124883])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124900 124904])
                            ("other" variable nil (reparse-symbol function_parameters) [124906 124911]))                          )
                        (reparse-symbol indented_block_body) [124888 125329])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125347 125351]))                          )
                        (reparse-symbol indented_block_body) [125334 125606])
                    ("streamline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125627 125631]))                          )
                        (reparse-symbol indented_block_body) [125611 126959])
                    ("setResultsName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [126984 126988])
                            ("name" variable nil (reparse-symbol function_parameters) [126990 126994])
                            ("listAllMatches" variable nil (reparse-symbol function_parameters) [126996 127010]))                          )
                        (reparse-symbol indented_block_body) [126964 127117])
                    ("validate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [127136 127140])
                            ("validateTrace" variable nil (reparse-symbol function_parameters) [127142 127155]))                          )
                        (reparse-symbol indented_block_body) [127122 127291])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [127313 127317]))                          )
                        (reparse-symbol indented_block_body) [127304 127439]))                  
                :type "class")
                nil [123409 127439])
            ("And" type
               (:documentation "
    Requires all given C{ParseExpression}s to be found in the given order.
    Expressions may be separated by whitespace.
    May be constructed using the C{'+'} operator.
    May also be constructed using the C{'-'} operator, which will suppress backtracking.

    Example::
        integer = Word(nums)
        name_expr = OneOrMore(Word(alphas))

        expr = And([integer(\"id\"),name_expr(\"name\"),integer(\"age\")])
        # more easily written as:
        expr = integer(\"id\") + name_expr(\"name\") + integer(\"age\")
    "
                :superclasses ("ParseExpression")
                :members 
                  ( ("_ErrorStop" type
                       (:superclasses ("Empty")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("super" code nil (reparse-symbol indented_block_body) [128091 128143])
                                    ("self" variable nil (reparse-symbol indented_block_body) [128156 128171])
                                    ("self" code nil (reparse-symbol indented_block_body) [128184 128206]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [128055 128059])
                                    ("args" variable nil (reparse-symbol function_parameters) [128061 128066])
                                    ("kwargs" variable nil (reparse-symbol function_parameters) [128068 128076]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [128042 128207]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [128009 128207])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [128266 128307])
                            ("self" variable nil (reparse-symbol indented_block_body) [128316 128379])
                            ("self" code nil (reparse-symbol indented_block_body) [128388 128439])
                            ("self" variable nil (reparse-symbol indented_block_body) [128448 128498])
                            ("self" variable nil (reparse-symbol indented_block_body) [128507 128531]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [128226 128230])
                            ("exprs" variable nil (reparse-symbol function_parameters) [128232 128237])
                            ("savelist" variable nil (reparse-symbol function_parameters) [128239 128247]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [128212 128532])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [128552 128556])
                            ("instring" variable nil (reparse-symbol function_parameters) [128558 128566])
                            ("loc" variable nil (reparse-symbol function_parameters) [128568 128571])
                            ("doActions" variable nil (reparse-symbol function_parameters) [128573 128582]))                          )
                        (reparse-symbol indented_block_body) [128537 129682])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129700 129704])
                            ("other" variable nil (reparse-symbol function_parameters) [129706 129711]))                          )
                        (reparse-symbol indented_block_body) [129687 129882])
                    ("checkRecursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129907 129911])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [129913 129929]))                          )
                        (reparse-symbol indented_block_body) [129887 130126])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130144 130148]))                          )
                        (reparse-symbol indented_block_body) [130131 130355]))                  
                :type "class")
                nil [127440 130355])
            ("Or" type
               (:documentation "
    Requires that at least one C{ParseExpression} is found.
    If two expressions match, the expression that matches the longest string will be used.
    May be constructed using the C{'^'} operator.

    Example::
        # construct Or using '^' operator
        
        number = Word(nums) ^ Combine(Word(nums) + '.' + Word(nums))
        print(number.searchString(\"123 3.1416 789\"))
    prints::
        [['123'], ['3.1416'], ['789']]
    "
                :superclasses ("ParseExpression")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [130900 130940])
                            ("if" code nil (reparse-symbol indented_block_body) [130949 131093]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130859 130863])
                            ("exprs" variable nil (reparse-symbol function_parameters) [130865 130870])
                            ("savelist" variable nil (reparse-symbol function_parameters) [130872 130880]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [130845 131093])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131113 131117])
                            ("instring" variable nil (reparse-symbol function_parameters) [131119 131127])
                            ("loc" variable nil (reparse-symbol function_parameters) [131129 131132])
                            ("doActions" variable nil (reparse-symbol function_parameters) [131134 131143]))                          )
                        (reparse-symbol indented_block_body) [131098 132493])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [132512 132516])
                            ("other" variable nil (reparse-symbol function_parameters) [132518 132523]))                          )
                        (reparse-symbol indented_block_body) [132499 132693])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [132711 132715]))                          )
                        (reparse-symbol indented_block_body) [132698 132924])
                    ("checkRecursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [132949 132953])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [132955 132971]))                          )
                        (reparse-symbol indented_block_body) [132929 133109]))                  
                :type "class")
                nil [130357 133109])
            ("MatchFirst" type
               (:documentation "
    Requires that at least one C{ParseExpression} is found.
    If two expressions match, the first one listed is the one that will match.
    May be constructed using the C{'|'} operator.

    Example::
        # construct MatchFirst using '|' operator
        
        # watch the order of expressions to match
        number = Word(nums) | Combine(Word(nums) + '.' + Word(nums))
        print(number.searchString(\"123 3.1416 789\")) #  Fail! -> [['123'], ['3'], ['1416'], ['789']]

        # put more selective expression first
        number = Combine(Word(nums) + '.' + Word(nums)) | Word(nums)
        print(number.searchString(\"123 3.1416 789\")) #  Better -> [['123'], ['3.1416'], ['789']]
    "
                :superclasses ("ParseExpression")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [133917 133965])
                            ("if" code nil (reparse-symbol indented_block_body) [133974 134118]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133876 133880])
                            ("exprs" variable nil (reparse-symbol function_parameters) [133882 133887])
                            ("savelist" variable nil (reparse-symbol function_parameters) [133889 133897]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [133862 134118])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134138 134142])
                            ("instring" variable nil (reparse-symbol function_parameters) [134144 134152])
                            ("loc" variable nil (reparse-symbol function_parameters) [134154 134157])
                            ("doActions" variable nil (reparse-symbol function_parameters) [134159 134168]))                          )
                        (reparse-symbol indented_block_body) [134123 135084])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135101 135105])
                            ("other" variable nil (reparse-symbol function_parameters) [135107 135112]))                          )
                        (reparse-symbol indented_block_body) [135089 135290])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135308 135312]))                          )
                        (reparse-symbol indented_block_body) [135295 135521])
                    ("checkRecursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135546 135550])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [135552 135568]))                          )
                        (reparse-symbol indented_block_body) [135526 135706]))                  
                :type "class")
                nil [133111 135706])
            ("Each" type
               (:documentation "
    Requires all given C{ParseExpression}s to be found, but in any order.
    Expressions may be separated by whitespace.
    May be constructed using the C{'&'} operator.

    Example::
        color = oneOf(\"RED ORANGE YELLOW GREEN BLUE PURPLE BLACK WHITE BROWN\")
        shape_type = oneOf(\"SQUARE CIRCLE TRIANGLE STAR HEXAGON OCTAGON\")
        integer = Word(nums)
        shape_attr = \"shape:\" + shape_type(\"shape\")
        posn_attr = \"posn:\" + Group(integer(\"x\") + ',' + integer(\"y\"))(\"posn\")
        color_attr = \"color:\" + color(\"color\")
        size_attr = \"size:\" + integer(\"size\")

        # use Each (using operator '&') to accept attributes in any order 
        # (shape and posn are required, color and size are optional)
        shape_spec = shape_attr & posn_attr & Optional(color_attr) & Optional(size_attr)

        shape_spec.runTests('''
            shape: SQUARE color: BLACK posn: 100, 120
            shape: CIRCLE size: 50 color: BLUE posn: 50,80
            color:GREEN size:20 shape:TRIANGLE posn:20,40
            '''
            )
    prints::
        shape: SQUARE color: BLACK posn: 100, 120
        ['shape:', 'SQUARE', 'color:', 'BLACK', 'posn:', ['100', ',', '120']]
        - color: BLACK
        - posn: ['100', ',', '120']
          - x: 100
          - y: 120
        - shape: SQUARE


        shape: CIRCLE size: 50 color: BLUE posn: 50,80
        ['shape:', 'CIRCLE', 'size:', '50', 'color:', 'BLUE', 'posn:', ['50', ',', '80']]
        - color: BLUE
        - posn: ['50', ',', '80']
          - x: 50
          - y: 80
        - shape: CIRCLE
        - size: 50


        color: GREEN size: 20 shape: TRIANGLE posn: 20,40
        ['color:', 'GREEN', 'size:', '20', 'shape:', 'TRIANGLE', 'posn:', ['20', ',', '40']]
        - color: GREEN
        - posn: ['20', ',', '40']
          - x: 20
          - y: 40
        - shape: TRIANGLE
        - size: 20
    "
                :superclasses ("ParseExpression")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [137707 137749])
                            ("self" variable nil (reparse-symbol indented_block_body) [137758 137821])
                            ("self" variable nil (reparse-symbol indented_block_body) [137830 137856])
                            ("self" variable nil (reparse-symbol indented_block_body) [137865 137891]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137667 137671])
                            ("exprs" variable nil (reparse-symbol function_parameters) [137673 137678])
                            ("savelist" variable nil (reparse-symbol function_parameters) [137680 137688]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [137653 137892])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137912 137916])
                            ("instring" variable nil (reparse-symbol function_parameters) [137918 137926])
                            ("loc" variable nil (reparse-symbol function_parameters) [137928 137931])
                            ("doActions" variable nil (reparse-symbol function_parameters) [137933 137942]))                          )
                        (reparse-symbol indented_block_body) [137897 140063])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140081 140085]))                          )
                        (reparse-symbol indented_block_body) [140068 140294])
                    ("checkRecursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140319 140323])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [140325 140341]))                          )
                        (reparse-symbol indented_block_body) [140299 140479]))                  
                :type "class")
                nil [135708 140479])
            ("ParseElementEnhance" type
               (:documentation "
    Abstract subclass of C{ParserElement}, for combining and post-processing parsed tokens.
    "
                :superclasses ("ParserElement")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [140687 140737])
                            ("if" code nil (reparse-symbol indented_block_body) [140746 141003])
                            ("self" variable nil (reparse-symbol indented_block_body) [141011 141027])
                            ("self" variable nil (reparse-symbol indented_block_body) [141036 141055])
                            ("if" code nil (reparse-symbol indented_block_body) [141064 141450]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140649 140653])
                            ("expr" variable nil (reparse-symbol function_parameters) [140655 140659])
                            ("savelist" variable nil (reparse-symbol function_parameters) [140661 140669]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [140635 141450])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [141470 141474])
                            ("instring" variable nil (reparse-symbol function_parameters) [141476 141484])
                            ("loc" variable nil (reparse-symbol function_parameters) [141486 141489])
                            ("doActions" variable nil (reparse-symbol function_parameters) [141491 141500]))                          )
                        (reparse-symbol indented_block_body) [141455 141699])
                    ("leaveWhitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [141725 141729]))                          )
                        (reparse-symbol indented_block_body) [141704 141900])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [141917 141921])
                            ("other" variable nil (reparse-symbol function_parameters) [141923 141928]))                          )
                        (reparse-symbol indented_block_body) [141905 142380])
                    ("streamline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142401 142405]))                          )
                        (reparse-symbol indented_block_body) [142385 142551])
                    ("checkRecursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142576 142580])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [142582 142598]))                          )
                        (reparse-symbol indented_block_body) [142556 142857])
                    ("validate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142876 142880])
                            ("validateTrace" variable nil (reparse-symbol function_parameters) [142882 142895]))                          )
                        (reparse-symbol indented_block_body) [142862 143044])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [143062 143066]))                          )
                        (reparse-symbol indented_block_body) [143049 143350]))                  
                :type "class")
                nil [140481 143350])
            ("FollowedBy" type
               (:documentation "
    Lookahead matching of the given parse expression.  C{FollowedBy}
    does I{not} advance the parsing position within the input string, it only
    verifies that the specified parse expression matches at the current
    position.  C{FollowedBy} always returns a null token list.

    Example::
        # use FollowedBy to match a label only if it is followed by a ':'
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        
        OneOrMore(attr_expr).parseString(\"shape: SQUARE color: BLACK posn: upper left\").pprint()
    prints::
        [['shape', 'SQUARE'], ['color', 'BLACK'], ['posn', 'upper left']]
    "
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [144199 144236])
                            ("self" variable nil (reparse-symbol indented_block_body) [144245 144271]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [144177 144181])
                            ("expr" variable nil (reparse-symbol function_parameters) [144183 144187]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [144163 144272])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [144292 144296])
                            ("instring" variable nil (reparse-symbol function_parameters) [144298 144306])
                            ("loc" variable nil (reparse-symbol function_parameters) [144308 144311])
                            ("doActions" variable nil (reparse-symbol function_parameters) [144313 144322]))                          )
                        (reparse-symbol indented_block_body) [144277 144398]))                  
                :type "class")
                nil [143352 144398])
            ("NotAny" type
               (:documentation "
    Lookahead to disallow matching with the given parse expression.  C{NotAny}
    does I{not} advance the parsing position within the input string, it only
    verifies that the specified parse expression does I{not} match at the current
    position.  Also, C{NotAny} does I{not} skip over leading whitespace. C{NotAny}
    always returns a null token list.  May be constructed using the '~' operator.

    Example::
        
    "
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [144919 144952])
                            ("self" variable nil (reparse-symbol indented_block_body) [144995 145022])
                            ("self" variable nil (reparse-symbol indented_block_body) [145102 145128])
                            ("self" code nil (reparse-symbol indented_block_body) [145137 145192]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [144897 144901])
                            ("expr" variable nil (reparse-symbol function_parameters) [144903 144907]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [144883 145193])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145213 145217])
                            ("instring" variable nil (reparse-symbol function_parameters) [145219 145227])
                            ("loc" variable nil (reparse-symbol function_parameters) [145229 145232])
                            ("doActions" variable nil (reparse-symbol function_parameters) [145234 145243]))                          )
                        (reparse-symbol indented_block_body) [145198 145392])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145410 145414]))                          )
                        (reparse-symbol indented_block_body) [145397 145600]))                  
                :type "class")
                nil [144400 145600])
            ("_MultipleMatch" type
               (:superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [145696 145738])
                            ("ender" variable nil (reparse-symbol indented_block_body) [145747 145761])
                            ("if" code nil (reparse-symbol indented_block_body) [145770 145865])
                            ("None" code nil (reparse-symbol indented_block_body) [145923 145927]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145662 145666])
                            ("expr" variable nil (reparse-symbol function_parameters) [145668 145672])
                            ("stopOn" variable nil (reparse-symbol function_parameters) [145674 145680]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [145648 145928])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145948 145952])
                            ("instring" variable nil (reparse-symbol function_parameters) [145954 145962])
                            ("loc" variable nil (reparse-symbol function_parameters) [145964 145967])
                            ("doActions" variable nil (reparse-symbol function_parameters) [145969 145978]))                          )
                        (reparse-symbol indented_block_body) [145933 147057]))                  
                :type "class")
                nil [145601 147057])
            ("OneOrMore" type
               (:superclasses ("_MultipleMatch")
                :type "class")
                nil [147066 148657])
            ("ZeroOrMore" type
               (:documentation "
    Optional repetition of zero or more of the given expression.
    
    Parameters:
     - expr - expression that must match zero or more times
     - stopOn - (default=C{None}) - expression for a terminating sentinel
          (only required if the sentinel would ordinarily match the repetition 
          expression)          

    Example: similar to L{OneOrMore}
    "
                :superclasses ("_MultipleMatch")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [149130 149182])
                            ("self" variable nil (reparse-symbol indented_block_body) [149191 149217]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149096 149100])
                            ("expr" variable nil (reparse-symbol function_parameters) [149102 149106])
                            ("stopOn" variable nil (reparse-symbol function_parameters) [149108 149114]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [149082 149218])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149246 149250])
                            ("instring" variable nil (reparse-symbol function_parameters) [149252 149260])
                            ("loc" variable nil (reparse-symbol function_parameters) [149262 149265])
                            ("doActions" variable nil (reparse-symbol function_parameters) [149267 149276]))                          )
                        (reparse-symbol indented_block_body) [149231 149448])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149466 149470]))                          )
                        (reparse-symbol indented_block_body) [149453 149658]))                  
                :type "class")
                nil [148658 149658])
            ("_NullToken" type
               (:superclasses ("object")
                :members 
                  ( ("__bool__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149702 149706]))                          )
                        (reparse-symbol indented_block_body) [149689 149730])
                    ("__nonzero__" variable nil (reparse-symbol indented_block_body) [149734 149756])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149773 149777]))                          )
                        (reparse-symbol indented_block_body) [149761 149798]))                  
                :type "class")
                nil [149659 149798])
            ("_optionalNotMatched" variable nil nil [149799 149833])
            ("Optional" type
               (:documentation "
    Optional matching of the given expression.

    Parameters:
     - expr - expression that must match zero or more times
     - default (optional) - value to be returned if the optional expression is not found.

    Example::
        # US postal code can be a 5-digit zip, plus optional 4-digit qualifier
        zip = Combine(Word(nums, exact=5) + Optional('-' + Word(nums, exact=4)))
        zip.runTests('''
            # traditional ZIP code
            12345
            
            # ZIP+4 form
            12101-0001
            
            # invalid ZIP
            98765-
            ''')
    prints::
        # traditional ZIP code
        12345
        ['12345']

        # ZIP+4 form
        12101-0001
        ['12101-0001']

        # invalid ZIP
        98765-
             ^
        FAIL: Expected end of text (at char 5), (line:1, col:6)
    "
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [150816 150869])
                            ("self" variable nil (reparse-symbol indented_block_body) [150878 150905])
                            ("self" variable nil (reparse-symbol indented_block_body) [150914 150940]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150765 150769])
                            ("expr" variable nil (reparse-symbol function_parameters) [150771 150775])
                            ("default" variable nil (reparse-symbol function_parameters) [150777 150784]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [150751 150941])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150961 150965])
                            ("instring" variable nil (reparse-symbol function_parameters) [150967 150975])
                            ("loc" variable nil (reparse-symbol function_parameters) [150977 150980])
                            ("doActions" variable nil (reparse-symbol function_parameters) [150982 150991]))                          )
                        (reparse-symbol indented_block_body) [150946 151532])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [151550 151554]))                          )
                        (reparse-symbol indented_block_body) [151537 151739]))                  
                :type "class")
                nil [149834 151739])
            ("SkipTo" type
               (:documentation "
    Token for skipping over all undefined text until the matched expression is found.

    Parameters:
     - expr - target expression marking the end of the data to be skipped
     - include - (default=C{False}) if True, the target expression is also parsed 
          (the skipped text and target expression are returned as a 2-element list).
     - ignore - (default=C{None}) used to define grammars (typically quoted strings and 
          comments) that might contain false matches to the target expression
     - failOn - (default=C{None}) define expressions that are not allowed to be 
          included in the skipped test; if found before the target expression is found, 
          the SkipTo is not a match

    Example::
        report = '''
            Outstanding Issues Report - 1 Jan 2000

               # | Severity | Description                               |  Days Open
            -----+----------+-------------------------------------------+-----------
             101 | Critical | Intermittent system crash                 |          6
              94 | Cosmetic | Spelling error on Login ('log|n')         |         14
              79 | Minor    | System slow when running too many reports |         47
            '''
        integer = Word(nums)
        SEP = Suppress('|')
        # use SkipTo to simply match everything up until the next SEP
        # - ignore quoted strings, so that a '|' character inside a quoted string does not match
        # - parse action will call token.strip() for each matched token, i.e., the description body
        string_data = SkipTo(SEP, ignore=quotedString)
        string_data.setParseAction(tokenMap(str.strip))
        ticket_expr = (integer(\"issue_num\") + SEP 
                      + string_data(\"sev\") + SEP 
                      + string_data(\"desc\") + SEP 
                      + integer(\"days_open\"))
        
        for tkt in ticket_expr.searchString(report):
            print tkt.dump()
    prints::
        ['101', 'Critical', 'Intermittent system crash', '6']
        - days_open: 6
        - desc: Intermittent system crash
        - issue_num: 101
        - sev: Critical
        ['94', 'Cosmetic', \"Spelling error on Login ('log|n')\", '14']
        - days_open: 14
        - desc: Spelling error on Login ('log|n')
        - issue_num: 94
        - sev: Cosmetic
        ['79', 'Minor', 'System slow when running too many reports', '47']
        - days_open: 47
        - desc: System slow when running too many reports
        - issue_num: 79
        - sev: Minor
    "
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [154427 154466])
                            ("self" variable nil (reparse-symbol indented_block_body) [154475 154499])
                            ("self" variable nil (reparse-symbol indented_block_body) [154508 154534])
                            ("self" variable nil (reparse-symbol indented_block_body) [154543 154569])
                            ("self" variable nil (reparse-symbol indented_block_body) [154578 154605])
                            ("self" variable nil (reparse-symbol indented_block_body) [154614 154633])
                            ("if" code nil (reparse-symbol indented_block_body) [154642 154792])
                            ("self" code nil (reparse-symbol indented_block_body) [154800 154852]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154363 154367])
                            ("other" variable nil (reparse-symbol function_parameters) [154369 154374])
                            ("include" variable nil (reparse-symbol function_parameters) [154376 154383])
                            ("ignore" variable nil (reparse-symbol function_parameters) [154391 154397])
                            ("failOn" variable nil (reparse-symbol function_parameters) [154404 154410]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [154349 154853])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154873 154877])
                            ("instring" variable nil (reparse-symbol function_parameters) [154879 154887])
                            ("loc" variable nil (reparse-symbol function_parameters) [154889 154892])
                            ("doActions" variable nil (reparse-symbol function_parameters) [154894 154903]))                          )
                        (reparse-symbol indented_block_body) [154858 156624]))                  
                :type "class")
                nil [151740 156624])
            ("Forward" type
               (:documentation "
    Forward declaration of an expression to be defined later -
    used for recursive grammars, such as algebraic infix notation.
    When the expression is known, it is assigned to the C{Forward} variable using the '<<' operator.

    Note: take care when assigning to C{Forward} not to overlook precedence of operators.
    Specifically, '|' has a lower precedence than '<<', so that::
        fwdExpr << a | b | c
    will actually be evaluated as::
        (fwdExpr << a) | b | c
    thereby leaving b and c out as parseable alternatives.  It is recommended that you
    explicitly group the values inserted into the C{Forward}::
        fwdExpr << (a | b | c)
    Converting to use the '<<=' operator instead will avoid this problem.

    See L{ParseResults.pprint} for an example of a recursive parser created using
    C{Forward}.
    "
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [157561 157614]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [157533 157537])
                            ("other" variable nil (reparse-symbol function_parameters) [157539 157544]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [157519 157615])
                    ("__lshift__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [157636 157640])
                            ("other" variable nil (reparse-symbol function_parameters) [157642 157647]))                          )
                        (reparse-symbol indented_block_body) [157620 158151])
                    ("__ilshift__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [158180 158184])
                            ("other" variable nil (reparse-symbol function_parameters) [158186 158191]))                          )
                        (reparse-symbol indented_block_body) [158164 158223])
                    ("leaveWhitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [158253 158257]))                          )
                        (reparse-symbol indented_block_body) [158232 158317])
                    ("streamline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [158338 158342]))                          )
                        (reparse-symbol indented_block_body) [158322 158512])
                    ("validate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [158531 158535])
                            ("validateTrace" variable nil (reparse-symbol function_parameters) [158537 158550]))                          )
                        (reparse-symbol indented_block_body) [158517 158747])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [158765 158769]))                          )
                        (reparse-symbol indented_block_body) [158752 159311])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [159325 159329]))                          )
                        (reparse-symbol indented_block_body) [159316 159502]))                  
                :type "class")
                nil [156625 159502])
            ("_ForwardNoRecurse" type
               (:superclasses ("Forward")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [159554 159558]))                          )
                        (reparse-symbol indented_block_body) [159541 159583]))                  
                :type "class")
                nil [159503 159583])
            ("TokenConverter" type
               (:documentation "
    Abstract subclass of C{ParseExpression}, for converting parsed results.
    "
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [159775 159818])
                            ("self" variable nil (reparse-symbol indented_block_body) [159840 159863]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [159737 159741])
                            ("expr" variable nil (reparse-symbol function_parameters) [159743 159747])
                            ("savelist" variable nil (reparse-symbol function_parameters) [159749 159757]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [159723 159864]))                  
                :type "class")
                nil [159584 159864])
            ("Combine" type
               (:documentation "
    Converter to concatenate all matching tokens to a single string.
    By default, the matching patterns must also be contiguous in the input string;
    this can be disabled by specifying C{'adjacent=False'} in the constructor.

    Example::
        real = Word(nums) + '.' + Word(nums)
        print(real.parseString('3.1416')) # -> ['3', '.', '1416']
        # will also erroneously match the following
        print(real.parseString('3. 1416')) # -> ['3', '.', '1416']

        real = Combine(Word(nums) + '.' + Word(nums))
        print(real.parseString('3.1416')) # -> ['3.1416']
        # no match when there are internal spaces
        print(real.parseString('3. 1416')) # -> Exception: Expected W:(0123...)
    "
                :superclasses ("TokenConverter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [160701 160737])
                            ("if" code nil (reparse-symbol indented_block_body) [160857 160905])
                            ("self" variable nil (reparse-symbol indented_block_body) [160913 160937])
                            ("self" variable nil (reparse-symbol indented_block_body) [160946 160972])
                            ("self" variable nil (reparse-symbol indented_block_body) [160981 161009])
                            ("self" variable nil (reparse-symbol indented_block_body) [161018 161042]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [160649 160653])
                            ("expr" variable nil (reparse-symbol function_parameters) [160655 160659])
                            ("joinString" variable nil (reparse-symbol function_parameters) [160661 160671])
                            ("adjacent" variable nil (reparse-symbol function_parameters) [160676 160684]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [160635 161043])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [161060 161064])
                            ("other" variable nil (reparse-symbol function_parameters) [161066 161071]))                          )
                        (reparse-symbol indented_block_body) [161048 161231])
                    ("postParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [161251 161255])
                            ("instring" variable nil (reparse-symbol function_parameters) [161257 161265])
                            ("loc" variable nil (reparse-symbol function_parameters) [161267 161270])
                            ("tokenlist" variable nil (reparse-symbol function_parameters) [161272 161281]))                          )
                        (reparse-symbol indented_block_body) [161236 161579]))                  
                :type "class")
                nil [159865 161579])
            ("Group" type
               (:documentation "
    Converter to return the matched tokens as a list - useful for returning tokens of C{L{ZeroOrMore}} and C{L{OneOrMore}} expressions.

    Example::
        ident = Word(alphas)
        num = Word(nums)
        term = ident | num
        func = ident + Optional(delimitedList(term))
        print(func.parseString(\"fn a,b,100\"))  # -> ['fn', 'a', 'b', '100']

        func = ident + Group(Optional(delimitedList(term)))
        print(func.parseString(\"fn a,b,100\"))  # -> ['fn', ['a', 'b', '100']]
    "
                :superclasses ("TokenConverter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [162165 162199])
                            ("self" variable nil (reparse-symbol indented_block_body) [162208 162230]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [162143 162147])
                            ("expr" variable nil (reparse-symbol function_parameters) [162149 162153]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [162129 162231])
                    ("postParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [162251 162255])
                            ("instring" variable nil (reparse-symbol function_parameters) [162257 162265])
                            ("loc" variable nil (reparse-symbol function_parameters) [162267 162270])
                            ("tokenlist" variable nil (reparse-symbol function_parameters) [162272 162281]))                          )
                        (reparse-symbol indented_block_body) [162236 162314]))                  
                :type "class")
                nil [161580 162314])
            ("Dict" type
               (:documentation "
    Converter to return a repetitive expression as a list, but also as a dictionary.
    Each element can also be referenced using the first token in the expression as its key.
    Useful for tabular report scraping when the first column can be used as a item key.

    Example::
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

        text = \"shape: SQUARE posn: upper left color: light blue texture: burlap\"
        attr_expr = (label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        
        # print attributes as plain groups
        print(OneOrMore(attr_expr).parseString(text).dump())
        
        # instead of OneOrMore(expr), parse using Dict(OneOrMore(Group(expr))) - Dict will auto-assign names
        result = Dict(OneOrMore(Group(attr_expr))).parseString(text)
        print(result.dump())
        
        # access named fields as dict entries, or output as dict
        print(result['shape'])        
        print(result.asDict())
    prints::
        ['shape', 'SQUARE', 'posn', 'upper left', 'color', 'light blue', 'texture', 'burlap']

        [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'light blue'], ['texture', 'burlap']]
        - color: light blue
        - posn: upper left
        - shape: SQUARE
        - texture: burlap
        SQUARE
        {'color': 'light blue', 'posn': 'upper left', 'texture': 'burlap', 'shape': 'SQUARE'}
    See more examples at L{ParseResults} of accessing fields by results name.
    "
                :superclasses ("TokenConverter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [164017 164050])
                            ("self" variable nil (reparse-symbol indented_block_body) [164059 164081]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [163995 163999])
                            ("expr" variable nil (reparse-symbol function_parameters) [164001 164005]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [163981 164082])
                    ("postParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [164102 164106])
                            ("instring" variable nil (reparse-symbol function_parameters) [164108 164116])
                            ("loc" variable nil (reparse-symbol function_parameters) [164118 164121])
                            ("tokenlist" variable nil (reparse-symbol function_parameters) [164123 164132]))                          )
                        (reparse-symbol indented_block_body) [164087 165063]))                  
                :type "class")
                nil [162315 165063])
            ("Suppress" type
               (:documentation "
    Converter for ignoring the results of a parsed expression.

    Example::
        source = \"a, b, c,d\"
        wd = Word(alphas)
        wd_list1 = wd + ZeroOrMore(',' + wd)
        print(wd_list1.parseString(source))

        # often, delimiters that are useful during parsing are just in the
        # way afterward - use Suppress to keep them out of the parsed output
        wd_list2 = wd + ZeroOrMore(Suppress(',') + wd)
        print(wd_list2.parseString(source))
    prints::
        ['a', ',', 'b', ',', 'c', ',', 'd']
        ['a', 'b', 'c', 'd']
    (See also L{delimitedList}.)
    "
                :superclasses ("TokenConverter")
                :members 
                  ( ("postParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [165725 165729])
                            ("instring" variable nil (reparse-symbol function_parameters) [165731 165739])
                            ("loc" variable nil (reparse-symbol function_parameters) [165741 165744])
                            ("tokenlist" variable nil (reparse-symbol function_parameters) [165746 165755]))                          )
                        (reparse-symbol indented_block_body) [165710 165777])
                    ("suppress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [165796 165800]))                          )
                        (reparse-symbol indented_block_body) [165782 165824]))                  
                :type "class")
                nil [165065 165824])
            ("OnlyOnce" type
               (:documentation "
    Wrapper for parse actions, to ensure they are only called once.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [165978 166017])
                            ("self" variable nil (reparse-symbol indented_block_body) [166026 166045]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [165951 165955])
                            ("methodCall" variable nil (reparse-symbol function_parameters) [165957 165967]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [165938 166046])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [166063 166067])
                            ("s" variable nil (reparse-symbol function_parameters) [166068 166069])
                            ("l" variable nil (reparse-symbol function_parameters) [166070 166071])
                            ("t" variable nil (reparse-symbol function_parameters) [166072 166073]))                          )
                        (reparse-symbol indented_block_body) [166050 166242])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [166256 166260]))                          )
                        (reparse-symbol indented_block_body) [166246 166291]))                  
                :type "class")
                nil [165826 166291])
            ("traceParseAction" function
               (:documentation "
    Decorator for debugging parse actions.

    Example::
        wd = Word(alphas)

        @traceParseAction
        def remove_duplicate_chars(tokens):
            return ''.join(sorted(set(''.join(tokens)))

        wds = OneOrMore(wd).setParseAction(remove_duplicate_chars)
        print(wds.parseString(\"slkdjs sld sldd sdlf sdljf\"))
    prints::
        >>entering remove_duplicate_chars(line: 'slkdjs sld sldd sdlf sdljf', 0, (['slkdjs', 'sld', 'sldd', 'sdlf', 'sdljf'], {}))
        <<leaving remove_duplicate_chars (ret: 'dfjkls')
        ['dfjkls']
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [166313 166314]))                  )
                nil [166292 167542])
            ("delimitedList" function
               (:documentation "
    Helper to define a delimited list of expressions - the delimiter defaults to ','.
    By default, the list elements and delimiters can have intervening whitespace, and
    comments, but this can be overridden by passing C{combine=True} in the constructor.
    If C{combine} is set to C{True}, the matching tokens are returned as a single token
    string, with the delimiters included; otherwise, the matching tokens are returned
    as a list of tokens, with the delimiters suppressed.

    Example::
        delimitedList(Word(alphas)).parseString(\"aa,bb,cc\") # -> ['aa', 'bb', 'cc']
        delimitedList(Word(hexnums), delim=':', combine=True).parseString(\"AA:BB:CC:DD:EE\") # -> ['AA:BB:CC:DD:EE']
    "
                :arguments 
                  ( ("expr" variable nil (reparse-symbol function_parameters) [167583 167587])
                    ("delim" variable nil (reparse-symbol function_parameters) [167589 167594])
                    ("combine" variable nil (reparse-symbol function_parameters) [167600 167607]))                  )
                nil [167564 168588])
            ("countedArray" function
               (:documentation "
    Helper to define a counted list of expressions.
    This helper defines a pattern of the form::
        integer expr expr expr...
    where the leading integer tells how many expr expressions follow.
    The matched tokens returns the array of expr tokens as a list - the leading count token is suppressed.

    Example::
        countedArray(Word(alphas)).parseString('2 ab cd ef')  # -> ['ab', 'cd']
    "
                :arguments 
                  ( ("expr" variable nil (reparse-symbol function_parameters) [168607 168611])
                    ("intExpr" variable nil (reparse-symbol function_parameters) [168613 168620]))                  )
                nil [168589 169524])
            ("_flatten" function (:arguments 
              ( ("L" variable nil (reparse-symbol function_parameters) [169538 169539]))              ) nil [169525 169693])
            ("matchPreviousLiteral" function
               (:documentation "
    Helper to define an expression that is indirectly defined from
    the tokens matched in a previous expression, that is, it looks
    for a 'repeat' of a previous expression.  For example::
        first = Word(nums)
        second = matchPreviousLiteral(first)
        matchExpr = first + \":\" + second
    will match C{\"1:1\"}, but not C{\"1:2\"}.  Because this matches a
    previous literal, will also match the leading C{\"1:1\"} in C{\"1:10\"}.
    If this is not desired, use C{matchPreviousExpr}.
    Do I{not} use with packrat parsing enabled.
    "
                :arguments 
                  ( ("expr" variable nil (reparse-symbol function_parameters) [169719 169723]))                  )
                nil [169694 170733])
            ("matchPreviousExpr" function
               (:documentation "
    Helper to define an expression that is indirectly defined from
    the tokens matched in a previous expression, that is, it looks
    for a 'repeat' of a previous expression.  For example::
        first = Word(nums)
        second = matchPreviousExpr(first)
        matchExpr = first + \":\" + second
    will match C{\"1:1\"}, but not C{\"1:2\"}.  Because this matches by
    expressions, will I{not} match the leading C{\"1:1\"} in C{\"1:10\"};
    the expressions are evaluated first, and then compared, so
    C{\"1\"} is compared with C{\"10\"}.
    Do I{not} use with packrat parsing enabled.
    "
                :arguments 
                  ( ("expr" variable nil (reparse-symbol function_parameters) [170756 170760]))                  )
                nil [170734 171874])
            ("_escapeRegexRangeChars" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [171902 171903]))              ) nil [171875 172075])
            ("oneOf" function
               (:documentation "
    Helper to quickly define a set of alternative Literals, and makes sure to do
    longest-first testing when there is a conflict, regardless of the input order,
    but returns a C{L{MatchFirst}} for best performance.

    Parameters:
     - strs - a string of space-delimited literals, or a collection of string literals
     - caseless - (default=C{False}) - treat all literals as caseless
     - useRegex - (default=C{True}) - as an optimization, will generate a Regex
          object; otherwise, will generate a C{MatchFirst} object (if C{caseless=True}, or
          if creating a C{Regex} raises an exception)

    Example::
        comp_oper = oneOf(\"< = > <= >= !=\")
        var = Word(alphas)
        number = Word(nums)
        term = var | number
        comparison_expr = term + comp_oper + term
        print(comparison_expr.searchString(\"B = 12  AA=23 B<=AA AA>12\"))
    prints::
        [['B', '=', '12'], ['AA', '=', '23'], ['B', '<=', 'AA'], ['AA', '>', '12']]
    "
                :arguments 
                  ( ("strs" variable nil (reparse-symbol function_parameters) [172087 172091])
                    ("caseless" variable nil (reparse-symbol function_parameters) [172093 172101])
                    ("useRegex" variable nil (reparse-symbol function_parameters) [172109 172117]))                  )
                nil [172076 174915])
            ("dictOf" function
               (:documentation "
    Helper to easily and clearly define a dictionary by specifying the respective patterns
    for the key and value.  Takes care of defining the C{L{Dict}}, C{L{ZeroOrMore}}, and C{L{Group}} tokens
    in the proper order.  The key pattern can include delimiting markers or punctuation,
    as long as they are suppressed, thereby leaving the significant key text.  The value
    pattern can include named results, so that the C{Dict} results can include named token
    fields.

    Example::
        text = \"shape: SQUARE posn: upper left color: light blue texture: burlap\"
        attr_expr = (label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        print(OneOrMore(attr_expr).parseString(text).dump())
        
        attr_label = label
        attr_value = Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join)

        # similar to Dict, but simpler call format
        result = dictOf(attr_label, attr_value).parseString(text)
        print(result.dump())
        print(result['shape'])
        print(result.shape)  # object attribute access works too
        print(result.asDict())
    prints::
        [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'light blue'], ['texture', 'burlap']]
        - color: light blue
        - posn: upper left
        - shape: SQUARE
        - texture: burlap
        SQUARE
        SQUARE
        {'color': 'light blue', 'shape': 'SQUARE', 'posn': 'upper left', 'texture': 'burlap'}
    "
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [174928 174931])
                    ("value" variable nil (reparse-symbol function_parameters) [174933 174938]))                  )
                nil [174916 176508])
            ("originalTextFor" function
               (:documentation "
    Helper to return the original, untokenized text for a given expression.  Useful to
    restore the parsed fields of an HTML start tag into the raw tag text itself, or to
    revert separate tokens with intervening whitespace back to the original matching
    input text. By default, returns astring containing the original parsed text.  
       
    If the optional C{asString} argument is passed as C{False}, then the return value is a 
    C{L{ParseResults}} containing any results names that were originally matched, and a 
    single token containing the original matched text from the input string.  So if 
    the expression passed to C{L{originalTextFor}} contains expressions with defined
    results names, you must set C{asString} to C{False} if you want to preserve those
    results name values.

    Example::
        src = \"this is test <b> bold <i>text</i> </b> normal text \"
        for tag in (\"b\",\"i\"):
            opener,closer = makeHTMLTags(tag)
            patt = originalTextFor(opener + SkipTo(closer) + closer)
            print(patt.searchString(src)[0])
    prints::
        ['<b> bold <i>text</i> </b>']
        ['<i>text</i>']
    "
                :arguments 
                  ( ("expr" variable nil (reparse-symbol function_parameters) [176529 176533])
                    ("asString" variable nil (reparse-symbol function_parameters) [176535 176543]))                  )
                nil [176509 178257])
            ("ungroup" function
               (:documentation "
    Helper to undo pyparsing's default grouping of And expressions, even
    if all but one are non-empty.
    "
                :arguments 
                  ( ("expr" variable nil (reparse-symbol function_parameters) [178270 178274]))                  )
                nil [178258 178463])
            ("locatedExpr" function
               (:documentation "
    Helper to decorate a returned token with its starting and ending locations in the input string.
    This helper adds the following results names:
     - locn_start = location where matched expression begins
     - locn_end = location where matched expression ends
     - value = the actual parsed results

    Be careful if the input text contains C{<TAB>} characters, you may want to call
    C{L{ParserElement.parseWithTabs}}

    Example::
        wd = Word(alphas)
        for match in locatedExpr(wd).searchString(\"ljsdf123lksdjjf123lkkjj1222\"):
            print(match)
    prints::
        [[0, 'ljsdf', 5]]
        [[8, 'lksdjjf', 15]]
        [[18, 'lkkjj', 23]]
    "
                :arguments 
                  ( ("expr" variable nil (reparse-symbol function_parameters) [178480 178484]))                  )
                nil [178464 179336])
            ("empty" variable nil nil [179389 179427])
            ("lineStart" variable nil nil [179428 179474])
            ("lineEnd" variable nil nil [179475 179517])
            ("stringStart" variable nil nil [179518 179568])
            ("stringEnd" variable nil nil [179569 179615])
            ("_escapedPunc" variable nil nil [179617 179712])
            ("_escapedHexChar" variable nil nil [179713 179826])
            ("_escapedOctChar" variable nil nil [179827 179917])
            ("_singleChar" code nil nil [179918 180055])
            ("_charRange" variable nil nil [180056 180117])
            ("_reBracketExpr" code nil nil [180118 180266])
            ("srange" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [180279 180280]))              ) nil [180268 181533])
            ("matchOnlyAtCol" function
               (:documentation "
    Helper method for defining parse actions that require matching at a specific
    column in the input text.
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [181553 181554]))                  )
                nil [181534 181853])
            ("replaceWith" function
               (:documentation "
    Helper method for common parse actions that simply return a literal value.  Especially
    useful when used with C{L{transformString<ParserElement.transformString>}()}.

    Example::
        num = Word(nums).setParseAction(lambda toks: int(toks[0]))
        na = oneOf(\"N/A NA\").setParseAction(replaceWith(math.nan))
        term = na | num
        
        OneOrMore(term).parseString(\"324 234 N/A 234\") # -> [324, 234, nan, 234]
    "
                :arguments 
                  ( ("replStr" variable nil (reparse-symbol function_parameters) [181870 181877]))                  )
                nil [181854 182367])
            ("removeQuotes" function
               (:documentation "
    Helper parse action for removing quotation marks from parsed quoted strings.

    Example::
        # by default, quotation marks are included in parsed results
        quotedString.parseString(\"'Now is the Winter of our Discontent'\") # -> [\"'Now is the Winter of our Discontent'\"]

        # use removeQuotes to strip quotation marks from parsed results
        quotedString.setParseAction(removeQuotes)
        quotedString.parseString(\"'Now is the Winter of our Discontent'\") # -> [\"Now is the Winter of our Discontent\"]
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [182385 182386])
                    ("l" variable nil (reparse-symbol function_parameters) [182387 182388])
                    ("t" variable nil (reparse-symbol function_parameters) [182389 182390]))                  )
                nil [182368 182959])
            ("tokenMap" function
               (:documentation "
    Helper to define a parse action by mapping a function to all elements of a ParseResults list.If any additional 
    args are passed, they are forwarded to the given function as additional arguments after
    the token, as in C{hex_integer = Word(hexnums).setParseAction(tokenMap(int, 16))}, which will convert the
    parsed data to an integer using base 16.

    Example (compare the last to example in L{ParserElement.transformString}::
        hex_ints = OneOrMore(Word(hexnums)).setParseAction(tokenMap(int, 16))
        hex_ints.runTests('''
            00 11 22 aa FF 0a 0d 1a
            ''')
        
        upperword = Word(alphas).setParseAction(tokenMap(str.upper))
        OneOrMore(upperword).runTests('''
            my kingdom for a horse
            ''')

        wd = Word(alphas).setParseAction(tokenMap(str.title))
        OneOrMore(wd).setParseAction(' '.join).runTests('''
            now is the winter of our discontent made glorious summer by this sun of york
            ''')
    prints::
        00 11 22 aa FF 0a 0d 1a
        [0, 17, 34, 170, 255, 10, 13, 26]

        my kingdom for a horse
        ['MY', 'KINGDOM', 'FOR', 'A', 'HORSE']

        now is the winter of our discontent made glorious summer by this sun of york
        ['Now Is The Winter Of Our Discontent Made Glorious Summer By This Sun Of York']
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [182973 182977])
                    ("args" variable nil (reparse-symbol function_parameters) [182979 182984]))                  )
                nil [182960 184634])
            ("upcaseTokens" variable nil nil [184635 184686])
            ("\"\"\"Helper parse action to convert tokens to upper case.\"\"\"" code nil nil [184687 184745])
            ("downcaseTokens" variable nil nil [184747 184800])
            ("\"\"\"Helper parse action to convert tokens to lower case.\"\"\"" code nil nil [184801 184859])
            ("_makeTags" function
               (:documentation "Internal helper to construct opening and closing tag expressions, given a tag name"
                :arguments 
                  ( ("tagStr" variable nil (reparse-symbol function_parameters) [184879 184885])
                    ("xml" variable nil (reparse-symbol function_parameters) [184887 184890]))                  )
                nil [184865 186443])
            ("makeHTMLTags" function
               (:documentation "
    Helper to construct opening and closing tag expressions for HTML, given a tag name. Matches
    tags in either upper or lower case, attributes with namespaces and with quoted or unquoted values.

    Example::
        text = '<td>More info at the <a href=\"http://pyparsing.wikispaces.com\">pyparsing</a> wiki page</td>'
        # makeHTMLTags returns pyparsing expressions for the opening and closing tags as a 2-tuple
        a,a_end = makeHTMLTags(\"A\")
        link_expr = a + SkipTo(a_end)(\"link_text\") + a_end
        
        for link in link_expr.searchString(text):
            # attributes in the <A> tag (like \"href\" shown here) are also accessible as named results
            print(link.link_text, '->', link.href)
    prints::
        pyparsing -> http://pyparsing.wikispaces.com
    "
                :arguments 
                  ( ("tagStr" variable nil (reparse-symbol function_parameters) [186461 186467]))                  )
                nil [186444 187319])
            ("makeXMLTags" function
               (:documentation "
    Helper to construct opening and closing tag expressions for XML, given a tag name. Matches
    tags only in the given upper/lower case.

    Example: similar to L{makeHTMLTags}
    "
                :arguments 
                  ( ("tagStr" variable nil (reparse-symbol function_parameters) [187336 187342]))                  )
                nil [187320 187579])
            ("withAttribute" function
               (:documentation "
    Helper to create a validating parse action to be used with start tags created
    with C{L{makeXMLTags}} or C{L{makeHTMLTags}}. Use C{withAttribute} to qualify a starting tag
    with a required attribute value, to avoid false matches on common tags such as
    C{<TD>} or C{<DIV>}.

    Call C{withAttribute} with a series of attribute names and values. Specify the list
    of filter attributes names and values as:
     - keyword arguments, as in C{(align=\"right\")}, or
     - as an explicit dict with C{**} operator, when an attribute name is also a Python
          reserved word, as in C{**{\"class\":\"Customer\", \"align\":\"right\"}}
     - a list of name-value tuples, as in ( (\"ns1:class\", \"Customer\"), (\"ns2:align\",\"right\") )
    For attribute names with a namespace prefix, you must use the second form.  Attribute
    names are matched insensitive to upper/lower case.
       
    If just testing for C{class} (with or without a namespace), use C{L{withClass}}.

    To verify that the attribute exists, but without specifying a value, pass
    C{withAttribute.ANY_VALUE} as the value.

    Example::
        html = '''
            <div>
            Some text
            <div type=\"grid\">1 4 0 1 0</div>
            <div type=\"graph\">1,3 2,3 1,1</div>
            <div>this has no type</div>
            </div>
                
        '''
        div,div_end = makeHTMLTags(\"div\")

        # only match div tag having a type attribute with value \"grid\"
        div_grid = div().setParseAction(withAttribute(type=\"grid\"))
        grid_expr = div_grid + SkipTo(div | div_end)(\"body\")
        for grid_header in grid_expr.searchString(html):
            print(grid_header.body)
        
        # construct a match with any div tag having a type attribute, regardless of the value
        div_any_type = div().setParseAction(withAttribute(type=withAttribute.ANY_VALUE))
        div_expr = div_any_type + SkipTo(div | div_end)(\"body\")
        for div_header in div_expr.searchString(html):
            print(div_header.body)
    prints::
        1 4 0 1 0

        1 4 0 1 0
        1,3 2,3 1,1
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [187598 187603])
                    ("attrDict" variable nil (reparse-symbol function_parameters) [187604 187614]))                  )
                nil [187580 218168]))          
      :file "pyparsing.py"
      :pointmax 218168
      :fsize 223742
      :lastmodtime '(22448 59703 0 0)
      :unmatched-syntax '((INDENT_BLOCK 214793 . 214845) (NEWLINE 214792 . 214793) (COLON 214791 . 214792) (TRY 214699 . 214702) (AS 214786 . 214788) (INDENT_BLOCK 213966 . 214018) (NEWLINE 213965 . 213966) (COLON 213964 . 213965) (TRY 213865 . 213868) (AS 213959 . 213961) (INDENT_BLOCK 196866 . 197011) (NEWLINE 196865 . 196866) (LPAREN 196797 . 196798) (NEWLINE 196774 . 196775) (RPAREN 196773 . 196774) (LPAREN 196738 . 196739) (PERIOD 196730 . 196731) (RPAREN 196729 . 196730) (LPAREN 196662 . 196663) (NEWLINE 196636 . 196637) (RPAREN 196635 . 196636) (LPAREN 196600 . 196601) (PERIOD 196592 . 196593) (RPAREN 196591 . 196592) (NAME 196499 . 196514) (LPAREN 196524 . 196525) (NAME 193983 . 193991) (IF 194013 . 194015) (ELSE 194026 . 194030) (NEWLINE 191669 . 191670) (COLON 191668 . 191669) (RPAREN 191667 . 191668) (LPAREN 191608 . 191609) (NEWLINE 191589 . 191590) (RPAREN 191588 . 191589) (LPAREN 191587 . 191588) (NEWLINE 191564 . 191565) (RPAREN 191563 . 191564) (LPAREN 191562 . 191563) (NEWLINE 191540 . 191541) (RPAREN 191539 . 191540) (DEDENT 191518 . 191518) (NAME 191518 . 191525) (LPAREN 191538 . 191539) (NAME 191396 . 191405) (IF 191431 . 191433) (ELSE 191444 . 191448) (NEWLINE 190385 . 190386) (COLON 190384 . 190385) (RPAREN 190383 . 190384) (LPAREN 190359 . 190360) (NEWLINE 190344 . 190345) (RPAREN 190343 . 190344) (DEDENT 190310 . 190310) (NAME 190310 . 190323) (LPAREN 190342 . 190343) (NAME 181287 . 181296) (IF 181311 . 181313) (ELSE 181345 . 181349) (INDENT_BLOCK 167257 . 167357) (NEWLINE 167256 . 167257) (COLON 167255 . 167256) (TRY 167190 . 167193) (AS 167249 . 167251) (NAME 155136 . 155160) (IF 155188 . 155190) (ELSE 155219 . 155223) (NAME 155039 . 155063) (IF 155091 . 155093) (ELSE 155118 . 155122) (NAME 145873 . 145877) (IF 145897 . 145899) (ELSE 145918 . 145922) (INDENT_BLOCK 134552 . 134732) (NEWLINE 134551 . 134552) (COLON 134550 . 134551) (EXCEPT 134533 . 134539) (INDENT_BLOCK 134402 . 134521) (NEWLINE 134401 . 134402) (COLON 134400 . 134401) (TRY 134269 . 134272) (AS 134394 . 134396) (INDENT_BLOCK 132101 . 132277) (NEWLINE 132100 . 132101) (COLON 132099 . 132100) (TRY 131986 . 131989) (AS 132093 . 132095) (INDENT_BLOCK 131829 . 131871) (NEWLINE 131751 . 131752) (COLON 131750 . 131751) (ELSE 131746 . 131750) (INDENT_BLOCK 131554 . 131734) (NEWLINE 131553 . 131554) (COLON 131552 . 131553) (EXCEPT 131535 . 131541) (INDENT_BLOCK 131363 . 131523) (NEWLINE 131362 . 131363) (COLON 131361 . 131362) (TRY 131265 . 131268) (AS 131355 . 131357) (INDENT_BLOCK 129379 . 129470) (NEWLINE 129378 . 129379) (COLON 129377 . 129378) (EXCEPT 129360 . 129366) (INDENT_BLOCK 129233 . 129344) (NEWLINE 129232 . 129233) (COLON 129231 . 129232) (TRY 129033 . 129036) (AS 129226 . 129228) (INDENT_BLOCK 85679 . 85894) (NEWLINE 85678 . 85679) (COLON 85677 . 85678) (TRY 85571 . 85574) (AS 85671 . 85673) (INDENT_BLOCK 70322 . 70537) (NEWLINE 70321 . 70322) (COLON 70320 . 70321) (TRY 70183 . 70186) (AS 70314 . 70316) (INDENT_BLOCK 69245 . 69460) (NEWLINE 69244 . 69245) (COLON 69243 . 69244) (TRY 68679 . 68682) (AS 69237 . 69239) (INDENT_BLOCK 67294 . 67509) (NEWLINE 67293 . 67294) (COLON 67292 . 67293) (TRY 66393 . 66396) (AS 67286 . 67288) (INDENT_BLOCK 64734 . 64760) (NEWLINE 64733 . 64734) (COLON 64732 . 64733) (ELSE 64728 . 64732) (INDENT_BLOCK 64505 . 64720) (NEWLINE 64504 . 64505) (COLON 64503 . 64504) (TRY 64241 . 64244) (AS 64497 . 64499) (INDENT_BLOCK 60109 . 60209) (NEWLINE 60108 . 60109) (COLON 60107 . 60108) (ELSE 60103 . 60107) (INDENT_BLOCK 59999 . 60087) (NEWLINE 59923 . 59924) (COLON 59922 . 59923) (TRY 59783 . 59786) (AS 59917 . 59919) (INDENT_BLOCK 55519 . 55674) (NEWLINE 55443 . 55444) (COLON 55442 . 55443) (TRY 54887 . 54890) (AS 55436 . 55438) (INDENT_BLOCK 53786 . 54034) (NEWLINE 53733 . 53734) (COLON 53732 . 53733) (TRY 53461 . 53464) (AS 53726 . 53728) (NAME 50966 . 50974) (IF 50997 . 50999) (ELSE 51027 . 51031) (NAME 39251 . 39257) (IF 39263 . 39265) (ELSE 39292 . 39296) (RETURN 36505 . 36511) (IF 36514 . 36516) (ELSE 36547 . 36551))))
  :file "!usr!lib!python2.7!dist-packages!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
